<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>底层数据结构链表，以及java代码实现</title>
      <link href="/java-link/"/>
      <url>/java-link/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-原理介绍"><a href="#1-原理介绍" class="headerlink" title="1 原理介绍"></a>1 原理介绍</h3><p>链表和数组的区别在于，数组的插入和删除操作需要整个数组一起跟着动，这样的效率很低。举个例子：打麻将时，当有一个麻将子，其大小正好在已经排序好的麻将中间，如果需要插入进原来的麻将序列，那么需要将之前或者之后的麻将全部移动，这样很费时间，所以链表可以弥补这种不足。</p><h4 id="1-1-增"><a href="#1-1-增" class="headerlink" title="1.1 增"></a>1.1 增</h4><p>链表的插入操作包括两种：</p><ul><li>直接在末尾追加</li><li>在中间的某个位置插入</li></ul><p>如下图所示，两种方式需要单独考虑。</p><p><img alt="示意图" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200425205325406.jpg" class="lazyload"></p><h4 id="1-2-删"><a href="#1-2-删" class="headerlink" title="1.2 删"></a>1.2 删</h4><p>链表的删除，也包括两种：</p><ul><li>直接删除末尾的节点</li><li>删除中间的节点</li></ul><p><strong>方式1删除：</strong></p><p>使用两个指针，一个指针指向当前的节点，一个指针指向当前节点的前驱节点，前驱节点的后驱直接指向点前节点的后驱，即可实现删除功能。</p><p><img alt="方式1删除" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200425210011928.jpg" class="lazyload"></p><p><strong>方式2删除：</strong></p><p>只使用一个指针，将当前节点的后一个节点的数据赋值到当前节点，并将当前节点的后驱指向后一个节点的后一个节点。</p><p><img alt="方式2 删除" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200425203253891.jpg" class="lazyload"></p><h4 id="1-3-改"><a href="#1-3-改" class="headerlink" title="1.3 改"></a>1.3 改</h4><p>修改其实就是先查找是否有需要修改的这个<code>数据</code>，如果没有这个数据返回<code>false</code>，否则就修改数据。</p><h4 id="1-4-查"><a href="#1-4-查" class="headerlink" title="1.4 查"></a>1.4 查</h4><p>查找数据也是一个一个遍历，但是如果链表有重复数据的话，只会返回第一次查找的数据。</p><h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h3><h4 id="2-1-创建链表"><a href="#2-1-创建链表" class="headerlink" title="2.1 创建链表"></a>2.1 创建链表</h4><p>链表中的节点的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        T data;</span><br><span class="line">        Node next = <span class="keyword">null</span>;<span class="comment">//下一个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-插入元素"><a href="#2-2-插入元素" class="headerlink" title="2.2 插入元素"></a>2.2 插入元素</h4><p>首先判断是否是一个空链表，如果是，则创建新链表，并将数据赋值给新节点，否则在末尾追加，或者在中间任意位置处插入。</p><ul><li>在末尾追加</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == head) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = newNode;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>在中间任意位置插入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, T data)</span> </span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="comment">//if index=1, special opearate</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123; <span class="comment">//head is not existed</span></span><br><span class="line">                head = newNode;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//head is existed</span></span><br><span class="line">                Node temp = head;</span><br><span class="line">                newNode.next = temp;</span><br><span class="line">                head = newNode;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index not true -&gt; false</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; <span class="keyword">this</span>.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;<span class="comment">//count the current node</span></span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; index) &#123;</span><br><span class="line">            count += <span class="number">1</span>;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.next = temp.next;</span><br><span class="line">        temp.next = newNode;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-删除元素"><a href="#2-3-删除元素" class="headerlink" title="2.3 删除元素"></a>2.3 删除元素</h4><h5 id="2-3-1-方法1"><a href="#2-3-1-方法1" class="headerlink" title="2.3.1 方法1"></a>2.3.1 方法1</h5><p>上面介绍过了方式1的删除方式，这里主要展示关键代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Node pre = head;</span><br><span class="line">Node cur = head.next;</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cur.data == data) &#123;</span><br><span class="line">        foundNum++;</span><br><span class="line">        pre.next = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    pre = cur;</span><br><span class="line">    cur = cur.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-2-方法2"><a href="#2-3-2-方法2" class="headerlink" title="2.3.2 方法2"></a>2.3.2 方法2</h5><p>关键代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Node temp = head;</span><br><span class="line"><span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (temp.data == data) &#123;</span><br><span class="line">        foundNum += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        T tempData = temp.data;</span><br><span class="line">        temp.data = temp.next.data;</span><br><span class="line">        temp.next.data = tempData;</span><br><span class="line">        temp.next = temp.next.next;</span><br><span class="line"></span><br><span class="line">        length--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = temp.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-查询元素"><a href="#2-4-查询元素" class="headerlink" title="2.4 查询元素"></a>2.4 查询元素</h4><p>对着链表中的元素一个一个遍历，直到找到为止，如果找不到则返回<code>false</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> foundIndex = <span class="number">0</span>;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span> (temp.next.data == data) &#123;</span><br><span class="line">                foundIndex++;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (foundIndex == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-打印元素"><a href="#2-5-打印元素" class="headerlink" title="2.5 打印元素"></a>2.5 打印元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">printNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(temp.next.data + <span class="string">"\t"</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-获取长度"><a href="#2-6-获取长度" class="headerlink" title="2.6 获取长度"></a>2.6 获取长度</h4><p>定义了一个全局变量，用来存储链表的长度，当插入元素成功之后，自加1，删除之后自减1,。</p><h3 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3 完整代码"></a>3 完整代码</h3><p><code>MyLinkNode.java</code>文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    Node head = <span class="keyword">new</span> Node();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        T data;</span><br><span class="line">        Node next = <span class="keyword">null</span>;<span class="comment">//下一个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == head) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = newNode;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, T data)</span> </span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="comment">//if index=1, special opearate</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123; <span class="comment">//head is not existed</span></span><br><span class="line">                head = newNode;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//head is existed</span></span><br><span class="line">                Node temp = head;</span><br><span class="line">                newNode.next = temp;</span><br><span class="line">                head = newNode;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index not true -&gt; false</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; <span class="keyword">this</span>.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;<span class="comment">//count the current node</span></span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; index) &#123;</span><br><span class="line">            count += <span class="number">1</span>;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.next = temp.next;</span><br><span class="line">        temp.next = newNode;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">printNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(temp.next.data + <span class="string">"\t"</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> foundNum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方式1：</span></span><br><span class="line"><span class="comment">        使用两个指针，一个指针指向当前指针，一个指针当前指针的前驱，当删除时，直接忽略需要删除的节点即可</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node pre = head;</span><br><span class="line">        Node cur = head.next;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.data == data) &#123;</span><br><span class="line">                foundNum++;</span><br><span class="line">                pre.next = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方式2：将要删除的节点(假设要删除的节点的位置3)的下一个节点（位置是4）的数据赋值到当前要删除的节点，</span></span><br><span class="line"><span class="comment">        此时当前节点（位置是3）的数据是下一节点（位置是4）的数据，然后将当前节点（位置是3）的后驱指向一下节点（位置是4）</span></span><br><span class="line"><span class="comment">        的下一节点（位置是5）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        Node temp = head;</span></span><br><span class="line"><span class="comment">//        while (temp != null) &#123;</span></span><br><span class="line"><span class="comment">//            if (temp.data == data) &#123;</span></span><br><span class="line"><span class="comment">//                foundNum += 1;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                T tempData = temp.data;</span></span><br><span class="line"><span class="comment">//                temp.data = temp.next.data;</span></span><br><span class="line"><span class="comment">//                temp.next.data = tempData;</span></span><br><span class="line"><span class="comment">//                temp.next = temp.next.next;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                length--;</span></span><br><span class="line"><span class="comment">//                return true;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            temp = temp.next;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (foundNum == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"not found data -&gt;"</span> + data);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        length--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            Node temp = head;</span><br><span class="line">            head = temp.next;</span><br><span class="line">            System.out.println(head.data + <span class="string">"---"</span> + head.next.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt;= <span class="keyword">this</span>.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; index) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = temp.next.next;</span><br><span class="line">        length--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> foundIndex = <span class="number">0</span>;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span> (temp.next.data == data) &#123;</span><br><span class="line">                foundIndex++;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (foundIndex == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">update</span><span class="params">(T oldData, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> foundNum = <span class="number">0</span>;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">if</span> (oldData <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((oldData.equals(temp.data))) &#123;</span><br><span class="line">                    foundNum++;</span><br><span class="line">                    temp.data = data;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldData <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">            <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp.data == oldData) &#123;</span><br><span class="line">                    foundNum++;</span><br><span class="line">                    temp.data = data;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (foundNum == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试<code>java</code>文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyLinkNode&lt;String&gt; myLinkNode = <span class="keyword">new</span> MyLinkNode&lt;&gt;();</span><br><span class="line">        myLinkNode.add(<span class="string">"1"</span>);</span><br><span class="line">        myLinkNode.add(<span class="string">"2"</span>);</span><br><span class="line">        myLinkNode.add(<span class="string">"3"</span>);</span><br><span class="line">        myLinkNode.add(<span class="string">"4"</span>);</span><br><span class="line">        myLinkNode.insert(<span class="number">3</span>,<span class="string">"insert"</span>);</span><br><span class="line">        myLinkNode.printNode();</span><br><span class="line">        System.out.println(<span class="string">"length="</span>+myLinkNode.length());</span><br><span class="line">        System.out.println(<span class="string">"\n"</span>);</span><br><span class="line">        myLinkNode.delete(<span class="string">"insert"</span>);</span><br><span class="line">        myLinkNode.printNode();</span><br><span class="line">        System.out.println(<span class="string">"length="</span>+myLinkNode.length());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯笔试题目</title>
      <link href="/tencent-interview-questions/"/>
      <url>/tencent-interview-questions/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="笔试题1"><a href="#笔试题1" class="headerlink" title="笔试题1"></a>笔试题1</h3><blockquote><p>小Q定义了一种数列称为翻转数列:<br>给定整数n和m, 满足n能被2m整除。对于一串连续递增整数数列1, 2, 3, 4…, 每隔m个符号翻转一次, 最初符号为’-‘;。<br>例如n = 8, m = 2, 数列就是: -1, -2, +3, +4, -5, -6, +7, +8.<br>而n = 4, m = 1, 数列就是: -1, +2, -3, + 4.<br>小Q现在希望你能帮他算算前n项和为多少。</p></blockquote><h5 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a><strong>输入描述:</strong></h5><blockquote><p>输入包括两个整数n和m(2 &lt;= n &lt;= 109, 1 &lt;= m), 并且满足n能被2m整除。</p></blockquote><h5 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h5><blockquote><p>输出一个整数, 表示前n项和。</p></blockquote><h3 id="笔试题1-代码："><a href="#笔试题1-代码：" class="headerlink" title="笔试题1-代码："></a>笔试题1-代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = scanner.nextInt();</span><br><span class="line">        <span class="keyword">long</span> s = System.nanoTime();</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span>*m !=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>  <span class="keyword">if</span> (m &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">2</span> &amp;&amp; n &gt; Math.pow(<span class="number">10</span>,<span class="number">9</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(n*m/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">long</span> e = System.nanoTime();</span><br><span class="line">        System.out.println((e-s)/<span class="number">1000000</span> + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="笔试题2"><a href="#笔试题2" class="headerlink" title="笔试题2"></a>笔试题2</h3><blockquote><p>牛牛和羊羊正在玩一个纸牌游戏。这个游戏一共有n张纸牌, 第i张纸牌上写着数字ai。<br>牛牛和羊羊轮流抽牌, 牛牛先抽, 每次抽牌他们可以从纸牌堆中任意选择一张抽出, 直到纸牌被抽完。<br>他们的得分等于他们抽到的纸牌数字总和。<br>现在假设牛牛和羊羊都采用最优策略, 请你计算出游戏结束后牛牛得分减去羊羊得分等于多少。</p></blockquote><h5 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a><strong>输入描述:</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入包括两行。</span><br><span class="line">第一行包括一个正整数n(1 &lt;= n &lt;= 105),表示纸牌的数量。</span><br><span class="line">第二行包括n个正整数ai(1 &lt;= ai &lt;= 109),表示每张纸牌上的数字。</span><br></pre></td></tr></table></figure><h5 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一个整数, 表示游戏结束后牛牛得分减去羊羊得分等于多少。</span><br></pre></td></tr></table></figure><h5 id="输入例子1"><a href="#输入例子1" class="headerlink" title="输入例子1:"></a><strong>输入例子1:</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2 7 4</span><br></pre></td></tr></table></figure><h5 id="输出例子1"><a href="#输出例子1" class="headerlink" title="输出例子1:"></a><strong>输出例子1:</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>一种弄简单的<code>java</code>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//input</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            arr[i] = scanner.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(arr[<span class="number">0</span>]);</span><br><span class="line">        Integer[] array = <span class="keyword">new</span> Integer[m];</span><br><span class="line">        String[] a = arr[<span class="number">1</span>].split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            array[i] = Integer.parseInt(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(array,<span class="keyword">new</span> Comparator&lt;Integer&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 &lt; o2)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (o1 &gt; o2)</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> niuniu = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> yangyang = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                niuniu += array[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                yangyang += array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(niuniu - yangyang);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高级<code>python</code>实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">    num_list = list(map(int, input().split()))</span><br><span class="line">    num_list.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        s += (<span class="number">-1</span>) ** i * num_list[i]</span><br><span class="line">    print(s)</span><br></pre></td></tr></table></figure><h3 id="笔试题3"><a href="#笔试题3" class="headerlink" title="笔试题3"></a>笔试题3</h3><blockquote><p>小Q的父母要出差N天，走之前给小Q留下了M块巧克力。小Q决定每天吃的巧克力数量不少于前一天吃的一半，但是他又不想在父母回来之前的某一天没有巧克力吃，请问他第一天最多能吃多少块巧克力</p></blockquote><h5 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a><strong>输入描述:</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">每个输入包含一个测试用例。</span><br><span class="line">每个测试用例的第一行包含两个正整数，表示父母出差的天数N(N&lt;=50000)和巧克力的数量M(N&lt;=M&lt;=100000)。</span><br></pre></td></tr></table></figure><h5 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一个数表示小Q第一天最多能吃多少块巧克力。</span><br></pre></td></tr></table></figure><h5 id="输入例子1-1"><a href="#输入例子1-1" class="headerlink" title="输入例子1:"></a><strong>输入例子1:</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 7</span><br></pre></td></tr></table></figure><h5 id="输出例子1-1"><a href="#输出例子1-1" class="headerlink" title="输出例子1:"></a><strong>输出例子1:</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p><code>java</code>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="笔试题4-两数之和"><a href="#笔试题4-两数之和" class="headerlink" title="笔试题4-两数之和"></a>笔试题4-两数之和</h3><blockquote><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p></blockquote><p>示例:</p><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><p><code>python</code>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,len(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] == target:</span><br><span class="line">                    <span class="keyword">return</span> [i,j]</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序和选择排序过程介绍</title>
      <link href="/bubble-select-sort/"/>
      <url>/bubble-select-sort/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h3><p>冒泡排序就是通过对比前一个和后一个数的大小，按照规则进行顺序的调换。每一轮对比之后最大或者最小值都会浮到最上面或者沉到最低下。</p><p>如：对这一数组进行冒泡排序：int a[5]{34,12,56,4,7};   假设为从小到大排序</p><p>一共需要比较length-1轮：</p><p>第一轮：  a.34和12比较，12比34小，那么调换位置，此时为：12,34,56,4,7，然后在对该序列进行排序</p><p>　　　　  b.然后就是34和56进行对比，34比56小，不用调换顺序，此时依旧为：12,34,56,4,7，然后在对该序列进行排序</p><p>　　　　  c.然后再就是56和4鸡西宁对比，4比56小，所以将56和4调换顺序，此时序列就是：12,34,4,56,7</p><p>　　　　  d.再然后就对比56和7，7比56小，所以将二者位置进行调换，此时完成第一轮调换，序列为：12,34,4,7,56</p><p>　　　　我们可以看到第一轮排序之后，已经将序列中的最大值沉到最底部了。</p><p>第二轮：此时的排序此时交第一轮要减1，</p><p>　　　　  a.先是12和34对比，前者比后者小，所以不用调换位置，序列时：12,34,4,7,56</p><p>　　　　  b.然后比较34和4的大小，后者比前者小，所以调换位置，此时序列为：12,4,34,7,56</p><p>　　　　  c.再然后比较34和7的大小，后者比前者小，所以调换位置，此时序列为：12,4,7,34,56</p><p>　　　　  d.此时就不用在往下比较了，因为比较次数已经减1了，也是因为第一轮中已经将最大的数选出来了。</p><p>然后就是第三轮和第四轮的比较，方法类似。</p><p>最终结果就是4,7,12,34,56</p><p>我们可以看到程序截图如下图所示：<br><img alt="冒泡排序过程" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190322102402128-1914857974.png" class="lazyload"></p><h3 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2.选择排序"></a>2.选择排序</h3><p>选择排序的实现要比冒泡排序简单一些，但是在代码上相对会有些绕。原理就是先假设待排序的序列中的第一个数为最小值或者最大值，这里还是用从小到大的顺序进行排序。首先假设第一个数为最小值（假设该值的索引下标时i），然后从该值的下一个数也就是索引为i+1的数开始进行比较，如果i+1的值要比假设的最小值小，那么就将二者的值进行交换，每一轮将最小值选择出来，并将其与假设的最小值进行调换就行，不需要想冒泡排序那样整个需略都要跟着一起移动。此时还需要一个缓冲变量来存放最小值的索引值。</p><p>详细讲解：</p><p>在时间复杂度上，这两种排序方法都是一样，O(N^2)，也是需要循环执行length-1轮。还是假设对数组a进行排序。</p><p>首先定义数组：int a[5]{34,12,56,4,7}; </p><p>第一轮：先假设序列中的第一个数是最小值，记录下它的索引值，定一个新的变量用来存放该索引值，minIndex=0，下表为0也就是第一个数。然后在进行循环。</p><p>　　　　  a.内循环中的第一轮是34和12进行比较，后者比前者小，所以将minIndex的索引值进行更改，此时minIndex=1,</p><p>　　　　  b.内循环中的第二轮，是利用minIndex 中的数和下一个待比较的数进行比较，应该是12和56比较，后者比前者小，所以不用修改minIndex的值</p><p>　　　　  c.内循环中的第三轮，还是利用索引为1的数值和下一个待比较的数进行比较，应该是12和4进行比较，后者较之前者较小，所以记录下当前数的索引值并赋值给minIndex，此时minIndex=3</p><p>　　　　  d.内循环中的第四轮，利用minIndex索引值的数值和下一个待比较的数进行比较，应该是4和7进行比较，后者比前者大，所以不用修改minIndex的值</p><p>　　　　然后将序列中的第i个数和序列中索引值为minIndex的数进行调换，第一轮已将最小值选择出来了。此时序列为：4,12,56,34,7</p><p>　　　　第一轮外循环之后，minIndex=3,下一轮外循环会将这个值直接覆盖</p><p>第二轮：此时的minIndex=1，假设的最小值是12</p><p>　　　　　此时定义上一轮外循环的下一个数为最小值，也即是索引值为1的值，那么本轮循环将从索引值为2的数开始比较，</p><p>　　　　  a.内循环中的第一轮，比较12和56,后者比前者大，所以不用修改minIndex的值，</p><p>　　　　  b.内循环中的第二轮，此时比较12和34的大小，还是依旧不用修改索引值</p><p>　　　　  c.内循环中的第三轮，此时比较12和7的大小，后者比前者小，索引记录下当前数的索引值并赋值给minIndex记录下来</p><p>　　　　内循环结束，判断minIndex的值是否被改变，如果被改变了，那么就将下标为i的数和下标为minIndex的数进行交换。此时序列为：4,7,56,34,12且minIndex=4</p><p>第三轮和第四轮外循环的规则类似。。</p><p>我们可以看程序运行的效果图如下：<br><img alt="选择排序过程" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190322105700101-1010848535.png" class="lazyload"></p><p>最后附上可供运行的c++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bubble sort</span></span><br><span class="line">    <span class="keyword">double</span> a[<span class="number">5</span>]=&#123;<span class="number">34</span>,<span class="number">12</span>,<span class="number">56</span>,<span class="number">4</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">double</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//output all numbers</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"before sorted by bubbleSort:"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i]&lt;&lt;<span class="string">"\t"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//start to sort the array</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len -i <span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">double</span> t = <span class="number">0</span>;</span><br><span class="line">                t = a[j];</span><br><span class="line">                a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">                a[j+<span class="number">1</span>] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"This is at NO."</span> &lt;&lt; i &lt;&lt; <span class="string">"time:    "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//output after sorted</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"after sorted by bubbleSort:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i]&lt;&lt;<span class="string">"\t"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//selectsort</span></span><br><span class="line">    <span class="keyword">double</span> b[<span class="number">5</span>]=&#123;<span class="number">34</span>,<span class="number">12</span>,<span class="number">56</span>,<span class="number">4</span>,<span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"before sorted by selectSort:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; b[i]&lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//start to selectSort</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;<span class="comment">//pretend the first number of the array be the min number.and record the index</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ending-&gt;minIndex="</span> &lt;&lt; minIndex &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(b[minIndex]&gt;b[j])</span><br><span class="line">            &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(minIndex != i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> t = <span class="number">0</span>;</span><br><span class="line">            t = b[i];</span><br><span class="line">            b[i] = b[minIndex];</span><br><span class="line">            b[minIndex] = t;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//print the detail</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"This is at NO."</span> &lt;&lt; i &lt;&lt; <span class="string">"time:  "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">4</span>)&lt;&lt;b[i] ;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"   "</span>&lt;&lt; <span class="string">"ending-&gt;minIndex="</span> &lt;&lt; minIndex &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"after sorted by selectSort:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; b[i]&lt;&lt;<span class="string">"\t"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>java</code>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bubble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] b = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>,<span class="number">89</span>,<span class="number">76</span>,<span class="number">35</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            System.out.print(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">int</span>[] c = bubble(b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">            System.out.print(c[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">int</span>[] d = select(b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d.length; i++) &#123;</span><br><span class="line">            System.out.print(d[i] + <span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubble(<span class="keyword">int</span>[] a) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j+<span class="number">1</span>] &lt; a[j]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = a[j+<span class="number">1</span>];</span><br><span class="line">                    a[j+<span class="number">1</span>] = a[j];</span><br><span class="line">                    a[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] select(<span class="keyword">int</span>[] a)&#123;</span><br><span class="line">        <span class="keyword">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt; a.length -<span class="number">1</span> ;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (a[maxIndex] &lt; a[j])&#123;</span><br><span class="line">                    maxIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(maxIndex != i)&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>network”</title>
      <link href="/network%E2%80%9D/"/>
      <url>/network%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux release info</title>
      <link href="/Linux-release-info/"/>
      <url>/Linux-release-info/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java内部类讲解，成员内部类，局部内部类，匿名内部类，静态内部类</title>
      <link href="/java-inner-class/"/>
      <url>/java-inner-class/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h3><p><code>java</code>中的类，除了定义在包（<code>package</code>）中之外，还可以定义在一个类的内部，主要有4种，分别是成员内部类，局部内部类，匿名内部类，静态内部类。接下通过代码分析，了解一下什么是<code>java</code>内部类。</p><h3 id="2-java内部类介绍"><a href="#2-java内部类介绍" class="headerlink" title="2 java内部类介绍"></a>2 <code>java</code>内部类介绍</h3><h4 id="2-1-成员内部类"><a href="#2-1-成员内部类" class="headerlink" title="2.1 成员内部类"></a>2.1 成员内部类</h4><p>成员内部类，顾名思义，也就是该内部类相当于该<code>外部类</code>的一个成员一样，和该<code>外部类</code>中的成员属性或者成员方法同级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"drawshape"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-1-成员内部类访问外部类属性："><a href="#2-1-1-成员内部类访问外部类属性：" class="headerlink" title="2.1.1 成员内部类访问外部类属性："></a>2.1.1 成员内部类访问外部类属性：</h5><p>外部类<code>Circle</code>里面定义了一个内部类<code>Draw</code>，该成员内部类可以无条件调用外部类<code>Circle</code>中的任何属性、方法等，无论公有还是私有，都可以访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count =<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(radius);  <span class="comment">//外部类的private成员</span></span><br><span class="line">            System.out.println(count);   <span class="comment">//外部类的静态成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：当成员内部类中也定义了一个和外部类中相同名字的变量时，如果此时想要使用外部类中的属性，那么需要使用下面的这种方式，不能直接使用变量调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部类.<span class="keyword">this</span>.成员变量</span><br><span class="line">外部类.<span class="keyword">this</span>.成员方法</span><br></pre></td></tr></table></figure><h5 id="2-1-2-外部类访问成员内部类属性："><a href="#2-1-2-外部类访问成员内部类属性：" class="headerlink" title="2.1.2 外部类访问成员内部类属性："></a>2.1.2 外部类访问成员内部类属性：</h5><p>虽然成员内部类可以无条件地访问外部类的成员，而外部类想访问成员内部类的成员却不是这么随心所欲了。在外部类中如果要访问成员内部类的成员，必须先创建一个成员内部类的对象，再通过指向这个对象的引用来访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">        getDrawInstance().drawSahpe();   <span class="comment">//必须先创建成员内部类的对象，再进行访问</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Draw <span class="title">getDrawInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Draw();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(radius);  <span class="comment">//外部类的private成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-3-创建成员内部类"><a href="#2-1-3-创建成员内部类" class="headerlink" title="2.1.3 创建成员内部类"></a>2.1.3 创建成员内部类</h5><p>成员内部类是依附在外部类中的，所以不能单独存在，因为它是作为该外部类的一个成员。如果需要使用成员内部类对象，可以通过两种方式创建：</p><ul><li>先创建外部类，通过外部类创建成员内部类</li><li>在外部类中写一个方法，该方法中创建一个成员内部类并返回</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//第一种方式：</span></span><br><span class="line">        Outter outter = <span class="keyword">new</span> Outter();</span><br><span class="line">        Outter.Inner inner = outter.<span class="keyword">new</span> Inner();  <span class="comment">//必须通过Outter对象来创建</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//第二种方式：</span></span><br><span class="line">        Outter.Inner inner1 = outter.getInnerInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Inner inner = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Outter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">getInnerInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inner == <span class="keyword">null</span>)</span><br><span class="line">            inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        <span class="keyword">return</span> inner;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-4-小结"><a href="#2-1-4-小结" class="headerlink" title="2.1.4 小结"></a>2.1.4 小结</h5><p>　内部类可以拥有private访问权限、protected访问权限、public访问权限及包访问权限。比如上面的例子，如果成员内部类Inner用private修饰，则只能在外部类的内部访问，如果用public修饰，则任何地方都能访问；如果用protected修饰，则只能在同一个包下或者继承外部类的情况下访问；如果是默认访问权限，则只能在同一个包下访问。这一点和外部类有一点不一样，外部类只能被public和包访问两种权限修饰。由于成员内部类看起来像是外部类的一个成员，所以可以像类的成员一样拥有多种权限修饰。</p><h4 id="2-2-局部内部类"><a href="#2-2-局部内部类" class="headerlink" title="2.2 局部内部类"></a>2.2 局部内部类</h4><p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span></span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> People <span class="title">getWoman</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;   <span class="comment">//局部内部类</span></span><br><span class="line">            <span class="keyword">int</span> age =<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Woman();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>，局部内部类就像是方法里面的一个局部变量一样，是不能有public、protected、private以及static修饰符的。</p><h4 id="2-3-匿名内部类"><a href="#2-3-匿名内部类" class="headerlink" title="2.3 匿名内部类"></a>2.3 匿名内部类</h4><p>匿名内部类是<code>java</code>中使用的比较频繁的一种，因为使用方便，不需要给类取名字，省去了一些维护的功夫。下面看一个<code>java</code>类的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;  <span class="comment">//定义了一个线程接口</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"this is inner"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>同样的，匿名内部类也是不能有访问修饰符和static修饰符的。　　</p><p>匿名内部类是唯一一种没有构造器的类。正因为其没有构造器，所以匿名内部类的使用范围非常有限，大部分匿名内部类用于接口回调。匿名内部类在编译的时候由系统自动起名为Outter$1.class。一般来说，匿名内部类用于继承其他类或是实现接口，并不需要增加额外的方法，只是对继承方法的实现或是重写。</p><h4 id="2-4-静态内部类"><a href="#2-4-静态内部类" class="headerlink" title="2.4 静态内部类"></a>2.4 静态内部类</h4><p>静态内部类也是定义在另一个类里面的类，只不过在类的前面多了一个关键字static。静态内部类是不需要依赖于外部类的，这点和类的静态成员属性有点类似，并且它不能使用外部类的非static成员变量或者方法，这点很好理解，因为在没有外部类的对象的情况下，可以创建静态内部类的对象，如果允许访问外部类的非static成员就会产生矛盾，因为外部类的非static成员必须依附于具体的对象。就比如说程序的入口函数，<code>main</code>函数就是一个静态内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  <span class="comment">//静态内部类</span></span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"this is inner"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-内部类的使用场景"><a href="#3-内部类的使用场景" class="headerlink" title="3 内部类的使用场景"></a>3 内部类的使用场景</h3><ol><li><p>每个内部类都能独立的集成一个接口的实现，所以无论外部类是否已经集成了某个（接口）实现，对于内部类都没有影响。内部类使得多重集成的解决方案变得完整。</p></li><li><p>方便将存在一定逻辑关系的类组织在一起，又可以对外界隐藏。</p></li><li><p>方便编写时间驱动程序。</p></li><li><p>方便编写线程代码。</p></li></ol><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol><li><a href="https://www.cnblogs.com/dolphin0520/p/3811445.html" target="_blank" rel="noopener">https://www.cnblogs.com/dolphin0520/p/3811445.html</a></li><li><a href="https://juejin.im/entry/5d15db5be51d4550bf1ae8a1" target="_blank" rel="noopener">https://juejin.im/entry/5d15db5be51d4550bf1ae8a1</a></li></ol><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM面试题以及字节码讲解</title>
      <link href="/JVM-interview-questions/"/>
      <url>/JVM-interview-questions/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h2><p>关于<code>java</code>字节码指令的含义，可以参考这篇博客：<a href="https://jums.club/java-byte-code-command/">Java字节码指令含义解释与指令查询</a></p><h2 id="1-try-catch-finally"><a href="#1-try-catch-finally" class="headerlink" title="1 try..catch..finally"></a>1 try..catch..finally</h2><h3 id="1-1-catch"><a href="#1-1-catch" class="headerlink" title="1.1 catch"></a>1.1 catch</h3><h4 id="1-1-1-catch单个异常"><a href="#1-1-1-catch单个异常" class="headerlink" title="1.1.1 catch单个异常"></a>1.1.1 catch单个异常</h4><p>查看相应的<code>java</code>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            i = <span class="number">20</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NegativeArraySizeException e)&#123;</span><br><span class="line">            i = <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来通过<code>javap -v xxx.class</code>命令，来查看该段源码的字节码反编译之后的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="comment">//源代码对应的字节码指令</span></span><br><span class="line">  <span class="keyword">public</span> com.basic.FinallyDemo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/FinallyDemo;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span>  <span class="comment">//将10压入栈顶</span></span><br><span class="line">         <span class="number">2</span>: istore_1          <span class="comment">//将10存储到slot 1中，即10 -&gt; i</span></span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">20</span>  <span class="comment">//将20压入栈顶, try-----开始</span></span><br><span class="line">         <span class="number">5</span>: istore_1          <span class="comment">//将20存储到slot 1中，即20 -&gt; i  try------结束</span></span><br><span class="line">         <span class="number">6</span>: goto          <span class="number">13</span>  <span class="comment">//这里没有判断条件，但是有一个goto指令，结合异常表一起执行</span></span><br><span class="line">         <span class="number">9</span>: astore_2     <span class="comment">//存储异常信息到slot 2，即 异常信息 -&gt; e</span></span><br><span class="line">        <span class="number">10</span>: bipush        <span class="number">30</span>  <span class="comment">//将30压入栈顶，</span></span><br><span class="line">        <span class="number">12</span>: istore_1          <span class="comment">//将30存储到slot 1中，即 30 -&gt; i</span></span><br><span class="line">        <span class="number">13</span>: <span class="keyword">return</span>            <span class="comment">//返回栈顶元素</span></span><br><span class="line">      Exception table:  <span class="comment">//被try..catch包裹的代码，会产生一个异常表</span></span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>   Class java/lang/NegativeArraySizeException <span class="comment">//监测try中的代码，如果发生异常，跳转到第9行</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">13</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">           <span class="number">10</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/NegativeArraySizeException;</span><br><span class="line">            <span class="number">0</span>      <span class="number">14</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">11</span>     <span class="number">1</span>     i   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">9</span></span><br><span class="line">          locals = [ class "[Ljava/lang/String;", int ]</span><br><span class="line">          stack = [ class java/lang/NegativeArraySizeException ]</span><br><span class="line">        frame_type = <span class="number">3</span> <span class="comment">/* same */</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"FinallyDemo.java"</span></span><br></pre></td></tr></table></figure><p>从反编译之后的字节码信息可以看到，之所以能执行catch中的代码，是因为有一个异常表（exception table）来存放<code>try</code>和<code>catch</code>的执行的起始位置，当检测到<code>try</code>中有异常发生时，跳转到<code>catch</code>中执行。</p><h4 id="1-1-2-catch多个异常"><a href="#1-1-2-catch多个异常" class="headerlink" title="1.1.2 catch多个异常"></a>1.1.2 catch多个异常</h4><p>先看<code>java</code>源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.file.FileSystemAlreadyExistsException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            i = <span class="number">20</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NegativeArraySizeException e)&#123;</span><br><span class="line">            i = <span class="number">30</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            i = <span class="number">40</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (FileSystemAlreadyExistsException e)&#123;</span><br><span class="line">            i = <span class="number">50</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源代码对应的字节码指令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.basic.FinallyDemo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/FinallyDemo;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span>  <span class="comment">//定义变量i，将10压入栈顶</span></span><br><span class="line">         <span class="number">2</span>: istore_1</span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">20</span>  <span class="comment">//try------开始</span></span><br><span class="line">         <span class="number">5</span>: istore_1          <span class="comment">//try------结束</span></span><br><span class="line">         <span class="number">6</span>: goto          <span class="number">27</span></span><br><span class="line">         <span class="number">9</span>: astore_2          <span class="comment">//catch1-----开始</span></span><br><span class="line">        <span class="number">10</span>: bipush        <span class="number">30</span></span><br><span class="line">        <span class="number">12</span>: istore_1          <span class="comment">//catch2----结束</span></span><br><span class="line">        <span class="number">13</span>: goto          <span class="number">27</span></span><br><span class="line">        <span class="number">16</span>: astore_2   <span class="comment">//catch2-----开始</span></span><br><span class="line">        <span class="number">17</span>: bipush        <span class="number">40</span></span><br><span class="line">        <span class="number">19</span>: istore_1   <span class="comment">//catch2-----结束</span></span><br><span class="line">        <span class="number">20</span>: goto          <span class="number">27</span></span><br><span class="line">        <span class="number">23</span>: astore_2    <span class="comment">//catch3-----开始</span></span><br><span class="line">        <span class="number">24</span>: bipush        <span class="number">50</span></span><br><span class="line">        <span class="number">26</span>: istore_1    <span class="comment">//catch3------结束</span></span><br><span class="line">        27: getstatic     #5                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        <span class="number">30</span>: iload_1</span><br><span class="line">        31: invokevirtual #6                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">        <span class="number">34</span>: <span class="keyword">return</span></span><br><span class="line">      Exception table:  <span class="comment">//异常表中有三个异常，都是监测try中的代码</span></span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>   Class java/lang/NegativeArraySizeException</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>    <span class="number">16</span>   Class java/lang/NullPointerException</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>    <span class="number">23</span>   Class java/nio/file/FileSystemAlreadyExistsException</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">17</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">17</span>: <span class="number">13</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">16</span></span><br><span class="line">        line <span class="number">14</span>: <span class="number">17</span></span><br><span class="line">        line <span class="number">17</span>: <span class="number">20</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">23</span></span><br><span class="line">        line <span class="number">16</span>: <span class="number">24</span></span><br><span class="line">        line <span class="number">18</span>: <span class="number">27</span></span><br><span class="line">        line <span class="number">19</span>: <span class="number">34</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">           <span class="number">10</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/NegativeArraySizeException;</span><br><span class="line">           <span class="number">17</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/NullPointerException;</span><br><span class="line">           <span class="number">24</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/nio/file/FileSystemAlreadyExistsException;</span><br><span class="line">            <span class="number">0</span>      <span class="number">35</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">32</span>     <span class="number">1</span>     i   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">4</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">9</span></span><br><span class="line">          locals = [ class "[Ljava/lang/String;", int ]</span><br><span class="line">          stack = [ class java/lang/NegativeArraySizeException ]</span><br><span class="line">        frame_type = <span class="number">70</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">          stack = [ class java/lang/NullPointerException ]</span><br><span class="line">        frame_type = <span class="number">70</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">          stack = [ class java/nio/file/FileSystemAlreadyExistsException ]</span><br><span class="line">        frame_type = <span class="number">3</span> <span class="comment">/* same */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-3-catch多个异常的简写"><a href="#1-1-3-catch多个异常的简写" class="headerlink" title="1.1.3 catch多个异常的简写"></a>1.1.3 catch多个异常的简写</h4><p>这是上一小节中的<code>catch</code>多个异常的简写形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.file.FileSystemAlreadyExistsException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            i = <span class="number">20</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NegativeArraySizeException | NullPointerException | FileSystemAlreadyExistsException e)&#123;</span><br><span class="line">            i = <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的字节码信息和上一节中的相同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.basic.FinallyDemo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/FinallyDemo;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">2</span>: istore_1</span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">20</span></span><br><span class="line">         <span class="number">5</span>: istore_1</span><br><span class="line">         <span class="number">6</span>: goto          <span class="number">13</span></span><br><span class="line">         <span class="number">9</span>: astore_2</span><br><span class="line">        <span class="number">10</span>: bipush        <span class="number">30</span></span><br><span class="line">        <span class="number">12</span>: istore_1</span><br><span class="line">        13: getstatic     #5                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        <span class="number">16</span>: iload_1</span><br><span class="line">        17: invokevirtual #6                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">        <span class="number">20</span>: <span class="keyword">return</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>   Class java/lang/NegativeArraySizeException</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>   Class java/lang/NullPointerException</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>   Class java/nio/file/FileSystemAlreadyExistsException</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">14</span>: <span class="number">13</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">20</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">           <span class="number">10</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/RuntimeException;</span><br><span class="line">            <span class="number">0</span>      <span class="number">21</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">18</span>     <span class="number">1</span>     i   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">9</span></span><br><span class="line">          locals = [ class "[Ljava/lang/String;", int ]</span><br><span class="line">          stack = [ class java/lang/RuntimeException ]</span><br><span class="line">        frame_type = <span class="number">3</span> <span class="comment">/* same */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-finally"><a href="#1-2-finally" class="headerlink" title="1.2 finally"></a>1.2 finally</h3><h4 id="1-2-1-在finally中return-；"><a href="#1-2-1-在finally中return-；" class="headerlink" title="1.2.1 在finally中return *；"></a>1.2.1 在finally中return *；</h4><p>查看<code>FinallyDemo.java</code>文件的代码，试问最终输出多少？10？ or 20？ or 30？</p><p>FinallyDemo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FinallyDemo finallyDemo = <span class="keyword">new</span> FinallyDemo();</span><br><span class="line">        <span class="keyword">int</span> t = finallyDemo.test();</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：    </p><p><img alt="30" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200417211050749.jpg" class="lazyload"></p></blockquote><p>通过对其<code>FinallyDemo.class</code>文件进行反编译，可以分析得到为什么最终结果会是30。为了简化代码，这里就直接将源代码对应的字节码信息粘贴过来。</p><p>FinallyDemo.class</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.basic.FinallyDemo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/FinallyDemo;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: new           #2   // class com/basic/FinallyDemo  在堆中创建对象</span><br><span class="line">         <span class="number">3</span>: dup</span><br><span class="line">         4: invokespecial #3   // Method "&lt;init&gt;":()V 调用FinallyDemo构造方法</span><br><span class="line">         <span class="number">7</span>: astore_1    <span class="comment">//  将新创建的对象存储到局部变量slot 1中</span></span><br><span class="line">         <span class="number">8</span>: aload_1   <span class="comment">//加载局部变量slot 1中的对象</span></span><br><span class="line">         9: invokevirtual #4   // Method test:()I   //执行slot 1中的test()方法 </span><br><span class="line">        <span class="number">12</span>: istore_2   <span class="comment">//将test()返回的int类型存储到int类型的局部变量slot 2中</span></span><br><span class="line">        13: getstatic     #5 // Field java/lang/System.out:Ljava/io/PrintStream; 获得静态输出方法</span><br><span class="line">        <span class="number">16</span>: iload_2  <span class="comment">//将在需要打印的变量 slot 2</span></span><br><span class="line">        17: invokevirtual #6  // Method java/io/PrintStream.println:(I)V 调用静态对象的println方法，并调用需要打印的变量</span><br><span class="line">        <span class="number">20</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">8</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">13</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">20</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">21</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">8</span>      <span class="number">13</span>     <span class="number">1</span> finallyDemo   Lcom/basic/FinallyDemo;</span><br><span class="line">           <span class="number">13</span>       <span class="number">8</span>     <span class="number">2</span>     t   I</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span>  <span class="comment">//将10压入栈顶</span></span><br><span class="line">         <span class="number">2</span>: istore_1          <span class="comment">// 10 -&gt; i  </span></span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">20</span>  <span class="comment">//在try中------，  将20压入栈顶</span></span><br><span class="line">         <span class="number">5</span>: istore_2          <span class="comment">//20 -&gt; slot 2 该局部变量是一个隐藏的局部变量，LocalVariableTable不显示</span></span><br><span class="line">         <span class="number">6</span>: bipush        <span class="number">30</span>  <span class="comment">//将30压入栈顶</span></span><br><span class="line">         <span class="number">8</span>: ireturn        <span class="comment">//----try结束  返回栈顶元素  30</span></span><br><span class="line">         <span class="number">9</span>: astore_3       <span class="comment">//在finally中-------</span></span><br><span class="line">        <span class="number">10</span>: bipush        <span class="number">30</span> <span class="comment">//将30压入栈顶</span></span><br><span class="line">        <span class="number">12</span>: ireturn        <span class="comment">//finally------结束，返回栈顶元素</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>   any</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">11</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">6</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">13</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/FinallyDemo;</span><br><span class="line">            <span class="number">3</span>      <span class="number">10</span>     <span class="number">1</span>     i   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">1</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">9</span></span><br><span class="line">          locals = [ class com/basic/FinallyDemo, int ]</span><br><span class="line">          stack = [ class java/lang/Throwable ]</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"FinallyDemo.java"</span></span><br></pre></td></tr></table></figure><ul><li><p>分析：</p><p>我们从反编译之后的字节码可以看出，之所以<code>finally</code>中的代码最后都会被执行，是因为在字节码中，将<code>finally</code>中的代码复制了一份，所以才会总是执行。</p></li></ul><h4 id="1-2-2-在finally中使用return的弊端"><a href="#1-2-2-在finally中使用return的弊端" class="headerlink" title="1.2.2 在finally中使用return的弊端"></a>1.2.2 在finally中使用return的弊端</h4><p>使用<code>try..catch</code>捕捉程序异常，但是有些时候，<code>catch</code>不能将所有的异常都捕捉到，此时那些没有被<code>catch</code>捕捉到的异常就会在<code>finally</code>中被再次捕捉到，这样就提高了程序运行的安全性。但是当在<code>finally</code>中使用<code>return</code>语句后，那么<code>finally</code>就会将其他的异常”吞掉“，也就是不再捕捉<code>catch</code>中没有被捕捉的异常。</p><h5 id="1-2-2-1-finally中没有加return语句："><a href="#1-2-2-1-finally中没有加return语句：" class="headerlink" title="1.2.2.1 finally中没有加return语句："></a>1.2.2.1 <code>finally</code>中没有加<code>return</code>语句：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            i = <span class="number">20</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NegativeArraySizeException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            i = <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了简便，这里主要粘贴源代码对应的字节码信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.basic.FinallyDemo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/FinallyDemo;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span> <span class="comment">//将10压入栈顶，全部变量</span></span><br><span class="line">         <span class="number">2</span>: istore_1         <span class="comment">//将10存储到slot 1中,10 -&gt; i</span></span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">20</span>  <span class="comment">//try-----开始， 将20压入栈顶</span></span><br><span class="line">         <span class="number">5</span>: istore_1          <span class="comment">//将20存储到slot 1中， 20 -&gt; i</span></span><br><span class="line">         <span class="number">6</span>: bipush        <span class="number">30</span>  <span class="comment">//将30压入栈顶，</span></span><br><span class="line">         <span class="number">8</span>: istore_1          <span class="comment">//将30存储到slot 1中，30 -&gt; i  try----结束</span></span><br><span class="line">         <span class="number">9</span>: goto          <span class="number">29</span>  </span><br><span class="line">        <span class="number">12</span>: astore_2        <span class="comment">//catch------开始</span></span><br><span class="line">        <span class="number">13</span>: aload_2</span><br><span class="line">        14: invokevirtual #3                  // Method java/lang/NegativeArraySizeException.printStackTrace:()V</span><br><span class="line">        <span class="number">17</span>: bipush        <span class="number">30</span></span><br><span class="line">        <span class="number">19</span>: istore_1        <span class="comment">//catch------结束</span></span><br><span class="line">        <span class="number">20</span>: goto          <span class="number">29</span></span><br><span class="line">        <span class="number">23</span>: astore_3     <span class="comment">//finally----开始</span></span><br><span class="line">        <span class="number">24</span>: bipush        <span class="number">30</span></span><br><span class="line">        <span class="number">26</span>: istore_1</span><br><span class="line">        <span class="number">27</span>: aload_3</span><br><span class="line">        <span class="number">28</span>: athrow   <span class="comment">//finally------结束，抛出在finally里中捕捉到的异常</span></span><br><span class="line">        <span class="number">29</span>: <span class="keyword">return</span></span><br><span class="line">      Exception table: <span class="comment">//异常表，存放异常的跳转的起始位置，左闭右开区间，以第一个为例，从第3行到第5行</span></span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>    <span class="number">12</span>   Class java/lang/NegativeArraySizeException <span class="comment">//监测try中的代码</span></span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>    <span class="number">23</span>   any   <span class="comment">//finally在try中的跳转</span></span><br><span class="line">            <span class="number">12</span>    <span class="number">17</span>    <span class="number">23</span>   any   <span class="comment">//finally在catch中的跳转</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">12</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">13</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">17</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">20</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">23</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">27</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">29</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">           <span class="number">13</span>       <span class="number">4</span>     <span class="number">2</span>     e   Ljava/lang/NegativeArraySizeException;</span><br><span class="line">            <span class="number">0</span>      <span class="number">30</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">27</span>     <span class="number">1</span>     i   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">3</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">12</span></span><br><span class="line">          locals = [ class "[Ljava/lang/String;", int ]</span><br><span class="line">          stack = [ class java/lang/NegativeArraySizeException ]</span><br><span class="line">        frame_type = <span class="number">74</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">          stack = [ class java/lang/Throwable ]</span><br><span class="line">        frame_type = <span class="number">5</span> <span class="comment">/* same */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-2-2-finally中加了return语句"><a href="#1-2-2-2-finally中加了return语句" class="headerlink" title="1.2.2.2 finally中加了return语句"></a>1.2.2.2 <code>finally</code>中加了<code>return</code>语句</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = test();</span><br><span class="line">        System.out.println(j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源代码对应的字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.basic.FinallyDemo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/FinallyDemo;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: invokestatic  #2                  // Method test:()I</span><br><span class="line">         <span class="number">3</span>: istore_1</span><br><span class="line">         4: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         <span class="number">7</span>: iload_1</span><br><span class="line">         8: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">        <span class="number">11</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">4</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">11</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">12</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">4</span>       <span class="number">8</span>     <span class="number">1</span>     j   I</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: iconst_0    <span class="comment">//定义变量i</span></span><br><span class="line">         <span class="number">1</span>: istore_0    </span><br><span class="line">         <span class="number">2</span>: bipush        <span class="number">10</span>   <span class="comment">//try-----开始</span></span><br><span class="line">         <span class="number">4</span>: istore_1           </span><br><span class="line">         <span class="number">5</span>: bipush        <span class="number">20</span></span><br><span class="line">         <span class="number">7</span>: ireturn            <span class="comment">//try-----结束</span></span><br><span class="line">         <span class="number">8</span>: astore_2           <span class="comment">//finally---开始</span></span><br><span class="line">         <span class="number">9</span>: bipush        <span class="number">20</span>   <span class="comment">//   finally中并没有捕捉异常，也没有抛出异常</span></span><br><span class="line">        <span class="number">11</span>: ireturn            <span class="comment">//finally---结束</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">2</span>     <span class="number">5</span>     <span class="number">8</span>   any</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">13</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">2</span></span><br><span class="line">        line <span class="number">17</span>: <span class="number">5</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">2</span>      <span class="number">10</span>     <span class="number">0</span>     i   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">1</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">8</span></span><br><span class="line">          locals = [ <span class="keyword">int</span> ]</span><br><span class="line">          stack = [ class java/lang/Throwable ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从字节码中可以看到，<code>finally</code>中并没有捕捉异常，也没有抛出异常，所以此种写法对于程序而言非常危险。下面看一段错误代码，但是程序并没有抛出异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = test();</span><br><span class="line">        System.out.println(j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            i = i / <span class="number">0</span>;  <span class="comment">//此处是一个异常代码</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：    </p><p><img alt="程序没有抛出异常" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200417222012554.jpg" class="lazyload"></p></blockquote><p><strong>所以，在写代码时，一定要主要不要写出这样的代码。</strong></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java字节码指令含义解释与指令查询</title>
      <link href="/java-byte-code-command/"/>
      <url>/java-byte-code-command/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-反编译获得java字节码信息"><a href="#1-反编译获得java字节码信息" class="headerlink" title="1 反编译获得java字节码信息"></a>1 反编译获得java字节码信息</h3><p>首先看一段<code>java</code>源代码，然后编译后产生了一个<code>.class</code>文件，使用命令：<code>javap -v xxx.class</code>将其反编译。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; <span class="number">10</span>)&#123;</span><br><span class="line">            x = x++;  </span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"x="</span>+x);<span class="comment">//x=?</span></span><br><span class="line">        System.out.println(<span class="string">"i="</span>+i);<span class="comment">//i=?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img alt="运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200417204334706.jpg" class="lazyload"></p></blockquote><p>执行完反编译命令<code>javap -v Code.class</code>之后的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">Classfile /G:/codeFolder/JavaCode/reflectTest/out/production/reflectTest/com/basic/Code<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">  <span class="title">Last</span> <span class="title">modified</span> 2020-4-17</span>; size <span class="number">870</span> bytes</span><br><span class="line">  MD5 checksum <span class="number">78308</span>b0495e2add94c235bc0f4d2394b</span><br><span class="line">  Compiled from <span class="string">"Code.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">basic</span>.<span class="title">Code</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #12.#30        // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Fieldref           #31.#32        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #3 = Class              #33            // java/lang/StringBuilder</span><br><span class="line">   #4 = Methodref          #3.#30         // java/lang/StringBuilder."&lt;init&gt;":()V</span><br><span class="line">   #5 = String             #34            // x=</span><br><span class="line">   #6 = Methodref          #3.#35         // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">   #7 = Methodref          #3.#36         // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span><br><span class="line">   #8 = Methodref          #3.#37         // java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">   #9 = Methodref          #38.#39        // java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">  #10 = String             #40            // i=</span><br><span class="line">  #11 = Class              #41            // com/basic/Code</span><br><span class="line">  #12 = Class              #42            // java/lang/Object</span><br><span class="line">  #13 = Utf8               &lt;init&gt;</span><br><span class="line">  #14 = Utf8               ()V</span><br><span class="line">  #15 = Utf8               Code</span><br><span class="line">  #16 = Utf8               LineNumberTable</span><br><span class="line">  #17 = Utf8               LocalVariableTable</span><br><span class="line">  #18 = Utf8               this</span><br><span class="line">  #19 = Utf8               Lcom/basic/Code;</span><br><span class="line">  #20 = Utf8               main</span><br><span class="line">  #21 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #22 = Utf8               args</span><br><span class="line">  #23 = Utf8               [Ljava/lang/String;</span><br><span class="line">  #24 = Utf8               i</span><br><span class="line">  #25 = Utf8               I</span><br><span class="line">  #26 = Utf8               x</span><br><span class="line">  #27 = Utf8               StackMapTable</span><br><span class="line">  #28 = Utf8               SourceFile</span><br><span class="line">  #29 = Utf8               Code.java</span><br><span class="line">  #30 = NameAndType        #13:#14        // "&lt;init&gt;":()V</span><br><span class="line">  #31 = Class              #43            // java/lang/System</span><br><span class="line">  #32 = NameAndType        #44:#45        // out:Ljava/io/PrintStream;</span><br><span class="line">  #33 = Utf8               java/lang/StringBuilder</span><br><span class="line">  #34 = Utf8               x=</span><br><span class="line">  #35 = NameAndType        #46:#47        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">  #36 = NameAndType        #46:#48        // append:(I)Ljava/lang/StringBuilder;</span><br><span class="line">  #37 = NameAndType        #49:#50        // toString:()Ljava/lang/String;</span><br><span class="line">  #38 = Class              #51            // java/io/PrintStream</span><br><span class="line">  #39 = NameAndType        #52:#53        // println:(Ljava/lang/String;)V</span><br><span class="line">  #40 = Utf8               i=</span><br><span class="line">  #41 = Utf8               com/basic/Code</span><br><span class="line">  #42 = Utf8               java/lang/Object</span><br><span class="line">  #43 = Utf8               java/lang/System</span><br><span class="line">  #44 = Utf8               out</span><br><span class="line">  #45 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #46 = Utf8               append</span><br><span class="line">  #47 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">  #48 = Utf8               (I)Ljava/lang/StringBuilder;</span><br><span class="line">  #49 = Utf8               toString</span><br><span class="line">  #50 = Utf8               ()Ljava/lang/String;</span><br><span class="line">  #51 = Utf8               java/io/PrintStream</span><br><span class="line">  #52 = Utf8               println</span><br><span class="line">  #53 = Utf8               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.basic.Code();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/Code;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: iconst_0</span><br><span class="line">         <span class="number">1</span>: istore_1</span><br><span class="line">         <span class="number">2</span>: iconst_0</span><br><span class="line">         <span class="number">3</span>: istore_2</span><br><span class="line">         <span class="number">4</span>: iload_1</span><br><span class="line">         <span class="number">5</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">7</span>: if_icmpge     <span class="number">21</span></span><br><span class="line">        <span class="number">10</span>: iload_2</span><br><span class="line">        <span class="number">11</span>: iinc          <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">        <span class="number">14</span>: istore_2</span><br><span class="line">        <span class="number">15</span>: iinc          <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="number">18</span>: goto          <span class="number">4</span></span><br><span class="line">        21: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        24: new           #3                  // class java/lang/StringBuilder</span><br><span class="line">        <span class="number">27</span>: dup</span><br><span class="line">        28: invokespecial #4                  // Method java/lang/StringBuilder."&lt;init&gt;":()V</span><br><span class="line">        31: ldc           #5                  // String x=</span><br><span class="line">        33: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">        <span class="number">36</span>: iload_2</span><br><span class="line">        37: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span><br><span class="line">        40: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">        43: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        46: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        49: new           #3                  // class java/lang/StringBuilder</span><br><span class="line">        <span class="number">52</span>: dup</span><br><span class="line">        53: invokespecial #4                  // Method java/lang/StringBuilder."&lt;init&gt;":()V</span><br><span class="line">        56: ldc           #10                 // String i=</span><br><span class="line">        58: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">        <span class="number">61</span>: iload_1</span><br><span class="line">        62: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span><br><span class="line">        65: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">        68: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        <span class="number">71</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">2</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">4</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">15</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">21</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">46</span></span><br><span class="line">        line <span class="number">14</span>: <span class="number">71</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">72</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">2</span>      <span class="number">70</span>     <span class="number">1</span>     i   I</span><br><span class="line">            <span class="number">4</span>      <span class="number">68</span>     <span class="number">2</span>     x   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">253</span> <span class="comment">/* append */</span></span><br><span class="line">          offset_delta = <span class="number">4</span></span><br><span class="line">          locals = [ <span class="keyword">int</span>, <span class="keyword">int</span> ]</span><br><span class="line">        frame_type = <span class="number">16</span> <span class="comment">/* same */</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"Code.java"</span></span><br></pre></td></tr></table></figure><p>我们可以看到，<code>java</code>源代码文件编译后的<code>class</code>文件，通过反编译之后，有很多的执行信息，那么那些指定到底是什么意思呢。下面通过一张表介绍一下。</p><h3 id="2-java字节码指令含义"><a href="#2-java字节码指令含义" class="headerlink" title="2 java字节码指令含义"></a>2 java字节码指令含义</h3><h4 id="2-1-java常量指令集合"><a href="#2-1-java常量指令集合" class="headerlink" title="2.1 java常量指令集合"></a>2.1 <code>java</code>常量指令集合</h4><table><thead><tr><th>字节码</th><th>助记符</th><th>指令含义</th></tr></thead><tbody><tr><td>0x00</td><td>nop</td><td>None</td></tr><tr><td>0x01</td><td>aconst_null</td><td>将null推送至栈顶</td></tr><tr><td>0x02</td><td>iconst_m1</td><td>将int型-1推送至栈顶</td></tr><tr><td>0x03</td><td>iconst_0</td><td>将int型0推送至栈顶</td></tr><tr><td>0x04</td><td>iconst_1</td><td>将int型1推送至栈顶</td></tr><tr><td>0x05</td><td>iconst_2</td><td>将int型2推送至栈顶</td></tr><tr><td>0x06</td><td>iconst_3</td><td>将int型3推送至栈顶</td></tr><tr><td>0x07</td><td>iconst_4</td><td>将int型4推送至栈顶</td></tr><tr><td>0x08</td><td>iconst_5</td><td>将int型5推送至栈顶</td></tr><tr><td>0x09</td><td>lconst_0</td><td>将long型0推送至栈顶</td></tr><tr><td>0x0a</td><td>lconst_1</td><td>将long型1推送至栈顶</td></tr><tr><td>0x0b</td><td>fconst_0</td><td>将float型0推送至栈顶</td></tr><tr><td>0x0c</td><td>fconst_1</td><td>将float型1推送至栈顶</td></tr><tr><td>0x0d</td><td>fconst_2</td><td>将float型2推送至栈顶</td></tr><tr><td>0x0e</td><td>dconst_0</td><td>将double型0推送至栈顶</td></tr><tr><td>0x0f</td><td>dconst_1</td><td>将double型1推送至栈顶</td></tr></tbody></table><h4 id="2-2-栈操作指令集合"><a href="#2-2-栈操作指令集合" class="headerlink" title="2.2 栈操作指令集合"></a>2.2 栈操作指令集合</h4><table><thead><tr><th>字节码</th><th>助记符</th><th>指令含义</th></tr></thead><tbody><tr><td>0x10</td><td>bipush</td><td>将单字节的常量值(-128~127)推送至栈顶</td></tr><tr><td>0x11</td><td>sipush</td><td>将一个短整型常量(-32768~32767)推送至栈顶</td></tr><tr><td>0x12</td><td>ldc</td><td>将int,float或String型常量值从常量池中推送至栈顶</td></tr><tr><td>0x13</td><td>ldc_w</td><td>将int,float或String型常量值从常量池中推送至栈顶(宽索引)</td></tr><tr><td>0x14</td><td>ldc2_w</td><td>将long或double型常量值从常量池中推送至栈顶(宽索引)</td></tr><tr><td>0x15</td><td>iload</td><td>将指定的int型本地变量推送至栈顶</td></tr><tr><td>0x16</td><td>lload</td><td>将指定的long型本地变量推送至栈顶</td></tr><tr><td>0x17</td><td>fload</td><td>将指定的float型本地变量推送至栈顶</td></tr><tr><td>0x18</td><td>dload</td><td>将指定的double型本地变量推送至栈顶</td></tr><tr><td>0x19</td><td>aload</td><td>将指定的引用类型本地变量推送至栈顶</td></tr><tr><td>0x1a</td><td>iload_0</td><td>将第一个int型本地变量推送至栈顶</td></tr><tr><td>0x1b</td><td>iload_1</td><td>将第二个int型本地变量推送至栈顶</td></tr><tr><td>0x1c</td><td>iload_2</td><td>将第三个int型本地变量推送至栈顶</td></tr><tr><td>0x1d</td><td>iload_3</td><td>将第四个int型本地变量推送至栈顶</td></tr><tr><td>0x1e</td><td>lload_0</td><td>将第一个long型本地变量推送至栈顶</td></tr><tr><td>0x1f</td><td>lload_1</td><td>将第二个long型本地变量推送至栈顶</td></tr><tr><td>0x20</td><td>lload_2</td><td>将第三个long型本地变量推送至栈顶</td></tr><tr><td>0x21</td><td>lload_3</td><td>将第四个long型本地变量推送至栈顶</td></tr><tr><td>0x22</td><td>fload_0</td><td>将第一个float型本地变量推送至栈顶</td></tr><tr><td>0x23</td><td>fload_1</td><td>将第二个float型本地变量推送至栈顶</td></tr><tr><td>0x24</td><td>fload_2</td><td>将第三个float型本地变量推送至栈顶</td></tr><tr><td>0x25</td><td>fload_3</td><td>将第四个float型本地变量推送至栈顶</td></tr><tr><td>0x26</td><td>dload_0</td><td>将第一个double型本地变量推送至栈顶</td></tr><tr><td>0x27</td><td>dload_1</td><td>将第二个double型本地变量推送至栈顶</td></tr><tr><td>0x28</td><td>dload_2</td><td>将第三个double型本地变量推送至栈顶</td></tr><tr><td>0x29</td><td>dload_3</td><td>将第四个double型本地变量推送至栈顶</td></tr><tr><td>0x2a</td><td>aload_0</td><td>将第一个引用类型本地变量推送至栈顶</td></tr><tr><td>0x2b</td><td>aload_1</td><td>将第二个引用类型本地变量推送至栈顶</td></tr><tr><td>0x2c</td><td>aload_2</td><td>将第三个引用类型本地变量推送至栈顶</td></tr><tr><td>0x2d</td><td>aload_3</td><td>将第四个引用类型本地变量推送至栈顶</td></tr><tr><td>0x2e</td><td>iaload</td><td>将int型数组指定索引的值推送至栈顶</td></tr><tr><td>0x2f</td><td>laload</td><td>将long型数组指定索引的值推送至栈顶</td></tr><tr><td>0x30</td><td>faload</td><td>将float型数组指定索引的值推送至栈顶</td></tr><tr><td>0x31</td><td>daload</td><td>将double型数组指定索引的值推送至栈顶</td></tr><tr><td>0x32</td><td>aaload</td><td>将引用类型数组指定索引的值推送至栈顶</td></tr><tr><td>0x33</td><td>baload</td><td>将boolean或byte型数组指定索引的值推送至栈顶</td></tr><tr><td>0x34</td><td>caload</td><td>将char型数组指定索引的值推送至栈顶</td></tr><tr><td>0x35</td><td>saload</td><td>将short型数组指定索引的值推送至栈顶</td></tr><tr><td>0x36</td><td>istore</td><td>将栈顶int型数值存入指定本地变量</td></tr><tr><td>0x37</td><td>lstore</td><td>将栈顶long型数值存入指定本地变量</td></tr><tr><td>0x38</td><td>fstore</td><td>将栈顶float型数值存入指定本地变量</td></tr><tr><td>0x39</td><td>dstore</td><td>将栈顶double型数值存入指定本地变量</td></tr><tr><td>0x3a</td><td>astore</td><td>将栈顶引用类型数值存入指定本地变量</td></tr><tr><td>0x3b</td><td>istore_0</td><td>将栈顶int型数值存入第一个本地变量</td></tr><tr><td>0x3c</td><td>istore_1</td><td>将栈顶int型数值存入第二个本地变量</td></tr><tr><td>0x3d</td><td>istore_2</td><td>将栈顶int型数值存入第三个本地变量</td></tr><tr><td>0x3e</td><td>istore_3</td><td>将栈顶int型数值存入第四个本地变量</td></tr><tr><td>0x3f</td><td>lstore_0</td><td>将栈顶long型数值存入第一个本地变量</td></tr><tr><td>0x40</td><td>lstore_1</td><td>将栈顶long型数值存入第二个本地变量</td></tr><tr><td>0x41</td><td>lstore_2</td><td>将栈顶long型数值存入第三个本地变量</td></tr><tr><td>0x42</td><td>lstore_3</td><td>将栈顶long型数值存入第四个本地变量</td></tr><tr><td>0x43</td><td>fstore_0</td><td>将栈顶float型数值存入第一个本地变量</td></tr><tr><td>0x44</td><td>fstore_1</td><td>将栈顶float型数值存入第二个本地变量</td></tr><tr><td>0x45</td><td>fstore_2</td><td>将栈顶float型数值存入第三个本地变量</td></tr><tr><td>0x46</td><td>fstore_3</td><td>将栈顶float型数值存入第四个本地变量</td></tr><tr><td>0x47</td><td>dstore_0</td><td>将栈顶double型数值存入第一个本地变量</td></tr><tr><td>0x48</td><td>dstore_1</td><td>将栈顶double型数值存入第二个本地变量</td></tr><tr><td>0x49</td><td>dstore_2</td><td>将栈顶double型数值存入第三个本地变量</td></tr><tr><td>0x4a</td><td>dstore_3</td><td>将栈顶double型数值存入第四个本地变量</td></tr><tr><td>0x4b</td><td>astore_0</td><td>将栈顶引用型数值存入第一个本地变量</td></tr><tr><td>0x4c</td><td>astore_1</td><td>将栈顶引用型数值存入第二个本地变量</td></tr><tr><td>0x4d</td><td>astore_2</td><td>将栈顶引用型数值存入第三个本地变量</td></tr><tr><td>0x4e</td><td>astore_3</td><td>将栈顶引用型数值存入第四个本地变量</td></tr><tr><td>0x4f</td><td>iastore</td><td>将栈顶int型数值存入指定数组的指定索引位置</td></tr><tr><td>0x50</td><td>lastore</td><td>将栈顶long型数值存入指定数组的指定索引位置</td></tr><tr><td>0x51</td><td>fastore</td><td>将栈顶float型数值存入指定数组的指定索引位置</td></tr><tr><td>0x52</td><td>dastore</td><td>将栈顶double型数值存入指定数组的指定索引位置</td></tr><tr><td>0x53</td><td>aastore</td><td>将栈顶引用型数值存入指定数组的指定索引位置</td></tr><tr><td>0x54</td><td>bastore</td><td>将栈顶boolean或byte型数值存入指定数组的指定索引位置</td></tr><tr><td>0x55</td><td>castore</td><td>将栈顶char型数值存入指定数组的指定索引位置</td></tr><tr><td>0x56</td><td>sastore</td><td>将栈顶short型数值存入指定数组的指定索引位置</td></tr><tr><td>0x57</td><td>pop</td><td>将栈顶数值弹出(数值不能是long或double类型的)</td></tr><tr><td>0x58</td><td>pop2</td><td>将栈顶的一个(对于非long或double类型)或两个数值(对于非long或double的其他类型)弹出</td></tr><tr><td>0x59</td><td>dup</td><td>复制栈顶数值并将复制值压入栈顶</td></tr><tr><td>0x5a</td><td>dup_x1</td><td>复制栈顶数值并将两个复制值压入栈顶</td></tr><tr><td>0x5b</td><td>dup_x2</td><td>复制栈顶数值并将三个(或两个)复制值压入栈顶</td></tr><tr><td>0x5c</td><td>dup2</td><td>复制栈顶一个(对于long或double类型)或两个(对于非long或double的其他类型)数值并将复制值压入栈顶</td></tr><tr><td>0x5d</td><td>dup2_x1</td><td>dup_x1指令的双倍版本</td></tr><tr><td>0x5e</td><td>dup2_x2</td><td>dup_x2指令的双倍版本</td></tr></tbody></table><h4 id="2-3-算术指令集合"><a href="#2-3-算术指令集合" class="headerlink" title="2.3 算术指令集合"></a>2.3 算术指令集合</h4><table><thead><tr><th>字节码</th><th>助记符</th><th>指令含义</th></tr></thead><tbody><tr><td>0x5f</td><td>swap</td><td>将栈顶最顶端的两个数值互换(数值不能是long或double类型)</td></tr><tr><td>0x60</td><td>iadd</td><td>将栈顶两int型数值相加并将结果压入栈顶</td></tr><tr><td>0x61</td><td>ladd</td><td>将栈顶两long型数值相加并将结果压入栈顶</td></tr><tr><td>0x62</td><td>fadd</td><td>将栈顶两float型数值相加并将结果压入栈顶</td></tr><tr><td>0x63</td><td>dadd</td><td>将栈顶两double型数值相加并将结果压入栈顶</td></tr><tr><td>0x64</td><td>isub</td><td>将栈顶两int型数值相减并将结果压入栈顶</td></tr><tr><td>0x65</td><td>lsub</td><td>将栈顶两long型数值相减并将结果压入栈顶</td></tr><tr><td>0x66</td><td>fsub</td><td>将栈顶两float型数值相减并将结果压入栈顶</td></tr><tr><td>0x67</td><td>dsub</td><td>将栈顶两double型数值相减并将结果压入栈顶</td></tr><tr><td>0x68</td><td>imul</td><td>将栈顶两int型数值相乘并将结果压入栈顶</td></tr><tr><td>0x69</td><td>lmul</td><td>将栈顶两long型数值相乘并将结果压入栈顶</td></tr><tr><td>0x6a</td><td>fmul</td><td>将栈顶两float型数值相乘并将结果压入栈顶</td></tr><tr><td>0x6b</td><td>dmul</td><td>将栈顶两double型数值相乘并将结果压入栈顶</td></tr><tr><td>0x6c</td><td>idiv</td><td>将栈顶两int型数值相除并将结果压入栈顶</td></tr><tr><td>0x6d</td><td>ldiv</td><td>将栈顶两long型数值相除并将结果压入栈顶</td></tr><tr><td>0x6e</td><td>fdiv</td><td>将栈顶两float型数值相除并将结果压入栈顶</td></tr><tr><td>0x6f</td><td>ddiv</td><td>将栈顶两double型数值相除并将结果压入栈顶</td></tr><tr><td>0x70</td><td>irem</td><td>将栈顶两int型数值作取模运算并将结果压入栈顶</td></tr><tr><td>0x71</td><td>lrem</td><td>将栈顶两long型数值作取模运算并将结果压入栈顶</td></tr><tr><td>0x72</td><td>frem</td><td>将栈顶两float型数值作取模运算并将结果压入栈顶</td></tr><tr><td>0x73</td><td>drem</td><td>将栈顶两double型数值作取模运算并将结果压入栈顶</td></tr><tr><td>0x74</td><td>ineg</td><td>将栈顶int型数值取负并将结果压入栈顶</td></tr><tr><td>0x75</td><td>lneg</td><td>将栈顶long型数值取负并将结果压入栈顶</td></tr><tr><td>0x76</td><td>fneg</td><td>将栈顶float型数值取负并将结果压入栈顶</td></tr><tr><td>0x77</td><td>dneg</td><td>将栈顶double型数值取负并将结果压入栈顶</td></tr><tr><td>0x78</td><td>ishl</td><td>将int型数值左移指定位数并将结果压入栈顶</td></tr><tr><td>0x79</td><td>lshl</td><td>将long型数值左移指定位数并将结果压入栈顶</td></tr><tr><td>0x7a</td><td>ishr</td><td>将int型数值右(带符号)移指定位数并将结果压入栈顶</td></tr><tr><td>0x7b</td><td>lshr</td><td>将long型数值右(带符号)移指定位数并将结果压入栈顶</td></tr><tr><td>0x7c</td><td>iushr</td><td>将int型数值右(无符号)移指定位数并将结果压入栈顶</td></tr><tr><td>0x7d</td><td>lushr</td><td>将long型数值右(无符号)移指定位数并将结果压入栈顶</td></tr><tr><td>0x7e</td><td>iand</td><td>将栈顶两int型数值”按位与”并将结果压入栈顶</td></tr><tr><td>0x7f</td><td>land</td><td>将栈顶两long型数值”按位与”并将结果压入栈顶</td></tr><tr><td>0x80</td><td>ior</td><td>将栈顶两int型数值”按位或”并将结果压入栈顶</td></tr><tr><td>0x81</td><td>lor</td><td>将栈顶两long型数值”按位或”并将结果压入栈顶</td></tr><tr><td>0x82</td><td>ixor</td><td>将栈顶两int型数值”按位异或”并将结果压入栈顶</td></tr><tr><td>0x83</td><td>lxor</td><td>将栈顶两long型数值”按位异或”并将结果压入栈顶</td></tr><tr><td>0x84</td><td>iinc</td><td>将指定int型变量增加指定值(如i++, i–, i+=2等)</td></tr></tbody></table><h4 id="2-5-Number类型间转换指令集合"><a href="#2-5-Number类型间转换指令集合" class="headerlink" title="2.5 Number类型间转换指令集合"></a>2.5 <code>Number</code>类型间转换指令集合</h4><table><thead><tr><th>字节码</th><th>助记符</th><th>指令含义</th></tr></thead><tbody><tr><td>0x85</td><td>i2l</td><td>将栈顶int型数值强制转换为long型数值并将结果压入栈顶</td></tr><tr><td>0x86</td><td>i2f</td><td>将栈顶int型数值强制转换为float型数值并将结果压入栈顶</td></tr><tr><td>0x87</td><td>i2d</td><td>将栈顶int型数值强制转换为double型数值并将结果压入栈顶</td></tr><tr><td>0x88</td><td>l2i</td><td>将栈顶long型数值强制转换为int型数值并将结果压入栈顶</td></tr><tr><td>0x89</td><td>l2f</td><td>将栈顶long型数值强制转换为float型数值并将结果压入栈顶</td></tr><tr><td>0x8a</td><td>l2d</td><td>将栈顶long型数值强制转换为double型数值并将结果压入栈顶</td></tr><tr><td>0x8b</td><td>f2i</td><td>将栈顶float型数值强制转换为int型数值并将结果压入栈顶</td></tr><tr><td>0x8c</td><td>f2l</td><td>将栈顶float型数值强制转换为long型数值并将结果压入栈顶</td></tr><tr><td>0x8d</td><td>f2d</td><td>将栈顶float型数值强制转换为double型数值并将结果压入栈顶</td></tr><tr><td>0x8e</td><td>d2i</td><td>将栈顶double型数值强制转换为int型数值并将结果压入栈顶</td></tr><tr><td>0x8f</td><td>d2l</td><td>将栈顶double型数值强制转换为long型数值并将结果压入栈顶</td></tr><tr><td>0x90</td><td>d2f</td><td>将栈顶double型数值强制转换为float型数值并将结果压入栈顶</td></tr><tr><td>0x91</td><td>i2b</td><td>将栈顶int型数值强制转换为byte型数值并将结果压入栈顶</td></tr><tr><td>0x92</td><td>i2c</td><td>将栈顶int型数值强制转换为char型数值并将结果压入栈顶</td></tr><tr><td>0x93</td><td>i2s</td><td>将栈顶int型数值强制转换为short型数值并将结果压入栈顶</td></tr></tbody></table><h4 id="2-6-比较指令集合"><a href="#2-6-比较指令集合" class="headerlink" title="2.6 比较指令集合"></a>2.6 比较指令集合</h4><table><thead><tr><th>字节码</th><th>助记符</th><th>指令含义</th></tr></thead><tbody><tr><td>0x94</td><td>lcmp</td><td>比较栈顶两long型数值大小, 并将结果(1, 0或-1)压入栈顶</td></tr><tr><td>0x95</td><td>fcmpl</td><td>比较栈顶两float型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为<code>NaN</code>时, 将-1压入栈顶</td></tr><tr><td>0x96</td><td>fcmpg</td><td>比较栈顶两float型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为<code>NaN</code>时, 将1压入栈顶</td></tr><tr><td>0x97</td><td>dcmpl</td><td>比较栈顶两double型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为<code>NaN</code>时, 将-1压入栈顶</td></tr><tr><td>0x98</td><td>dcmpg</td><td>比较栈顶两double型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为<code>NaN</code>时, 将1压入栈顶</td></tr></tbody></table><h4 id="2-7-if跳转指令集合"><a href="#2-7-if跳转指令集合" class="headerlink" title="2.7 if跳转指令集合"></a>2.7 <code>if</code>跳转指令集合</h4><table><thead><tr><th>字节码</th><th>助记符</th><th>指令含义</th></tr></thead><tbody><tr><td>0x99</td><td>ifeq</td><td>当栈顶int型数值等于0时跳转</td></tr><tr><td>0x9a</td><td>ifne</td><td>当栈顶int型数值不等于0时跳转</td></tr><tr><td>0x9b</td><td>iflt</td><td>当栈顶int型数值小于0时跳转</td></tr><tr><td>0x9c</td><td>ifge</td><td>当栈顶int型数值大于等于0时跳转</td></tr><tr><td>0x9d</td><td>ifgt</td><td>当栈顶int型数值大于0时跳转</td></tr><tr><td>0x9e</td><td>ifle</td><td>当栈顶int型数值小于等于0时跳转</td></tr><tr><td>0x9f</td><td>if_icmpeq</td><td>比较栈顶两int型数值大小, 当结果等于0时跳转</td></tr><tr><td>0xa0</td><td>if_icmpne</td><td>比较栈顶两int型数值大小, 当结果不等于0时跳转</td></tr><tr><td>0xa1</td><td>if_icmplt</td><td>比较栈顶两int型数值大小, 当结果小于0时跳转</td></tr><tr><td>0xa2</td><td>if_icmpge</td><td>比较栈顶两int型数值大小, 当结果大于等于0时跳转</td></tr><tr><td>0xa3</td><td>if_icmpgt</td><td>比较栈顶两int型数值大小, 当结果大于0时跳转</td></tr><tr><td>0xa4</td><td>if_icmple</td><td>比较栈顶两int型数值大小, 当结果小于等于0时跳转</td></tr><tr><td>0xa5</td><td>if_acmpeq</td><td>比较栈顶两引用型数值, 当结果相等时跳转</td></tr><tr><td>0xa6</td><td>if_acmpne</td><td>比较栈顶两引用型数值, 当结果不相等时跳转</td></tr><tr><td>0xa7</td><td>goto</td><td>无条件跳转</td></tr><tr><td>0xa8</td><td>jsr</td><td>跳转至指定的16位offset位置, 并将jsr的下一条指令地址压入栈顶</td></tr><tr><td>0xa9</td><td>ret</td><td>返回至本地变量指定的index的指令位置(一般与jsr或jsr_w联合使用)</td></tr><tr><td>0xaa</td><td>tableswitch</td><td>用于switch条件跳转, case值连续(可变长度指令)</td></tr><tr><td>0xab</td><td>lookupswitch</td><td>用于switch条件跳转, case值不连续(可变长度指令)</td></tr></tbody></table><h4 id="2-8-方法调用指令集合"><a href="#2-8-方法调用指令集合" class="headerlink" title="2.8 方法调用指令集合"></a>2.8 方法调用指令集合</h4><table><thead><tr><th>字节码</th><th>助记符</th><th>指令含义</th></tr></thead><tbody><tr><td>0xac</td><td>ireturn</td><td>从当前方法返回int</td></tr><tr><td>0xad</td><td>lreturn</td><td>从当前方法返回long</td></tr><tr><td>0xae</td><td>freturn</td><td>从当前方法返回float</td></tr><tr><td>0xaf</td><td>dreturn</td><td>从当前方法返回double</td></tr><tr><td>0xb0</td><td>areturn</td><td>从当前方法返回对象引用</td></tr><tr><td>0xb1</td><td>return</td><td>从当前方法返回void</td></tr><tr><td>0xb2</td><td>getstatic</td><td>获取指定类的静态域, 并将其压入栈顶</td></tr><tr><td>0xb3</td><td>putstatic</td><td>为指定类的静态域赋值</td></tr><tr><td>0xb4</td><td>getfield</td><td>获取指定类的实例域, 并将其压入栈顶</td></tr><tr><td>0xb5</td><td>putfield</td><td>为指定类的实例域赋值</td></tr><tr><td>0xb6</td><td>invokevirtual</td><td>调用实例方法</td></tr><tr><td>0xb7</td><td>invokespecial</td><td>调用超类构建方法, 实例初始化方法, 私有方法</td></tr><tr><td>0xb8</td><td>invokestatic</td><td>调用静态方法</td></tr><tr><td>0xb9</td><td>invokeinterface</td><td>调用接口方法</td></tr><tr><td>0xba</td><td>invokedynamic</td><td>调用动态方法</td></tr><tr><td>0xbb</td><td>new</td><td>创建一个对象, 并将其引用引用值压入栈顶</td></tr><tr><td>0xbc</td><td>newarray</td><td>创建一个指定的原始类型(如int, float, char等)的数组, 并将其引用值压入栈顶</td></tr><tr><td>0xbd</td><td>anewarray</td><td>创建一个引用型(如类, 接口, 数组)的数组, 并将其引用值压入栈顶</td></tr><tr><td>0xbe</td><td>arraylength</td><td>获取数组的长度值并压入栈顶</td></tr><tr><td>0xbf</td><td>athrow</td><td>将栈顶的异常抛出</td></tr><tr><td>0xc0</td><td>checkcast</td><td>检验类型转换, 检验未通过将抛出 ClassCastException</td></tr><tr><td>0xc1</td><td>instanceof</td><td>检验对象是否是指定类的实际, 如果是将1压入栈顶, 否则将0压入栈顶</td></tr><tr><td>0xc2</td><td>monitorenter</td><td>获得对象的锁, 用于同步方法或同步块</td></tr><tr><td>0xc3</td><td>monitorexit</td><td>释放对象的锁, 用于同步方法或同步块</td></tr><tr><td>0xc4</td><td>wide</td><td>扩展本地变量的宽度</td></tr><tr><td>0xc5</td><td>multianewarray</td><td>创建指定类型和指定维度的多维数组(执行该指令时, 操作栈中必须包含各维度的长度值), 并将其引用压入栈顶</td></tr><tr><td>0xc6</td><td>ifnull</td><td>为null时跳转</td></tr><tr><td>0xc7</td><td>ifnonnull</td><td>不为null时跳转</td></tr><tr><td>0xc8</td><td>goto_w</td><td>无条件跳转(宽索引)</td></tr><tr><td>0xc9</td><td>jsr_w</td><td>跳转至指定的32位offset位置, 并将jsr_w的下一条指令地址压入栈顶</td></tr></tbody></table><h3 id="3-字节码文件信息"><a href="#3-字节码文件信息" class="headerlink" title="3 字节码文件信息"></a>3 字节码文件信息</h3><table><thead><tr><th>标志名称</th><th>标志值</th><th>含义</th></tr></thead><tbody><tr><td><strong>ACC_PUBLIC</strong></td><td>0x0001</td><td>是否为Public类型</td></tr><tr><td><strong>ACC_FINAL</strong></td><td>0x0010</td><td>是否被声明为final，只有类可以设置</td></tr><tr><td><strong>ACC_SUPER</strong></td><td>0x0020</td><td>是否允许使用invokespecial字节码指令的新语义．</td></tr><tr><td><strong>ACC_INTERFACE</strong></td><td>0x0200</td><td>标志这是一个接口</td></tr><tr><td><strong>ACC_ABSTRACT</strong></td><td>0x0400</td><td>是否为abstract类型，对于接口或者抽象类来说， 次标志值为真，其他类型为假</td></tr><tr><td><strong>ACC_SYNTHETIC</strong></td><td>0x1000</td><td>标志这个类并非由用户代码产生</td></tr><tr><td><strong>ACC_ANNOTATION</strong></td><td>0x2000</td><td>标志这是一个注解</td></tr><tr><td>*<em>ACC_ENUM *</em></td><td>0x4000</td><td>标志这是一个枚举</td></tr></tbody></table><h3 id="4-字节码类型信息"><a href="#4-字节码类型信息" class="headerlink" title="4 字节码类型信息"></a>4 字节码类型信息</h3><table><thead><tr><th>标识字符</th><th>含义</th></tr></thead><tbody><tr><td>B</td><td>基本类型byte</td></tr><tr><td>C</td><td>基本类型char</td></tr><tr><td>D</td><td>基本类型double</td></tr><tr><td>F</td><td>基本类型float</td></tr><tr><td>I</td><td>基本类型int</td></tr><tr><td>J</td><td>基本类型long</td></tr><tr><td>S</td><td>基本类型short</td></tr><tr><td>Z</td><td>基本类型boolean</td></tr><tr><td>V</td><td>特殊类型void</td></tr><tr><td>L ;</td><td>表示对象类型，以分号结尾，如Ljava/lang/Object;</td></tr><tr><td>[</td><td>一维数组</td></tr><tr><td>[[</td><td>二维数组</td></tr></tbody></table><h3 id="5-字节码中方法表信息"><a href="#5-字节码中方法表信息" class="headerlink" title="5 字节码中方法表信息"></a>5 字节码中方法表信息</h3><table><thead><tr><th>标识字符</th><th></th></tr></thead><tbody><tr><td><strong>stack</strong></td><td>最大操作数栈，JVM运行时会根据这个值来分配栈帧(Frame)中的操作栈深度,此处为1</td></tr><tr><td><strong>locals</strong></td><td>局部变量所需的存储空间，单位为Slot, Slot是虚拟机为局部变量分配内存时所使用的最小单位，为4个字节大小。方法参数(包括实例方法中的隐藏参数this)，显示异常处理器的参数(try catch中的catch块所定义的异常)，方法体中定义的局部变量都需要使用局部变量表来存放。值得一提的是，locals的大小并不一定等于所有局部变量所占的Slot之和，因为局部变量中的Slot是可以重用的。</td></tr><tr><td><strong>args_size</strong></td><td>方法参数的个数，这里是1，因为每个实例方法都会有一个隐藏参数this</td></tr><tr><td><strong>attribute_info</strong></td><td>方法体内容，0,1,4为字节码”行号”，该段代码的意思是将第一个引用类型本地变量推送至栈顶，然后执行该类型的实例方法，也就是常量池存放的第一个变量，也就是注释里的”java/lang/Object.””:()V”, 然后执行返回语句，结束方法。</td></tr><tr><td><strong>LineNumberTable</strong></td><td>该属性的作用是描述源码行号与字节码行号(字节码偏移量)之间的对应关系。可以使用 -g:none 或-g:lines选项来取消或要求生成这项信息，如果选择不生成LineNumberTable，当程序运行异常时将无法获取到发生异常的源码行号，也无法按照源码的行数来调试程序。</td></tr><tr><td><strong>LocalVariableTable</strong></td><td>该属性的作用是描述帧栈中局部变量与源码中定义的变量之间的关系。可以使用 -g:none 或 -g:vars来取消或生成这项信息，如果没有生成这项信息，那么当别人引用这个方法时，将无法获取到参数名称，取而代之的是arg0, arg1这样的占位符。 start 表示该局部变量在哪一行开始可见，length表示可见行数，Slot代表所在帧栈位置，Name是变量名称，然后是类型签名。</td></tr></tbody></table><h3 id="6-属性表集合"><a href="#6-属性表集合" class="headerlink" title="6 属性表集合"></a>6 属性表集合</h3><table><thead><tr><th>属性名称</th><th>使用位置</th><th>含义</th></tr></thead><tbody><tr><td>Code</td><td>方法表</td><td>Java代码编译成的字节码指令</td></tr><tr><td>ConstantValue</td><td>字段表</td><td>final关键字定义的常量池</td></tr><tr><td>Deprecated</td><td>类，方法，字段表</td><td>被声明为deprecated的方法和字段</td></tr><tr><td>Exceptions</td><td>方法表</td><td>方法抛出的异常</td></tr><tr><td>EnclosingMethod</td><td>类文件</td><td>仅当一个类为局部类或者匿名类是才能拥有这个属性，这个属性用于标识这个类所在的外围方法</td></tr><tr><td>InnerClass</td><td>类文件</td><td>内部类列表</td></tr><tr><td>LineNumberTable</td><td>Code属性</td><td>Java源码的行号与字节码指令的对应关系</td></tr><tr><td>LocalVariableTable</td><td>Code属性</td><td>方法的局部变量描述</td></tr><tr><td>StackMapTable</td><td>Code属性</td><td>JDK1.6中新增的属性，供新的类型检查检验器检查和处理目标方法的局部变量和操作数有所需要的类是否匹配</td></tr><tr><td>Signature</td><td>类，方法表，字段表</td><td>JDK1.5中新增的属性，用于支持泛型情况下的方法签名。任何类，接口，初始化方法或成员的泛型前面如果包含了类型变量（Type Variables）或参数化类型（Parameterized Type），则signature属性会为它记录泛型前面信息，由于Java的泛型采用擦除法实现，在为了便面类型信息被擦除后导致签名混乱，需要这个属性记录泛型中的相关信息。</td></tr><tr><td>SourceFile</td><td>类文件</td><td>记录源文件名称</td></tr><tr><td>SourceDebugExtension</td><td>类文件</td><td>JDK1.6中新增的属性，用于存储额外的调试信息</td></tr><tr><td>Synthetic</td><td>类，方法表，字段表</td><td>标志方法或字段为编译器自动生成的</td></tr><tr><td>LocalVariableTypeTable</td><td>类</td><td>JDK1.5中新增的属性，使用特征签名代替描述符，是为了引入泛型语法之后能描述泛型参数化类型而添加</td></tr><tr><td>RuntimeVisibleAnnotations</td><td>类，方法表，字段表</td><td>JDK1.5中新增的属性，为动态注解提供支持 ，用于指明那些注解是运行时（运行时就是进行反射调用）可见的</td></tr><tr><td>RuntimeInvisibleAnnotations</td><td>表，方法表，字段表</td><td>JDK1.5中新增的属性，和上面刚好相反，用于指明哪些注解是运行时不可见的</td></tr><tr><td>RuntimeVisibleParameterAnnotation</td><td>方法表</td><td>JDK1.5中新增的属性，作用与RuntimeVisibleAnnotations属性类似，只不过作用对象为方法</td></tr><tr><td>AnnotationDefault</td><td>方法表</td><td>JDK1.5中新增的属性，用于记录注解类元素的默认值</td></tr><tr><td>BootstrapMethods</td><td>类文件</td><td>JDK1.7中新增的属性，用于保存invokeddynamic指令引用的引导方式限定符</td></tr></tbody></table><p>对于每个属性，它的名称需要从常量池中应用一个<code>CONSTANT_Utf8_info</code>类型的常量来标书，而属性值的结构则是完全子墩医德，只需要通过一个<code>u4</code>的长度属性去说明属性值做占用的位数即可，其符合规则的结构如下图。</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u1</td><td>infoattribute_length</td><td></td></tr></tbody></table><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol><li><a href="https://juejin.im/post/5aca2c366fb9a028c97a5609" target="_blank" rel="noopener">https://juejin.im/post/5aca2c366fb9a028c97a5609</a></li><li><a href="https://segmentfault.com/a/1190000008722128" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008722128</a></li><li><a href="https://juejin.im/post/5db7e3dcf265da4d40711f7e" target="_blank" rel="noopener">https://juejin.im/post/5db7e3dcf265da4d40711f7e</a></li></ol><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程安全的集合</title>
      <link href="/java-thread-safe-set/"/>
      <url>/java-thread-safe-set/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-线程安全的集合"><a href="#1-线程安全的集合" class="headerlink" title="1 线程安全的集合"></a>1 线程安全的集合</h3><ul><li><p>Vector</p><p>为什么<code>Vecter</code>是线程安全的呢？查看源代码：   </p><p><img alt="Vector源码分析" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200416164922.png" class="lazyload"></p><p>从上面的代码可以看到，每个方法都加上了<code>synchronized</code>关键字，所以它是线程安全的。但是因为它的所有方式都加上了<code>synchronized</code>关键字，那么无论你是否需要对其进行多线程访问时，它都会对其进行锁定，执行效率会很低。现在已经<strong>弃用</strong>。</p></li><li><p>HashTable</p><p><code>HashTable</code>和<code>Vector</code>类似，都是在每个方法上加上<code>synchronized</code>关键字来达到线程安全的目的。我们可以从下面的源代码可以看出：    </p><p><img alt="HashTable源代码分析" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200416165318.png" class="lazyload"></p></li></ul><h3 id="2-java-util-concurrent下的线程安全集合"><a href="#2-java-util-concurrent下的线程安全集合" class="headerlink" title="2 java.util.concurrent下的线程安全集合"></a>2 java.util.concurrent下的线程安全集合</h3><p><code>java.util</code>包下有一个<code>concurrent</code>包，下面的集合都是线程安全的集合，当需要使用线程来操作集合时，就调用该包下面的集合。下面看一段线程不安全的集合代码：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Thread thread1 =<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                list.add(<span class="string">"add"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                list.add(<span class="string">"add"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：   </p><p><img alt="运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200416170347.png" class="lazyload"></p></blockquote><p>线程安全的集合：   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        Thread thread1 =<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                list.add(<span class="string">"add"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                list.add(<span class="string">"add"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：   </p><p><img alt="运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200416170604.png" class="lazyload"></p></blockquote><h3 id="3-使用Collections包装成线程安全"><a href="#3-使用Collections包装成线程安全" class="headerlink" title="3 使用Collections包装成线程安全"></a>3 使用Collections包装成线程安全</h3><ul><li><p>包装列表list</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br></pre></td></tr></table></figure></li><li><p>包装集合set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set = Collections.synchronizedSet(<span class="keyword">new</span> HashSet&lt;&gt;());</span><br></pre></td></tr></table></figure></li><li><p>包装字典map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;&gt;());</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://blog.csdn.net/lixiaobuaa/article/details/79689338" target="_blank" rel="noopener">https://blog.csdn.net/lixiaobuaa/article/details/79689338</a></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是内存泄漏？</title>
      <link href="/memery-leak/"/>
      <url>/memery-leak/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-内存泄漏的定义"><a href="#1-内存泄漏的定义" class="headerlink" title="1 内存泄漏的定义"></a>1 内存泄漏的定义</h3><blockquote><p><strong>内存泄漏</strong>（Memory leak）是在<a href="https://zh.wikipedia.org/wiki/计算机科学" target="_blank" rel="noopener">计算机科学</a>中，由于疏忽或错误造成程序未能释放已经不再使用的<a href="https://zh.wikipedia.org/wiki/内存" target="_blank" rel="noopener">内存</a>。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。</p><p>内存泄漏通常情况下只能由获得程序<a href="https://zh.wikipedia.org/wiki/源代码" target="_blank" rel="noopener">源代码</a>的程序员才能分析出来。</p></blockquote><h3 id="2-内存泄漏导致的后果"><a href="#2-内存泄漏导致的后果" class="headerlink" title="2 内存泄漏导致的后果"></a>2 内存泄漏导致的后果</h3><p>内存泄漏会因为减少可用内存的数量从而降低计算机的性能。最终，在最糟糕的情况下，过多的可用内存被分配掉导致全部或部分设备停止正常工作，或者应用程序崩溃。</p><p>内存泄漏带来的后果可能是不严重的，有时甚至能够被常规的手段检测出来。在现代操作系统中，一个应用程序使用的常规内存在程序终止时被释放。这表示一个短暂运行的应用程序中的内存泄漏不会导致严重后果。</p><p>在以下情况，内存泄漏导致较严重的后果：</p><ul><li>程序运行后置之不理，并且随着时间的流逝消耗越来越多的内存（比如服务器上的后台任务，尤其是<a href="https://zh.wikipedia.org/wiki/嵌入式系统" target="_blank" rel="noopener">嵌入式系统</a>中的后台任务，这些任务可能被运行后很多年内都置之不理）；</li><li>新的内存被频繁地分配，比如当显示电脑游戏或动画视频画面时；</li><li>程序能够请求即使在程序终止之后也不会被释放的内存（比如<a href="https://zh.wikipedia.org/wiki/共享内存" target="_blank" rel="noopener">共享内存</a>）；</li><li>泄漏在操作系统内部发生；</li><li>泄漏在系统关键驱动中发生；</li><li>内存非常有限，比如在<a href="https://zh.wikipedia.org/wiki/嵌入式系统" target="_blank" rel="noopener">嵌入式系统</a>或便携设备中；</li><li>当运行于一个程序终止时内存并不自动释放内存的操作系统（比如<a href="https://zh.wikipedia.org/wiki/AmigaOS" target="_blank" rel="noopener">AmigaOS</a>）之上时。</li></ul><h3 id="3-内存泄漏的案例"><a href="#3-内存泄漏的案例" class="headerlink" title="3 内存泄漏的案例"></a>3 内存泄漏的案例</h3><h4 id="3-1-C语言"><a href="#3-1-C语言" class="headerlink" title="3.1 C语言"></a>3.1 C语言</h4><p>下面是一个C语言的例子，在函数f()中申请了内存却没有释放，导致内存泄漏。当程序不停地重复调用这个有问题的函数f，申请内存函数<code>malloc()</code>最后会在程序没有更多可用存储器可以申请时产生错误（函数输出为NULL）。但是，由于函数<code>malloc()</code>输出的结果没有加以出错处理，因此程序会不停地尝试申请存储器，并且在系统有新的空闲内存时，被该程序占用。注意，<code>malloc()</code>返回NULL的原因<strong>不一定</strong>是因为前述的<strong>没有更多可用存储器可以申请</strong>，也可能是逻辑地址空间耗尽，在<a href="https://zh.wikipedia.org/wiki/Linux" target="_blank" rel="noopener">Linux</a>环境上测试的时候后者更容易发生。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span>* s;</span><br><span class="line">    s = <span class="built_in">malloc</span>(<span class="number">50</span>); <span class="comment">/* 申请内存空间 */</span></span><br><span class="line">    <span class="keyword">return</span>;  <span class="comment">/* 内在泄漏 - 参见以下资料 */</span> </span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * s 指向新分配的堆空间。</span></span><br><span class="line"><span class="comment">     * 当此函数返回，离开局部变量s的作用域后将无法得知s的值，</span></span><br><span class="line"><span class="comment">     * 分配的内存空间不能被释放。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如要「修复」这个问题，必须想办法释放分配的堆空间，</span></span><br><span class="line"><span class="comment">     * 也可以用alloca(3)代替malloc(3)。</span></span><br><span class="line"><span class="comment">     * （注意：alloca(3)既不是ANSI函数也不是POSIX函数）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 该函数是一个死循环函数 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) f(); <span class="comment">/* Malloc函数迟早会由于内存泄漏而返回NULL*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-C"><a href="#3-2-C" class="headerlink" title="3.2 C++"></a>3.2 C++</h4><p>以下例子中，存储了整数123的内存空间不能被删除，因为地址丢失了。这些空间已无法再使用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   <span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">123</span>);</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; *a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="comment">// We should write "delete a;" here</span></span><br><span class="line">   a = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">456</span>);</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; *a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">delete</span> a;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-Java"><a href="#3-3-Java" class="headerlink" title="3.3 Java"></a>3.3 Java</h4><p><code>Java</code>中的内存泄露，广义并通俗的说，就是：不再会被使用的对象的内存不能被回收，就是内存泄露。</p><p><code>Java</code>中的内存泄露与<code>C++</code>中的表现有所不同。</p><p>在<code>C++</code>中，所有被分配了内存的对象，不再使用后，都必须程序员手动的释放他们。所以，每个类，都会含有一个析构函数，作用就是完成清理工作，如果我们忘记了某些对象的释放，就会造成内存泄露。</p><p>但是在Java中，我们不用（也没办法）自己释放内存，无用的对象由<code>GC</code>自动清理，这也极大的简化了我们的编程工作。但，实际有时候一些不再会被使用的对象，在<code>GC</code>看来不能被释放，就会造成内存泄露。</p><p>对象都是有生命周期的，有的长，有的短，<strong><em>\</em>如果长生命周期的对象持有短生命周期的引用，就很可能会出现内存泄露**</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Simple</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    Object object;<span class="comment">//这是类中的属性，也是该类中的一个全局变量</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        object = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">//...其他代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：在<code>method1</code>方法中，给类的属性赋了值，也就是在堆中创建一个对象，并将<code>object</code>指向该对象。但是当<code>method1</code>方法执行完之后，该<code>object</code>对象就不再被使用了。且<code>object</code>对象并没有直接被垃圾回收掉，只有等到<code>Simple</code>类创建的对象被释放之后，<code>object</code>才会被垃圾回收掉，所以这就有可能导致内存泄漏，也就是说：<code>object</code>这块内存地址不受程序控制了。</p><p>安全的写法：   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Simple</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    Object object;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        object = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="comment">//...其他代码</span></span><br><span class="line">        object = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以看到，当在局部方法中使用完全局变量之后，随即将其释放掉，这样<code>java</code>的<code>GC</code>就会将<code>object</code>对象给回收掉。</p><h3 id="4-内存泄漏的影响"><a href="#4-内存泄漏的影响" class="headerlink" title="4 内存泄漏的影响"></a>4 内存泄漏的影响</h3><p>如果一个程序存在内存泄漏并且它的内存使用量稳定增长，通常不会有很快的症状。每个物理系统都有一个较大的内存量，如果内存泄漏没有被中止（比如重启造成泄漏的程序）的话，它迟早会造成问题。</p><p>大多数的现代计算机<a href="https://zh.wikipedia.org/wiki/操作系统" target="_blank" rel="noopener">操作系统</a>都有存储在<a href="https://zh.wikipedia.org/wiki/隨機存取記憶體" target="_blank" rel="noopener">RAM</a>芯片中<a href="https://zh.wikipedia.org/wiki/主内存" target="_blank" rel="noopener">主内存</a>和存储在次级存储设备如<a href="https://zh.wikipedia.org/wiki/硬盘" target="_blank" rel="noopener">硬盘</a>中的<a href="https://zh.wikipedia.org/wiki/虚拟内存" target="_blank" rel="noopener">虚拟内存</a>，内存分配是动态的——每个进程根据要求获得相应的内存。访问活跃的页面文件被转移到主内存以提高访问速度；反之，访问不活跃的页面文件被转移到次级存储设备。当一个简单的进程消耗大量的内存时，它通常占用越来越多的主内存，使其他程序转到次级存储设备，使系统的运行效率大大降低。甚至在有内存泄漏的程序终止后，其他程序需要相当长的时间才能切换到主内存，恢复原来的运行效率。</p><p>当系统所有的内存全部耗完后（包括主内存和虚拟内存，在嵌入式系统中，仅有主内存），所有申请内存的操作将失败。这通常导致程序试图申请内存来终止自己，或造成分段内存访问错误（segmentation fault）。现在有一些专门为修复这种情况而设计的程序，常用的办法是预留一些内存。值得注意的是，第一个遭遇得不到内存问题的程序有时候并不是有内存泄漏的程序。</p><p>一些多任务操作系统有特殊的机制来处理内存耗尽得情况，如随机终止一个进程（可能会终止一些正常的进程），或终止耗用内存最大的进程（很有可能是引起内存泄漏的进程）。另一些操作系统则有内存分配限制，这样可以防止任何一个进程耗用完整个系统的内存。这种设计的缺点是有时候某些进程确实需要较大数量的内存时，如一些处理图像，视频和科学计算的进程，操作系统需要重新配置。</p><p>如内存泄漏发生在<a href="https://zh.wikipedia.org/wiki/内核" target="_blank" rel="noopener">内核</a>，表示操作系统自身发生了问题。那些没有完善的内存管理的计算机，如嵌入式系统，会因为一个长时间的内存泄漏而崩溃。</p><p>一些被公众访问的系统，如<a href="https://zh.wikipedia.org/wiki/网络服务器" target="_blank" rel="noopener">网络服务器</a>或<a href="https://zh.wikipedia.org/wiki/路由器" target="_blank" rel="noopener">路由器</a>很容易被<a href="https://zh.wikipedia.org/wiki/黑客" target="_blank" rel="noopener">黑客</a>攻击，加入一段攻击代码，而产生内存泄漏。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程内部堆内存溢出，并不会导致主线程退出</title>
      <link href="/java-heap-overflow-thread/"/>
      <url>/java-heap-overflow-thread/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-代码"><a href="#1-代码" class="headerlink" title="1 代码"></a>1 代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _8M = <span class="number">8</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">//vm 参数：-Xmx20m  设置堆内存为20M</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_8M]);</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_8M]);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(<span class="number">2000L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：   </p><p><img alt="运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200415153313.png" class="lazyload"></p></blockquote><p>从运行结果可以看出，线程内部的堆内存溢出，并不会导致主线程结束。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM虚拟机参数介绍</title>
      <link href="/jvm-param-info/"/>
      <url>/jvm-param-info/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="JVM参数大全"><a href="#JVM参数大全" class="headerlink" title="JVM参数大全"></a>JVM参数大全</h3><table><thead><tr><th align="left"><strong>参数名称</strong></th><th><strong>含义</strong></th><th><strong>默认值</strong></th><th></th></tr></thead><tbody><tr><td align="left">-Xms</td><td>初始堆大小</td><td>物理内存的1/64(&lt;1GB)</td><td>默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.</td></tr><tr><td align="left">-Xmx</td><td>最大堆大小</td><td>物理内存的1/4(&lt;1GB)</td><td>默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制</td></tr><tr><td align="left">-Xmn</td><td>年轻代大小(1.4or lator)</td><td></td><td><strong>注意</strong>：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。 整个堆大小=年轻代大小 + 年老代大小 + 持久代大小. 增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8</td></tr><tr><td align="left">-XX:NewSize</td><td>设置年轻代大小(for 1.3/1.4)</td><td></td><td></td></tr><tr><td align="left">-XX:MaxNewSize</td><td>年轻代最大值(for 1.3/1.4)</td><td></td><td></td></tr><tr><td align="left">-XX:PermSize</td><td>设置持久代(perm gen)初始值</td><td>物理内存的1/64</td><td></td></tr><tr><td align="left">-XX:MaxPermSize</td><td>设置持久代最大值</td><td>物理内存的1/4</td><td></td></tr><tr><td align="left">-Xss</td><td>每个线程的堆栈大小</td><td></td><td>JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.更具应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右 一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。（校长） 和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:”” -Xss is translated in a VM flag named ThreadStackSize” 一般设置这个值就可以了。</td></tr><tr><td align="left">-<em>XX:ThreadStackSize</em></td><td>Thread Stack Size</td><td></td><td>(0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.]</td></tr><tr><td align="left">-XX:NewRatio</td><td>年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</td><td></td><td>-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5 Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。</td></tr><tr><td align="left">-XX:SurvivorRatio</td><td>Eden区与Survivor区的大小比值</td><td></td><td>设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10</td></tr><tr><td align="left">-XX:LargePageSizeInBytes</td><td>内存页的大小不可设置过大， 会影响Perm的大小</td><td></td><td>=128m</td></tr><tr><td align="left">-XX:+UseFastAccessorMethods</td><td>原始类型的快速优化</td><td></td><td></td></tr><tr><td align="left">-XX:+DisableExplicitGC</td><td>关闭System.gc()</td><td></td><td>这个参数需要严格的测试</td></tr><tr><td align="left">-XX:MaxTenuringThreshold</td><td>垃圾最大年龄</td><td></td><td>如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率 该参数只有在串行GC时才有效.</td></tr><tr><td align="left">-XX:+AggressiveOpts</td><td>加快编译</td><td></td><td></td></tr><tr><td align="left">-XX:+UseBiasedLocking</td><td>锁机制的性能改善</td><td></td><td></td></tr><tr><td align="left">-Xnoclassgc</td><td>禁用垃圾回收</td><td></td><td></td></tr><tr><td align="left">-XX:SoftRefLRUPolicyMSPerMB</td><td>每兆堆空闲空间中SoftReference的存活时间</td><td>1s</td><td>softly reachable objects will remain alive for some amount of time after the last time they were referenced. The default value is one second of lifetime per free megabyte in the heap</td></tr><tr><td align="left">-XX:PretenureSizeThreshold</td><td>对象超过多大是直接在旧生代分配</td><td>0</td><td>单位字节 新生代采用Parallel Scavenge GC时无效 另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.</td></tr><tr><td align="left">-XX:TLABWasteTargetPercent</td><td>TLAB占eden区的百分比</td><td>1%</td><td></td></tr><tr><td align="left">-XX:+<em>CollectGen0First</em></td><td>FullGC时是否先YGC</td><td>false</td><td></td></tr></tbody></table><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="http://www.51gjie.com/java/551.html" target="_blank" rel="noopener">http://www.51gjie.com/java/551.html</a></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法介绍</title>
      <link href="/markdown-grammer/"/>
      <url>/markdown-grammer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1 标题"></a>1 标题</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 这是一级标题</span></span><br><span class="line"><span class="section">## 这是二级标题</span></span><br><span class="line"><span class="section">### 这是三级标题</span></span><br><span class="line"><span class="section">#### 这是四级标题</span></span><br><span class="line"><span class="section">##### 这是五级标题</span></span><br><span class="line"><span class="section">###### 这是六级标题</span></span><br></pre></td></tr></table></figure><hr><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h3 id="2-字体"><a href="#2-字体" class="headerlink" title="2 字体"></a>2 字体</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**这是加粗的文字**</span></span><br><span class="line"><span class="emphasis">*这是倾斜的文字*</span>`</span><br><span class="line"><span class="strong">***这是斜体加粗的文字**</span>*</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><hr><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h3 id="3-引用"><a href="#3-引用" class="headerlink" title="3 引用"></a>3 引用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><hr><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h3 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4 分割线"></a>4 分割线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"><span class="strong">*****</span></span><br></pre></td></tr></table></figure><hr><hr><hr><hr><h3 id="5-图片"><a href="#5-图片" class="headerlink" title="5 图片"></a>5 图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片alt</span>](<span class="link">图片地址 ''图片title''</span>)</span><br><span class="line">实例：</span><br><span class="line">![<span class="string">微信公众号</span>](<span class="link">https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg</span>)</span><br></pre></td></tr></table></figure><p><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p><h3 id="6-超链接"><a href="#6-超链接" class="headerlink" title="6 超链接"></a>6 超链接</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">显示的名字</span>](<span class="link">链接地址</span>)</span><br><span class="line">举例：</span><br><span class="line">[<span class="string">我的博客</span>](<span class="link">https://jums.club</span>)</span><br><span class="line">[<span class="string">我的github</span>](<span class="link">https://github.com/crazyjums</span>)</span><br></pre></td></tr></table></figure><hr><p><a href="https://jums.club">我的博客</a>     </p><p><a href="https://github.com/crazyjums" target="_blank" rel="noopener">我的github</a></p><h3 id="7-列表"><a href="#7-列表" class="headerlink" title="7 列表"></a>7 列表</h3><h4 id="7-1-无序列表"><a href="#7-1-无序列表" class="headerlink" title="7.1 无序列表"></a>7.1 无序列表</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>列表内容</span><br><span class="line"><span class="bullet">  - </span>这是二级列表</span><br><span class="line"><span class="bullet">  - </span>这是三级列表</span><br><span class="line"><span class="bullet">+ </span>列表内容</span><br><span class="line"><span class="bullet">* </span>列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><hr><ul><li>列表内容<ul><li>这是二级列表<ul><li>这是三级列表</li></ul></li></ul></li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h4 id="7-2-有序列表"><a href="#7-2-有序列表" class="headerlink" title="7.2 有序列表"></a>7.2 有序列表</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>列表内容</span><br><span class="line"><span class="bullet">1. </span>这是二级有序列表</span><br><span class="line"><span class="bullet">2. </span>列表内容</span><br><span class="line"><span class="bullet">3. </span>列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><ol><li>列表内容<ol><li>这是二级有序列表</li></ol></li><li>列表内容</li><li>列表内容</li></ol><h3 id="8表格"><a href="#8表格" class="headerlink" title="8表格"></a>8表格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line"><span class="bullet">- </span>有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th align="center">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr></tbody></table><h3 id="9-代码"><a href="#9-代码" class="headerlink" title="9 代码"></a>9 代码</h3><h4 id="9-1-单行代码"><a href="#9-1-单行代码" class="headerlink" title="9.1 单行代码"></a>9.1 单行代码</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`这是单行代码`</span>  用两个反引号包起来</span><br></pre></td></tr></table></figure><p><code>这是单行代码</code></p><h4 id="9-2-多行代码"><a href="#9-2-多行代码" class="headerlink" title="9.2 多行代码"></a>9.2 多行代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入字符串，输入exit结束："</span>);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            <span class="keyword">switch</span> (s)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"exit"</span>: <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"abc"</span>:</span><br><span class="line">                    System.out.println(s);</span><br><span class="line">                    System.out.print(<span class="string">"请输入字符串，输入exit结束："</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: System.out.println(<span class="string">"over"</span>);<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-流程图"><a href="#10-流程图" class="headerlink" title="10 流程图"></a>10 流程图</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"flowchart-0"</span> <span class="attr">class</span>=<span class="string">"flow-chart"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div id="flowchart-1" class="flow-chart"></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 11 选择框</span><br><span class="line"></span><br><span class="line">```markdown</span><br><span class="line">- [x] 选择1，已经选中</span><br><span class="line">- [ ] 选择2，没有选中   #[ ]中间要有一个空格</span><br></pre></td></tr></table></figure><ul><li><input checked disabled type="checkbox"> 选择1，已经选中</li><li><input disabled type="checkbox"> 选择2，没有选中</li></ul><h3 id="12-数学公式"><a href="#12-数学公式" class="headerlink" title="12 数学公式"></a>12 数学公式</h3><p><a href="https://juejin.im/post/5a6721bd518825733201c4a2" target="_blank" rel="noopener">参考</a>   </p><p><a href="https://www.zybuluo.com/codeep/note/163962" target="_blank" rel="noopener">cmdMarkdown数学语法介绍</a>   </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">行中数学公式：</span><br><span class="line">$ 数学公式 $</span><br><span class="line">独立数学系公式：</span><br><span class="line">$$ 数学公式 $$</span><br></pre></td></tr></table></figure><ul><li><p>行中数学公式：</p><p>这是行中数学公式：$ J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，行内公式示例} $</p></li><li><p>独立数学公式：</p><p>这是独立数学公式，单独换行：</p><p>$$ J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，独立公式示例} $$</p></li></ul><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始op=>operation: My Operationcond=>condition: Yes or No?e=>endst->op->condcond(yes)->econd(no)->op&</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 开始op=>operation: My Operationcond=>condition: Yes or No?e=>endst->op->condcond(yes)->econd(no)->op&</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script></p>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java垃圾回收算法介绍</title>
      <link href="/java-gc/"/>
      <url>/java-gc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-垃圾回收算法"><a href="#1-垃圾回收算法" class="headerlink" title="1 垃圾回收算法"></a>1 垃圾回收算法</h3><ol><li><p>标记算法</p><blockquote><p><img alt="介绍" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414214951.png" class="lazyload"></p><p>该算法分成两步完成：   </p><ol><li>在<code>java</code>程序运行过程中，当有些对应没有被<code>gc root</code>所引用时，那么该对象就会被标记。</li><li>当标记完之后，那些被标记的对应，就会被清除掉，也就是释放内存。释放之后，会那段内存的起始位置加入到内存的空内存地址库。当再有新对象被创建时，首先会查找地址库中的内存块是否有符合条件（内存大小是否够用）的，如果有，就将其分配给新对象，否则就另外开辟一段。 </li></ol></blockquote></li></ol><ul><li><p>优点：</p><ul><li><p>清理速度很快</p><blockquote><p>只需要将被标记的对象的起始地址记录下来，就可以完成清理工作，所以速度很快</p></blockquote></li></ul></li><li><p>缺点：</p><ul><li><p>容易产生内存碎片</p><blockquote><p>从上图中可以看到，由于很多被释放掉的对象都是穿插着的，所以很难有一块完整的空内存，有时候总的空内存是足够分配给一块新的需要大内存的对象的，但是由于非常零碎，所以没办法利用。</p></blockquote></li></ul></li></ul><ol start="2"><li><p>标记整理</p><blockquote><p><img alt="标记整理" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414220020.png" class="lazyload"></p><p>该算法还是分两步：</p><ol><li>首先第一步和标记算法一样，都是先给没有被<code>gc root</code>引用的对象进行标记</li><li>这一步，该算法做了一个整理的操作：也就是将一些还在被<code>gc root</code>引用的对象向前移动，这里的移动包括数据，以及一些引用的地址，都需要做修改，所以这一步需要消耗一定的时间。相对于标记算法而言，速度较慢</li></ol></blockquote><ul><li><p>优点：</p><ul><li>能够有效利用被释放的空间，相对于标记算法，不会再产生内存碎片了</li></ul></li><li><p>缺点：</p><ul><li>速度没有标记算法快，较慢</li></ul></li></ul></li><li><p>复制</p><blockquote><p><img alt="复制算法" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414220724.png" class="lazyload"></p><p>该算法有两个区域，一个是<code>FROM</code>区域，另一个是<code>TO</code>区域，该算法执行分成三步：</p><ol><li><p>先标记处没有被<code>gc root</code>引用的对象</p></li><li><p>然后将<code>FROM</code>被标记的对象释放掉，在将没有被释放掉的对象复制一份到<code>TO</code>区域中</p><p>复制完成之后：   </p><p><img alt="复制完成之后" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414221427.png" class="lazyload"></p></li><li><p>然后在交换<code>FROM</code>和<code>TO</code>的位置，这样<code>TO</code>就又变成了一个空的内存空间</p><p>交换完以后：    </p><p><img alt="交换完之后" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414221535.png" class="lazyload"></p></li></ol></blockquote><ul><li>优点：<ul><li>不会产生内存碎片</li></ul></li><li>缺点：<ul><li>需要占用两块内存空间，所需要的内存空间较大</li></ul></li></ul></li></ol><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础知识介绍</title>
      <link href="/java-basic/"/>
      <url>/java-basic/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-打印信息"><a href="#1-打印信息" class="headerlink" title="1 打印信息"></a>1 打印信息</h3><p>打印信息，在<code>System.out</code>下面，主要有：</p><ul><li>print：标准输出，但是不会换行</li><li>printf：可以使用类似C语言中的语法，进行格式化输出，即：<code>printf(&quot;%s&quot;, prama)</code>，<code>printf</code>也不会换行</li><li>println：输出完之后，会自动换行</li></ul><p><img alt="printf用法" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414205625.png" class="lazyload"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.printf(<span class="string">"%s"</span>, <span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"hello world."</span>);</span><br><span class="line">        System.out.print(<span class="string">"hello world."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：   </p><p><img alt="输出结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414205851.png" class="lazyload"></p></blockquote><h3 id="2-循环控制结构"><a href="#2-循环控制结构" class="headerlink" title="2 循环控制结构"></a>2 循环控制结构</h3><h4 id="2-1-for循环"><a href="#2-1-for循环" class="headerlink" title="2.1 for循环"></a>2.1 for循环</h4><ul><li>方式1:<code>for(int i=0;i&lt;length;i++)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"b"</span>);</span><br><span class="line">        list.add(<span class="string">"v"</span>);</span><br><span class="line">        list.add(<span class="string">"f"</span>);</span><br><span class="line">        list.add(<span class="string">"r"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方式2:<code>for(Object object : iterators)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"b"</span>);</span><br><span class="line">        list.add(<span class="string">"v"</span>);</span><br><span class="line">        list.add(<span class="string">"f"</span>);</span><br><span class="line">        list.add(<span class="string">"r"</span>);</span><br><span class="line">        <span class="keyword">for</span>(String string : list)&#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方式3:<code>list.forEach(temp-&gt;{  ... })</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"b"</span>);</span><br><span class="line">        list.add(<span class="string">"v"</span>);</span><br><span class="line">        list.add(<span class="string">"f"</span>);</span><br><span class="line">        list.add(<span class="string">"r"</span>);</span><br><span class="line">        list.forEach(temp-&gt;&#123;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：    </p><p><img alt="输出结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414210228.png" class="lazyload"></p></blockquote><h4 id="2-2-while循环"><a href="#2-2-while循环" class="headerlink" title="2.2 while循环"></a>2.2 while循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"b"</span>);</span><br><span class="line">        list.add(<span class="string">"v"</span>);</span><br><span class="line">        list.add(<span class="string">"f"</span>);</span><br><span class="line">        list.add(<span class="string">"r"</span>);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; list.size())&#123;</span><br><span class="line">            System.out.println(list.get(index));</span><br><span class="line">            index += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-do…while循环"><a href="#2-3-do…while循环" class="headerlink" title="2.3 do…while循环"></a>2.3 do…while循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"b"</span>);</span><br><span class="line">        list.add(<span class="string">"v"</span>);</span><br><span class="line">        list.add(<span class="string">"f"</span>);</span><br><span class="line">        list.add(<span class="string">"r"</span>);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(list.get(index));</span><br><span class="line">            index += <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span>(index &lt; list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while和do…while的区别：</p><ul><li>do…while循环至少循环一次</li><li>while循环可以一次都不循环</li></ul><h3 id="3-if…else"><a href="#3-if…else" class="headerlink" title="3 if…else"></a>3 if…else</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"a is "</span> + a);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"a is "</span> + a);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"a is not 1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-获取用户输入"><a href="#4-获取用户输入" class="headerlink" title="4 获取用户输入"></a>4 获取用户输入</h3><p>在<code>java</code>中获取用户输入，通常情况下，使用<code>java.util.Scanner</code>类。<code>Scanner</code>具有以下的一些方法：   </p><ul><li>hasNext():判断是否有字符换输入</li><li>hasNextxxx():判断是否有与<code>xxx</code>对应的数据类型输入</li></ul><h4 id="4-1-如下面的代码（这里以输入int型整数为例）："><a href="#4-1-如下面的代码（这里以输入int型整数为例）：" class="headerlink" title="4.1 如下面的代码（这里以输入int型整数为例）："></a>4.1 如下面的代码（这里以输入<code>int</code>型整数为例）：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入整数，以非整数结束："</span>);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextInt())&#123;</span><br><span class="line">            <span class="keyword">int</span> s = scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">"Your input:"</span> + s);</span><br><span class="line">            System.out.print(<span class="string">"请输入整数，以非整数结束："</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结束条件：当输入的数据与<code>hasNextxxx()</code>中的<code>xxx</code>不相符时，退出。</p><blockquote><p>运行结果：   </p><p><img alt="输入整数" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414212226.png" class="lazyload"></p></blockquote><h4 id="4-2-hasNext-输入任何字符"><a href="#4-2-hasNext-输入任何字符" class="headerlink" title="4.2 hasNext()输入任何字符"></a>4.2 hasNext()输入任何字符</h4><ul><li><p><code>next()</code></p><ul><li>一定要读取到有效字符后才可以结束输入。</li><li>一定要读取到有效字符后才可以结束输入。</li><li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li>next() 不能得到带有空格的字符串。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入字符串，输入exit结束："</span>);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String s = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"exit"</span>.equals(s))&#123;</span><br><span class="line">                System.out.println(<span class="string">"over"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"Your input:"</span> + s);</span><br><span class="line">            System.out.print(<span class="string">"请输入字符串，输入exit结束："</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：   </p><p><img alt="输出结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414213229.png" class="lazyload"></p></blockquote></li><li><p><code>nextLine()</code></p><ul><li>以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li><li>可以获得空白。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入字符串，输入exit结束："</span>);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"exit"</span>.equals(s))&#123;</span><br><span class="line">                System.out.println(<span class="string">"over"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"Your input:"</span> + s);</span><br><span class="line">            System.out.print(<span class="string">"请输入字符串，输入exit结束："</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>结束条件：自己制定，在<code>while</code>循环中做判断。</p><h3 id="5-switch…case"><a href="#5-switch…case" class="headerlink" title="5 switch…case"></a>5 switch…case</h3><p>这是一个选择结构，类似<code>if</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入字符串，输入exit结束："</span>);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            <span class="keyword">switch</span> (s)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"exit"</span>: <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"abc"</span>:</span><br><span class="line">                    System.out.println(s);</span><br><span class="line">                    System.out.print(<span class="string">"请输入字符串，输入exit结束："</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: System.out.println(<span class="string">"over"</span>);<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：</p><p><img alt="运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414213906.png" class="lazyload"></p></blockquote><h3 id="6-数组"><a href="#6-数组" class="headerlink" title="6 数组"></a>6 数组</h3><h4 id="6-1-定义数组"><a href="#6-1-定义数组" class="headerlink" title="6.1 定义数组"></a>6.1 定义数组</h4><ol><li>字符串数组:<code>String[] strings = new String[5];   //[]中指定数组的大小</code>，默认值是<code>null</code></li><li>字节数组:<code>byte[] bytes = new byte[5];</code>，默认值是<code>0</code></li><li>字符数组:<code>char[] chars = new char[5];</code>，默认值是<code>\u0000</code></li><li>整数数组:<code>int[] ints = new int[5];</code>，默认值是<code>0</code></li><li>浮点数数组:<ol><li><code>double[] doubles = new double[5];</code>，默认值是<code>0.0d</code></li><li><code>float[] floats = new float[5];</code>，默认值是<code>0.0f</code></li></ol></li></ol><h4 id="6-2-给数组赋值"><a href="#6-2-给数组赋值" class="headerlink" title="6.2 给数组赋值"></a>6.2 给数组赋值</h4><p>数组的赋值都是给指定下标进行赋值，这里以<code>strings</code>为例：   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] strings = <span class="keyword">new</span> String[<span class="number">5</span>];  <span class="comment">//[]中指定数组的大小</span></span><br><span class="line">        strings[<span class="number">1</span>] = <span class="string">"dddfd"</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strings.length;i++)&#123;</span><br><span class="line">            System.out.println(strings[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：    </p><p><img alt="运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200415133044.png" class="lazyload"></p></blockquote><h3 id="7-线程"><a href="#7-线程" class="headerlink" title="7 线程"></a>7 线程</h3><h4 id="7-1-通过实现Runable接口，来创建线程"><a href="#7-1-通过实现Runable接口，来创建线程" class="headerlink" title="7.1 通过实现Runable接口，来创建线程"></a>7.1 通过实现Runable接口，来创建线程</h4><p>RunableDemo.java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunableDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RunableDemo</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前线程："</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"第"</span> + i + <span class="string">"次运行。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (thread == <span class="keyword">null</span>)&#123;</span><br><span class="line">            thread = <span class="keyword">new</span> Thread(<span class="keyword">this</span>, name);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        RunableDemo runableDemo = <span class="keyword">new</span> RunableDemo(<span class="string">"我是runuable线程"</span>);</span><br><span class="line">        runableDemo.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：   </p><p><img alt="运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200415164028.png" class="lazyload"></p></blockquote><h4 id="7-2通过集成Thread类，来创建线程"><a href="#7-2通过集成Thread类，来创建线程" class="headerlink" title="7.2通过集成Thread类，来创建线程"></a>7.2通过集成Thread类，来创建线程</h4><p>ThreadDemo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前线程-&gt;"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"第"</span> + i + <span class="string">"次运行。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.thread == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.thread = <span class="keyword">new</span> Thread(<span class="keyword">this</span>,<span class="keyword">this</span>.name);</span><br><span class="line">            <span class="keyword">this</span>.thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadDemo</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDemo threadDemo = <span class="keyword">new</span> ThreadDemo(<span class="string">"我是ThreadDemo线程"</span>);</span><br><span class="line">        threadDemo.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：   </p><p><img alt="运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200415164711.png" class="lazyload"></p></blockquote><h4 id="7-3-使用Thread匿名调用"><a href="#7-3-使用Thread匿名调用" class="headerlink" title="7.3 使用Thread匿名调用"></a>7.3 使用Thread匿名调用</h4><p>直接看代码：   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"第"</span> + i + <span class="string">"次运行。"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：   </p><p><img alt="运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200415165001.png" class="lazyload"></p></blockquote><h4 id="7-4-通过Callable来创建线程"><a href="#7-4-通过Callable来创建线程" class="headerlink" title="7.4 通过Callable来创建线程"></a>7.4 通过Callable来创建线程</h4><ul><li>方式1：通过<code>ExecutorService</code>执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableDemo</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是callable线程--&gt;"</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CallableDemo callableDemo = <span class="keyword">new</span> CallableDemo();</span><br><span class="line">        <span class="comment">//定义一个线程池，有三个线程</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        Future&lt;Integer&gt; res1 = service.submit(callableDemo);</span><br><span class="line">        Future&lt;Integer&gt; res2 = service.submit(callableDemo);</span><br><span class="line">        Future&lt;Integer&gt; res3 = service.submit(callableDemo);</span><br><span class="line">        System.out.println(res1);</span><br><span class="line">        System.out.println(res2);</span><br><span class="line">        System.out.println(res3);</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：   </p><p><img alt="运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200416132338.png" class="lazyload"></p></blockquote><ul><li>方式：通过<code>FutureTask</code>执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableDemo</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是callable线程--&gt;"</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CallableDemo callableDemo = <span class="keyword">new</span> CallableDemo();</span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(callableDemo);</span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：   </p><p><img alt="运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200416132318.png" class="lazyload"></p></blockquote><h4 id="7-5-线程同步"><a href="#7-5-线程同步" class="headerlink" title="7.5 线程同步"></a>7.5 线程同步</h4><p>当我们在使用多线程访问同一个资源并需要对其进行增删改时，如果某一时刻，有多个线程同时对该资源进行了修改，那么就会导致该资源的数据紊乱。那么解决办法就是，当某一个线程该资源时，就将该资源锁住，其他线程只有等待该线程执行完毕之后，才能对该线程进行修改。</p><p>先看一种线程不安全的同步代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            buy();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticketNum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"--&gt;"</span> + ticketNum--);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"aaa"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"bbb"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"ccc"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：   </p><p><img alt="运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200415213440.png" class="lazyload"></p><p>从图中我们可以到，有两个线程同时获得了第10张票，现实中是不存在这种情况的。</p></blockquote><ol><li>synchronized</li></ol><blockquote><p>被synchronized修饰符修饰的变量或者方法，在同一时刻，只能被一个线程访问。使用<code>synchronized</code>修饰符将需要同步的资源“锁”起来，这样就可以避免多个线程同时竞争了。</p></blockquote><ul><li>写法1：给修改同步资源的方法加上<code>synchronized</code>修饰符。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            buy();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticketNum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"--&gt;"</span> + ticketNum--);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"aaa"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"bbb"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"ccc"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>写法2：将需要锁住的资源用<code>()</code>括起来，<code>()</code>中必须是一个对象，基本数据类型需要使用装饰类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer ticketNum = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ticketNum)&#123; <span class="comment">//synchronized锁住的是一个对象，需要使用装饰类</span></span><br><span class="line">            <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">                buy();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticketNum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"--&gt;"</span> + ticketNum--);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ticketNum)&#123;</span><br><span class="line">            Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">            <span class="keyword">new</span> Thread(ticket,<span class="string">"aaa"</span>).start();</span><br><span class="line">            <span class="keyword">new</span> Thread(ticket,<span class="string">"bbb"</span>).start();</span><br><span class="line">            <span class="keyword">new</span> Thread(ticket,<span class="string">"ccc"</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Lock锁</li></ol><blockquote><p>使用该锁，可以对需要同步的对象进行手动加锁，然后关锁。<code>synchronized</code>不能显式的指定加锁的位置，使用<code>Lock</code>可以手动给对象加锁。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer ticketNum = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            buy();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"--&gt;"</span> + ticketNum--);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ticketNum) &#123;</span><br><span class="line">            Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">            <span class="keyword">new</span> Thread(ticket, <span class="string">"aaa"</span>).start();</span><br><span class="line">            <span class="keyword">new</span> Thread(ticket, <span class="string">"bbb"</span>).start();</span><br><span class="line">            <span class="keyword">new</span> Thread(ticket, <span class="string">"ccc"</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-6-线程间协程"><a href="#7-6-线程间协程" class="headerlink" title="7.6 线程间协程"></a>7.6 线程间协程</h4><p>消费者和生产者问题：当消费者需要消费某一个产品时，必须先由生产者生产出来，才能消费，否则就只能等待生产者生产。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerCosumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cache cache = <span class="keyword">new</span> Cache();</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer(cache);</span><br><span class="line">        Cosumer cosumer = <span class="keyword">new</span> Cosumer(cache);</span><br><span class="line">        <span class="keyword">new</span> Thread(producer).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(cosumer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Cache cache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            cache.producing(<span class="keyword">new</span> Prodcut(i));</span><br><span class="line">            System.out.println(<span class="string">"生产了"</span> + i + <span class="string">"号产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cosumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Cache cache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cosumer</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Prodcut prodcut = cache.cosuming();</span><br><span class="line">            System.out.println(<span class="string">"消费了"</span> + prodcut.id + <span class="string">"号产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prodcut</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Prodcut</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cache</span></span>&#123;</span><br><span class="line">    Prodcut[]  prodcuts = <span class="keyword">new</span> Prodcut[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">producing</span><span class="params">(Prodcut prodcut)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == prodcuts.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        prodcuts[count] = prodcut;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Prodcut <span class="title">cosuming</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        Prodcut prodcut = prodcuts[count];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> prodcut;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：    </p><p><img alt="运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200416135000.png" class="lazyload"></p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM中的直接内存</title>
      <link href="/jvm-of-direct-memery/"/>
      <url>/jvm-of-direct-memery/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><blockquote><p><img alt="JVM内存结构图" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200415135013.png" class="lazyload">   </p><p>直接内存并不属于JVM的内存结构，它是物理机的内存，但是JVM虚拟机可以调用该部分内存。</p></blockquote><p>直接内存的使用：</p><ul><li>常见于<code>NIO</code>，用于数据缓冲区</li><li>分配回收的代价较高，但是速度很快</li><li>不收<code>JVM</code>内存回收管理</li></ul><h3 id="2-正常IO读取"><a href="#2-正常IO读取" class="headerlink" title="2 正常IO读取"></a>2 正常IO读取</h3><p><img alt="正常IO读取结构图" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200415135733.png" class="lazyload"></p><p>从上图的结构图中，我们可以看到，当<code>java</code>程序需要读取文件时，首先会在java堆内存中<code>new</code>一个缓冲区，然后系统内存从磁盘中读取文件，再然后在将系统缓冲区中的字节流复制到java堆内存的缓冲区中，然后在由java程序调用。    </p><p>这样做有一个缺点，就是需要开启两块内存，效率会很低。</p><h3 id="3-直接内存读取"><a href="#3-直接内存读取" class="headerlink" title="3 直接内存读取"></a>3 直接内存读取</h3><p><img alt="直接内存结构图" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200415135919.png" class="lazyload">   </p><p>从图中可以看到，当java程序使用直接内存时，首先java程序在系统内存中分配一块直接内存块，这一内存块是系统内存和java堆内存可以共享的，那么系统内存读取到的磁盘文件就可以直接由java堆内存使用，这样就省去了复制的操作，大大节约了时间开销。</p><h3 id="4-直接内存分配内存"><a href="#4-直接内存分配内存" class="headerlink" title="4 直接内存分配内存"></a>4 直接内存分配内存</h3><p>通过<code>java</code>中的<code>unsafe</code>对象分配一块直接内存，直接内存大小在分配时指定。直接内存由于不受<code>JVM</code>的管理，所以直接内存的释放，必须主动调用<code>unsafe</code>对象进行释放，才能将直接内存释放。</p><p>这是<code>ByteBuffer</code>的分配直接内存的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">DirectByteBuffer(<span class="keyword">int</span> cap) &#123;                   <span class="comment">// package-private</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>(-<span class="number">1</span>, <span class="number">0</span>, cap, cap);</span><br><span class="line">        <span class="keyword">boolean</span> pa = VM.isDirectMemoryPageAligned();</span><br><span class="line">        <span class="keyword">int</span> ps = Bits.pageSize();</span><br><span class="line">        <span class="keyword">long</span> size = Math.max(<span class="number">1L</span>, (<span class="keyword">long</span>)cap + (pa ? ps : <span class="number">0</span>));</span><br><span class="line">        Bits.reserveMemory(size, cap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> base = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            base = unsafe.allocateMemory(size); <span class="comment">//分配直接内存</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span><br><span class="line">            Bits.unreserveMemory(size, cap);</span><br><span class="line">            <span class="keyword">throw</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        unsafe.setMemory(base, size, (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (pa &amp;&amp; (base % ps != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">// Round up to page boundary</span></span><br><span class="line">            address = base + ps - (base &amp; (ps - <span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            address = base;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    cleaner对象用来释放直接内存，cleaner对象关联了当前的ByteBuffer对象，因为ByteBuffer对象是受java虚拟机管理的，直接内存不受java虚拟机管理，所以这里的关联，就是为了在当ByteBuffer被释放的时候，直接内存也被释放，只不过是被unsafe对象释放的，并不是Java虚拟机释放的。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        cleaner = Cleaner.create(<span class="keyword">this</span>, <span class="keyword">new</span> Deallocator(base, size, cap));<span class="comment">//释放直接内存</span></span><br><span class="line">        att = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>cleaner = Cleaner.create(this, new Deallocator(base, size, cap));//释放直接内存</code><br><strong>解释：这里使用cleaner对象用来释放直接内存，cleaner对象关联了当前的ByteBuffer对象，因为ByteBuffer对象是受java虚拟机管理的，直接内存不受java虚拟机管理，所以这里的关联，就是为了在当ByteBuffer被释放的时候，直接内存也被释放，只不过是被unsafe对象释放的，并不是Java虚拟机释放的。</strong>        </p><p>cleaner对象是一个<a href="https://jums.club/jvm-reference/#4-虚引用-PhantomReference">虚引用</a>对象。</p><p>Deallocator类源码：   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Deallocator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> address;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> size;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Deallocator</span><span class="params">(<span class="keyword">long</span> address, <span class="keyword">long</span> size, <span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> (address != <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">this</span>.address = address;</span><br><span class="line">            <span class="keyword">this</span>.size = size;</span><br><span class="line">            <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (address == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// Paranoia</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            unsafe.freeMemory(address);<span class="comment">//主动释放直接内存</span></span><br><span class="line">            address = <span class="number">0</span>;</span><br><span class="line">            Bits.unreserveMemory(size, capacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-直接内存回收"><a href="#5-直接内存回收" class="headerlink" title="5 直接内存回收"></a>5 直接内存回收</h3><p>从第4节我们可以看到，直接内存的会随着<code>ByteBuffer</code>对象的被回收，然后触发<code>cleaner</code>对象，调用<code>Unsafe</code>对象将直接内存回收，看起来也像是一种自动回收的方法。   </p><p>但是，由于<code>ByteBuffer</code>对象的回收，是遵循<code>JVM</code>回收机制的，也就是说，得达到一定的回收条件才会回收<code>ByteBuffer</code>对象。那么直接内存也不会被回收，这样就会导致内存不足。所以建议使用手动调用<code>Unsafe</code>的方法释放直接内存。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora使用快捷键</title>
      <link href="/typra-usage/"/>
      <url>/typra-usage/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h3><p><a href="https://typora.io/#windows" target="_blank" rel="noopener">下载链接</a></p><h3 id="2-快捷键"><a href="#2-快捷键" class="headerlink" title="2 快捷键"></a>2 快捷键</h3><ol><li><p>加粗： Ctrl + B</p></li><li><p>斜体：Ctrl + I</p></li><li><p>下划线：Ctrl + U</p></li><li><p>代码：Ctrl + Shift + `</p></li><li><p>删除线：Alt + Shift + 5</p></li><li><p>超链接：Ctrl + K</p></li><li><p>图片：Ctrl + Shift + I</p></li><li><p>标题：Ctrl + 数字 （代表生成几级标题）</p></li><li><p>引用： Ctrl + Shift + Q</p></li><li><p>无序列表： * + 空格 （需另起一行）</p></li><li><p>有序列表：</p></li><li><p>分割线： 三个 -</p></li><li><p>回到顶端：Ctrl + Home</p></li><li><p>回到底部：Ctrl + End</p></li></ol><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM的内存结构简介</title>
      <link href="/jvm-info/"/>
      <url>/jvm-info/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-JVM结构图"><a href="#1-JVM结构图" class="headerlink" title="1 JVM结构图"></a>1 JVM结构图</h3><p><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/331425-20160623115840235-1252768148.png" class="lazyload">   </p><p><img alt="JVM内存结构" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200415135013.png" class="lazyload"></p><p><img alt="具体结构图" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png" class="lazyload"></p><h3 id="2-栈内存"><a href="#2-栈内存" class="headerlink" title="2 栈内存"></a>2 栈内存</h3><blockquote><p>栈内存是由编译器自动分配的内存。栈内存在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配。当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。</p></blockquote><ol><li><p>每个<code>java</code>程序线程运行时，JVM都会给该java线程分配一个java栈，不同的java线程，会拥有不同的java栈。所以，栈是线程私有的，不同的线程之间中的栈的数据是不能共享的。   </p></li><li><p>栈中存放的数据包括：当前线程声明的基本数据变量，对象的引用变量等。如：<code>int a = 0;</code>，在例子中，变量名<code>a</code>就存放在栈中，数值<code>0</code>存放在常量池中。   </p></li></ol><p>栈内存溢出的情况：在java程序中，栈内存溢出，主要出现在递归程序中，如果递归结束的条件设置错误，那么就容易造成栈内存溢出。如下面这段代码：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JvmTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(i++);</span><br><span class="line">a();   <span class="comment">//递归调用本身，但是没有设置退出递归的条件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">JvmTest j = <span class="keyword">new</span> JvmTest();</span><br><span class="line">j.a();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面的代码所示，<code>a()</code>调用本身，然而并没有退出递归，所以知道栈内存空间沾满，程序抛出异常，结束。如下面的错误：   </p><p><img alt="栈内存溢出" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414155411.png" class="lazyload">   </p><p>设置栈内存的大小   </p><ul><li>-Xss128k：在IDEA中，设置栈内存大小为128k，<strong>注意：字母和数字之间没有空格</strong></li></ul><h3 id="3-堆内存"><a href="#3-堆内存" class="headerlink" title="3 堆内存"></a>3 堆内存</h3><blockquote><p>堆内存是由程序员分配的内存。堆内存是区别于栈区、全局数据区和代码区的另一个内存区域。堆允许程序在运行时动态地申请某个大小的内存空间。</p></blockquote><p><code>java</code>中，堆内存中存放的程序员自己创建的数据，而栈内存中存放的是程序运行时，由编译器自动分配的内存。一般可以认为<code>new Object()</code>出来的对象，都会存放在堆内存中。所以一般情况下，对内存和物理机的内存差不多，但是也如果程序设计不当，也会出现堆内存溢出的情况，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _10M = <span class="number">1014</span> * <span class="number">1024</span> * <span class="number">10</span>;<span class="comment">//这是一个10M的字节空间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_10M]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序报的错误如下：    </p><p><img alt="堆内存溢出" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414160654.png" class="lazyload">   </p><p>设置堆内存：</p><ul><li>-Xmx200m：将当前运行环境的最大堆内存设置为200M，<strong>注意：字母和数字之间没有空格</strong></li><li>-Xms200m：将当前运行环境的最小堆内存设置为200M，可以和-Xmx设置为相同的数据值</li></ul><h3 id="4-常量池"><a href="#4-常量池" class="headerlink" title="4 常量池"></a>4 常量池</h3><h4 id="4-1-class文件常量池"><a href="#4-1-class文件常量池" class="headerlink" title="4.1 class文件常量池"></a>4.1 class文件常量池</h4><h4 id="4-2-运行时常量池"><a href="#4-2-运行时常量池" class="headerlink" title="4.2 运行时常量池"></a>4.2 运行时常量池</h4><h4 id="4-3-基本类型包装类对象常量池"><a href="#4-3-基本类型包装类对象常量池" class="headerlink" title="4.3 基本类型包装类对象常量池"></a>4.3 基本类型包装类对象常量池</h4><h4 id="4-4-全部字符串常量池"><a href="#4-4-全部字符串常量池" class="headerlink" title="4.4 全部字符串常量池"></a>4.4 全部字符串常量池</h4><h3 id="5-JVM参数介绍"><a href="#5-JVM参数介绍" class="headerlink" title="5 JVM参数介绍"></a>5 JVM参数介绍</h3><table><thead><tr><th align="left"><strong>参数名称</strong></th><th><strong>含义</strong></th><th><strong>默认值</strong></th><th></th></tr></thead><tbody><tr><td align="left">-Xms</td><td>初始堆大小</td><td>物理内存的1/64(&lt;1GB)</td><td>默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.</td></tr><tr><td align="left">-Xmx</td><td>最大堆大小</td><td>物理内存的1/4(&lt;1GB)</td><td>默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制</td></tr><tr><td align="left">-Xmn</td><td>年轻代大小(1.4or lator)</td><td></td><td><strong>注意</strong>：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。 整个堆大小=年轻代大小 + 年老代大小 + 持久代大小. 增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8</td></tr><tr><td align="left">-XX:NewSize</td><td>设置年轻代大小(for 1.3/1.4)</td><td></td><td></td></tr><tr><td align="left">-XX:MaxNewSize</td><td>年轻代最大值(for 1.3/1.4)</td><td></td><td></td></tr><tr><td align="left">-XX:PermSize</td><td>设置持久代(perm gen)初始值</td><td>物理内存的1/64</td><td></td></tr><tr><td align="left">-XX:MaxPermSize</td><td>设置持久代最大值</td><td>物理内存的1/4</td><td></td></tr><tr><td align="left">-Xss</td><td>每个线程的堆栈大小</td><td></td><td>JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.更具应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右 一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。（校长） 和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:”” -Xss is translated in a VM flag named ThreadStackSize” 一般设置这个值就可以了。</td></tr><tr><td align="left">-<em>XX:ThreadStackSize</em></td><td>Thread Stack Size</td><td></td><td>(0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.]</td></tr><tr><td align="left">-XX:NewRatio</td><td>年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</td><td></td><td>-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5 Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。</td></tr><tr><td align="left">-XX:SurvivorRatio</td><td>Eden区与Survivor区的大小比值</td><td></td><td>设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10</td></tr><tr><td align="left">-XX:LargePageSizeInBytes</td><td>内存页的大小不可设置过大， 会影响Perm的大小</td><td></td><td>=128m</td></tr><tr><td align="left">-XX:+UseFastAccessorMethods</td><td>原始类型的快速优化</td><td></td><td></td></tr><tr><td align="left">-XX:+DisableExplicitGC</td><td>关闭System.gc()</td><td></td><td>这个参数需要严格的测试</td></tr><tr><td align="left">-XX:MaxTenuringThreshold</td><td>垃圾最大年龄</td><td></td><td>如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率 该参数只有在串行GC时才有效.</td></tr><tr><td align="left">-XX:+AggressiveOpts</td><td>加快编译</td><td></td><td></td></tr><tr><td align="left">-XX:+UseBiasedLocking</td><td>锁机制的性能改善</td><td></td><td></td></tr><tr><td align="left">-Xnoclassgc</td><td>禁用垃圾回收</td><td></td><td></td></tr><tr><td align="left">-XX:SoftRefLRUPolicyMSPerMB</td><td>每兆堆空闲空间中SoftReference的存活时间</td><td>1s</td><td>softly reachable objects will remain alive for some amount of time after the last time they were referenced. The default value is one second of lifetime per free megabyte in the heap</td></tr><tr><td align="left">-XX:PretenureSizeThreshold</td><td>对象超过多大是直接在旧生代分配</td><td>0</td><td>单位字节 新生代采用Parallel Scavenge GC时无效 另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.</td></tr><tr><td align="left">-XX:TLABWasteTargetPercent</td><td>TLAB占eden区的百分比</td><td>1%</td><td></td></tr><tr><td align="left">-XX:+<em>CollectGen0First</em></td><td>FullGC时是否先YGC</td><td>false</td><td></td></tr></tbody></table><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://juejin.im/post/5d1efae26fb9a07ea6489355" target="_blank" rel="noopener">JVM是什么？深入解析JVM原理！-掘金</a></p><p><a href="https://blog.csdn.net/u010758410/article/details/80315927" target="_blank" rel="noopener">https://blog.csdn.net/u010758410/article/details/80315927</a></p><p><a href="http://www.51gjie.com/java/551.html" target="_blank" rel="noopener">http://www.51gjie.com/java/551.html</a></p><p><a href="https://www.jianshu.com/p/cf78e68e3a99" target="_blank" rel="noopener">https://www.jianshu.com/p/cf78e68e3a99</a></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中5种引用：强引用，弱引用，虚引用，软引用，终接器引用</title>
      <link href="/jvm-reference/"/>
      <url>/jvm-reference/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://juejin.im/post/5b82c02df265da436152f5ad" target="_blank" rel="noopener">参考文章</a></p><h3 id="1-强引用-StrongReference"><a href="#1-强引用-StrongReference" class="headerlink" title="1 强引用(StrongReference)"></a>1 强引用(StrongReference)</h3><blockquote><p><strong>强引用</strong>是使用最普遍的引用。如果一个对象具有强引用，那<strong>垃圾回收器</strong>绝不会回收它。</p></blockquote><p>在<code>java</code>程序中，一般由<code>Object object = new Object();</code>定义的<code>object</code>就是一个强引用，也就是说<code>object</code>强引用<code>new Object()</code>对象。这种情况下，也就是说明，该对象是程序中必不可少的一部分，当程序遇到内存不足时，<code>jvm</code>并不会将其释放，而是会抛出一个<code>OutOfMemoryError</code>异常。如下面这段代码：   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _10M = <span class="number">1014</span> * <span class="number">1024</span> * <span class="number">10</span>;<span class="comment">//这是一个10M的字节空间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_10M]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由代码可以看出，<code>list</code>是一个对<code>new ArrayList&lt;&gt;()</code>的 强引用，所以在遇到内存不足时，就抛出了下面的异常：   </p><p><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414170211.png" class="lazyload"></p><h4 id="1-1-什么情况下，强引用会被垃圾回收掉？"><a href="#1-1-什么情况下，强引用会被垃圾回收掉？" class="headerlink" title="1.1 什么情况下，强引用会被垃圾回收掉？"></a>1.1 什么情况下，强引用会被垃圾回收掉？</h4><p>当java程序中所有的引用对象都断开了对该强引用的引用，那么<code>JVM</code>就认为该对象没有使用价值了，也就被垃圾回收掉了。</p><h3 id="2-软引用-SoftReference"><a href="#2-软引用-SoftReference" class="headerlink" title="2 软引用(SoftReference)"></a>2 软引用(SoftReference)</h3><blockquote><p>如果一个java对象只具有软引用，那么当内存充足时，java的垃圾回收机制不会回收当前对象；然而，当内存不足时，java垃圾回收机制会回收当前的软引用对象。只要当前软引用没有被垃圾回收掉，那么java程序就可以调用该软引用对象。</p></blockquote><ul><li>软引用和强引用的区别：<ul><li>当该软引用对象没有被强引用对象直接引用时，<strong>那么当前内存不足时</strong>，软引用引用的对象就会被<code>JVM</code>垃圾回收掉。</li><li>强引用之后<strong>当所有的<code>gc root</code>对象没有引用当前强引用对象时，且当内存不足时</strong>，才会被垃圾回收掉。</li></ul></li><li>软引用和弱引用的区别：<ul><li>弱引用被垃圾回收的条件相对软引用更加宽松，也就是说，只要发生了垃圾回收，<strong>那么不管当前内存是否充足</strong>，弱引用对象都会被垃圾回收掉。</li></ul></li></ul><p>看下面这段软引用代码了解一下软引用的具体应用：   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _10M = <span class="number">1014</span> * <span class="number">1024</span> * <span class="number">10</span>;<span class="comment">//这是一个10M的字节空间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        soft();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">soft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SoftReference&lt;<span class="keyword">byte</span>[]&gt; softReference;</span><br><span class="line">        ReferenceQueue&lt;SoftReference&gt; referenceQueue;</span><br><span class="line">        List&lt;SoftReference&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">"------当前为软引用------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            softReference = <span class="keyword">new</span> SoftReference&lt;&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[_10M]);</span><br><span class="line">            list.add(softReference);</span><br><span class="line">            System.out.println(list.size());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"----------下面是输出-------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (SoftReference&lt;<span class="keyword">byte</span>[]&gt; ref : list )&#123;</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果如下，并没有像强引用那样，报一个内存不足的错误：   </p><p><img alt="软引用运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414202517.png" class="lazyload"></p><p>从运行结果可以看出，使用软引用去引用<code>10M</code>的字节块，程序没有出错，但是可以看出，前三个块都没系统释放了，也就是说当成垃圾给回收掉了，只有最后一个被保留了下来。使用这种方式，可以使得系统在引用一些资源时，即使资源过多，也不会导致程序崩溃。</p><p>软引用使用场景：</p><ul><li>当我们需要调用一些图片信息等资源时，可以使用这种引用方式，因为这不是程序所必须的资源，当需要时，可以在临时加载，这样就大大节约了系统的资源。</li></ul><h3 id="3-弱引用-WeakReference"><a href="#3-弱引用-WeakReference" class="headerlink" title="3 弱引用(WeakReference)"></a>3 弱引用(WeakReference)</h3><blockquote><p>在<a href="https://zh.wikipedia.org/wiki/计算机程序设计" target="_blank" rel="noopener">计算机程序设计</a>中，<strong>弱引用</strong>与强引用相对，是指不能确保其引用的<a href="https://zh.wikipedia.org/wiki/对象_(计算机科学)" target="_blank" rel="noopener">对象</a>不会被<a href="https://zh.wikipedia.org/wiki/垃圾回收器" target="_blank" rel="noopener">垃圾回收器</a>回收的引用。一个对象若只被弱引用所引用，则被认为是<a href="https://zh.wikipedia.org/wiki/不可访问内存" target="_blank" rel="noopener">不可访问</a>（或弱可访问）的，并因此可能在任何时刻被回收。一些配有垃圾回收机制的语言，如<a href="https://zh.wikipedia.org/wiki/Java" target="_blank" rel="noopener">Java</a>、<a href="https://zh.wikipedia.org/wiki/C♯" target="_blank" rel="noopener">C#</a>、<a href="https://zh.wikipedia.org/wiki/Python" target="_blank" rel="noopener">Python</a>、<a href="https://zh.wikipedia.org/wiki/Perl" target="_blank" rel="noopener">Perl</a>、<a href="https://zh.wikipedia.org/wiki/Lisp" target="_blank" rel="noopener">Lisp</a>等都在不同程度上支持弱引用。</p><p>from wikipedia</p></blockquote><p><strong>弱引用</strong>与<strong>软引用</strong>的区别在于：只具有<strong>弱引用</strong>的对象拥有<strong>更短暂</strong>的<strong>生命周期</strong>。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有<strong>弱引用</strong>的对象，不管当前<strong>内存空间足够与否</strong>，都会<strong>回收</strong>它的内存。不过，由于垃圾回收器是一个<strong>优先级很低的线程</strong>，因此<strong>不一定</strong>会<strong>很快</strong>发现那些只具有<strong>弱引用</strong>的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _10M = <span class="number">1014</span> * <span class="number">1024</span> * <span class="number">10</span>;<span class="comment">//这是一个10M的字节空间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WeakReference&lt;<span class="keyword">byte</span>[]&gt; bytes;</span><br><span class="line">        List&lt;WeakReference&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            bytes = <span class="keyword">new</span> WeakReference&lt;<span class="keyword">byte</span>[]&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[_10M]);</span><br><span class="line">            list.add(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行没有报错：   </p><p><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414170630.png" class="lazyload"></p><h4 id="引用队列"><a href="#引用队列" class="headerlink" title="引用队列"></a>引用队列</h4><p>由于软引用和弱引用本身也会占用一定的内存，所以当软引用或者弱引用被垃圾回收掉之后，<code>JVM</code>会将软引用本身或者弱引用本身放到引用队列中，当我们需要释放这一段内存时，需要遍历引用队列中的所有对象并将其释放。</p><p><strong>软引用和弱引用都可以配合使用引用队列来释放引用自身所占用的内存。</strong>   </p><p>代码示例：这里还是以上面的软引用为例，但是这里配合了引用队列，将已经回收掉的软引用本身释放掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _10M = <span class="number">1014</span> * <span class="number">1024</span> * <span class="number">10</span>;<span class="comment">//这是一个10M的字节空间</span></span><br><span class="line">    <span class="comment">//堆内存大小设置为30m  -Xmx30m</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            soft();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">soft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SoftReference&lt;<span class="keyword">byte</span>[]&gt; softReference;</span><br><span class="line">        ReferenceQueue&lt;SoftReference&gt; referenceQueue;</span><br><span class="line">        ReferenceQueue&lt;<span class="keyword">byte</span>[]&gt; queue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;SoftReference&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">"------当前为软引用------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//当软引用被垃圾回收时，当前软引用就会被加入到引用队列中去</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[_10M];</span><br><span class="line">            System.out.println(bytes);</span><br><span class="line">            softReference = <span class="keyword">new</span> SoftReference&lt;&gt;(bytes, queue);</span><br><span class="line">            list.add(softReference);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放引用队列中的软引用对象</span></span><br><span class="line">        Reference ref0 = queue.poll();</span><br><span class="line">        <span class="keyword">while</span> (ref0 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            list.remove(ref0);</span><br><span class="line">            ref0 = queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------下面是输出-------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (SoftReference&lt;<span class="keyword">byte</span>[]&gt; ref : list )&#123;</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="引用队列运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200414204340.png" class="lazyload"></p><p>从运行结果可以看出，前面的三个<code>null</code>对象已经被释放掉了，就剩下最后一个。弱引用配合引用队列和软引用类似。</p><h3 id="4-虚引用-PhantomReference"><a href="#4-虚引用-PhantomReference" class="headerlink" title="4 虚引用(PhantomReference)"></a>4 虚引用(PhantomReference)</h3><blockquote><p>虚引用，其前几种引用不同，当一个对象被虚引用时，那么说明该对象，在任何时候都可以被垃圾回收，不需要考虑当前内存是否充足。且虚引用必须配合引用队列才能使用。</p></blockquote><p>虚引用和软引用、弱引用的区别在于，虚引用和终接器引用在使用时需要关联一个引用队列(<code>ReferenceQueue</code>)才能使用，而软引用和弱引用则不需要。</p><p>代码示例：   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _10M = <span class="number">1014</span> * <span class="number">1024</span> * <span class="number">10</span>;<span class="comment">//这是一个10M的字节空间</span></span><br><span class="line">    <span class="comment">//堆内存大小设置为30m  -Xmx30m</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            phantom();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">phantom</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ReferenceQueue&lt;<span class="keyword">byte</span>[]&gt; referenceQueue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">        PhantomReference&lt;<span class="keyword">byte</span>[]&gt; phantomReference;</span><br><span class="line">        List&lt;PhantomReference&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">"------当前为虚引用------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            phantomReference = <span class="keyword">new</span> PhantomReference&lt;&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[_10M],referenceQueue);</span><br><span class="line">            list.add(phantomReference);</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;</span><br><span class="line">        Reference reference = referenceQueue.poll();</span><br><span class="line">        <span class="keyword">while</span> (reference != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(reference.get());</span><br><span class="line">            reference = referenceQueue.poll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="运行结果" data-src="G:%5CcodeFolder%5Cblog%5Csource%5Cimages%5Carticle%5CQQ%E6%88%AA%E5%9B%BE20200415134623.png" class="lazyload"></p><h4 id="疑问？"><a href="#疑问？" class="headerlink" title="疑问？"></a>疑问？</h4><p>这里一个小疑问，就是我用的虚引用去引用对象，但是报错了，说堆内存溢出，我的堆内存设置的30M，软引用都会自动回收内存。</p><h3 id="5-终接器引用"><a href="#5-终接器引用" class="headerlink" title="5 终接器引用"></a>5 终接器引用</h3><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何通过Xshell，SSH命令连接vmware中的centos虚拟机</title>
      <link href="/vmware-network-info/"/>
      <url>/vmware-network-info/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-VmWare中的三种连接方式"><a href="#1-VmWare中的三种连接方式" class="headerlink" title="1 VmWare中的三种连接方式"></a>1 VmWare中的三种连接方式</h3><p>原文：<a href="https://blog.csdn.net/shuxiao9058/article/details/7051463" target="_blank" rel="noopener">https://blog.csdn.net/shuxiao9058/article/details/7051463</a></p><h4 id="1-1-桥接模式"><a href="#1-1-桥接模式" class="headerlink" title="1.1 桥接模式"></a>1.1 桥接模式</h4><blockquote><p>使用VMnet0虚拟交换机，此时虚拟机相当与网络上的一台独立计算机与主机一样，拥有一个独立的IP地址，其网络拓扑如下图所示，使用桥接方式，A，A1，A2，B可互访   </p></blockquote><p><img alt="拓扑结构" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/0_1323266416P7im.jpg" class="lazyload">   </p><h4 id="1-2-主机模式（Host-Only）"><a href="#1-2-主机模式（Host-Only）" class="headerlink" title="1.2 主机模式（Host-Only）"></a>1.2 主机模式（Host-Only）</h4><blockquote><p>使用Vmnet1虚拟交换机，此时虚拟机只能与虚拟机、主机互访。也就是不能上Internet，其网络拓扑如下图所示，使用Host方式，A，A1，A2可以互访，但A1，A2不能访问B，也不能被B访问。</p></blockquote><p><img alt="拓扑结构" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/0_1323266803ebS0.jpg" class="lazyload"></p><h4 id="1-3-NAT模式"><a href="#1-3-NAT模式" class="headerlink" title="1.3 NAT模式"></a>1.3 NAT模式</h4><blockquote><p>使用Vmnet8虚拟交换机，此时虚拟机可以通过主机单向网络上的其他工作站，其他工作站不能访问虚拟机。其网络拓扑如下图所示，使用NAT方式，A1，A2可以访问B，但B不可以访问A1，A2。但A，A1，A2可以互访。</p></blockquote><p><img alt="拓扑结构" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/0_1323266614cXTH.jpg" class="lazyload"></p><h3 id="2-使用桥接模式连接"><a href="#2-使用桥接模式连接" class="headerlink" title="2 使用桥接模式连接"></a>2 使用桥接模式连接</h3><p>原文：<a href="https://blog.csdn.net/vicoqi/article/details/79951236" target="_blank" rel="noopener">https://blog.csdn.net/vicoqi/article/details/79951236</a></p><h4 id="2-1-查看物理机IP"><a href="#2-1-查看物理机IP" class="headerlink" title="2.1 查看物理机IP"></a>2.1 查看物理机IP</h4><p><code>windows</code>使用<code>ipconfig</code>命令查看IP地址，<code>Mac</code>使用<code>ifconfig</code>命令查看，如下：<br><img alt="ipconfig" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200413150153.png" class="lazyload">   </p><h4 id="2-2-查看物理机网卡"><a href="#2-2-查看物理机网卡" class="headerlink" title="2.2 查看物理机网卡"></a>2.2 查看物理机网卡</h4><p>打开【网络和共享中心】-&gt;【更改适配器设置】-&gt;右键【当前连接外网的网卡】<br><img alt="网卡信息" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200413150410.png" class="lazyload"><br><img alt="网卡名" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200413150431.png" class="lazyload"></p><h4 id="2-3-修改虚拟网络编辑器"><a href="#2-3-修改虚拟网络编辑器" class="headerlink" title="2.3 修改虚拟网络编辑器"></a>2.3 修改虚拟网络编辑器</h4><p>当前设置，需要关闭虚拟机。打开<code>vmware</code>，点击【编辑】-&gt;【虚拟网络编辑器】，先<code>恢复默认设置</code>:<br><img alt="进行设置" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200413150631.png" class="lazyload"><br><img alt="恢复默认设置" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200413150718.png" class="lazyload"><br><img alt="选择网卡" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200413150811.png" class="lazyload"></p><h4 id="2-4-修改虚拟机网络连接方法"><a href="#2-4-修改虚拟机网络连接方法" class="headerlink" title="2.4 修改虚拟机网络连接方法"></a>2.4 修改虚拟机网络连接方法</h4><p>进去当前的虚拟机的设置界面，选择<code>桥接模式</code>。<br><img alt="桥接模式" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200413150925.png" class="lazyload">    </p><h4 id="2-5-修改虚拟机IP地址"><a href="#2-5-修改虚拟机IP地址" class="headerlink" title="2.5 修改虚拟机IP地址"></a>2.5 修改虚拟机IP地址</h4><p>打开虚拟机，使用命令：<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code>修改网卡信息：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">PEERDNS=yes</span><br><span class="line">PEERROUTES=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_PEERDNS=yes</span><br><span class="line">IPV6_PEERROUTES=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=ec30e582-de8f-4ce3-8fae-977ba48224a7</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=9.168.1.100</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=9.168.1.1</span><br><span class="line">DNS=8.8.8.8</span><br></pre></td></tr></table></figure><p>其中需要修改的部分：<br><img alt="修改" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200413135714.png" class="lazyload"></p><p>通过<code>ifconfig</code>命令查看虚拟机的IP地址：<br><img alt="ip地址" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200413151319.png" class="lazyload">   </p><h4 id="2-6-xshell连接虚拟机"><a href="#2-6-xshell连接虚拟机" class="headerlink" title="2.6 xshell连接虚拟机"></a>2.6 xshell连接虚拟机</h4><p>进入<code>xshell</code>界面，新建<code>session</code>，进入到下面的界面，输入虚拟机的IP地址，<br><img alt="输入IP地址" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200413151447.png" class="lazyload"><br><img alt="输入用户名和密码" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200413151609.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis安装报错：zmalloc.h:50:31: 致命错误：jemalloc/jemalloc.h：没有那个文件或目录</title>
      <link href="/make-redis-error/"/>
      <url>/make-redis-error/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-Linux下安装redis"><a href="#1-Linux下安装redis" class="headerlink" title="1 Linux下安装redis"></a>1 Linux下安装redis</h3><ol><li>wget <a href="http://download.redis.io/releases/redis-2.8.17.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-2.8.17.tar.gz</a></li><li>tar xzf redis-2.8.17.tar.gz</li><li>cd redis-2.8.17.tar.gz</li><li>如果没有安装<code>gcc</code>,则使用该命令安装，<code>yum install gcc</code>,如果安装了<code>gcc</code>,执行第5步</li><li>make</li></ol><h3 id="2-错误"><a href="#2-错误" class="headerlink" title="2 错误"></a>2 错误</h3><p>在执行<code>make</code>命令时，出现下面的错误：<br><strong>zmalloc.h:50:31: 致命错误：jemalloc/jemalloc.h：没有那个文件或目录</strong>   </p><h3 id="3-原因分析"><a href="#3-原因分析" class="headerlink" title="3 原因分析"></a>3 原因分析</h3><blockquote><p>说关于分配器allocator， 如果有MALLOC  这个 环境变量， 会有用这个环境变量的 去建立Redis。<br>而且libc 并不是默认的 分配器， 默认的是 jemalloc, 因为 jemalloc 被证明 有更少的 fragmentation problems 比libc。<br>但是如果你又没有jemalloc 而只有 libc 当然 make 出错。 所以加这么一个参数。</p></blockquote><p>原文：<a href="https://blog.csdn.net/bugall/article/details/45914867" target="_blank" rel="noopener">https://blog.csdn.net/bugall/article/details/45914867</a></p><h3 id="4-解决办法"><a href="#4-解决办法" class="headerlink" title="4 解决办法"></a>4 解决办法</h3><p>执行该命令：<code>make MALLOC=libc</code></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmware下安装的centos虚拟机，不能访问外网</title>
      <link href="/vmware-machine-can-not-connect-to-internet/"/>
      <url>/vmware-machine-can-not-connect-to-internet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h3><p>使用<code>vmware</code>安装了<code>centos</code>虚拟机之后，发现不能访问外网，所以就网上搜了一下，现已经解决，但是还不能通过<code>xsheel</code>连接虚拟机。</p><h3 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h3><h4 id="2-1-修改静态IP"><a href="#2-1-修改静态IP" class="headerlink" title="2.1 修改静态IP"></a>2.1 修改静态IP</h4><p>使用命令<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code>打开网卡文件，修改IP地址，下面是该文件的原文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">PEERDNS=yes</span><br><span class="line">PEERROUTES=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_PEERDNS=yes</span><br><span class="line">IPV6_PEERROUTES=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=ec30e582-de8f-4ce3-8fae-977ba48224a7</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=9.168.1.100</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=9.168.1.1</span><br><span class="line">DNS=8.8.8.8</span><br></pre></td></tr></table></figure><p>其中需要修改的部分：<br><img alt="修改" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200413135714.png" class="lazyload"></p><p>修改之后，执行如下命令，重启网络服务，下面是<code>centos</code>的命令：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network  #重启网络服务</span><br><span class="line">systemctl status network  #查看网络服务的状态</span><br></pre></td></tr></table></figure><h4 id="2-2-修改虚拟网络配置"><a href="#2-2-修改虚拟网络配置" class="headerlink" title="2.2 修改虚拟网络配置"></a>2.2 修改虚拟网络配置</h4><p><img alt="修改配置" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200413140032.png" class="lazyload">   </p><h4 id="2-3-执行ping命令"><a href="#2-3-执行ping命令" class="headerlink" title="2.3 执行ping命令"></a>2.3 执行ping命令</h4><p>执行<code>ping</code>命令之后，发现还是不能上网，这时发现<code>Linux</code>没有配置<code>DNS</code>解析，所以通过下面的命令查看：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>发现没有任何配置，所以我们使用<code>vim</code>命令，将下面的解析地址输入进去：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure><p>再次<code>ping</code>就可以了。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VmWare 12 pro下载链接和破解秘钥</title>
      <link href="/crack-vmware-pro/"/>
      <url>/crack-vmware-pro/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-软件下载"><a href="#1-软件下载" class="headerlink" title="1 软件下载"></a>1 软件下载</h3><p><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-12.0.0-2985596.exe" target="_blank" rel="noopener">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-12.0.0-2985596.exe</a></p><h3 id="2-秘钥"><a href="#2-秘钥" class="headerlink" title="2 秘钥"></a>2 秘钥</h3><ul><li>VY1DU-2VXDH-08DVQ-PXZQZ-P2KV8</li><li>VF58R-28D9P-0882Z-5GX7G-NPUTF</li><li>YG7XR-4GYEJ-4894Y-VFMNZ-YA296</li></ul><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射机制讲解，如何利用java发射机制开发自己的java框架</title>
      <link href="/java-reflect/"/>
      <url>/java-reflect/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-java反射机制介绍"><a href="#1-java反射机制介绍" class="headerlink" title="1 java反射机制介绍"></a>1 java反射机制介绍</h3><blockquote><p><strong>定义介绍：</strong> Java 反射机制在程序运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性。这种 动态的获取信息 以及 动态调用对象的方法 的功能称为 java 的反射机制。</p></blockquote><h4 id="1-1-java代码的三种状态"><a href="#1-1-java代码的三种状态" class="headerlink" title="1.1 java代码的三种状态"></a>1.1 java代码的三种状态</h4><p>这里以一个<code>Person</code>类为例，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gend;</span><br><span class="line">    <span class="keyword">public</span> String a;</span><br><span class="line">    <span class="keyword">protected</span> String b;</span><br><span class="line">    String c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age, String gend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gend = gend;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(String name, String gend)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gend = gend;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", gend='"</span> + gend + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">laugh</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person is laughing..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person is eating..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="分析图" data-src="QQ%E6%88%AA%E5%9B%BE20200409152630.png" class="lazyload">   </p><h4 id="1-2-获取class的3种方法"><a href="#1-2-获取class的3种方法" class="headerlink" title="1.2 获取class的3种方法"></a>1.2 获取class的3种方法</h4><ol><li><code>Class.forName(&quot;全类名&quot;)</code>，对应的是上图中的第一阶段（java源码阶段），如：<code>Class.forName(&quot;com.reflect.entity.Person&quot;)</code></li><li><code>类名.class</code>，对应的是上图中的第二阶段（class类对象阶段），因为字节码文件已经加载带了内存，但是还没有调用，如：<code>ReflectTest.class</code></li><li><code>对象.getClass()</code>，对应的是上图中的第三阶段，也就是Runtime阶段，因为此时已经创建了一个对象，如：<code>person.getClass()</code> </li></ol><blockquote><p><strong>注意：</strong> 同一个*.class文件被重复或多次加载到内存中时，不会重复加载，只会加载一次</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">"com.reflect.entity.Person"</span>);</span><br><span class="line">Class cls2 = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">Class cls3 = <span class="keyword">new</span> Person().getClass();</span><br><span class="line"></span><br><span class="line">System.out.println(cls1 == cls2);<span class="comment">//true</span></span><br><span class="line">System.out.println(cls1 == cls3);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="1-3-class内部的属性"><a href="#1-3-class内部的属性" class="headerlink" title="1.3 class内部的属性"></a>1.3 class内部的属性</h4><ul><li><p>构造方法数组Constructor[]</p><ul><li>Constructor<t> getConstructor(Class&lt;?&gt;… parameterTypes)  </t></li><li>Constructor&lt;?&gt;[] getConstructors()  获取所有由<code>public</code>修饰的构造方法</li><li>Constructor<t> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)  </t></li><li>Constructor&lt;?&gt;[] getDeclaredConstructors()   获取所有构造方法</li></ul></li><li><p>成员属性Field[]</p><ul><li>Field getField(String name)  获取一个：只能获取由<code>public</code>修饰的成员属性</li><li>Field[] getFields() 获取所有 ：只能获取类中定义的由<code>public</code>修饰的成员属性</li><li>Field[] getDeclaredFields() 获取所有属性：只要类中声明的，都会获取到</li><li>Field getDeclaredField(String name)  获取一个：只要类中声明的，都会获取到</li></ul></li><li><p>成员方法Method[]</p><ul><li>Method[] getMethods()   获取全部由<code>public</code>修饰的成员方法</li><li>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)  </li><li>Method[] getDeclaredMethods()  获取所有</li><li>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)  </li></ul></li><li><p>获取类名</p><ul><li>String getName()  获取全类名</li><li>String getSimpleName()  仅仅获取类名</li></ul></li></ul><h3 id="2-举例"><a href="#2-举例" class="headerlink" title="2 举例"></a>2 举例</h3><h4 id="2-1-获取成员属性"><a href="#2-1-获取成员属性" class="headerlink" title="2.1 获取成员属性"></a>2.1 获取成员属性</h4><h5 id="（1）Field-getFields"><a href="#（1）Field-getFields" class="headerlink" title="（1）Field[] getFields()"></a>（1）Field[] getFields()</h5><p>得到所有由<code>public</code>声明的成员属性   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">"com.reflect.entity.Person"</span>);</span><br><span class="line"></span><br><span class="line">Field[] fields = cls1.getFields();  </span><br><span class="line"><span class="keyword">for</span> (Field field : fields)&#123;</span><br><span class="line">    System.out.println(field);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>public java.lang.String com.reflect.entity.Person.a</p></blockquote><h5 id="（2）Field-getField-String-name"><a href="#（2）Field-getField-String-name" class="headerlink" title="（2）Field getField(String name)"></a>（2）Field getField(String name)</h5><p>得到某一个具体的由<code>public</code>声明的成员属性   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">"com.reflect.entity.Person"</span>);</span><br><span class="line"></span><br><span class="line">Field field = cls1.getField(<span class="string">"a"</span>);</span><br><span class="line">System.out.println(field);</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>public java.lang.String com.reflect.entity.Person.a</p></blockquote><h5 id="3-Field-getDeclaredFields"><a href="#3-Field-getDeclaredFields" class="headerlink" title="(3) Field[] getDeclaredFields()"></a>(3) Field[] getDeclaredFields()</h5><p>得到所有的类中已经声明的成员属性，不管修饰符   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">"com.reflect.entity.Person"</span>);</span><br><span class="line"></span><br><span class="line">Field[] fields = cls1.getDeclaredFields();  </span><br><span class="line"><span class="keyword">for</span> (Field field : fields)&#123;</span><br><span class="line">    System.out.println(field);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>private java.lang.String com.reflect.entity.Person.name<br>private java.lang.Integer com.reflect.entity.Person.age<br>private java.lang.String com.reflect.entity.Person.gend<br>public java.lang.String com.reflect.entity.Person.a<br>protected java.lang.String com.reflect.entity.Person.b<br>java.lang.String com.reflect.entity.Person.c   </p></blockquote><h5 id="4-Field-getDeclaredField-String-name"><a href="#4-Field-getDeclaredField-String-name" class="headerlink" title="(4) Field getDeclaredField(String name)"></a>(4) Field getDeclaredField(String name)</h5><p>得到某一个具体的类中已经声明的成员属性，不管修饰符   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">"com.reflect.entity.Person"</span>);</span><br><span class="line"></span><br><span class="line">Field field = cls1.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(field);</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>private java.lang.String com.reflect.entity.Person.name</p></blockquote><h4 id="2-2-获取构造方法"><a href="#2-2-获取构造方法" class="headerlink" title="2.2 获取构造方法"></a>2.2 获取构造方法</h4><h5 id="（1）-Constructor-lt-gt-getConstructors"><a href="#（1）-Constructor-lt-gt-getConstructors" class="headerlink" title="（1） Constructor&lt;?&gt;[] getConstructors()"></a>（1） Constructor&lt;?&gt;[] getConstructors()</h5><p>得到所有的由<code>public</code>声明的构造方法   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">"com.reflect.entity.Person"</span>);</span><br><span class="line"></span><br><span class="line">Constructor[] constructors = cls1.getConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor constructor : constructors)&#123;</span><br><span class="line">    System.out.println(constructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>public com.reflect.entity.Person()<br>public com.reflect.entity.Person(java.lang.String,java.lang.Integer,java.lang.String)</p></blockquote><h5 id="2-Constructor-getConstructor-Class-lt-gt-…-parameterTypes"><a href="#2-Constructor-getConstructor-Class-lt-gt-…-parameterTypes" class="headerlink" title="(2) Constructor getConstructor(Class&lt;?&gt;… parameterTypes)"></a>(2) Constructor<t> getConstructor(Class&lt;?&gt;… parameterTypes)</t></h5><p>得到某一个具体的由<code>public</code>声明的构造方法    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">"com.reflect.entity.Person"</span>);</span><br><span class="line"></span><br><span class="line">Constructor constructor = cls1.getConstructor(String<span class="class">.<span class="keyword">class</span>, <span class="title">Integer</span>.<span class="title">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">System.out.println(constructor);</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>public com.reflect.entity.Person(java.lang.String,java.lang.Integer,java.lang.String)</p></blockquote><h5 id="（3）-Constructor-getDeclaredConstructor-Class-lt-gt-…-parameterTypes"><a href="#（3）-Constructor-getDeclaredConstructor-Class-lt-gt-…-parameterTypes" class="headerlink" title="（3） Constructor getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)"></a>（3） Constructor<t> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</t></h5><p>得到某一个具体的类中已经声明的任意构造方法，无论用什么修饰符修饰的都可以      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">"com.reflect.entity.Person"</span>);</span><br><span class="line"></span><br><span class="line">Constructor constructor = cls1.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">System.out.println(constructor);</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>private com.reflect.entity.Person(java.lang.String,java.lang.String)</p></blockquote><h5 id="（4）-Constructor-lt-gt-getDeclaredConstructors"><a href="#（4）-Constructor-lt-gt-getDeclaredConstructors" class="headerlink" title="（4） Constructor&lt;?&gt;[] getDeclaredConstructors()"></a>（4） Constructor&lt;?&gt;[] getDeclaredConstructors()</h5><p>得到所有类中已经声明的构造方法，不管修饰符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">"com.reflect.entity.Person"</span>);</span><br><span class="line"></span><br><span class="line">Constructor[] constructors = cls1.getDeclaredConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor constructor : constructors)&#123;</span><br><span class="line">    System.out.println(constructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>public com.reflect.entity.Person()<br>private com.reflect.entity.Person(java.lang.String,java.lang.String)<br>public com.reflect.entity.Person(java.lang.String,java.lang.Integer,java.lang.String)   </p></blockquote><h4 id="2-3-获取成员方法"><a href="#2-3-获取成员方法" class="headerlink" title="2.3 获取成员方法"></a>2.3 获取成员方法</h4><h5 id="（1）Method-getMethods"><a href="#（1）Method-getMethods" class="headerlink" title="（1）Method[] getMethods()"></a>（1）Method[] getMethods()</h5><p>只能得到所有由<code>public</code>修饰的成员方法   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">"com.reflect.entity.Person"</span>);</span><br><span class="line"></span><br><span class="line">Method[] methods = cls1.getMethods();</span><br><span class="line"><span class="keyword">for</span> (Method method : methods)&#123;</span><br><span class="line">    System.out.println(method + <span class="string">"    "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>public java.lang.String com.reflect.entity.Person.toString()<br>public void com.reflect.entity.Person.eat()<br>public final void java.lang.Object.wait() throws java.lang.InterruptedException<br>public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException<br>public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException<br>public boolean java.lang.Object.equals(java.lang.Object)<br>public native int java.lang.Object.hashCode()<br>public final native java.lang.Class java.lang.Object.getClass()<br>public final native void java.lang.Object.notify()<br>public final native void java.lang.Object.notifyAll()    </p></blockquote><h5 id="（2）Method-getMethod-String-name-Class-lt-gt-…-parameterTypes"><a href="#（2）Method-getMethod-String-name-Class-lt-gt-…-parameterTypes" class="headerlink" title="（2）Method getMethod(String name, Class&lt;?&gt;… parameterTypes)"></a>（2）Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</h5><p>只能得到某一个由<code>public</code>修饰的方法   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">"com.reflect.entity.Person"</span>);</span><br><span class="line"></span><br><span class="line">Method method = cls1.getMethod(<span class="string">"eat"</span>);</span><br><span class="line">System.out.println(method + <span class="string">"    "</span>);</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>public void com.reflect.entity.Person.eat()    </p></blockquote><h5 id="（3）-Method-getDeclaredMethods"><a href="#（3）-Method-getDeclaredMethods" class="headerlink" title="（3） Method[] getDeclaredMethods()"></a>（3） Method[] getDeclaredMethods()</h5><p>可以获取类中所有声明的方法   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">"com.reflect.entity.Person"</span>);</span><br><span class="line"></span><br><span class="line">Method[] methods = cls1.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">    System.out.println(method + <span class="string">"    "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>public java.lang.String com.reflect.entity.Person.toString()<br>private void com.reflect.entity.Person.laugh()<br>public void com.reflect.entity.Person.eat()  </p></blockquote><h5 id="（4）Method-getDeclaredMethod-String-name-Class-lt-gt-…-parameterTypes"><a href="#（4）Method-getDeclaredMethod-String-name-Class-lt-gt-…-parameterTypes" class="headerlink" title="（4）Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)"></a>（4）Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</h5><p>得到一个指定的类中声明的任何方法    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">"com.reflect.entity.Person"</span>);</span><br><span class="line"></span><br><span class="line">Method method = cls1.getDeclaredMethod(<span class="string">"laugh"</span>);</span><br><span class="line">System.out.println(method + <span class="string">"    "</span>);</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>private void com.reflect.entity.Person.laugh()   </p></blockquote><h3 id="3-用java反射机制写框架"><a href="#3-用java反射机制写框架" class="headerlink" title="3 用java反射机制写框架"></a>3 用java反射机制写框架</h3><p>框架功能介绍：</p><ul><li>通过修改配置文件，修改要运行的类和类中的方法</li><li>当写好配置文件之后，将配置文件配置好的类和类中的方法运行</li></ul><h4 id="3-1-项目结构目录"><a href="#3-1-项目结构目录" class="headerlink" title="3.1 项目结构目录"></a>3.1 项目结构目录</h4><p><img alt="结构目录" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200409211817.png" class="lazyload"></p><h4 id="3-2-具体代码"><a href="#3-2-具体代码" class="headerlink" title="3.2 具体代码"></a>3.2 具体代码</h4><h5 id="（1）Person-java"><a href="#（1）Person-java" class="headerlink" title="（1）Person.java"></a>（1）Person.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.reflect.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gend;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age, String gend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gend = gend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", gend='"</span> + gend + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGend</span><span class="params">(String gend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gend = gend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（2）Student-java"><a href="#（2）Student-java" class="headerlink" title="（2）Student.java"></a>（2）Student.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.reflect.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gend;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, Integer age, String gend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gend = gend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", gend='"</span> + gend + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGend</span><span class="params">(String gend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gend = gend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学生在学习..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（3）pro-properties"><a href="#（3）pro-properties" class="headerlink" title="（3）pro.properties"></a>（3）pro.properties</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">className=com.reflect.entity.Student</span> <span class="comment"># 要运行的类</span></span><br><span class="line"><span class="string">methodName=study</span> <span class="comment">#要运行的该类中的方法</span></span><br></pre></td></tr></table></figure><h5 id="（4）ReflectTest-java"><a href="#（4）ReflectTest-java" class="headerlink" title="（4）ReflectTest.java"></a>（4）ReflectTest.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.reflect.entity.Person;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        利用反射机制，编写一个框架</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//创建一个配置文件的接收者</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//获取配置文件</span></span><br><span class="line">        ClassLoader classLoader = ReflectTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">"pro.properties"</span>);</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        pro.load(is);</span><br><span class="line">        <span class="comment">//得到配置文件中的配置信息</span></span><br><span class="line">        String className = pro.getProperty(<span class="string">"className"</span>);</span><br><span class="line">        String methodName = pro.getProperty(<span class="string">"methodName"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类加载</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取class类的方法有三种：</span></span><br><span class="line"><span class="comment">            1.Class.forName("全类名")</span></span><br><span class="line"><span class="comment">            2.类名.getClass()</span></span><br><span class="line"><span class="comment">            3.类名.class</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class cls = Class.forName(className);</span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line">        Method method = cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中3种for循环遍历集合的方式</title>
      <link href="/java-3-type-of-iterator/"/>
      <url>/java-3-type-of-iterator/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-For循环方式"><a href="#1-For循环方式" class="headerlink" title="1 For循环方式"></a>1 For循环方式</h3><ol><li>最普通的遍历方式，即定义一个下标<code>int i</code>，按照依次递增循环遍历集合。</li><li>使用<code>for(数据类型 变量名 : 集合引用名)</code>的方式遍历</li><li>集合有一个<code>forEach</code>的方法，可以调用该方法，参数<code>lambda</code>匿名函数进行遍历</li></ol><h3 id="2-代码示例"><a href="#2-代码示例" class="headerlink" title="2 代码示例"></a>2 代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List aList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        aList.add(<span class="string">"nihao"</span>);</span><br><span class="line">        aList.add(<span class="string">"wohao"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; aList.size(); i++)&#123;</span><br><span class="line">            System.out.println(aList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="keyword">for</span> (Object each : aList)&#123;</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式3</span></span><br><span class="line">        aList.forEach(each-&gt;&#123;</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>nihao<br>wohao<br>nihao<br>wohao<br>nihao<br>wohao   </p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>@classmethod和@staticmethod的区别，python中静态方法和类方法以及普通方法的区别</title>
      <link href="/distiction-of-classmethod-staticmethod/"/>
      <url>/distiction-of-classmethod-staticmethod/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-区别"><a href="#1-区别" class="headerlink" title="1 区别"></a>1 区别</h3><ul><li>普通方法：由实例化类之后的对象调用，不能有类直接调用，在类中，至少有一个参数，就是<code>self</code></li><li>静态方法：可以由类直接调用，也可以有实例化类之后的对象调用，没有默认参数<code>self</code>，可以由其他参数</li><li>类方法：可以直接由类调用，有一个默认参数，<code>cls</code>，即当前类。</li></ul><blockquote><p>异同点：   </p><ul><li>三种方法都可以有实例化类之后的对象调用，因为实例化后的类，也具有类的属性</li><li>除了普通方法外，其余两个方法，都可以直接使用为初始化（即未实例化）的类直接调用</li></ul></blockquote><h3 id="2-代码介绍"><a href="#2-代码介绍" class="headerlink" title="2 代码介绍"></a>2 代码介绍</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">normal_class</span><span class="params">(self, pa)</span>:</span></span><br><span class="line">        print(<span class="string">"this is a normal class , param is [&#123;&#125;]"</span>.format(pa))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_class</span><span class="params">(pa)</span>:</span></span><br><span class="line">        print(<span class="string">"this is static method, there is no default param. &#123;&#125;"</span>.format(pa))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_method</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"this is a class method, param is [&#123;&#125;]"</span>.format(cls))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 普通方法调用方法</span></span><br><span class="line">    test = Test()</span><br><span class="line">    test.normal_class(<span class="string">"普通方法"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 静态方法调用方法</span></span><br><span class="line">    Test.static_class(<span class="string">"静态方法"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 类方法调用方法</span></span><br><span class="line">    Test.class_method()</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>this is a normal class , param is [普通方法]<br>this is static method, there is no default param. 静态方法<br>this is a class method, param is [&lt;class ‘<strong>main</strong>.Test’&gt;]   </p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>virtualenv在不同操作系统中的系统方式</title>
      <link href="/virtualenv-start/"/>
      <url>/virtualenv-start/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="windows系统"><a href="#windows系统" class="headerlink" title="windows系统"></a>windows系统</h3><p>加入你的虚拟环境就在<code>c:\Users\user_name\my_env</code>下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\user_name&gt;cd env\venv\scripts</span><br><span class="line">C:\Users\user_name&gt;activate  ##开启虚拟环境</span><br><span class="line">(venv)C:\Users\user_name&gt;</span><br></pre></td></tr></table></figure><h3 id="linux-or-mac"><a href="#linux-or-mac" class="headerlink" title="linux or mac"></a>linux or mac</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virtualenv myproject ### 创建一个虚拟环境</span><br><span class="line">source myproject/bin/activate  ### 开启虚拟环境</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WPS如何设置级联变化的标题编号，根据上一级自动变化</title>
      <link href="/wps-set-cascade-number/"/>
      <url>/wps-set-cascade-number/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-引出问题"><a href="#1-引出问题" class="headerlink" title="1 引出问题"></a>1 引出问题</h3><p>有时候，我们使用WPS时需要级联更改标题的编号，也就是说，如下面那样：<br><img alt="事例" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200403152632.png" class="lazyload">   </p><p>当我们需要在<code>1.1</code>节后面添加一小节时，如果手动修改编号的话，那我们需要更改很多地方，很麻烦，所以这里介绍一种级联编号的设置方法。</p><h3 id="2-设置方法"><a href="#2-设置方法" class="headerlink" title="2 设置方法"></a>2 设置方法</h3><p>首先选择样式旁边的按钮【新样式】，创建一个新样式，<br><img alt="创建新样式" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200403152810.png" class="lazyload"><br><img alt="取名字" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200403153005.png" class="lazyload"><br><img alt="点击编号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200403153107.png" class="lazyload"><br><img alt="创建自定义编号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200403153244.png" class="lazyload"><br><img alt="设置第一级编号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200403153537.png" class="lazyload">   </p><blockquote><p>说明：每一级目录都需要链接相同的样式名称，这个解释可能有点似懂非懂，后面会附上所有的截图，便可一目了然。</p></blockquote><p><img alt="设置第二级编号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200403153835.png" class="lazyload"><br><img alt="设置第三级编号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200403154011.png" class="lazyload"><br>以上的设置界面都是<strong>样式1</strong>的设置界面，相应的我们需要几级编号，就需要创建几个新样式，且每一级样式的编号设置参数都是一样的，不一样的是<strong>字体</strong>和<strong>段落格式</strong>不一样。</p><p><img alt="给多种样式的设置相同编号参数" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200403154309.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 解决问题 </tag>
            
            <tag> Word </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C盘内存不足，如何清理不需要的缓存</title>
      <link href="/how-to-clear-C-disk-cache/"/>
      <url>/how-to-clear-C-disk-cache/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-C盘下面有哪些必要的文件夹"><a href="#1-C盘下面有哪些必要的文件夹" class="headerlink" title="1 C盘下面有哪些必要的文件夹"></a>1 C盘下面有哪些必要的文件夹</h3><ul><li>ProgramData/  <ul><li>作用：programdata属于电脑C盘的一个系统文件夹，它是公用的被创建文件夹或文件存放的地方，这些文件夹或文件仅由创建者完整控制。专家建议不要删除，隐藏即可！</li></ul></li><li>‘Program Files’/ <ul><li>作用：Program Files 指的是程序文件，也就是Windows 操作系统，也包括其它的操作系统各种软件默认安装到的目录。位于C盘分区（”C:\Program Files”，”%ProgramFiles%”），但也可根据用户的需要自定义到别的分区。</li></ul></li><li>‘Program Files (x86)’/ <ul><li>作用：Program Files (x86)和Program Files类似，都是软件的默认安装目录，但是这个(x86)是存放的32位的软件，上面的文件夹存放的是64位软件的。</li></ul></li><li>AppData/<ul><li><strong>LocalLow/</strong>：用来存放共享数据文件，一般可以通过清理一些无用的共享文件，来达到清理释放C盘的目的。当你解压缩包时如果不指定路径，系统就把压缩包解到local\temp文件夹下，存放了一些解压文件，安装软件时就从这里调取数据特别是一些制图软件，体积非常大，占用很多空间</li><li><strong>Local/</strong>：用来保存本地文件，其中可以通过删除本地临时文件，即AppData\Local\Temp\文件夹下的所有文件，来达到释放C盘的目的</li><li><strong>Roaming/</strong>：保存应用程序运行后的数据信息，如果删除应用程序运行配置数据会丢失，但是重新启动应用程序，又会重新创建，只不过会消耗一定的时间。删除该文件夹下的文件，不会影响电脑正常运行。如：空间听音乐，登入的号码等而缓存的一些数据，这些数据优化大师是清理不掉的，可以打开roaming文件夹里的文件全选定点击删除，删除不掉的就选择跳过，不过当你再使用程序时，这个文件夹又开始膨胀，又会缓存数据</li><li><blockquote><p>该文件下的文件不能全部删除，可以根据需要，将一些软件的缓存删除，以释放C盘空间，如果将该文件夹全部删除的话，那么可能导致系统不能正常启动。</p></blockquote></li></ul></li><li>Windows/<ul><li>该文件夹几乎存放了Windows系统运行所需要的所有的文件，包括：临时文件、系统文件、缓存等。</li><li><strong>WinSxS/</strong>：该文件下存放的是windows系统的一些补丁，也就是每次系统更新下载的补丁都存放这个文件夹下。</li><li><blockquote><p>因为是补丁，所以不能随便删除，如果删除可能会影响系统的防病毒能力。但是该文件夹有一个BackUp文件夹，用来备份一些补丁，该文件下的内容可以删除，其他的不建议删除。</p></blockquote></li></ul></li><li>Users/<ul><li><strong>Default/</strong>：用户的默认配置</li><li><strong>公用/</strong>：这是所有用户共享的文件夹，有音乐/、下载/等</li><li><strong>[你的电脑用户名]/</strong>：该文件夹存放的是当前用户的一些操作文件，包括软件的快捷方式，一些软件的默认配置文件都存放在这里，不建议删除。</li></ul></li></ul><h3 id="2-释放C盘内存空间"><a href="#2-释放C盘内存空间" class="headerlink" title="2 释放C盘内存空间"></a>2 释放C盘内存空间</h3><ul><li>C:\Users\Your-Computert-Name\AppData\Roaming\下的文件夹或文件可以删除。</li><li>C:\Program Files和C:\Program Files (x86)这两个文件下的应用程序，可以挪到其他的盘，以达到释放C盘空间的目的</li><li>C:\Users\Your-Computer-Name\文件夹的部分文件(出AppDate外)，可以删除，但是删除的时候，还是需要考虑一下，因为有些软件的配置文件会存放在这里，如果有些软件是你配置好久之后的一些参数，那么删除之后就会需要你重新调校，会很费时间的。</li></ul><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解intellij ideal 专业版</title>
      <link href="/crack-idel-perfessional/"/>
      <url>/crack-idel-perfessional/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>破解IDEAL的步骤和<a href="https://jums.club/crack-pycharm-perfessional">破解pycharm</a>的步骤差不太多。主要还是一个jar的存放路径有点不一样。</p></blockquote><p>注意：本教程转载自<a href="https://zhile.io，如有侵权请联系作者删除！" target="_blank" rel="noopener">https://zhile.io，如有侵权请联系作者删除！</a></p><p>本项目只做学习研究之用，不得用于商业用途！</p><p><a href="https://shimo.im/docs/gqQDrjPkwwctk3VJ/read" target="_blank" rel="noopener">原文</a></p><p>2019.12.02 jetbrains公司发布了Python的最强编辑器PyCharm 2019.3版本。本次大版本主要对Jupyter notebooks 、MongoDB、Python3.8功能做了一些增加，而这其中有很多功能都只能在专业版中使用。</p><p>本教程适用于PyCharm所有版本</p><h2 id="一、使用前注意事项"><a href="#一、使用前注意事项" class="headerlink" title="一、使用前注意事项"></a>一、使用前注意事项</h2><p>PyCharm一定要是在官网下载：<a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/download/</a><br>本教程适用于PyCharm所有版本<br>本教程适用于jetbrains全系列产品（Pycharm、Idea、GoLand、WebStorm、phpstorm、CLion、RubyMine、AppCode、DataGrid）目录<br>如果按照此教程还无法使用，加猪哥微信拉你进软件群（已经加过猪哥微信的请勿重复添加）</p><h2 id="二、使用教程"><a href="#二、使用教程" class="headerlink" title="二、使用教程"></a>二、使用教程</h2><h3 id="1-下载补丁"><a href="#1-下载补丁" class="headerlink" title="1.下载补丁"></a>1.下载补丁</h3><p>链接: <a href="https://pan.baidu.com/s/10cWE3gr5i0Qewamb6e-Jow" target="_blank" rel="noopener">https://pan.baidu.com/s/10cWE3gr5i0Qewamb6e-Jow</a> 提取码: q974 下载补丁文件 jetbrains-agent.jar （如果链接失效可关注微信公众号「麦田里的守望者zhg」回复pycharm破解（因为流程差不多，所以这里就还是使用的pycharm的破解思路），补丁来源于<a href="https://zhile.io）" target="_blank" rel="noopener">https://zhile.io）</a><br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/12651581337729_pic.jpg__thumbnail.jpg" class="lazyload"></p><p>新补丁文件大小为2M，如果小于2M的都是老补丁，需要从新下载哦！</p><h3 id="2-将补丁放在-lib目录"><a href="#2-将补丁放在-lib目录" class="headerlink" title="2.将补丁放在\lib目录"></a>2.将补丁放在\lib目录</h3><p>将刚才下载的补丁文件 jetbrains-agent.jar 放置在Pycharm安装目录里面的\lib目录里面，不是\bin目录，不是\bin目录，不是\bin目录。<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/12591581333249_pic_hd.jpg__thumbnail.jpg" class="lazyload"></p><h3 id="3-修改文件"><a href="#3-修改文件" class="headerlink" title="3.修改文件"></a>3.修改文件</h3><p><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/4108889784-5decbbed883ae_articlex.png" class="lazyload"><br>如果提示需要创建文件，点击<code>yes</code>即可。<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/2545636583-5decbbf0bf724_articlex.png" class="lazyload"><br>在打开的vmoptions编辑窗口末行添加：<code>-javaagent:你pycharm的安装目录\jetbrains-agent.jar</code>，请仔细检查补丁路径是否正确，如果错误则会出现pycharm打不开的情况。<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/638135301-5decbbf40522f_articlex.png" class="lazyload">   </p><p>然后重启软件，即可。</p><h3 id="4-查看有效期"><a href="#4-查看有效期" class="headerlink" title="4.查看有效期"></a>4.查看有效期</h3><p>查看有效期的步骤为点击：Help-&gt;About这里可以看到你的pycharm的版本号、许可来源、有效期、以及一些环境</p><p>显示你电脑的用户名即表示成功，如果是 to PyCharm Evaluator 则表示没有成功，按照教程再多试几次！<br><img alt="破解成功" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200331160722.png" class="lazyload"></p><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5 注意事项"></a>5 注意事项</h3><p>如果发现，重启软件之后，软件带不开或是提示<code>JDK</code>找不到，可以删除<strong>用户目录</strong>下的intellij iead文件夹，这是一个隐藏文件夹，文件名前有一个<code>.</code>，所以别删错了。</p><p><img alt=".intellij idea" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200404101849.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解pycharm 专业版</title>
      <link href="/crack-pycharm-perfessional/"/>
      <url>/crack-pycharm-perfessional/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>注意：本教程转载自<a href="https://zhile.io，如有侵权请联系作者删除！" target="_blank" rel="noopener">https://zhile.io，如有侵权请联系作者删除！</a></p><p>本项目只做学习研究之用，不得用于商业用途！</p><p><a href="https://shimo.im/docs/DJ3h3tJv98ppTYyH/read" target="_blank" rel="noopener">原文</a></p><h3 id="关注我的公众号，恢复【破解pycharm】即可。"><a href="#关注我的公众号，恢复【破解pycharm】即可。" class="headerlink" title="关注我的公众号，恢复【破解pycharm】即可。"></a>关注我的公众号，恢复【破解pycharm】即可。</h3><p><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p><p>2019.12.02 jetbrains公司发布了Python的最强编辑器PyCharm 2019.3版本。本次大版本主要对Jupyter notebooks 、MongoDB、Python3.8功能做了一些增加，而这其中有很多功能都只能在专业版中使用。</p><p>本教程适用于PyCharm所有版本</p><h2 id="一、使用前注意事项"><a href="#一、使用前注意事项" class="headerlink" title="一、使用前注意事项"></a>一、使用前注意事项</h2><p>PyCharm一定要是在官网下载：<a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/download/</a><br>本教程适用于PyCharm所有版本<br>本教程适用于jetbrains全系列产品（Pycharm、Idea、GoLand、WebStorm、phpstorm、CLion、RubyMine、AppCode、DataGrid）目录<br>如果按照此教程还无法使用，加猪哥微信拉你进软件群（已经加过猪哥微信的请勿重复添加）</p><h2 id="二、使用教程"><a href="#二、使用教程" class="headerlink" title="二、使用教程"></a>二、使用教程</h2><h3 id="1-下载补丁"><a href="#1-下载补丁" class="headerlink" title="1.下载补丁"></a>1.下载补丁</h3><p>链接: <a href="https://pan.baidu.com/s/10cWE3gr5i0Qewamb6e-Jow" target="_blank" rel="noopener">https://pan.baidu.com/s/10cWE3gr5i0Qewamb6e-Jow</a> 提取码: q974 下载补丁文件 jetbrains-agent.jar （如果链接失效可关注微信公众号「麦田里的守望者zhg」回复pycharm破解，补丁来源于<a href="https://zhile.io）" target="_blank" rel="noopener">https://zhile.io）</a><br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/12651581337729_pic.jpg__thumbnail.jpg" class="lazyload"></p><p>新补丁文件大小为2M，如果小于2M的都是老补丁，需要从新下载哦！</p><h3 id="2-将补丁放在-lib目录"><a href="#2-将补丁放在-lib目录" class="headerlink" title="2.将补丁放在\lib目录"></a>2.将补丁放在\lib目录</h3><p>将刚才下载的补丁文件 jetbrains-agent.jar 放置在Pycharm安装目录里面的\lib目录里面，不是\bin目录，不是\bin目录，不是\bin目录。<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/12591581333249_pic_hd.jpg__thumbnail.jpg" class="lazyload"></p><h3 id="3-修改文件"><a href="#3-修改文件" class="headerlink" title="3.修改文件"></a>3.修改文件</h3><p><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/4108889784-5decbbed883ae_articlex.png" class="lazyload"><br>如果提示需要创建文件，点击<code>yes</code>即可。<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/2545636583-5decbbf0bf724_articlex.png" class="lazyload"><br>在打开的vmoptions编辑窗口末行添加：<code>-javaagent:你pycharm的安装目录\jetbrains-agent.jar</code>，请仔细检查补丁路径是否正确，如果错误则会出现pycharm打不开的情况。<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/638135301-5decbbf40522f_articlex.png" class="lazyload">   </p><p>然后重启软件，即可。</p><h3 id="4-查看有效期"><a href="#4-查看有效期" class="headerlink" title="4.查看有效期"></a>4.查看有效期</h3><p>查看有效期的步骤为点击：Help-&gt;About这里可以看到你的pycharm的版本号、许可来源、有效期、以及一些环境</p><p>显示你电脑的用户名即表示成功，如果是 to PyCharm Evaluator 则表示没有成功，按照教程再多试几次！<br><img alt="破解成功" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200407114028.png" class="lazyload"></p><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5 注意事项"></a>5 注意事项</h3><p>如果发现，重启软件之后，软件带不开或是提示<code>JDK</code>找不到，可以删除<strong>用户目录</strong>下的pycharm文件夹，这是一个隐藏文件夹，文件名前有一个<code>.</code>，所以别删错了。</p><p><img alt=".pycharm" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200404101711.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中类和函数、方法、属性，以及对象的区别</title>
      <link href="/java-class-method/"/>
      <url>/java-class-method/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-类和函数、方法"><a href="#1-类和函数、方法" class="headerlink" title="1 类和函数、方法"></a>1 类和函数、方法</h3><p>类的定义，在<code>java</code>中是用<code>class</code>关键字定义的一个结构，类中可以定义函数以及定义变量。</p><p>当我们使用<code>java</code>封装了一个实体类时，该实体类中，有一些变量和函数。此时在该类中的函数，我们可以称之为该实体类的方法了，该实体类中的变量，我们可以称之为该实体类的属性。我们这里以一个<code>Person</code>实体类为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> height; <span class="comment">//身高</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">float</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">float</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到上面的代码，<code>Person</code>实体类中，具有变量和函数。现在这个变量和函数就成了<code>Person</code>实体类的属性和方法了。在<code>java</code>中，实质上都是一样的，只是叫法不同而已。</p><h3 id="2-对象"><a href="#2-对象" class="headerlink" title="2 对象"></a>2 对象</h3><p>在<code>java</code>中，一切皆是对象，因为<code>java</code>时一门面向对象的语言，所以这里就有必要介绍一下<strong>对象</strong>是什么了。在<code>java</code>中，对象可以理解为：<strong>在内存中的一段代码块</strong>，当我们使用<code>new</code>创建了一个实体类时，那么<code>java</code>虚拟机就会在内存中开辟一段内存空间，用来存放<code>new</code>出来的这个实体类。我们可以看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person(<span class="string">"Jums"</span>,<span class="number">78</span>,<span class="number">187</span>);</span><br></pre></td></tr></table></figure><p>代码中定义了一定<code>Person</code>实体类，该实体类的别名叫<code>person</code>，那么此时的这个<code>person</code>，就代表一个对象，因为该内存中已经分配了一段内存空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person;</span><br></pre></td></tr></table></figure><p>我们再来看这一行代码，此时也定义了一个实体类，别名是<code>person</code>，但是没有实例化，也就是没有给它分配一个具体的<code>class</code>的实例。</p><h3 id="3-理解"><a href="#3-理解" class="headerlink" title="3 理解"></a>3 理解</h3><p>我们可以这样理解，用<code>class</code>定义的一个<code>Person</code>实体类，就如同工厂中的样品产品（俗称模子），不能直接没给客户。而<code>person</code>就是工厂具体生产出来的一个产品，也就是说是量产出来的，可以直接卖给客户。而那个<strong>对象</strong>的概念，就是这里讲的量产出来的具体的产品，可以类似这么理解。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中的接口(interface)和抽象类(abstract)的区别</title>
      <link href="/java-interface-abstract/"/>
      <url>/java-interface-abstract/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-如何定义interface"><a href="#1-如何定义interface" class="headerlink" title="1 如何定义interface"></a>1 如何定义interface</h3><p>如何在<code>java</code>中定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterfaceName</span></span>&#123;</span><br><span class="line">  <span class="comment">//这里写具体的接口内部的方法</span></span><br><span class="line">  <span class="comment">//比如：</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-如何定义abstract"><a href="#2-如何定义abstract" class="headerlink" title="2 如何定义abstract"></a>2 如何定义abstract</h3><p>如何在<code>java</code>中定义抽象类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsName</span></span>&#123;</span><br><span class="line">  <span class="comment">//这里写具体的方法  可以写抽象方法和具体方法</span></span><br><span class="line">  <span class="comment">//比如：</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">  &#125;; <span class="comment">//不是抽象方法</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="interface和abstract的相同之处"><a href="#interface和abstract的相同之处" class="headerlink" title="interface和abstract的相同之处"></a>interface和abstract的相同之处</h3><ul><li>都是用来定义一个规范的，不写具体的实现</li></ul><h3 id="interface和abstract的不同之处"><a href="#interface和abstract的不同之处" class="headerlink" title="interface和abstract的不同之处"></a>interface和abstract的不同之处</h3><ul><li>interface内部定义的方法，它的实现类必须将其全部实现</li><li>abstract内部定义的方法，继承自它的子类，其子类可以不用全部实现其父类中的抽象方法，普通方法可以不用全部实现</li></ul><h3 id="看具体代码"><a href="#看具体代码" class="headerlink" title="看具体代码"></a>看具体代码</h3><p>AbsClass.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这是定义的一个抽象方法 不需要大括号</span></span><br><span class="line"><span class="comment">    继承该类的子类必须实现该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这是一个普通方法 必须带大括号，内部可以空实现即不写任何代码</span></span><br><span class="line"><span class="comment">    继承该类的子类可以不用实现该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showName</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interface1.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">interface1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    下面定义的两个方法，实现该接口的类，必去全部实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>concreteClass.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">concreteClass</span> <span class="keyword">extends</span> <span class="title">AbsClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>concreteInterface.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">concreteInterface</span> <span class="keyword">implements</span> <span class="title">Interface1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将自己写的python包自动导入到环境变量中，在命令行可以使用</title>
      <link href="/how-to-use-setuptools/"/>
      <url>/how-to-use-setuptools/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h3><p>最近在写一些爬虫相关的项目，发现其中有很多的操作都是一些重复的代码，且有一定的规律性，所以就决定自己写一个自定义的包（<code>packagea</code>），然后通过<code>from moudle import moudle</code>的方式导入，就可以省去很多麻烦了。</p><p>但是发现，只有在<code>pycharm</code>中才可以导入自己的自定义包，如果在命令行中运行<code>python</code>文件的话，就会提示找不到，<code>Google</code>之后发现，是因为自己写的包没有添加到<code>python</code>的环境变量中。我们可以通过下面的语句查看环境变量：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">print(sys.path)   ## 查看环境变量</span><br><span class="line">sys.path.append(r&quot;c/mypackage/&quot;)  ## 将自己的包添加到环境变量中</span><br></pre></td></tr></table></figure><p>看了上面的代码之后，我们可以发现，我们可以将自己的自定义包添加到<code>python</code>环境变量，但是我们每次都需要使用<code>sys</code>包，进行<code>append</code>我们自己的包路径。很是麻烦。今天介绍一种非常一次性解决的方法，直接将我们的包拷贝一份到环境变量中。</p><h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>我们可以使用<code>python</code>中的<code>setuptools</code>包，将我们的包自动拷贝到<code>python</code>环境变量中。目录结构参考如下：<br><img alt="目录结构" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200321202457.png" class="lazyload">   </p><h4 id="第一步-如何配置"><a href="#第一步-如何配置" class="headerlink" title="第一步 如何配置"></a>第一步 如何配置</h4><p>在我们的自定义的包，添加一个<code>python</code>文件，且该文件必须命名为：<code>setup.py</code>，然后在该文件中，写上一些具体的参数即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># coding=utf-8</span><br><span class="line">from setuptools import setup</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    author=&quot;CrazyJUms&quot;,  ### 作者的名字  也就是你自己的名字</span><br><span class="line">    author_email =&quot;15959963313@163.com&quot;,   ### 作者的邮箱</span><br><span class="line">    description=&quot;This is a utility, writen by CrazyJUms&quot;,   ### 一句话概括一下</span><br><span class="line">    url=&quot;https://github.com/crazyjums/my_utility&quot;,   ### 你可以把你的home page或者github主页的地址写上</span><br><span class="line">    name=&quot;utility&quot;,   ### 给你的包取一个名字</span><br><span class="line">    version=&quot;1.0&quot;,   ### 你的包的版本号</span><br><span class="line">    packages=[&apos;utility&apos;],   ### 这里写的是需要从哪个文件夹下导入python包，目录结构如上面所示，名字必须对上，如果找不到会报错</span><br><span class="line">    install_requires=[   ### 这是你的自定义包中已经导入的一些三方包，这里填上，当自动安装的时候，就会监测本地电脑是否安装，如果没有安装会自动联网按住那个非常方便</span><br><span class="line">        &quot;requests&gt;=2.23.0&quot;,</span><br><span class="line">        &quot;bs4&gt;=0.0.1&quot;,</span><br><span class="line">        &quot;lxml&gt;=4.5.0&quot;</span><br><span class="line">                     ],</span><br><span class="line">    exclude_package_date=&#123;&apos;&apos;:[&apos;.gitignore&apos;], &apos;&apos;:[&apos;dist&apos;], &apos;&apos;:&apos;build&apos;, &apos;&apos;:&apos;utility.egg.info&apos;&#125;,    ### 这是需要排除的文件，也就是只把有用的python文件导入到环境变量中</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这里只介绍一些基本的参数，具体的所有参数，请参考<a href="https://pypi.org/project/setuptools/" target="_blank" rel="noopener">setuptools官网</a>。</p><h4 id="第二步-如何使用"><a href="#第二步-如何使用" class="headerlink" title="第二步 如何使用"></a>第二步 如何使用</h4><p>我们有两种方式可以在本地运行，这两种方法的前提都是得进入到你的包的目录中：</p><ul><li>方法一：使用<code>python setup.py install</code>进行安装</li><li>方法二：使用<code>pip install .</code>进行安装，<strong>注意：有一个点，别忘了，代表当前目录</strong></li></ul><h4 id="第三步-如何联网安装"><a href="#第三步-如何联网安装" class="headerlink" title="第三步 如何联网安装"></a>第三步 如何联网安装</h4><p>当然，如果你不满足于本地，希望将自己的包给全世界的程序员使用，那么你可以将自己的上传至<a href="https://pypi.org/" target="_blank" rel="noopener">PYPI</a>，这样的话，我们就可以直接使用<code>pip install your-package-name</code>进行联网安装了，并不需要进入到你的目录里面。</p><p>首先你得在<a href="https://pypi.org/" target="_blank" rel="noopener">PYPI</a>注册一个装好，然后按照里面的步骤，提交你的代码压缩包即可。提交的是一个后缀为<code>.tar.gz</code>的压缩包，你可以使用命令<code>python setup.py sdist</code>进行生成。<br><img alt="生成压缩包" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200321203708.png" class="lazyload"><br>然后你可以看到你的目录下面多了一个<code>dist</code>的目录，该目录下面有一个压缩包，你将此压缩包上传至<a href="https://pypi.org/" target="_blank" rel="noopener">PYPI</a>，就可以了。<br>上传命令：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup sdist uplaod</span><br></pre></td></tr></table></figure><p>然后你就可以使用<code>pip</code>进行安装了。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TabError: Inconsistent use of tabs and spaces in indentation</title>
      <link href="/python-tab-error/"/>
      <url>/python-tab-error/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h3><p>在使用命令行运行<code>python</code>文件时，出现以下错误：   </p><blockquote><p>TabError: Inconsistent use of tabs and spaces in indentation</p></blockquote><p>但是代码什么的都没有问题，最后发现是格式的问题。因为<code>python</code>中默认是使用缩进进行区分代码的，所以如果使用了<code>tab</code>键进行缩进代码，那就回报这个错误。</p><p><img alt="error show" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200320205810.png" class="lazyload"></p><h3 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2 解决方法"></a>2 解决方法</h3><p>用空格代替<code>tab</code>即可。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 解决问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决python3 UnicodeEncodeError: &#39;gbk&#39; codec can&#39;t encode character &#39;\xXX&#39; in position XX</title>
      <link href="/unicode-error-sloved/"/>
      <url>/unicode-error-sloved/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-错误"><a href="#1-错误" class="headerlink" title="1 错误"></a>1 错误</h3><p>在使用爬虫爬取网络数据时，容易报下面的错误，也就是Unicode解码错误。<br><code>UnicodeEncodeError: &#39;gbk&#39; codec can&#39;t encode character &#39;\xbb&#39; in position 0: illegal multibyte sequence</code></p><p>str转bytes叫encode，bytes转str叫decode，如上面的代码就是将抓到的字节流给decode成unicode数组，我们使用下面的代码测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">b'\xc2\xbb'</span>.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：UnicodeEncodeError: ‘gbk’ codec can’t encode character ‘\xbb’ in position 0: illegal multibyte sequence</p></blockquote><p>从结果可以看出，报错了。和爬虫的错误一模一样。</p><h4 id="错误原因解析"><a href="#错误原因解析" class="headerlink" title="错误原因解析"></a>错误原因解析</h4><p><code>python</code>语言自身的限制，由于<code>print()</code>方法并不能完全输出所有的<code>unicode</code>编码中的字符，所以我们有时候在使用爬虫的时候，会报这个错误。</p><h3 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2 解决方法"></a>2 解决方法</h3><p>在爬虫的文件头部，加上下面的代码即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line">sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding=<span class="string">"utf8"</span>)  <span class="comment">## encoding 的参数写成网站的编码格式即可</span></span><br></pre></td></tr></table></figure><p>其中，中文编码的大小：<strong>gbk&lt;gb2312&lt;gb18030</strong>，一般情况下，<code>gb18030</code>编码都能解析<code>gbk</code>不能解析的编码信息。</p><h3 id="转载博客"><a href="#转载博客" class="headerlink" title="转载博客"></a>转载博客</h3><blockquote><p>原文：<a href="https://blog.csdn.net/jim7424994/article/details/22675759" target="_blank" rel="noopener">https://blog.csdn.net/jim7424994/article/details/22675759</a></p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 解决问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中的nonlocal和global关键字解析，python闭包解析</title>
      <link href="/python-namespace/"/>
      <url>/python-namespace/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-namespace"><a href="#1-namespace" class="headerlink" title="1 namespace"></a>1 namespace</h3><p>在python中。只有模块（module）才会重新开辟一个新的作用域，像<code>if/else</code>,<code>for loop</code>,<code>while loop</code>等是不会开辟新的作用域的。也就是说，在上述这几个循环体或控制体中的变量，在外部也就是主作用域中一样可以调用。看下面代码：   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">  s = i</span><br><span class="line">  print(s)</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：9</p></blockquote><p>从代码中可以看出，这几个控制体中不存在作用域。</p><h3 id="2-global"><a href="#2-global" class="headerlink" title="2 global"></a>2 global</h3><p>上一节讲述了作用域，这里就介绍一下<code>global</code>关键字。先看代码：   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">  num = <span class="number">10</span></span><br><span class="line">  num = num * <span class="number">2</span></span><br><span class="line">  print(num)</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><blockquote><p>运行结果： 20</p></blockquote><p>如果想要在<code>test()</code>函数内部调用外部的<code>num</code>变量，那么就需要使用<code>global</code>关键字。如下：   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">global</span> num</span><br><span class="line">  num = num * <span class="number">2</span></span><br><span class="line">  print(num)</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：200</p></blockquote><h3 id="3-nonlocal"><a href="#3-nonlocal" class="headerlink" title="3 nonlocal"></a>3 nonlocal</h3><p>在介绍<code>nonlocal</code>关键字之前，大家需要先了解一下<strong>闭包</strong>的概念，闭包在很多的编程语言中都有，在python中也有。</p><blockquote><h3 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h3><p>闭包就是在一个函数嵌套另一个函数，这两个函数都有其<code>局部变量</code>，外部的函数中的变量，在内部函数中是不能被<code>直接</code>修改的。也就是说，我们可以进行间接修改。那间接修改就需要用到<code>nonlocal</code>关键字。</p></blockquote><p>先看一段代码：   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span><span class="params">()</span>:</span></span><br><span class="line">  var = <span class="number">200</span> <span class="comment"># this is a nonlocal variable</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># nonlocal var # define a nonlocal variable</span></span><br><span class="line">    var = <span class="number">300</span> <span class="comment"># this variable is different from the outter.var</span></span><br><span class="line">    print(<span class="string">"inner:"</span>, var)</span><br><span class="line">  inner()</span><br><span class="line">  print(<span class="string">"outter:"</span>, var)</span><br><span class="line">outter()</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br>inner:300<br>outter:200</p></blockquote><p>这是没有使用<code>nonlocal</code>关键字的代码：如果我们使用<code>nonlocal</code>定义<code>var</code>的话，那么救结果就不同了：   </p><blockquote><p>修改代码：去掉第4行的注释即可<br>运行结果：<br>inner:300<br>outter:300</p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnicodeDecodeError: &#39;gb2312&#39; codec can&#39;t decode byte 0x87 in position 16144: illegal multibyte sequence</title>
      <link href="/UnicodeDecodeError-gb2312/"/>
      <url>/UnicodeDecodeError-gb2312/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h3><h4 id="UnicodeDecodeError-‘gb2312’-codec-can’t-decode-byte-0x87-in-position-16144-illegal-multibyte-sequence"><a href="#UnicodeDecodeError-‘gb2312’-codec-can’t-decode-byte-0x87-in-position-16144-illegal-multibyte-sequence" class="headerlink" title="UnicodeDecodeError: ‘gb2312’ codec can’t decode byte 0x87 in position 16144: illegal multibyte sequence"></a>UnicodeDecodeError: ‘gb2312’ codec can’t decode byte 0x87 in position 16144: illegal multibyte sequence</h4><p><img alt="gb2312 error" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200311213944.png" class="lazyload"></p><h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2 分析"></a>2 分析</h3><p>解码错误，我们在用python爬虫爬取网页信息时，通常会遇到编码问题，这是其中的一种，中文编码问题更多。中文编码有如下几种，字符数以次增多：<code>gb2312&lt;gbk&lt;gb18030</code>，如果使用<code>gb2312</code>不能解码，那么可以使用<code>gb18030</code>解码试试</p><p><img alt="gn18030" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200311213901.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫如何下载存储图片</title>
      <link href="/crawl-photo/"/>
      <url>/crawl-photo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_photo</span><span class="params">()</span>:</span></span><br><span class="line">    root = <span class="string">"g:/emojis/"</span></span><br><span class="line">    url = <span class="string">"https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/avatar.jpg"</span></span><br><span class="line">    <span class="keyword">with</span> open(root + <span class="string">"name.jpg"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> file:</span><br><span class="line">        r = requests.get(url).content  <span class="comment">## This is the main code </span></span><br><span class="line">        file.write(r)  <span class="comment">## the main code too</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    download_photo()</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些比较好的爬虫项目汇总</title>
      <link href="/awesome-spider-project/"/>
      <url>/awesome-spider-project/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/crazyjums/spider-project-summary/blob/master/REDEME.en.MD" target="_blank" rel="noopener">English Version</a>   </p><h2 id="1-爬虫入门"><a href="#1-爬虫入门" class="headerlink" title="1 爬虫入门"></a>1 爬虫入门</h2><table><thead><tr><th>项目名称</th><th>项目介绍</th></tr></thead><tbody><tr><td><a href="https://github.com/lining0806/PythonSpiderNotes" target="_blank" rel="noopener">python爬虫入门教程</a></td><td>这里主要介绍了一些爬虫的入门教程，非常适合小白入手</td></tr></tbody></table><h2 id="2-爬虫登录"><a href="#2-爬虫登录" class="headerlink" title="2 爬虫登录"></a>2 爬虫登录</h2><table><thead><tr><th>项目名称</th><th>项目介绍</th></tr></thead><tbody><tr><td><a href="https://github.com/crazyjums/awesome-python-login-model" target="_blank" rel="noopener">login-model</a></td><td>这是爬虫中的登录模块演示</td></tr></tbody></table><h2 id="3-用户代理（User-Agent）"><a href="#3-用户代理（User-Agent）" class="headerlink" title="3 用户代理（User-Agent）"></a>3 用户代理（User-Agent）</h2><table><thead><tr><th>项目名称</th><th>项目介绍</th></tr></thead><tbody><tr><td><a href="https://github.com/crazyjums/fake-useragent" target="_blank" rel="noopener">fake-useragent</a></td><td>这里面有很多的用户代理（浏览器），防止被服务器监测到是机器人</td></tr></tbody></table><h2 id="4-代理池"><a href="#4-代理池" class="headerlink" title="4 代理池"></a>4 代理池</h2><blockquote><p>这里主要是一些HTTP Proxy代理项目，可以用于爬虫代理服务</p></blockquote><table><thead><tr><th>项目名称</th></tr></thead><tbody><tr><td><a href="https://github.com/crazyjums/mitmproxy" target="_blank" rel="noopener">mitmproxy</a></td></tr><tr><td><a href="https://github.com/crazyjums/haipproxy" target="_blank" rel="noopener">haipproxy</a></td></tr><tr><td><a href="https://github.com/crazyjums/scylla" target="_blank" rel="noopener">scylla</a></td></tr><tr><td><a href="https://github.com/crazyjums/getproxy" target="_blank" rel="noopener">getproxy</a></td></tr></tbody></table><h2 id="5-爬虫项目"><a href="#5-爬虫项目" class="headerlink" title="5 爬虫项目"></a>5 爬虫项目</h2><table><thead><tr><th>项目名称</th><th>项目介绍</th></tr></thead><tbody><tr><td><a href="https://github.com/facert/awesome-spider" target="_blank" rel="noopener">awesome-spider</a></td><td>这里介绍了很多的爬虫小项目，主要语言用的是<code>python</code></td></tr><tr><td><a href="https://github.com/scrapy/scrapy" target="_blank" rel="noopener">Scrapy</a></td><td>一个股票数据爬虫，可以通过<code>pip</code>进行安装使用</td></tr><tr><td><a href="https://github.com/crazyjums/ruia" target="_blank" rel="noopener">ruia</a></td><td>一个异步爬虫框架，可以实现高速爬取</td></tr><tr><td><a href="https://github.com/crazyjums/weixin_crawler" target="_blank" rel="noopener">weixin_crawler</a></td><td>一个微信公众号爬虫项目，可以爬取一些公众号的文章</td></tr><tr><td><a href="https://github.com/crazyjums/WechatSogou" target="_blank" rel="noopener">WechatSogou</a></td><td>一个微信搜狗搜索的<code>API</code>接口</td></tr></tbody></table><h2 id="6-爬虫框架"><a href="#6-爬虫框架" class="headerlink" title="6 爬虫框架"></a>6 爬虫框架</h2><table><thead><tr><th>项目名称</th><th>项目介绍</th></tr></thead><tbody><tr><td><a href="https://github.com/xianhu/PSpider" target="_blank" rel="noopener">PSpider</a></td><td>一个简单的web爬虫框架</td></tr><tr><td><a href="https://github.com/scrapy/scrapy" target="_blank" rel="noopener">Scrapy</a></td><td>Scrapy 是用 Python 实现的一个为了爬取网站数据、提取结构性数据而编写的应用框架</td></tr></tbody></table><h2 id="7-python其他"><a href="#7-python其他" class="headerlink" title="7 python其他"></a>7 python其他</h2><table><thead><tr><th>项目名称</th><th>项目介绍</th></tr></thead><tbody><tr><td><a href="https://github.com/crazyjums/wtfpython" target="_blank" rel="noopener">wtfpython</a></td><td>这里主要介绍了一些比较不常见的python代码，可以帮助我们减少平时写代码的时候进行debug调试</td></tr><tr><td><a href="https://github.com/crazyjums/awesome-python-applications" target="_blank" rel="noopener">awesome-python-applications</a></td><td>这里介绍了很多的特别棒的用<code>python</code>语言写的一些项目代码</td></tr></tbody></table><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> summary </tag>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些比较优秀的机器学习算法的汇总</title>
      <link href="/machine-learning-project/"/>
      <url>/machine-learning-project/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/crazyjums/awesome-ml-summary/blob/master/README.en.MD" target="_blank" rel="noopener">English Version</a>   </p><h1 id="机器学习项目"><a href="#机器学习项目" class="headerlink" title="机器学习项目"></a><center>机器学习项目</center></h1><h2 id="1-预测"><a href="#1-预测" class="headerlink" title="1 预测"></a>1 预测</h2><h3 id="1-1-时间序列预测"><a href="#1-1-时间序列预测" class="headerlink" title="1.1 时间序列预测"></a>1.1 时间序列预测</h3><table><thead><tr><th>项目名称</th><th>项目介绍</th></tr></thead><tbody><tr><td><a href="https://github.com/crazyjums/LSTM" target="_blank" rel="noopener">LSTM</a></td><td>使用LSTM神经网络进行时间序列数据预测分析, 基于Tensorflow框架、Kerase接口开发网络模型</td></tr><tr><td><a href="https://github.com/VivekPa/AIAlpha" target="_blank" rel="noopener">AIAlpha</a></td><td>该项目是堆叠神经网络预测股票回报的高级实现。</td></tr><tr><td><a href="https://github.com/634671436/Air_Pollution_Forcast_Beijing" target="_blank" rel="noopener">Air_Pollution_Forcast_Beijing</a></td><td>基于Keras的LSTM多变量时间序列预测</td></tr><tr><td><a href="https://github.com/jeurtr/TimeSeries_Predict" target="_blank" rel="noopener">TimeSeries_Predict</a></td><td>客流量时间序列预测</td></tr><tr><td><a href="https://github.com/wikke/TimeSeriesPrediction" target="_blank" rel="noopener">TimeSeriesPrediction</a></td><td>洗发水、股票预测等</td></tr><tr><td><a href="https://github.com/huang027/ARIMA" target="_blank" rel="noopener">ARIMA</a></td><td>基于<code>ARIMA</code>的预测</td></tr><tr><td><a href="https://github.com/yangwohenmai/TimeSeriesForecasting" target="_blank" rel="noopener">TimeSeriesForecasting</a></td><td>基于统计学的时间序列预测</td></tr><tr><td><a href="https://github.com/Clearfk/lstm-rnn-stock-predict" target="_blank" rel="noopener">lstm-rnn-stock-predict</a></td><td>这是一个基于LSTM-RNN算法的线上金融股票价格走势预测的小项目，使用tensorflow框架实现。</td></tr><tr><td><a href="https://github.com/coder17173/TripleExponentialSmoothing" target="_blank" rel="noopener">TripleExponentialSmoothing</a></td><td>三阶指数平滑算法，对于带有趋势性及周期性的时间序列有不错的预测效果。</td></tr><tr><td><a href="https://github.com/mufeiandroid/ML_stock_qt" target="_blank" rel="noopener">ML_stock_qt</a></td><td>基于机器学习算法的A股股票走势预测</td></tr><tr><td><a href="https://github.com/ZhouM1118/intelligentler-bp-ga" target="_blank" rel="noopener">intelligentler-bp-ga</a></td><td>基于BP算法和遗传算法建立武汉市空气质量指数的预测模型，以武汉市8个监测站的1年的空气质量数据为训练数据进行神经网络的建模，近一个月的数据作为测试数据进行模型的准确性测试，平均准确率在75%左右。</td></tr><tr><td><a href="https://github.com/xiaoluchaotian/stock_simple_mlp_algorithm" target="_blank" rel="noopener">stock_simple_mlp_algorithm</a></td><td>一个简单的股票预测算法，利用过去5天的涨幅，以及十余项市值因子和财务因子进行训练学习。</td></tr><tr><td><a href="https://github.com/maxiaozte/timeSeriesForecasting" target="_blank" rel="noopener">timeSeriesForecasting</a></td><td>时间序列预测算法总结与整理</td></tr><tr><td><a href="https://github.com/tudoulei/forest-cover-type-prediction" target="_blank" rel="noopener">forest-cover-type-prediction</a></td><td>kaggle比赛森林覆盖类型预测算法</td></tr><tr><td><a href="https://github.com/hangtongluo/ctrip001" target="_blank" rel="noopener">ctrip001</a></td><td>机票航班延误预测算法大赛</td></tr><tr><td><a href="https://github.com/andinsbing/Analysis-of-College-Graduates-Employment-Orientation" target="_blank" rel="noopener">Analysis-of-College-Graduates-Employment-Orientation</a></td><td>本项目旨在建立一个基于大数据处理的大学生就业方向分析预测系统，通过爬虫技术获取各大公司和著名招聘网站的大量招聘信息，然后将获取的数据进行清洗分类后储存在数据库中，最后从大学生的就业角度出发，通过算法分析数据，建立一个帮助大学生明确就业方向与社会需求的平台</td></tr><tr><td><a href="https://github.com/nik-niming/ARIMA" target="_blank" rel="noopener">ARIMA</a></td><td>时序数据预测算法ARIMA Demo,基于航空乘客月度数据集</td></tr></tbody></table><h3 id="1-2-预测算法"><a href="#1-2-预测算法" class="headerlink" title="1.2 预测算法"></a>1.2 预测算法</h3><table><thead><tr><th>项目名称</th><th>项目介绍</th></tr></thead><tbody><tr><td><a href="https://github.com/xiaoming-qxm/JData" target="_blank" rel="noopener">JData</a></td><td>京东JData算法大赛-高潜用户购买意向预测入门程序</td></tr><tr><td><a href="https://github.com/HongZhaoHua/jstarcraft-rns" target="_blank" rel="noopener">jstarcraft-rns</a></td><td>专注于解决推荐领域与搜索领域的两个核心问题:排序预测(Ranking)和评分预测(Rating). 为相关领域的研发人员提供完整的通用设计与参考实现. 涵盖了70多种排序预测与评分预测算法,是最快最全的Java推荐与搜索引擎.</td></tr><tr><td><a href="https://github.com/onion1003/JData_2018" target="_blank" rel="noopener">JData_2018</a></td><td>京东2018算法大赛 如期而至-用户购买时间预测</td></tr></tbody></table><h3 id="1-3-推荐系统"><a href="#1-3-推荐系统" class="headerlink" title="1.3 推荐系统"></a>1.3 推荐系统</h3><table><thead><tr><th>项目名称</th><th>项目介绍</th></tr></thead><tbody><tr><td><a href="https://github.com/crazyjums/RecommenderSystem-Paper" target="_blank" rel="noopener">RecommenderSystem-Paper</a></td><td>For the convenience of reading, I collect some basic and important papers about recommender system.</td></tr><tr><td><a href="https://github.com/apachecn/RecommenderSystems" target="_blank" rel="noopener">RecommenderSystems</a></td><td>介绍推荐系统基本知识，相关算法以及实现。</td></tr><tr><td><a href="https://github.com/LABELNET/YuanNews" target="_blank" rel="noopener">YuanNews</a></td><td>基于用户兴趣标签的新闻推荐系统</td></tr><tr><td><a href="https://github.com/zhaozhiyong19890102/Recommender-System" target="_blank" rel="noopener">Recommender-System</a></td><td>推荐系统综述</td></tr><tr><td><a href="https://github.com/jasonTangxd/recommendSys" target="_blank" rel="noopener">recommendSys</a></td><td>实时推荐和离线推荐</td></tr></tbody></table><h3 id="机器学习相关文档"><a href="#机器学习相关文档" class="headerlink" title="机器学习相关文档"></a>机器学习相关文档</h3><table><thead><tr><th>项目名称</th><th>项目介绍</th><th>GitHub</th><th>官网</th></tr></thead><tbody><tr><td>numpy-cn</td><td><code>Numpy</code>教程中文版，</td><td><a href="https://github.com/teadocs/numpy-cn" target="_blank" rel="noopener">numpy-cn</a></td><td><a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">numpy-cn</a></td></tr><tr><td>pandas-cn</td><td><code>pandas</code>教程中文版</td><td><a href="https://github.com/teadocs/pandas-cn" target="_blank" rel="noopener">pandas-cn</a></td><td><a href="https://www.pypandas.cn/" target="_blank" rel="noopener">pandas-cn</a></td></tr><tr><td>matplotlib-cn</td><td><code>matplotlib</code>教程中文版</td><td><a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">matplotlib-cn</a></td><td><a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">matplotlib-cn</a></td></tr><tr><td>TensorFlow-cn</td><td><code>TensorFlow</code>教程中文版</td><td><a href="https://github.com/xitu/tensorflow-docs" target="_blank" rel="noopener">TensorFlow-cn</a></td><td><a href="https://tensorflow.juejin.im/get_started/" target="_blank" rel="noopener">TensorFlow-cn</a></td></tr><tr><td>sklearn-cn</td><td><code>sklearn</code>教程中文版</td><td><a href="https://github.com/apachecn/sklearn-doc-zh" target="_blank" rel="noopener">sklearn-cn</a></td><td><a href="https://sklearn.apachecn.org/" target="_blank" rel="noopener">sklearn-cn</a></td></tr></tbody></table><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>预测算法简介</title>
      <link href="/prediction-algorithm/"/>
      <url>/prediction-algorithm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-A-few-more-concept-you-need-to-know"><a href="#0-A-few-more-concept-you-need-to-know" class="headerlink" title="0 A few more concept you need to know"></a>0 A few more concept you need to know</h3><h4 id="0-1-什么是bagging和boosting-link"><a href="#0-1-什么是bagging和boosting-link" class="headerlink" title="0.1 什么是bagging和boosting|link"></a>0.1 什么是bagging和boosting|<a href="https://www.jianshu.com/p/d270af43f043" target="_blank" rel="noopener">link</a></h4><p><strong>bagging</strong>：Bagging是Bootstrap Aggregating的英文缩写,是指一种有放回采样<br><strong>boosting</strong>：提升方法（Boosting），是一种可以用来减小监督式学习中偏差的机器学习算法。面对的问题是迈可·肯斯（Michael Kearns）提出的：一组“弱学习者”的集合能否生成一个“强学习者”？弱学习者一般是指一个分类器，它的结果只比随机分类好一点点；强学习者指分类器的结果非常接近真值。</p><h4 id="0-2-预测和拟合的区别？"><a href="#0-2-预测和拟合的区别？" class="headerlink" title="0.2 预测和拟合的区别？"></a>0.2 预测和拟合的区别？</h4><blockquote><p>预测：灰色预测的通用性比较强一些，一般场合都可以用，尤其适合那些规律性差且不清楚数据产生机理的情况。   </p></blockquote><blockquote><p>拟合：拟合比较适合于那些清楚数据产生机理，有比较规则的变化趋势的场景，比如已经知道这些数据符合一定的动力学变化规律，这时用指数拟合就比较合适。</p></blockquote><p>在数学建模中，能用拟合的地方尽量用拟合，这样会有具体的函数表达式，更有利于进一步的建模。当然有些问题就是数据的预测，这种情况哪种精度高就用哪种了（建议都用，便于比较），上面所说的最适合的问题，也主要是基于精度考虑的。</p><h4 id="0-3-预测和推荐的区别？"><a href="#0-3-预测和推荐的区别？" class="headerlink" title="0.3 预测和推荐的区别？"></a>0.3 预测和推荐的区别？</h4><h4 id="0-4-时间序列预测法-link"><a href="#0-4-时间序列预测法-link" class="headerlink" title="0.4 时间序列预测法|link"></a>0.4 时间序列预测法|<a href="https://zhuanlan.zhihu.com/p/38320827" target="_blank" rel="noopener">link</a></h4><blockquote><p>时间序列预测法其实是一种回归预测方法，属于定量预测，其基本原理是:一方面承认事物发展的延续性，运用过去的时间序列数据进行统计分析，推测出事物的发展趋势；另一方面充分考虑到由于偶然因素影响而产生的随机性，为了消除随机波动产生的影响，利用历史数据进行统计分析，并对数据进行适当处理，进行趋势预测。</p></blockquote><h4 id="0-5-什么有量纲和什么是无量纲？"><a href="#0-5-什么有量纲和什么是无量纲？" class="headerlink" title="0.5 什么有量纲和什么是无量纲？"></a>0.5 什么有量纲和什么是无量纲？</h4><p>量纲：是指有具体的单位的量，比如1m/s就是一个量纲量，是矢量。<br>无量纲：是指没有具体单位的标准化统计量，比如1%等，是标量<br>归一化：就是将有量纲的量转化成一个无量纲的量，将矢量变成标量。</p><h3 id="1-线性回归-link"><a href="#1-线性回归-link" class="headerlink" title="1 线性回归|link"></a>1 线性回归|<a href="https://www.cnblogs.com/baoxuhong/p/10210751.html" target="_blank" rel="noopener">link</a></h3><blockquote><p>定义：确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法   </p></blockquote><p>公式：<br><img alt="image" data-src="https://img2018.cnblogs.com/blog/925095/201901/925095-20190102130153170-1089413164.png" class="lazyload"><br>举例：<br>线性回归的目的就是找到一条线，能够使图中的每个点到该直线的举例最短，一般可用<a href="https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95" target="_blank" rel="noopener">最小二乘法</a>进行拟合<br><img alt="image" data-src="https://img2018.cnblogs.com/blog/925095/201901/925095-20190102131101282-829231011.png" class="lazyload"></p><h3 id="2-逻辑回归-link"><a href="#2-逻辑回归-link" class="headerlink" title="2 逻辑回归|link"></a>2 逻辑回归|<a href="https://www.cnblogs.com/baoxuhong/p/10222463.html" target="_blank" rel="noopener">link</a></h3><blockquote><p>概念：线性回归可以拟合X与Y之间的关系，但回归模型中Y值是连续的，如果换成一个二分类标签，Y只能取两个值0、1，这时候就不能用线性回归了，这样就有了逻辑回归。   </p></blockquote><p>针对Y的值域在区间[0-1]的问题，我们不能寻找到一条完美曲线，用于拟合二分类模型，但我们可以寻找一条完美的S型曲线，S型曲线叫Sigmoid曲线，<br><img alt="image" data-src="https://img2018.cnblogs.com/blog/925095/201901/925095-20190104185925892-1190461612.png" class="lazyload"><br>核心原理：<br>==逻辑回归核心原理是在线性回归的基础上加上一个Sigmoid函数，把训练数据通过Sigmoid函数整合到（0—1）之间。==</p><h3 id="3-支持向量机-link"><a href="#3-支持向量机-link" class="headerlink" title="3 支持向量机|link"></a>3 支持向量机|<a href="https://www.cnblogs.com/baoxuhong/p/10240867.html" target="_blank" rel="noopener">link</a></h3><blockquote><p>概念：SVM思想和线性回归很相似，两个都是寻找一条最佳直线。<br><strong>不同点</strong>：最佳直线的定义方法不一样，线性回归要求的是直线到各个点的距离最近，SVM要求的是直线离两边的点距离尽量大。</p></blockquote><p><img alt="image" data-src="https://img2018.cnblogs.com/blog/925095/201901/925095-20190108233323307-1363840041.png" class="lazyload"></p><h3 id="4-随机森林算法-link"><a href="#4-随机森林算法-link" class="headerlink" title="4 随机森林算法|link"></a>4 随机森林算法|<a href="https://blog.csdn.net/qq_34106574/article/details/82016442" target="_blank" rel="noopener">link</a></h3><p>所以随机森林算法的随机性主要体现在以下两个方面：   </p><ul><li>子模型的训练样本是随机抽取的</li><li>子模型的特征变量也是随机抽取的</li></ul><p>掌握随机森林之前，你学要具备如下知识：</p><ul><li><a href="https://www.cnblogs.com/zongfa/p/9304353.html" target="_blank" rel="noopener">集成学习</a></li><li><a href="https://www.cnblogs.com/keye/p/10564914.html" target="_blank" rel="noopener">决策树</a>   </li><li><a href="https://www.cnblogs.com/IamJiangXiaoKun/p/9455689.html" target="_blank" rel="noopener">信息熵</a>| <a href="https://blog.csdn.net/am290333566/article/details/81187124" target="_blank" rel="noopener">more concept</a></li></ul><p>随机森林的优缺点：| <a href="https://blog.csdn.net/qq_39303465/article/details/79234950" target="_blank" rel="noopener">learn more</a></p><p>决策树算法的优缺点：<br>优点:</p><ul><li>(1)速度快: 计算量相对较小, 且容易转化成分类规则. 只要沿着树根向下一直走到叶, 沿途的分裂条件就能够唯一确定一条分类的谓词.</li><li>(2)准确性高: 挖掘出来的分类规则准确性高, 便于理解, 决策树可以清晰的显示哪些字段比较重要, 即可以生成可以理解的规则.</li><li>(3)可以处理连续和种类字段</li><li>(4)不需要任何领域知识和参数假设</li><li>(5)适合高维数据   </li></ul><p>缺点:   </p><ul><li>(1)对于各类别样本数量不一致的数据, 信息增益偏向于那些更多数值的特征</li><li>(2)容易过拟合</li><li>(3)忽略属性之间的相关性</li></ul><h3 id="5-AdaBoost-link"><a href="#5-AdaBoost-link" class="headerlink" title="5 AdaBoost|link"></a>5 AdaBoost|<a href="https://www.cnblogs.com/ScorpioLu/p/8295990.html" target="_blank" rel="noopener">link</a></h3><h3 id="6-贝叶斯网络-link"><a href="#6-贝叶斯网络-link" class="headerlink" title="6 贝叶斯网络|link"></a>6 贝叶斯网络|<a href="https://blog.csdn.net/Pancheng1/article/details/81001459" target="_blank" rel="noopener">link</a></h3><h3 id="7-自编码网络-link"><a href="#7-自编码网络-link" class="headerlink" title="7 自编码网络|link"></a>7 自编码网络|<a href="https://blog.csdn.net/abcdrachel/article/details/84024144" target="_blank" rel="noopener">link</a></h3><h4 id="7-1-什么是自编码器？"><a href="#7-1-什么是自编码器？" class="headerlink" title="7.1 什么是自编码器？"></a>7.1 什么是自编码器？</h4><blockquote><p>自编码器是一个3层或大于3层的神经网络，将输入表达式x编码为一个新的表达式y，然后再将y解码回x。这是一个非监督学习算法，使用反向传播算法来训练网络使输出等于输入。<br><img alt="image" data-src="https://img-blog.csdnimg.cn/20181113100710190.png" class="lazyload"><br>图中，虚线蓝色框内就是一个自编码器模型，它由编码器(Encoder)和解码器(Decoder)两部分组成，本质上都是对输入信号做某种变换。编码器将输入信号x变换成编码信号y，而解码器将编码y转换成输出信号x‘。即<br>y = f(x)</p><p>x’ = g(y) = g(f(x))</p><p>自编码器的目的是，让输出x’尽可能复现输入x。</p><p>如果f和g都是恒等映射，那不就恒有x’=x？不错，但是这样的变换没啥作用。因此，我们对中间信号y做一定的约束，这样，系统往往能学出很有趣的编码变换f和编码y。</p><p>对于自编码器，我们需要强调一点是，我们往往并不关心输出是啥（反正只是复现输入），我们关心的是中间层的编码，或者说是从输入到编码的映射。</p><p>可以这么理解，我们在强迫编码y和输入x不同的情况下，系统还能复原原始信号x，那么说明编码y已经承载了原始数据的所有信息，但以另一种形式表现。这就是特征提取，而且是主动学出来的。实际上，自动学习原始数据的特征表达也是神经网络和深度学习的核心目的之一。</p></blockquote><h4 id="7-2-什么自编码网络？"><a href="#7-2-什么自编码网络？" class="headerlink" title="7.2 什么自编码网络？"></a>7.2 什么自编码网络？</h4><blockquote><p>自编码网络是非监督学习领域的一种，可以自动从无标注的数据中学习特征，是一种以重构输入信息为目标的神经网络，它可以给出比原始数据更好的特征描述，具有较强的特征学习能力，在深度学习中常用自编码网络生成的特征来取代原始数据，已取得更好效果。</p></blockquote><p><img alt="image" data-src="https://img-blog.csdnimg.cn/20181113105333903.png" class="lazyload"><br>自编码器通过隐藏层对输入进行压缩，并在输出层中解压缩，整个过程肯定会丢失信息，但是通过训练我们能够使丢失的信息尽量减少，最大化的保留其主要特征。</p><p>y = f(x) = s(wx+b)<br>x’ = g(y) = s(w’y+b’)<br>L(x,x’) = L(x,g(f(x)))   </p><p>其中L表示损失函数，结合数据的不同形式，可以是二次误差（squared error loss）或交叉熵误差(cross entropy loss)。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 预测算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间序列算法综述</title>
      <link href="/time-series-forecasting-algorithm/"/>
      <url>/time-series-forecasting-algorithm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="时间序列预测的顺序"><a href="#时间序列预测的顺序" class="headerlink" title="时间序列预测的顺序"></a>时间序列预测的顺序</h3><p><img alt="image" data-src="https://img-blog.csdn.net/2018101810294119?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bHljbGo1NTU1NQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></p><p>时间序列的正式定义如下：它是一系列在相同时间间隔内测量到的数据点。<br>时间序列的特殊性是：该序列中的每个数据点都与先前的数据点相关。<br><a href="https://zhuanlan.zhihu.com/p/49746642" target="_blank" rel="noopener">知乎问答：利用Auto ARIMA构建高性能时间序列模型（附Python和R代码）</a>|<a href="https://www.analyticsvidhya.com/blog/2018/02/time-series-forecasting-methods/" target="_blank" rel="noopener">source article</a></p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="#参考文献"></a>#参考文献</h4><p><a href="https://blog.csdn.net/jyfu2_12/article/details/79207643" target="_blank" rel="noopener">常见Markdown公式代码</a><br><a href="https://item.jd.com/12475341.html" target="_blank" rel="noopener">《时间序列分析》-作者：詹姆斯·D·汉密尔顿（James D.Hamilton）</a><br><a href="https://otexts.com/fppcn/holt-winters.html" target="_blank" rel="noopener">预测：方法与实践</a></p><h3 id="1-其中常见的时间序列预测算法"><a href="#1-其中常见的时间序列预测算法" class="headerlink" title="1 其中常见的时间序列预测算法"></a>1 其中常见的时间序列预测算法</h3><h4 id="1-1-朴素预测法（一次指数平滑）"><a href="#1-1-朴素预测法（一次指数平滑）" class="headerlink" title="1.1 朴素预测法（一次指数平滑）"></a>1.1 朴素预测法（一次指数平滑）</h4><p>概念：利用前一时刻的数据，作为下一时刻数据的预测值，公式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_&#123;t+1&#125; = X_i</span><br></pre></td></tr></table></figure><p>缺点：那么预测出来的结果会是一条平行线，因为预测结果都是之前的最后一个时刻的值。如下所示：<br><img alt="image" data-src="https://pic3.zhimg.com/80/v2-91cc0429042526c71934287553bbd36e_hd.jpg" class="lazyload"></p><h4 id="1-2-简单平均法"><a href="#1-2-简单平均法" class="headerlink" title="1.2 简单平均法"></a>1.2 简单平均法</h4><p>概念：该方法是将之前的所有历史数据进行平均，不再是简单的利用最后一个时刻的数据作为预测值，图像是一条斜线，公式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_&#123;t+1&#125; = \frac&#123;1&#125;&#123;N&#125; \sum^N_&#123;i=1&#125; X_i</span><br></pre></td></tr></table></figure><p>where:<code>N</code>表示所有的历史数据的总数.<br>优点：不像“朴素预测法”那样，直接是一条平行线，该算法中将历史数据也考虑进去；<br>缺点：但是这些历史数据有些不一定都是有用，所以也会产生一定的误差<br><img alt="image" data-src="https://pic2.zhimg.com/80/v2-25e9516f144807a45e483cdd9f1f6fbd_hd.jpg" class="lazyload"></p><h4 id="1-3-移动平均法"><a href="#1-3-移动平均法" class="headerlink" title="1.3 移动平均法"></a>1.3 移动平均法</h4><p>概念：取前n个历史数据的平均，作为下一次的预测结果值，公式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_&#123;t+1&#125; = \frac &#123;1&#125;&#123;n&#125; \sum^n_i X_i</span><br></pre></td></tr></table></figure><p>where:<code>n</code>表示前<code>n</code>个数据的数据总数<br>优点：在<code>朴素预测法</code>和<code>简单平均法</code>的基础上进行改进，使得预测结果更加符合实际<br>缺点：最接近下一时刻的数据与下一时刻的真实数据明显更加接近，没有考虑权重<br><img alt="image" data-src="https://pic3.zhimg.com/80/v2-eac4ad5b9cc86106750147f88a1a3a42_hd.jpg" class="lazyload"></p><h4 id="1-4-加权移动平均法"><a href="#1-4-加权移动平均法" class="headerlink" title="1.4 加权移动平均法"></a>1.4 加权移动平均法</h4><p>概念：在移动平均法的基础上，对前n个数据给予不同的权重，那么对下一时刻的预测结果将更加接近真实值，公式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_&#123;t+1&#125; = \frac &#123;1&#125;&#123;n&#125; \sum^n_i X_i \cdot W_i</span><br></pre></td></tr></table></figure><p>where:W表示每个数据点的权重<br><img alt="image" data-src="https://pic2.zhimg.com/80/v2-ac1f9544d26d5d966573a5a8679875fd_hd.jpg" class="lazyload"></p><h3 id="1-5-简单指数平均法"><a href="#1-5-简单指数平均法" class="headerlink" title="1.5 简单指数平均法"></a>1.5 简单指数平均法</h3><p>概念：在该方法中，同样取前n个数据的平均同时加权重，但是更近期的观测结果会被赋予更大的权重，公式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_&#123;t+1&#125; = \frac &#123;1&#125;&#123;n&#125; \sum^n_i X_i \cdot W_i 且W_i&gt;W_&#123;i-1&#125;</span><br></pre></td></tr></table></figure><p><img alt="image" data-src="https://pic1.zhimg.com/80/v2-49baf17e7e9ade3bfd3a0b8b8d4b9864_hd.jpg" class="lazyload"></p><h4 id="1-6-霍尔特（Holt）线性趋势预测"><a href="#1-6-霍尔特（Holt）线性趋势预测" class="headerlink" title="1.6 霍尔特（Holt）线性趋势预测"></a>1.6 霍尔特（Holt）线性趋势预测</h4><p>概念：在之前的基础上，该方法加入了数据集的趋势，也就是数据的整体上涨或下跌等。<br>优点：该方法能够按照一定的趋势去预测，而不是盲目的预测，结果更具说服性<br>缺点：该方法只考虑了趋势性（上涨或下跌），但是没有考虑数据的季节性，也就是数据集的周期性。<br><img alt="image" data-src="https://pic4.zhimg.com/80/v2-6a278b4ba9c50cbd6db292dd4e7372df_hd.jpg" class="lazyload"></p><h4 id="1-7-霍尔特-温特斯（Holt-Winters）方法（三次指数平滑）"><a href="#1-7-霍尔特-温特斯（Holt-Winters）方法（三次指数平滑）" class="headerlink" title="1.7 霍尔特-温特斯（Holt Winters）方法（三次指数平滑）"></a>1.7 霍尔特-温特斯（Holt Winters）方法（三次指数平滑）</h4><p>概念：该方法在霍尔特线性趋势预测的基础上了，加入了季节性，也就是说，该方法同时具有趋势性和季节性。</p><p><img alt="image" data-src="https://pic3.zhimg.com/80/v2-a6d012dfeeadb4d9074789067871f42a_hd.jpg" class="lazyload"></p><h5 id="指数平滑法"><a href="#指数平滑法" class="headerlink" title="指数平滑法"></a><a href="https://blog.csdn.net/anshuai_aw1/article/details/82499095" target="_blank" rel="noopener">指数平滑法</a></h5><blockquote><p>指数平滑法有几种不同形式：一次指数平滑法针对没有趋势和季节性的序列，二次指数平滑法针对有趋势但没有季节性的序列，三次指数平滑法针对有趋势也有季节性的序列。“Holt-Winters”有时特指三次指数平滑法。</p></blockquote><h3 id="2-算法中用到的各种指标介绍-link"><a href="#2-算法中用到的各种指标介绍-link" class="headerlink" title="2 算法中用到的各种指标介绍|link"></a>2 算法中用到的各种指标介绍|<a href="https://www.jianshu.com/p/9ee85fdad150" target="_blank" rel="noopener">link</a></h3><h4 id="2-1-MSE-均方误差-mean-square-error"><a href="#2-1-MSE-均方误差-mean-square-error" class="headerlink" title="2.1 MSE-均方误差(mean square error)"></a>2.1 MSE-均方误差(mean square error)</h4><p><img alt="image" data-src="https://upload-images.jianshu.io/upload_images/9085642-db60f7a87d740e07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/482/format/webp" class="lazyload"><br>这里的y是测试集上的。<br>用 真实值-预测值 然后平方之后求和平均。</p><h4 id="2-2-RMSE-均方根误差-root-mean-square-error"><a href="#2-2-RMSE-均方根误差-root-mean-square-error" class="headerlink" title="2.2 RMSE-均方根误差(root mean square error)"></a>2.2 RMSE-均方根误差(root mean square error)</h4><p><img alt="image" data-src="https://upload-images.jianshu.io/upload_images/9085642-daf2f14301474004.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/534/format/webp" class="lazyload"></p><blockquote><p>例如：要做房价预测，每平方是万元（真贵），我们预测结果也是万元。那么差值的平方单位应该是 千万级别的。那我们不太好描述自己做的模型效果。怎么说呢？我们的模型误差是 多少千万？。。。。。。于是干脆就开个根号就好了。我们误差的结果就跟我们数据是一个级别的可，在描述模型的时候就说，我们模型的误差是多少万元。</p></blockquote><h4 id="2-3-MAE-平均绝对误差-mean-absolute-error"><a href="#2-3-MAE-平均绝对误差-mean-absolute-error" class="headerlink" title="2.3 MAE-平均绝对误差(mean absolute error)"></a>2.3 MAE-平均绝对误差(mean absolute error)</h4><p><img alt="image" data-src="https://upload-images.jianshu.io/upload_images/9085642-d8b6f1b5daac07bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/492/format/webp" class="lazyload"></p><h4 id="2-4-R-Squared"><a href="#2-4-R-Squared" class="headerlink" title="2.4 R Squared"></a>2.4 R Squared</h4><p>为了能够让模型有一个标准的衡量标准，这里引入R方的概念。</p><blockquote><p>比如说预测房价 那么误差单位就是万元。数子可能是3，4，5之类的。那么预测身高就可能是0.1，0.6之类的。没有什么可读性，到底多少才算好呢？不知道，那要根据模型的应用场景来。<br>看看分类算法的衡量标准就是正确率，而正确率又在0～1之间，最高百分之百。最低0。很直观，而且不同模型一样的。那么线性回归有没有这样的衡量标准呢？答案是有的。<br>那就是R Squared也就R方</p></blockquote><p>公式：<br><img alt="image" data-src="https://upload-images.jianshu.io/upload_images/9085642-a870d060a995bb24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/304/format/webp" class="lazyload"><br>其中分子是Residual(残差) Sum of Squares 分母是 Total Sum of Squares</p><p>慢慢解释。其实这个很简单：</p><ul><li>上面分子就是我们训练出的模型预测的所有误差。</li><li>下面分母就是不管什么我们猜的结果就是y的平均数。（瞎猜的误差）</li></ul><p>结果如下：</p><ul><li>如果结果是0，就说明我们的模型跟瞎猜差不多。</li><li>如果结果是1。就说明我们模型无错误。</li><li>如果结果是0-1之间的数，就是我们模型的好坏程度。</li><li>如果结果是负数。说明我们的模型还不如瞎猜。（其实导致这种情况说明我们的数据其实没有啥线性关系）</li></ul><p>公式的分子分母同时处以m，得：<br><img alt="image" data-src="https://upload-images.jianshu.io/upload_images/9085642-2f8310c7bc6c9004.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/448/format/webp" class="lazyload"></p><p>那么分子便成了MSE，分母就是方差，有如下：<br><img alt="image" data-src="https://upload-images.jianshu.io/upload_images/9085642-2b27e93fd95c1e6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/435/format/webp" class="lazyload"></p><p>补充：什么是方差？<br><img alt="image" data-src="http://q26p6its6.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191211153448.png" class="lazyload"></p><h3 id="3-循环神经网络"><a href="#3-循环神经网络" class="headerlink" title="3 循环神经网络"></a>3 循环神经网络</h3><p>循环神经网络（Recurrent Neural Network）是一种基于序列结构数据的神经网络模型，在处理时间序列数据时，具有一定的优势。在RNN模型中，下一层的隐含层的输入是前一层隐含层的输入，这样做的目的就是为了能够“记住”整个序列的数据，从而能够对一些有时间顺序的数据进行处理。但是RNN也有缺点，缺点也由于其“优势”所导致的，在利用BPTT（Back Propagation Through Time，基于时间的反向传播）算法优化参数时，可能会遇到梯度消失（或者说梯度弥散）或者梯度爆炸的问题。由于BPTT的本质也是采用逐层梯度下降，然而梯度下降也就是求偏导数，如果每层的偏导数都小于1，那么就会出现梯度消失；反之，如果每层的偏导数大于1，那么就会出现梯度爆炸。<br><strong>公式如下：</strong><br><img alt="image" data-src="https://img2018.cnblogs.com/blog/1187314/201908/1187314-20190829170635207-1732920092.png" class="lazyload"><br><strong>RNN的结构如下：</strong><br><img alt="image" data-src="http://q26p6its6.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191212141822.png" class="lazyload"></p><h4 id="（1）-梯度爆炸的解决方法"><a href="#（1）-梯度爆炸的解决方法" class="headerlink" title="（1） 梯度爆炸的解决方法"></a>（1） 梯度爆炸的解决方法</h4><ul><li>重新设计网络结构</li><li>使用激活函数（ReLU函数等）</li><li>使用权重正则化</li><li>使用梯度剪枝</li><li>LSTM</li></ul><h4 id="（2）-梯度消失的解决办法"><a href="#（2）-梯度消失的解决办法" class="headerlink" title="（2） 梯度消失的解决办法"></a>（2） 梯度消失的解决办法</h4><p>由于梯度消失的问题比较棘手，不像梯度爆炸那样比较容易解决，需要对原网络进行改进，在此基础上，有诞生了</p><ul><li>GRU（Gate Recurrent Unit），门循环单元</li><li>LSTM（Long Short Term Memory）,长短时记忆网络。</li></ul><h4 id="3-1-长短时记忆网络"><a href="#3-1-长短时记忆网络" class="headerlink" title="3.1 长短时记忆网络"></a>3.1 长短时记忆网络</h4><p>为了解决基础RNN中出现的梯度消失和梯度爆炸问题，LSTM（Long Short Term Memory）于1997年被提出，且能很好的解决RNN中的梯度消失和梯度爆炸问题。</p><h5 id="（1）LSTM介绍"><a href="#（1）LSTM介绍" class="headerlink" title="（1）LSTM介绍"></a>（1）LSTM介绍</h5><blockquote><p>概念：</p><ul><li>一个LSTM Cell是由3个门限结构和1个状态向量传输线组成的，门限分别是遗忘门，传入门，输出门；</li><li>其中状态向量传输线负责长程记忆，因为它只做了一些简单的线性操作；3个门限负责短期记忆的选择，因为门限设置可以对输入向量做删除或者添加操作;   </li></ul></blockquote><p>下图是RNN和LSTM的结构图比较，右侧为LSTM：<br><img alt="image" data-src="https://pic4.zhimg.com/v2-e4f9851cad426dfe4ab1c76209546827_r.jpg" class="lazyload">   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">左侧：</span><br><span class="line">其中x^t表示的是当前t时刻的输入，\newline h^&#123;t-1&#125;表示的是上一时刻的隐含层输出值，\newline h^t表示的是t时刻隐含层状态，\newline  y^t表示的是当前t时刻的输出值，\newline Naive表示的是普通的RNN。</span><br></pre></td></tr></table></figure><p><img alt="image" data-src="http://q26p6its6.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191212153759.png" class="lazyload">    </p><p><strong>LSTM中的参数介绍：</strong><br><img alt="image" data-src="https://pic4.zhimg.com/v2-15c5eb554f843ec492579c6d87e1497b_r.jpg" class="lazyload"><br><img alt="image" data-src="https://pic1.zhimg.com/80/v2-d044fd0087e1df5d2a1089b441db9970_hd.jpg" class="lazyload"><br><img alt="image" data-src="http://q26p6its6.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191212154019.png" class="lazyload"></p><p><strong>LSTM的内部结构：</strong><br><img alt="image" data-src="https://pic2.zhimg.com/80/v2-556c74f0e025a47fea05dc0f76ea775d_hd.jpg" class="lazyload"><br><img alt="image" data-src="http://q26p6its6.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191212154134.png" class="lazyload">    </p><p><strong>多层LSTM的连接结构：</strong><br><img alt="image" data-src="http://q26p6its6.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191213161301.png" class="lazyload"><br><strong>以下是一个LSTM cell结构图：</strong><br><img alt="image" data-src="https://images2018.cnblogs.com/blog/776149/201804/776149-20180419171148265-132667484.png" class="lazyload"></p><p>1）遗忘门<br>遗忘门是通过一个sigmoid函数来实现，“0”表示决绝任何输入，“1”表示接受所有输入<br><img alt="image" data-src="https://images2018.cnblogs.com/blog/776149/201804/776149-20180419180212604-282221791.png" class="lazyload">   </p><p>2）输入门（选择记忆）<br>输入门有两部分组成，一部分是由sigmoid函数来决定哪些信息需要更新，一部分由tanh函数来生成一个备选的用来更新的内容；然后再将这两部分进行向量点乘。<br>作用：决定让多少<strong>新的信</strong>息加入到cell状态中来<br><img alt="image" data-src="https://images2018.cnblogs.com/blog/776149/201804/776149-20180419180455006-1062571156.png" class="lazyload">   </p><p>3）输出门<br>该部分同样由两部分构成，一部分由sigmoid函数决定哪些信息需要输出，接着，另一部分是把一个状态向量通过一个tanh层（tanh函数），然后把tanh的状态输出和由sigmoid函数计算出来的权重相乘。这就得到了最后的结果。<br><img alt="image" data-src="https://images2018.cnblogs.com/blog/776149/201804/776149-20180419181357739-45985178.png" class="lazyload"></p><p>4）状态更新<br>首先由旧的状态和遗忘门的输出相乘，把一些不想保留的信息忘掉，然后加上<strong>输入门的输出，这部分信息就是我们想要新添加的内容</strong></p><h5 id="（2）LSTM的优缺点介绍"><a href="#（2）LSTM的优缺点介绍" class="headerlink" title="（2）LSTM的优缺点介绍"></a>（2）LSTM的优缺点介绍</h5><ul><li>优点<ul><li>解决了RNN中的梯度消失和梯度爆炸问题</li></ul></li><li>缺点<ul><li>计算速度较慢</li></ul></li></ul><h4 id="3-2-GRU"><a href="#3-2-GRU" class="headerlink" title="3.2 GRU"></a>3.2 GRU</h4><p>针对LSTM的缺点（计算速度偏慢），门控循环单元（Gate Recurrent Unit，GRU）在2014年被提出，在LSTM结构的基础上，GRU进行了改进。相比于LSTM，GRU减少了一个“门控单元”。在LSTM中有三个“门控单元”，分别是遗忘门、输入门、输出门来控制输入值、记忆值和输出值。而GRU中之后更新门(z)和重置门(r)两个“门控单元”，少了一个“门控单元”，其计算复杂度降低了，运行速度也提升了。</p><h5 id="（1）GRU的结构介绍"><a href="#（1）GRU的结构介绍" class="headerlink" title="（1）GRU的结构介绍"></a>（1）GRU的结构介绍</h5><p><strong>GRU的内部结构图：</strong><br><img alt="image" data-src="https://images2018.cnblogs.com/blog/1335117/201807/1335117-20180727095108158-462781335.png" class="lazyload">   </p><p><img alt="image" data-src="http://q26p6its6.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191213100320.png" class="lazyload">   </p><p><strong>GRU的状态图：</strong><br><img alt="image" data-src="https://pic2.zhimg.com/v2-8134a00c243153bfd9fd2bcbe0844e9c_1200x500.jpg" class="lazyload">    </p><p><strong>GRU的两个门控：</strong><br><img alt="image" data-src="https://pic3.zhimg.com/80/v2-7fff5d817530dada1b279c7279d73b8a_hd.jpg" class="lazyload"></p><p><img alt="image" data-src="http://q26p6its6.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20191213100545.png" class="lazyload"><br>首先再次强调一下，门控信号（这里的z ）的范围为0~1。门控信号越接近1，代表”记忆“下来的数据越多；而越接近0则代表”遗忘“的越多。</p><h5 id="（2）GRU和LSTM的关系"><a href="#（2）GRU和LSTM的关系" class="headerlink" title="（2）GRU和LSTM的关系"></a>（2）GRU和LSTM的关系</h5><p>我们知道GRU也是RNN的一种，且GRU是LSTM的一个变种或者说是简化版，但是他们之间的关系其实是：GRU利用更新门(z)代替了LSTM中的遗忘门和输入门，更新门既可以进行“遗忘”也可以进行“选择记忆”，这一点由<strong>更新表达式</strong>可以看出。</p><h4 id="RNN的参考文献"><a href="#RNN的参考文献" class="headerlink" title="RNN的参考文献"></a>RNN的参考文献</h4><p><a href="https://blog.csdn.net/qq_32241189/article/details/80461635" target="_blank" rel="noopener">深度学习之RNN(循环神经网络)</a><br><a href="https://zhuanlan.zhihu.com/p/32481747" target="_blank" rel="noopener">人人都能看懂的GRU</a><br><a href="https://zhuanlan.zhihu.com/p/32085405" target="_blank" rel="noopener">人人都能看懂的LSTM</a><br><a href="https://www.jianshu.com/p/8b78ac379e3a" target="_blank" rel="noopener">一文了解LSTM和GRU背后的秘密（绝对没有公式）</a><br><a href="https://www.cnblogs.com/arachis/p/RNN.html" target="_blank" rel="noopener">循环神经（LSTM）网络学习总结摘要</a><br><a href="https://blog.csdn.net/jason_cuijiahui/article/details/87517127" target="_blank" rel="noopener">什么是白噪声？如何判断时间序列是白噪声？</a><br><a href="https://blog.csdn.net/SUSU0203/article/details/80051692" target="_blank" rel="noopener">时间序列分析——自回归移动平均（ARMA）模型</a><br><a href="https://www.cnblogs.com/junge-mike/p/9335054.html" target="_blank" rel="noopener">时间序列模式（ARIMA）—Python实现</a></p><h3 id="4-奇异谱分析（SSA）"><a href="#4-奇异谱分析（SSA）" class="headerlink" title="4 奇异谱分析（SSA）"></a>4 奇异谱分析（SSA）</h3><p>奇异频谱分析（Singular spectral analysis，SSA）</p><h3 id="5-自回归移动平均（ARMA）"><a href="#5-自回归移动平均（ARMA）" class="headerlink" title="5 自回归移动平均（ARMA）"></a>5 自回归移动平均（ARMA）</h3><p>AR（p）,MA（q）<br>因为AR（p）,MA（q）,ARMA（p,q）都是平稳随机过程，对于有些时间序列数据不能很好的进行预测，比如有些数据在时间上具有季节性和或趋势性，像这样<strong>非平稳随机过程</strong>ARMA不能很好的预测，所以引入ARIMA（差分自回归移动平均），即在p,q两个参数的基础上，再加一个将时间序列变为平稳时所做的差分次数d。</p><blockquote><h4 id="什么是平稳随机过程？"><a href="#什么是平稳随机过程？" class="headerlink" title="什么是平稳随机过程？"></a>什么是平稳随机过程？</h4><p>平稳随机过程就是该随机过程的统计特性不随时间的推移而产生变化，因此其<strong>数学期望</strong>和<strong>方差</strong>都不变。</p></blockquote><h4 id="ARMA参考文献"><a href="#ARMA参考文献" class="headerlink" title="#ARMA参考文献"></a>#ARMA参考文献</h4><p><a href="https://blog.csdn.net/x_i_y_u_e/article/details/47748479" target="_blank" rel="noopener">AR,MA-&gt;ARMA-&gt;ARIMA</a>   </p><h3 id="6-差分自回归移动平均（ARIMA）"><a href="#6-差分自回归移动平均（ARIMA）" class="headerlink" title="6 差分自回归移动平均（ARIMA）"></a>6 差分自回归移动平均（ARIMA）</h3><p>差分自回归移动平均模型（Auto Regressive Integrated Moving Average  Model ,简称ARIMA）。|<a href="https://wiki.mbalib.com/wiki/ARIMA" target="_blank" rel="noopener">MBA智库-解释</a><br>AR是（Auto Regressive）自回归，p是自回归项；MA（Moving Average）是移动平均，q是移动平均项；d是时间序列成为平稳时所做的差分次数。<br>ARIMA模型的提出是为了解决ARMA模型不能预测非随机平稳过程的问题，ARIMA的<strong>思路</strong>是：现将给定的非平稳随机过程转换成平稳随机过程，然后再使用ARMA模型进行预测。</p><h3 id="7-支持向量回归（SVR）"><a href="#7-支持向量回归（SVR）" class="headerlink" title="7 支持向量回归（SVR）"></a>7 支持向量回归（SVR）</h3><p>支持向量回归（Support Vector Regression），SVM的英文全称是Support Vector Machines，中文叫支持向量机。支持向量机是我们用于分类的一种算法。支持向量也可以用于回归，所以叫支持向量回归。</p><h3 id="8-三次指数平滑"><a href="#8-三次指数平滑" class="headerlink" title="8 三次指数平滑"></a>8 三次指数平滑</h3><h4 id="8-1-为什么叫“指数平滑”？"><a href="#8-1-为什么叫“指数平滑”？" class="headerlink" title="8.1 为什么叫“指数平滑”？"></a>8.1 为什么叫“指数平滑”？</h4><p>先看公式：<br><img alt="image" data-src="http://attach.dataguru.cn/attachments/portal/201307/30/120150vwlsv88wgehsta8g.jpg" class="lazyload"><br>从公式中可以看出，该算法对整个时间序列中的数据多进行了计算，但是时间越久远，其对下一时刻的影响越小，指数越大，其权重越小。</p><h4 id="8-2-算法优点"><a href="#8-2-算法优点" class="headerlink" title="8.2 算法优点"></a>8.2 算法优点</h4><p>该算法考虑了时间序列的趋势性和季节性。</p><h4 id="三次指数平滑参考文献"><a href="#三次指数平滑参考文献" class="headerlink" title="#三次指数平滑参考文献"></a>#三次指数平滑参考文献</h4><p><a href="https://blog.csdn.net/hqr20627/article/details/79403876" target="_blank" rel="noopener">时间序列挖掘-三次指数平滑法(Holt-Winters)</a>   </p><blockquote><h4 id="什么是白噪声？"><a href="#什么是白噪声？" class="headerlink" title="什么是白噪声？"></a>什么是白噪声？</h4><p>纯随机序列，也称为白噪声序列，序列的各项之间没有任何的关系， 序列在进行完全无序的随机波动， 可以终止对该序列的分析。<br>当时间序列预测模型的预测达到了白噪声时，那么该模型就类似于收敛了。</p></blockquote><blockquote><h4 id="机器学习模型中的参数和超参数的区别？"><a href="#机器学习模型中的参数和超参数的区别？" class="headerlink" title="机器学习模型中的参数和超参数的区别？"></a>机器学习模型中的参数和超参数的区别？</h4><p>参数：是模型内部的参数，是模型从历史数据中“学习”到的参数，比如W和b，其值可以通过数据估计然后模型训练得到<br>超参数：是不能从模型中得到的参数，可以理解为模型外的参数，其值不能从数据估计得到<br>参考文件：<a href="https://www.jianshu.com/p/18730bed1b9d" target="_blank" rel="noopener">机器学习中模型参数与超参数的区别</a></p></blockquote><blockquote><h4 id="机器学习模型中的训练集、校验集、测试集"><a href="#机器学习模型中的训练集、校验集、测试集" class="headerlink" title="机器学习模型中的训练集、校验集、测试集"></a>机器学习模型中的训练集、校验集、测试集</h4><ul><li>训练集：用于训练模型，找出最佳的w和b。</li><li>验证集：用以确定模型超参数，选出最优模型。</li><li>测试集：仅用于对训练好的最优函数进行性能评估。   </li></ul><p>参考文献：<a href="https://blog.csdn.net/hohaizx/article/details/81013985" target="_blank" rel="noopener">https://blog.csdn.net/hohaizx/article/details/81013985</a></p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 时间序列算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在github上写博客</title>
      <link href="/write-blog-via-github/"/>
      <url>/write-blog-via-github/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-创建账号"><a href="#1-创建账号" class="headerlink" title="1 创建账号"></a>1 创建账号</h3><p>如果你还没有<a href="https://github.com" target="_blank" rel="noopener">github</a>账号，那么你可以到<a href="https://github.com" target="_blank" rel="noopener">github官网</a>注册账号，这里不多赘述。如果已经有账号，那么请看下面。</p><h3 id="2-创建仓库（repositories）"><a href="#2-创建仓库（repositories）" class="headerlink" title="2 创建仓库（repositories）"></a>2 创建仓库（repositories）</h3><p>点击github网站的右上角的加号，创建一个仓库，名字可以自定义，符合规范就行。如下：<br><img alt="创建仓库" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200303135042.png" class="lazyload"><br><img alt="具体步骤" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200303135204.png" class="lazyload"></p><h3 id="3-开始写博客"><a href="#3-开始写博客" class="headerlink" title="3 开始写博客"></a>3 开始写博客</h3><p>进入到你刚刚创建的仓库，点击上面的<a href="https://github.com/crazyjums/awesome-ml-summary/wiki" target="_blank" rel="noopener">wiki</a>目录，开始创建博客，可以支持多种编辑格式。<br><img alt="wiki" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200303135245.png" class="lazyload"><br><img alt="new page" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200303135512.png" class="lazyload"><br><img alt="编辑格式" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200303135426.png" class="lazyload"><br>写完之后，你的所有博客都会汇总在这里，如下：<br><img alt="博客汇总" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200303135546.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用github的REST API接口获取github项目数据</title>
      <link href="/how-to-use-github-API/"/>
      <url>/how-to-use-github-API/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于cURL，了解这些就够用了</title>
      <link href="/something-about-curl/"/>
      <url>/something-about-curl/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-Wikipedia解释"><a href="#1-Wikipedia解释" class="headerlink" title="1 Wikipedia解释"></a>1 Wikipedia解释</h3><blockquote><p><a href="https://curl.haxx.se/" target="_blank" rel="noopener">cURL</a>是一个开源项目，主要的产品是curl（命令行工具）和libcurl（C语言的API库），两者功能均是：基于网络协议，对指定URL进行网络传输。cURL涉及是任何网络协议传输，不涉及对具体数据的具体处理。</p></blockquote><h3 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2 基本用法"></a>2 基本用法</h3><ul><li>简单模式   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://example.com</span><br></pre></td></tr></table></figure><img alt="example" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200302221732.png" class="lazyload">   </li><li>详细模式(verbose)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v http://example.com</span><br></pre></td></tr></table></figure></li></ul><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 传输工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用readthedoc.org编写属于自己的说明文档</title>
      <link href="/how-to-write-a-document-for-your-project/"/>
      <url>/how-to-write-a-document-for-your-project/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-网站"><a href="#1-网站" class="headerlink" title="1 网站"></a>1 网站</h3><p>访问<a href="https://readthedocs.org/" target="_blank" rel="noopener">https://readthedocs.org/</a>使用<code>github</code>进行登录，然后倒入自己需要撰写说明文档的项目。如下：<br><img alt="import project" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200302133939.png" class="lazyload">   </p><h3 id="2-创建index-rst-or-README-rst文件"><a href="#2-创建index-rst-or-README-rst文件" class="headerlink" title="2 创建index.rst or README.rst文件"></a>2 创建index.rst or README.rst文件</h3><p>在自己的<code>github</code>项目中，创建你的说明文件，里面放的是你的说明文档的内容，将文件命名为<code>index.rst</code>or<code>README.rst</code>即可。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用python扫描文件目录</title>
      <link href="/python-scan-dir/"/>
      <url>/python-scan-dir/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-使用"><a href="#1-使用" class="headerlink" title="1 使用"></a>1 使用</h3><p>通过<code>os.walk()</code>扫描制定目录下的所有文件以及子文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">扫描目录下的第一层文件，不包括子文件夹中的文件</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dir_lists</span><span class="params">(root_dir)</span>:</span></span><br><span class="line">    root_dir = <span class="string">r"J:\电子书"</span></span><br><span class="line">    dir_tree = os.walk(root_dir)</span><br><span class="line">    sub_dir = dir_tree.__next__()[<span class="number">1</span>]</span><br><span class="line">    file_list = []</span><br><span class="line">    <span class="keyword">for</span> sub <span class="keyword">in</span> sub_dir:</span><br><span class="line">        <span class="keyword">for</span> _sub <span class="keyword">in</span> os.walk(root_dir + <span class="string">"\\"</span> + str(sub)):</span><br><span class="line">            _book_list = _sub[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> _sub[<span class="number">1</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">for</span> book <span class="keyword">in</span> _book_list:</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">".pdf"</span> <span class="keyword">in</span> book:</span><br><span class="line">                        file_list.append(book)</span><br><span class="line">    <span class="keyword">return</span> file_list</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub如何开通多个静态page服务</title>
      <link href="/github-how-to-create-two-more-page/"/>
      <url>/github-how-to-create-two-more-page/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-需求"><a href="#0-需求" class="headerlink" title="0 需求"></a>0 需求</h3><p>之前我已经用<code>GitHub Page</code>开通了自己的<a href="https://jums.club">博客</a>服务，但是今天我想再弄一个博客，用于放图片，但是发现GitHub只能申请一个<strong>个人主页</strong>（访问路径：<code>&lt;username&gt;.github.io</code>），如果想要弄两个或两个以上，那就是另外一种page了，GitHub叫项目主页，所以这种项目主页的访问格式是：<code>&lt;username&gt;.github.io/&lt;projectname&gt;</code>，和个人主页的访问路径不一样。想这种项目主页，我们可以创建很多，但是个人主页，只能创建一个，且仓库名也是有限制的。</p><h3 id="1-开通"><a href="#1-开通" class="headerlink" title="1 开通"></a>1 开通</h3><p>用GitHub创建一个仓库之后，点击<code>settings</code>进入到设置界面，拉到最下面，有一个GitHub Page服务的设置栏，我们将访问分支（<code>branch</code>）设置成<code>gh-pages</code>，一般项目主页的网页文件，都是放在这个分支里面，而个人主页的网页文件，都是放在<code>master</code>分支里面。<br><img alt="设置分支" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200220203633.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git如何连接GitHub</title>
      <link href="/git-connect-to-github/"/>
      <url>/git-connect-to-github/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-生产自己的公钥和私钥"><a href="#1-生产自己的公钥和私钥" class="headerlink" title="1 生产自己的公钥和私钥"></a>1 生产自己的公钥和私钥</h3><p>首先生成一个rsa的私钥和公钥<br>ssh-keygen -t rsa -C “<a href="mailto:15950093214@163.com" target="_blank" rel="noopener">15950093214@163.com</a>“  //你的github邮箱帐号，如下：<br><img alt="gen key" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190330101656413-693026470.png" class="lazyload">   </p><p>执行完该语句之后，会在默认的目录中产生连个文件，我这里的默认目录是（/Users/jums/.ssh），产生的两个文件如下：<br><img alt="see what it is" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190330101839703-1841460597.png" class="lazyload"></p><p>我们将公钥中的内容提取出来，公钥文件是id_rsa.pub，将公钥放到github网站中:<br><img alt="the public key" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190330101954804-1835035642.png" class="lazyload">   </p><h3 id="2-配置GitHub"><a href="#2-配置GitHub" class="headerlink" title="2 配置GitHub"></a>2 配置GitHub</h3><p>我们进入到我们的github账号中，进入settings设置中：<br><img alt="settings" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190330102235916-125105233.png" class="lazyload">   </p><p>找到SSH AND GPG KEYS选项:<br><img alt="ssh keys" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190330102303458-1606971343.png" class="lazyload">   </p><p>进入到该界面选择NEW SSH KEY那个绿色的按钮:<br><img alt="create ssh keys" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190330102320633-775203946.png" class="lazyload">   </p><p>点击之后，进入到该界面，我们随便去一个名字，我们将刚才的公钥拷贝到下面的key那一栏中，可以不用把最后自己的邮箱帐号拷贝进来：<br><img alt="copy your public key" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190330102354411-507958863.png" class="lazyload"></p><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3 测试"></a>3 测试</h3><p>这些设置完毕之后，我们可以在git bash命令行工具中测试一下，使用ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>命令进行测试:<br><img alt="test" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/https://img2018.cnblogs.com/blog/1212206/201903/1212206-20190330102704798-1744561875.png" class="lazyload">   </p><blockquote><p>警告来可以不用看，如果显示成这样，那就算是连接成功了。</p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload">   </p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决error: failed to push some refs to &#39;https://github.com/https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article//https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/.git&#39;</title>
      <link href="/git-push-error/"/>
      <url>/git-push-error/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-错误"><a href="#1-错误" class="headerlink" title="1 错误"></a>1 错误</h3><p><strong>error: failed to push some refs to ‘<a href="https://github.com/bluepen/python.git&#39;" target="_blank" rel="noopener">https://github.com/bluepen/python.git&#39;</a></strong><br><img alt="error" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190327215644805-894884421.png" class="lazyload"></p><h3 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h3><p>在遇到错误之后，输入下面的命令，如果看到下面的结果，那再次执行<code>git push origin master</code>命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><p><img alt="success" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190327215737829-1783813782.png" class="lazyload">   </p><blockquote><p><strong>注意：如果出现了上图中最后一行的<code>Applying:https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/</code>语句，那表示执行成功，如果还出现了其他的结果，那表示失败了。</strong></p></blockquote><p>执行成功之后，如下所示：<br><img alt="success result" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190327215822325-1581204905.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用git删除GitHub上的文件或文件夹</title>
      <link href="/git-delete-file-s/"/>
      <url>/git-delete-file-s/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h3><p>当我们需要从github上删除一些我们不需要的文件或者文件夹时，如果通过github来操作的话，将会很麻烦，因为github只允许删除一个仓库，而不允许只删除一个单一的文件或者文件夹，使用git 工具可以快速删除。</p><h3 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached filename  //删除文件</span><br><span class="line"></span><br><span class="line">git rm --cached -r dictory //删除目录</span><br></pre></td></tr></table></figure><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;注释&quot;</span><br></pre></td></tr></table></figure><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决fatal: remote origin already exists.</title>
      <link href="/fatal-remote-origin-already-exists/"/>
      <url>/fatal-remote-origin-already-exists/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-解决办法"><a href="#1-解决办法" class="headerlink" title="1 解决办法"></a>1 解决办法</h3><p>执行下面的语句删除已经存在的<code>origin</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm origin</span><br></pre></td></tr></table></figure><p>再次执行语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://github.com/...</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用git上传代码到GitHub等代码托管网站</title>
      <link href="/how-to-use-git/"/>
      <url>/how-to-use-git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文教你如果使用git工具将本地电脑上的代码上传至GitHub</p><h3 id="1-安装git工具"><a href="#1-安装git工具" class="headerlink" title="1 安装git工具"></a>1 安装git工具</h3><p>如何在电脑端安装<a href="https://www.cnblogs.com/smuxiaolei/p/7484678.html" target="_blank" rel="noopener">安装git</a>工具。</p><h3 id="2-使用git工具上传自己的代码到GitHub中"><a href="#2-使用git工具上传自己的代码到GitHub中" class="headerlink" title="2 使用git工具上传自己的代码到GitHub中"></a>2 使用git工具上传自己的代码到GitHub中</h3><p>安装完git工具之后，我们会得到两个命令行工具，一个是git GUI HERE，一个是git bash HERE，我们可以鼠标右键看到这两个工具，如图所示：<br><img alt="右键查看" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190327211458423-1226917494.jpg" class="lazyload"></p><p>我们这里使用的git bash工具，这个工具类似Linux的命令行操作。</p><h4 id="（1）mkdir-p"><a href="#（1）mkdir-p" class="headerlink" title="（1）mkdir p"></a>（1）mkdir p</h4><p>我们创建一个新的目录，用来当做我们本地计算机的一个仓库，注意：尽量不要在该目录的路径中夹带中文字符，以免出错</p><h4 id="（2）ll-a"><a href="#（2）ll-a" class="headerlink" title="（2）ll -a"></a>（2）ll -a</h4><p>创建完毕之后，我们cd进入该目录中，使用git init命令对该目录进行初始化，初始化成功之后，会在该目录下产生一个.git文件夹，如下图所示：<br><img alt="初始化" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190327211911073-1991058892.png" class="lazyload"><br>我们可以看到最后在目录中多了一个.git文件夹。</p><h4 id="（3）cp-g-software-pycharm-files-alibaba-g-p"><a href="#（3）cp-g-software-pycharm-files-alibaba-g-p" class="headerlink" title="（3）cp   /g/software/pycharm/files/alibaba   /g/p"></a>（3）cp   /g/software/pycharm/files/alibaba   /g/p</h4><p>然后就是我们把需要上传的代码文件或者目录拷贝到该仓库中，在进行拷贝目录时，记得使用递归拷贝，cp -r /doc1 /doc2</p><p>我们这里将G盘中的一个文件夹移动到了仓库中</p><p>（4）git   add   alibaba/和git   status -s<br>拷贝完毕之后，我们需要将我们需要上传的文件或者文件夹add到缓存中，如下图所示：<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190327212328323-1777789895.png" class="lazyload"><br>我们会看到系统会提示一些警告信息，这个没有关系，不用担心，我们的文件已经添加到缓存中，我们可以使用git status -s命令进行查看状态<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190327212528017-77666794.png" class="lazyload"><br>我们可以看到文件夹中的每一个具体的文件前面都有一个绿色的A，这就表示已经添加到缓存成功，且没有需要改动的内容。我们这里暂不谈具体的修改代码的操作。</p><h4 id="（5）git-commit-m-“-”"><a href="#（5）git-commit-m-“-”" class="headerlink" title="（5）git commit -m “*”"></a>（5）git commit -m “*”</h4><p>运行完第四步之后，我们还要将缓存中的文件添加到本地的仓库中才行，使用的是命令就是第五步所示，双引号中的*代表自己填写的注释，如图所示：<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190327213344636-1165289069.png" class="lazyload"><br>我们可以看到，上传成功了。接下我们执行第六步</p><h4 id="（6）git-remote-add-origin-https-github-com-bluepen-python-git"><a href="#（6）git-remote-add-origin-https-github-com-bluepen-python-git" class="headerlink" title="（6）git remote add origin https://github.com/bluepen/python.git"></a>（6）git remote add origin <a href="https://github.com/bluepen/python.git" target="_blank" rel="noopener">https://github.com/bluepen/python.git</a></h4><p>第六步，我们使用git的远程命令将本地仓库中的代码上传至GitHub中，命令就是第六步所示，记得一定要加后面的“.git”，如果遇到如下图所示的的问题没有关系，我们执行以下语句之后，在执行第六步所示的命令即可。<br>git remote rm origin<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190327213808713-1461645969.png" class="lazyload"><br>GitHub的上传路径如图所示：<br><img alt="路径" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190327214347921-789418649.png" class="lazyload"></p><p>执行完该命令之后，终端不会提示任何任何内容，就表示提交成功了。</p><h4 id="（7）git-push-origin-master"><a href="#（7）git-push-origin-master" class="headerlink" title="（7）git push origin master"></a>（7）git push origin master</h4><p>最后一步就是将代码push到GitHub中，如果不执行这一步，代码时不会上传到GitHub中的，代码会停留在一个类似缓冲区中，如果多次执行到第六步，将不同的代码上传至一个类似缓冲区时，如果随后执行第七步的语句话，那么git会一次性将所有的代码都上传至GitHub。<br>在上传的过程中，git会提示输入GitHub账号的用户名和密码，我们正常输入就可以了。<br><img alt="输入密码" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190327214647551-1609392178.png" class="lazyload"></p><p>执行完毕之后，终端会提示上传完毕，如下图所示：<br><img alt="执行完毕" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190327215117661-519790211.png" class="lazyload"></p><h4 id="（8）查看GitHub"><a href="#（8）查看GitHub" class="headerlink" title="（8）查看GitHub"></a>（8）查看GitHub</h4><p>上传完毕之后，我们来查看一下GitHub网站的变化<br>上传之前：<br><img alt="上传之前" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190327215336904-867030622.png" class="lazyload"><br>上传之后：<br><img alt="上传之后" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1212206-20190327215347866-796341061.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语言自动化处理文件夹中的文件</title>
      <link href="/markdown-format/"/>
      <url>/markdown-format/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-功能"><a href="#0-功能" class="headerlink" title="0 功能"></a>0 功能</h3><p>将文件夹中的PDF文件，转化成<code>markdwon</code>格式的链接语法，即<code>[]()</code>格式，输入自己的<code>github</code>存放地址以及文件夹路径即可。</p><h3 id="1-代码"><a href="#1-代码" class="headerlink" title="1 代码"></a>1 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding=utf-8 _*_</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这个程序用来整理文件夹中的PDF文件，将其转化成Markdown格式的链接，即[]()的形式</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> os,re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_book_lists</span><span class="params">()</span>:</span></span><br><span class="line">    root_dir = <span class="string">r"J:\电子书"</span></span><br><span class="line">    dir_tree = os.walk(root_dir)</span><br><span class="line">    sub_dir = dir_tree.__next__()[<span class="number">1</span>]</span><br><span class="line">    pdf_list = []</span><br><span class="line">    <span class="keyword">for</span> sub <span class="keyword">in</span> sub_dir:</span><br><span class="line">        <span class="keyword">for</span> _sub <span class="keyword">in</span> os.walk(root_dir + <span class="string">"\\"</span> + str(sub)):</span><br><span class="line">            _book_list = _sub[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> _sub[<span class="number">1</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">for</span> book <span class="keyword">in</span> _book_list:</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">".pdf"</span> <span class="keyword">in</span> book:</span><br><span class="line">                        pdf_list.append(book)</span><br><span class="line">    <span class="keyword">return</span> pdf_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url_links</span><span class="params">(book_list)</span>:</span></span><br><span class="line">    urls = []</span><br><span class="line">    url = <span class="string">"https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pdf"</span></span><br><span class="line">    <span class="keyword">for</span> book <span class="keyword">in</span> book_list:</span><br><span class="line">        book = re.sub(<span class="string">" |:|：|，|,|（|）|\(|\)"</span>,<span class="string">"_"</span>,book)</span><br><span class="line">        book = re.sub(<span class="string">"《|》"</span>,<span class="string">""</span>,book)</span><br><span class="line">        _url = <span class="string">"[&#123;&#125;](&#123;&#125;/&#123;&#125;)    "</span>.format(book[:<span class="number">-4</span>], url, book)</span><br><span class="line">        urls.append(_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_markdown_format</span><span class="params">(book_list,urls,type_name)</span>:</span></span><br><span class="line">    dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> type_name:</span><br><span class="line">        dict[i] = []</span><br><span class="line">    <span class="comment"># print(dict)</span></span><br><span class="line">    dict[<span class="string">"other"</span>] = []</span><br><span class="line">    used = []</span><br><span class="line">    <span class="keyword">for</span> each_url <span class="keyword">in</span> urls:</span><br><span class="line">        <span class="keyword">for</span> each_name <span class="keyword">in</span> type_name:</span><br><span class="line">            <span class="keyword">if</span> each_name <span class="keyword">in</span> each_url:</span><br><span class="line">                _ = dict[each_name]</span><br><span class="line">                _.append(each_url)</span><br><span class="line">                used.append(each_url)</span><br><span class="line">    print(len(urls))</span><br><span class="line">    print(len(used))</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> type_name:</span><br><span class="line">        _list = dict[each]</span><br><span class="line">        print(each + <span class="string">":   "</span>)</span><br><span class="line">        <span class="keyword">for</span> _url <span class="keyword">in</span> _list:</span><br><span class="line">            print(<span class="string">"- &#123;&#125;"</span>.format(_url))</span><br><span class="line">    print(<span class="string">"other:    "</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> urls:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> used:</span><br><span class="line">            print(<span class="string">"- &#123;&#125;"</span>.format(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    book_list = get_book_lists()</span><br><span class="line">    urls = get_url_links(book_list)</span><br><span class="line">    type_name = [<span class="string">"Python"</span>,<span class="string">"SQL"</span>,<span class="string">"TCP-IP详解"</span>,<span class="string">"Kali_Linux无线网络渗透测试"</span>,<span class="string">"HTTP"</span>,<span class="string">"Shell"</span>,<span class="string">"Linux"</span>]</span><br><span class="line">    show_markdown_format(book_list,urls,type_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些计算机相关的电子书推荐与下载</title>
      <link href="/computer-around-ebook/"/>
      <url>/computer-around-ebook/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-声明"><a href="#0-声明" class="headerlink" title="0 声明"></a>0 声明</h3><blockquote><p>这是我从大学以后，下载和学习的一些电子书资料，今天我做了一个整理。我的专业是计算机，所以更多的书籍是计算机相关的，包括编程语言的教程书籍、计算机技术的原理解析、编程框架讲解等，其中还有些书籍会附上代码，代码我放到我的<a href="https://github.com/crazyjums" target="_blank" rel="noopener">Github</a>上，大家有需要的话，可以自行下载。</p></blockquote><h3 id="1-计算机相关电子书"><a href="#1-计算机相关电子书" class="headerlink" title="1 计算机相关电子书"></a>1 计算机相关电子书</h3><h4 id="1-1-Python编程"><a href="#1-1-Python编程" class="headerlink" title="1.1 Python编程:"></a>1.1 Python编程:</h4><ul><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Effective_Python_编写高质量Python代码的59个有效方法_印刷版.pdf" target="_blank" rel="noopener">Effective_Python_编写高质量Python代码的59个有效方法_印刷版</a>    </li><li><a href="https://crazyjums.coding.net/s/be9aae6b-d22a-4b96-b900-fd1c3fc90630" target="_blank" rel="noopener">Flask_Web开发_基于Python的Web应用开发实战_精装版</a>    </li><li><a href="https://crazyjums.coding.net/s/253e13d3-3824-4c7c-b5f9-074d775039ad" target="_blank" rel="noopener">Head_First_Python_印刷版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python_核心编程_第二版_精装版.pdf" target="_blank" rel="noopener">Python_核心编程_第二版_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python3.2.3官方文档_中文版_.pdf" target="_blank" rel="noopener">Python3.2.3官方文档<em>中文版</em></a>    </li><li><a href="https://crazyjums.coding.net/s/8a438c15-7dc6-45fb-9d40-925e195a470c" target="_blank" rel="noopener">Python开发技术详解_印刷版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python核心编程_中文第二版_带目录.pdf" target="_blank" rel="noopener">Python核心编程_中文第二版_带目录</a>    </li><li><a href="https://crazyjums.coding.net/s/4f705582-6a13-4b62-b062-79657797a7e8" target="_blank" rel="noopener">Python核心编程_第3版_精装版</a>    </li><li><a href="https://crazyjums.coding.net/s/a5289c73-d6d8-445a-af67-a6140fe1e703" target="_blank" rel="noopener">Python源码剖析-深度探索动态语言核心技术_印刷版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python源码剖析_精装版.pdf" target="_blank" rel="noopener">Python源码剖析_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python练习100例_无目录.pdf" target="_blank" rel="noopener">Python练习100例_无目录</a>    </li><li><a href="https://crazyjums.coding.net/s/56983ad7-8465-46eb-a24e-f612241c2241" target="_blank" rel="noopener">Python编程实战_运用设计模式_并发和程序库创建高质量程序_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python自动化运维_精装版.pdf" target="_blank" rel="noopener">Python自动化运维_精装版</a>    </li><li><a href="https://crazyjums.coding.net/s/4acb37a4-9298-4310-ac1b-6548d26213aa" target="_blank" rel="noopener">Python进阶<em>目录有一定的指导作用_内容不建议阅读</em></a>    </li><li><a href="https://crazyjums.coding.net/s/220c2529-0530-4a2c-968d-ce06e16fc09f" target="_blank" rel="noopener">Python高级编程_印刷版</a>    </li><li><a href="https://crazyjums.coding.net/s/d6ef0bd4-1749-49e2-8250-1592178201a8" target="_blank" rel="noopener">Raspberry_Pi_Python_编程入门_印刷版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/可爱的Python_精装版.pdf" target="_blank" rel="noopener">可爱的Python_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/流畅的Python_精装版.pdf" target="_blank" rel="noopener">流畅的Python_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/深入_Python_3_精装版.pdf" target="_blank" rel="noopener">深入_Python_3_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/深入理解Python_精装版.pdf" target="_blank" rel="noopener">深入理解Python_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/用Python写网络爬虫_印刷版.pdf" target="_blank" rel="noopener">用Python写网络爬虫_印刷版</a>    </li><li><a href="https://crazyjums.coding.net/s/3af9bd91-e0e5-492c-afc7-30027f18d2b9" target="_blank" rel="noopener">编写高质量代码_改善Python程序的91个建议_印刷版</a>    </li><li><a href="https://crazyjums.coding.net/s/99984ba7-956e-4926-9483-f5abd83f7b75" target="_blank" rel="noopener">Python.Cookbook_第2版__印刷版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python_Cookbook第三版_精装版.pdf" target="_blank" rel="noopener">Python_Cookbook第三版_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python极客项目编程__Mahesh_Venkitachalam_精装版.pdf" target="_blank" rel="noopener">Python极客项目编程__Mahesh_Venkitachalam_精装版</a> | <a href="https://github.com/crazyjums/python_geke" target="_blank" rel="noopener">Github Code</a> </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/python标准库.pdf" target="_blank" rel="noopener">python标准库</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/python_cookbook_第3版__精装版.pdf" target="_blank" rel="noopener">python_cookbook_第3版__精装版</a> | <a href="https://github.com/crazyjums/python_cookbook_code" target="_blank" rel="noopener">Github Code</a></li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/python绝技_运用python成为顶级黑客_无目录.pdf" target="_blank" rel="noopener">python绝技_运用python成为顶级黑客_无目录</a>  </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/thinkpython_english.pdf" target="_blank" rel="noopener">thinkpython_english</a>    </li><li><a href="https://crazyjums.coding.net/s/99e528dc-9a7f-4a01-93b8-d19dfe008817" target="_blank" rel="noopener">智慧编程_python算法应用_印刷版</a>    </li><li>Django<ul><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/精通_Django_精装版.pdf" target="_blank" rel="noopener">精通_Django_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/django_book_精装版.pdf" target="_blank" rel="noopener">django_book_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Django_Web开发指南_印刷版.pdf" target="_blank" rel="noopener">Django_Web开发指南_印刷版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/django1.9官方文档.pdf" target="_blank" rel="noopener">django1.9官方文档</a>    </li></ul></li></ul><h4 id="1-2-SQL"><a href="#1-2-SQL" class="headerlink" title="1.2 SQL:"></a>1.2 SQL:</h4><ul><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/SQL注入天书.pdf" target="_blank" rel="noopener">SQL注入天书</a>    </li><li><a href="https://crazyjums.coding.net/s/edb108c9-c53d-43c6-b19f-eed5a9bd7dda" target="_blank" rel="noopener">SQL注入攻击与防御_印刷版</a>    </li></ul><h4 id="1-3-Linux"><a href="#1-3-Linux" class="headerlink" title="1.3 Linux"></a>1.3 Linux</h4><ul><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/深入理解Linux内核_精装版.pdf" target="_blank" rel="noopener">深入理解Linux内核_精装版</a>    </li><li><a href="https://crazyjums.coding.net/s/50d37e48-9c9f-42b3-abf8-a9b3bee7f1d0" target="_blank" rel="noopener">Kali_Linux渗透测试技术详解_精装版</a>    </li><li>Kali_Linux无线网络渗透测试:   <ul><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Kali_Linux无线网络渗透测试教程1章_精装版.pdf" target="_blank" rel="noopener">Kali_Linux无线网络渗透测试教程1章_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Kali_Linux无线网络渗透测试教程2章_精装版.pdf" target="_blank" rel="noopener">Kali_Linux无线网络渗透测试教程2章_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Kali_Linux无线网络渗透测试教程3章_精装版.pdf" target="_blank" rel="noopener">Kali_Linux无线网络渗透测试教程3章_精装版</a>  </li></ul></li><li>Shell<ul><li><a href="https://crazyjums.coding.net/s/010fd9e6-67d1-468d-885a-577c36bb6131" target="_blank" rel="noopener">Shell脚本学习指南_精装版</a>    </li></ul></li></ul><h4 id="1-4-Web技术："><a href="#1-4-Web技术：" class="headerlink" title="1.4 Web技术："></a>1.4 Web技术：</h4><ul><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/BurpSuite使用说明_精装版.pdf" target="_blank" rel="noopener">BurpSuite使用说明_精装版</a></li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/TCPIP协议及网络编程技术_印刷版.pdf" target="_blank" rel="noopener">TCPIP协议及网络编程技术_印刷版</a></li><li><a href="https://crazyjums.coding.net/s/d146183a-c2cc-4824-b47b-f242821231a5" target="_blank" rel="noopener">CSS权威指南_第三版_印刷版</a>     </li><li>TCP-IP详解:  <ul><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/TCP-IP详解卷一_协议_精装版.pdf" target="_blank" rel="noopener">TCP-IP详解卷一_协议_精装版</a>    </li><li><a href="https://crazyjums.coding.net/s/c52218ec-6d98-4d85-af28-742ffd1c8c2c" target="_blank" rel="noopener">TCP-IP详解卷二_实现_精装版</a> </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/TCP-IP详解卷三_TCP事务协议_HTTP_NNTP和UNIX域协议_精装版.pdf" target="_blank" rel="noopener">TCP-IP详解卷三_TCP事务协议_HTTP_NNTP和UNIX域协议_精装版</a>    </li></ul></li><li><a href="https://crazyjums.coding.net/s/91d5e469-d568-4e15-90d6-2db7e4378a9f" target="_blank" rel="noopener">HTTPS权威指南_在服务器和Web应用上部署SSL&amp;TLS和PKI_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/HTTP协议详解.pdf" target="_blank" rel="noopener">HTTP协议详解</a>    </li><li><a href="https://crazyjums.coding.net/s/4c87a0db-e68d-46af-b2fe-92c61e608bc7" target="_blank" rel="noopener">HTTP权威指南_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/图解HTTP__精装版.pdf" target="_blank" rel="noopener">图解HTTP__精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/TCP-IP详解卷三_TCP事务协议_HTTP_NNTP和UNIX域协议_精装版.pdf" target="_blank" rel="noopener">TCP-IP详解卷三_TCP事务协议_HTTP_NNTP和UNIX域协议_精装版</a>    </li></ul><h4 id="1-5-分布式："><a href="#1-5-分布式：" class="headerlink" title="1.5 分布式："></a>1.5 分布式：</h4><ul><li><a href="https://crazyjums.coding.net/s/4f318cb5-9268-4082-abc5-2160adfacc73" target="_blank" rel="noopener">第一本Docker书_精装版</a>    </li></ul><h4 id="1-6-软件设计："><a href="#1-6-软件设计：" class="headerlink" title="1.6 软件设计："></a>1.6 软件设计：</h4><ul><li><a href="https://crazyjums.coding.net/s/75908464-88df-4608-a8fb-70e40f7445ff" target="_blank" rel="noopener">重构_改善既有代码的设计_印刷版</a>    </li><li><a href="https://crazyjums.coding.net/s/097095c2-85e4-422e-aff9-ca2ed000090e" target="_blank" rel="noopener">大话设计模式_带目录完整版__印刷版</a>    </li></ul><h4 id="1-7-爬虫技术："><a href="#1-7-爬虫技术：" class="headerlink" title="1.7 爬虫技术："></a>1.7 爬虫技术：</h4><ul><li><a href="https://crazyjums.coding.net/s/6cfd5baa-71f1-4619-a03a-230ca18ffceb" target="_blank" rel="noopener">自己动手写网络爬虫-Java_印刷版</a>     </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/用Python写网络爬虫_印刷版.pdf" target="_blank" rel="noopener">用Python写网络爬虫_印刷版</a>    </li><li>抓包分析工具书：<ul><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/BurpSuite使用说明_精装版.pdf" target="_blank" rel="noopener">BurpSuite使用说明_精装版</a>    </li><li><a href="https://crazyjums.coding.net/s/9d0a4333-1bf1-40fe-9864-912728481af1" target="_blank" rel="noopener">Fiddler调试权威指南_精装版</a>     </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/超级网络分析工具Sniffer_Pro详解_图文__精装版.pdf" target="_blank" rel="noopener">超级网络分析工具Sniffer_Pro详解_图文__精装版</a>    </li></ul></li></ul><h4 id="1-8-Java编程"><a href="#1-8-Java编程" class="headerlink" title="1.8 Java编程"></a>1.8 Java编程</h4><ul><li><a href="https://crazyjums.coding.net/s/9b2efb54-6c14-46b8-b3a8-43c30835c0e8" target="_blank" rel="noopener">Effective_Java中文版_第2版_精装版</a>    </li><li><a href="https://crazyjums.coding.net/s/6cfd5baa-71f1-4619-a03a-230ca18ffceb" target="_blank" rel="noopener">自己动手写网络爬虫-Java_印刷版</a></li></ul><h3 id="2-文学电子书"><a href="#2-文学电子书" class="headerlink" title="2 文学电子书"></a>2 文学电子书</h3><h4 id="2-1-国内文学"><a href="#2-1-国内文学" class="headerlink" title="2.1 国内文学"></a>2.1 国内文学</h4><ul><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/我不_无目录.pdf" target="_blank" rel="noopener">我不_无目录</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/代码之美+浪潮之巅+数学之美_完整版__精装版.pdf" target="_blank" rel="noopener">代码之美+浪潮之巅+数学之美_完整版__精装版</a>   </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/他们最幸福_大冰_精装版.pdf" target="_blank" rel="noopener">他们最幸福_大冰_精装版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/红太阳是怎样升起的_延安整风运动的来龙去脉_无目录版.pdf" target="_blank" rel="noopener">红太阳是怎样升起的_延安整风运动的来龙去脉_无目录版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/杨继绳_中国改革年代的政治斗争_精装版.pdf" target="_blank" rel="noopener">杨继绳_中国改革年代的政治斗争_精装版</a>    <h4 id="2-2-国外文学"><a href="#2-2-国外文学" class="headerlink" title="2.2 国外文学"></a>2.2 国外文学</h4></li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/毛姆作品_月亮与六便士_精装版.pdf" target="_blank" rel="noopener">毛姆作品_月亮与六便士_精装版</a>    </li><li><a href="https://crazyjums.coding.net/s/b2a92d7d-69a0-4a55-a9bf-507e5746769b" target="_blank" rel="noopener">施瓦辛格健身全书_无目录版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/爱的艺术_印刷版.pdf" target="_blank" rel="noopener">爱的艺术_印刷版</a>    </li><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/路西法效应_精装版.pdf" target="_blank" rel="noopener">路西法效应_精装版</a>    </li></ul><h3 id="3-其他"><a href="#3-其他" class="headerlink" title="3 其他"></a>3 其他</h3><ul><li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/北京员工宿舍入住须知.pdf" target="_blank" rel="noopener">北京员工宿舍入住须知</a>    </li></ul><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李志的歌《杭州》|《这个世界会好吗》|《李志·电声与管弦乐跨年晚会》</title>
      <link href="/lizhi-songs/"/>
      <url>/lizhi-songs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-声明"><a href="#0-声明" class="headerlink" title="0 声明"></a>0 声明</h3><p>我将这些视频放在了我的<a href="https://www.youtube.com/channel/UCCOW0qse1VB1EetyEyz0pHQ" target="_blank" rel="noopener">youtube</a>上，大家如果需要观看的话，需要使用VPN才能观看，这里附上链接，大家自行观看。谢谢。</p><h3 id="1-《这个世界会好吗》–电音与管弦乐版"><a href="#1-《这个世界会好吗》–电音与管弦乐版" class="headerlink" title="1 《这个世界会好吗》–电音与管弦乐版"></a>1 《这个世界会好吗》–电音与管弦乐版</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/6FUt-exMZbU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="2-《杭州》–北京不插电现场版"><a href="#2-《杭州》–北京不插电现场版" class="headerlink" title="2 《杭州》–北京不插电现场版"></a>2 《杭州》–北京不插电现场版</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/NcobO1wYQNw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="3-2016-2017-李志南京跨年演唱会-完整版"><a href="#3-2016-2017-李志南京跨年演唱会-完整版" class="headerlink" title="3 2016-2017 李志南京跨年演唱会-完整版"></a>3 2016-2017 李志南京跨年演唱会-完整版</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/CAMq9H27RL0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据给定的x和y的list值，如何利用matplotlib画曲线图？</title>
      <link href="/matplotlib-draw-x-and-y/"/>
      <url>/matplotlib-draw-x-and-y/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-直接上代码："><a href="#1-直接上代码：" class="headerlink" title="1 直接上代码："></a>1 直接上代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">174</span>]</span><br><span class="line">y = [<span class="number">0.40080336</span>, <span class="number">0.18122306</span>, <span class="number">0.11608378</span>, <span class="number">0.085246064</span>, <span class="number">0.067357346</span>, <span class="number">0.05584076</span>, <span class="number">0.048002534</span>, <span class="number">0.042525064</span>, <span class="number">0.038574938</span>, <span class="number">0.035621416</span>, <span class="number">0.03338204</span>, <span class="number">0.031647287</span>, <span class="number">0.030285057</span>, <span class="number">0.029168924</span>, <span class="number">0.028247986</span>, <span class="number">0.027445659</span>, <span class="number">0.026728</span>, <span class="number">0.02609317</span>, <span class="number">0.025506902</span>, <span class="number">0.024962617</span>, <span class="number">0.024447303</span>, <span class="number">0.023959577</span>, <span class="number">0.023498517</span>, <span class="number">0.023054505</span>, <span class="number">0.022625549</span>, <span class="number">0.022211162</span>, <span class="number">0.021810282</span>, <span class="number">0.021432228</span>, <span class="number">0.021063045</span>, <span class="number">0.020712497</span>, <span class="number">0.020360101</span>, <span class="number">0.020022878</span>, <span class="number">0.019694053</span>, <span class="number">0.019373357</span>, <span class="number">0.01906368</span>, <span class="number">0.018753063</span>, <span class="number">0.018451815</span>, <span class="number">0.018151788</span>, <span class="number">0.017863901</span>, <span class="number">0.01758589</span>, <span class="number">0.017315051</span>, <span class="number">0.017052641</span>, <span class="number">0.0167941</span>, <span class="number">0.016545597</span>, <span class="number">0.016304683</span>, <span class="number">0.016069638</span>, <span class="number">0.015843071</span>, <span class="number">0.015622776</span>, <span class="number">0.015408098</span>, <span class="number">0.015201467</span>, <span class="number">0.014999273</span>, <span class="number">0.014799738</span>, <span class="number">0.014607553</span>, <span class="number">0.014421209</span>, <span class="number">0.014237016</span>, <span class="number">0.01405996</span>, <span class="number">0.013889065</span>, <span class="number">0.01372264</span>, <span class="number">0.013561665</span>, <span class="number">0.013405993</span>, <span class="number">0.013255149</span>, <span class="number">0.01310858</span>, <span class="number">0.012966299</span>, <span class="number">0.012828781</span>, <span class="number">0.012695071</span>, <span class="number">0.012564927</span>, <span class="number">0.012438651</span>, <span class="number">0.012316017</span>, <span class="number">0.0121963</span>, <span class="number">0.012079288</span>, <span class="number">0.011965559</span>, <span class="number">0.011855269</span>, <span class="number">0.011747791</span>, <span class="number">0.011642111</span>, <span class="number">0.011539488</span>, <span class="number">0.011439635</span>, <span class="number">0.011342728</span>, <span class="number">0.011248277</span>, <span class="number">0.011154905</span>, <span class="number">0.011062986</span>, <span class="number">0.010971966</span>, <span class="number">0.010883417</span>, <span class="number">0.010797163</span>, <span class="number">0.01071215</span>, <span class="number">0.010629218</span>, <span class="number">0.010548329</span>, <span class="number">0.010469904</span>, <span class="number">0.010393094</span>, <span class="number">0.010317826</span>, <span class="number">0.010242518</span>, <span class="number">0.010169022</span>, <span class="number">0.010097408</span>, <span class="number">0.010027456</span>, <span class="number">0.0099592498</span>, <span class="number">0.0098925503</span>, <span class="number">0.0098261852</span>, <span class="number">0.0097613446</span>, <span class="number">0.0096979076</span>, <span class="number">0.0096345283</span>, <span class="number">0.0095726168</span>, <span class="number">0.0095119048</span>, <span class="number">0.0094521083</span>, <span class="number">0.0093936995</span>, <span class="number">0.0093365302</span>, <span class="number">0.0092802895</span>, <span class="number">0.0092249271</span>, <span class="number">0.0091704614</span>, <span class="number">0.009116183</span>, <span class="number">0.009063093</span>, <span class="number">0.0090111429</span>, <span class="number">0.0089596966</span>, <span class="number">0.0089076869</span>, <span class="number">0.0088565396</span>, <span class="number">0.0088040177</span>, <span class="number">0.008752685</span>, <span class="number">0.0087024905</span>, <span class="number">0.0086534182</span>, <span class="number">0.0086054057</span>, <span class="number">0.0085583208</span>, <span class="number">0.008511561</span>, <span class="number">0.0084649771</span>, <span class="number">0.0084193265</span>, <span class="number">0.0083744535</span>, <span class="number">0.0083293486</span>, <span class="number">0.0082851406</span>, <span class="number">0.0082418155</span>, <span class="number">0.0081992391</span>, <span class="number">0.0081575019</span>, <span class="number">0.0081166346</span>, <span class="number">0.0080769779</span>, <span class="number">0.0080379881</span>, <span class="number">0.0079997359</span>, <span class="number">0.0079620024</span>, <span class="number">0.0079244887</span>, <span class="number">0.0078876605</span>, <span class="number">0.0078516454</span>, <span class="number">0.007816419</span>, <span class="number">0.0077818092</span>, <span class="number">0.0077477931</span>, <span class="number">0.0077139996</span>, <span class="number">0.0076794531</span>, <span class="number">0.0076455404</span>, <span class="number">0.0076120589</span>, <span class="number">0.0075790412</span>, <span class="number">0.0075465697</span>, <span class="number">0.0075146239</span>, <span class="number">0.0074832183</span>, <span class="number">0.0074517592</span>, <span class="number">0.0074201203</span>, <span class="number">0.0073890584</span>, <span class="number">0.0073586018</span>, <span class="number">0.0073286104</span>, <span class="number">0.0072990893</span>, <span class="number">0.007270053</span>, <span class="number">0.007241149</span>, <span class="number">0.007211627</span>, <span class="number">0.0071825711</span>, <span class="number">0.0071540326</span>, <span class="number">0.0071259094</span>, <span class="number">0.0070982124</span>, <span class="number">0.007070926</span>, <span class="number">0.0070439801</span>, <span class="number">0.0070169987</span>, <span class="number">0.0069893743</span>, <span class="number">0.0069620134</span>, <span class="number">0.0069348374</span>, <span class="number">0.0069080386</span>, <span class="number">0.006881624</span>, <span class="number">0.0068555735</span>, <span class="number">0.0068298364</span>, <span class="number">0.0068039694</span>, <span class="number">0.0067774798</span>, <span class="number">0.0067512975</span>, <span class="number">0.0067254645</span>]</span><br><span class="line">data_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> zip(x,y):</span><br><span class="line">    data_dict[i] = j</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">"loss function"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"running times"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"loss value"</span>)</span><br><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> data_dict.keys()]</span><br><span class="line">y = [i <span class="keyword">for</span> i <span class="keyword">in</span> data_dict.values()]</span><br><span class="line"><span class="comment"># print(x)</span></span><br><span class="line"><span class="comment"># print(y)</span></span><br><span class="line">plt.plot(x, y, label=<span class="string">"loss"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="2-运行结果"><a href="#2-运行结果" class="headerlink" title="2 运行结果"></a>2 运行结果</h3><p><img alt data-src="https://img-blog.csdnimg.cn/20200212231627909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNTIxMTg0,size_16,color_FFFFFF,t_70" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你如何用matplotlib画动态函数</title>
      <link href="/matplotlib-draw-a-dymatic-func/"/>
      <url>/matplotlib-draw-a-dymatic-func/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-直接上代码"><a href="#1-直接上代码" class="headerlink" title="1 直接上代码"></a>1 直接上代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">fig,ax = plt.subplots()</span><br><span class="line">x = np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">0.01</span>)</span><br><span class="line">y, = ax.plot(x, np.sin(x))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">animate</span><span class="params">(i)</span>:</span></span><br><span class="line">    y.set_ydata(np.sin(x+i/<span class="number">10</span>))</span><br><span class="line">    <span class="keyword">return</span> y,</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    y.set_ydata(np.sin(x))</span><br><span class="line">    <span class="keyword">return</span> y,</span><br><span class="line">ani = animation.FuncAnimation(fig=fig,func=animate,init_func=init,interval=<span class="number">20</span>,blit=<span class="literal">False</span>,frames=<span class="number">100</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="2-效果"><a href="#2-效果" class="headerlink" title="2 效果"></a>2 效果</h3><p><img alt="result" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/gif_1.gif" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用免费cdn对GitHub资源进行加速访问</title>
      <link href="/cdn-speed-up/"/>
      <url>/cdn-speed-up/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-cdn网站"><a href="#1-cdn网站" class="headerlink" title="1 cdn网站"></a>1 cdn网站</h3><p><a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">https://www.jsdelivr.com/</a>，网站首页如下所示：<br><img alt="home page" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200209222722.png" class="lazyload"></p><h3 id="2-举例"><a href="#2-举例" class="headerlink" title="2 举例"></a>2 举例</h3><p>这里以GitHub为例。模板：      </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/github用户名/GitHub的仓库名@branch分支名/具体的文件访问路径</span><br></pre></td></tr></table></figure><p>这里以图片为例：<br><img alt="github example" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200209223313.png" class="lazyload"><br><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/ninePersonality/1.png" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/ninePersonality/1.png</a></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红太阳是怎样升起的_延安整风运动的来龙去脉</title>
      <link href="/a-ebook/"/>
      <url>/a-ebook/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-此书简介"><a href="#0-此书简介" class="headerlink" title="0 此书简介"></a>0 此书简介</h3><blockquote><p>1942年冬春之际，在中共战时首府延安，随即在中共领导的各抗日根据地，开始了一幕延续多年的大规模政治运动——整风运动，由于这场运动是以延安为中心，又以在延安开展的运动最为典型，史称「延安整风运动」。<br>延安整风运动是中共历史上进行的第一次全党范围的政治运动，这个运动是和毛泽东的名字紧密联系在一起的，这是一场由毛泽东直接领导，包括诸多方面内容的党内整肃和重建的运动，本书由高华著作，试图通过对远近各种有关延安整风运动史料的辨析和梳理，对延安整风运动进行新的研究，在官修的历史之外，提供另一种历史叙述和解释。<br>本书香港中文大学在2000年出版发行，本站从互联网获得此书电子版，呼吁网页浏览者变身为严肃读者，积极购买正版书籍，或者联系香港中文大学出版社<a href="mailto:cup@cuhk.edu.hk" target="_blank" rel="noopener">cup@cuhk.edu.hk</a>获得授权。谢谢合作。</p></blockquote><h3 id="1-国内用户"><a href="#1-国内用户" class="headerlink" title="1 国内用户"></a>1 国内用户</h3><p>国内用户可直接下载pdf文档阅读此书，点击<a href="(https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pdf/红太阳是怎样升起的_延安整风运动的来龙去脉.pdf)">下载</a>的链接即可。    </p><h3 id="2-User-not-in-China"><a href="#2-User-not-in-China" class="headerlink" title="2 User not in China"></a>2 User not in China</h3><p>For the people who not live in china, you can read the <a href="http://www.dodobook.com/index.php?id=books/hongtaiyang/000" target="_blank" rel="noopener">website</a> online or you can download the <a href="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pdf/红太阳是怎样升起的_延安整风运动的来龙去脉.pdf" target="_blank" rel="noopener">pdf document</a> to read offline.</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中string和stringBuffer以及stringBuilder的区别？</title>
      <link href="/java-string-stringbuffer-builder/"/>
      <url>/java-string-stringbuffer-builder/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-string"><a href="#1-string" class="headerlink" title="1 string"></a>1 string</h3><p>Java中的<code>string</code>是字符串的基本数据类型，但是我们在<a href="https://jums.club/java-class-base-datatype/">Java中基本数据类型和包装类的区别？</a>中说到过，一般情况下，我们用到类对象的机会比较多，所以<code>string</code>的包装类是<code>String</code>，这是一个不可变数据类型，类似Python中的<a href="https://jums.club/basic-python-knowledge/#4-1-2-str">str</a>数据类型，一旦创建，数据值不能修改。</p><h3 id="2-stringBuffer"><a href="#2-stringBuffer" class="headerlink" title="2 stringBuffer"></a>2 stringBuffer</h3><p><code>stringBuffer</code>是Java中对于<code>string</code>的一个补充，上面说到string是一种不可变的字符串数据类型，但是我们大部分情况下，需要用到一种可变的字符串，比如在拼接<code>sql</code>语句时，我们大部分情况下都是使用的<code>stringBuffer</code>数据类型。在Java中，<code>stringBuffer</code>是线程安全的，也就是说我们可以进行异步I/O操作。</p><h3 id="3-stringBuilder"><a href="#3-stringBuilder" class="headerlink" title="3 stringBuilder"></a>3 stringBuilder</h3><p><code>stringBuilder</code>和<code>stringBuffer</code>类似，都是可变的字符串数据类型，但是由于<code>stringBuilder</code>不是线程安全的，即不能进行异步I/O，只能进行同步操作。但是<code>stringBuilder</code>的运行效率又比<code>stringBuffer</code>更快，因为<code>stringBuffer</code>的线程安全特性，使得其运行效率有所下降。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中基本数据类型和包装类的区别？</title>
      <link href="/java-class-base-datatype/"/>
      <url>/java-class-base-datatype/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1 数据类型"></a>1 数据类型</h3><p>Java中基本数据类型包括int,long,string,boolean等，但是我们在编程的过程中，更多的是使用对象，而不是数据类型，所以Java为了方便编程，给每种基本数据类型都做了一个包装类，二者的基本功能相似，但是也有一些差别。比如在内存中的存储位置。举例：   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们知道变量<code>i</code>是通过基本数据类型进行定义的，此时该变量的值是存放在内存的栈内存中，且如果我们在定义时没有指定值的话，且需要判断该值是否为空，我们需要使用下面的判断语句：   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">0</span>)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-包装类"><a href="#2-包装类" class="headerlink" title="2 包装类"></a>2 包装类</h3><p>Java中的每一种数据类型都有其对应的包装类，如下图举例所示：<br><img alt="Number" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/number1.png" class="lazyload"><br>包装类的本质是一个类，所以如果我们需要使用的话，必须使用<code>new</code>来定义，当在定义对象没有指定具体的值时，如果做<code>if</code>判断，那么和基本数据类型的判断是不同的，如：     </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer();</span><br><span class="line"><span class="keyword">if</span> (i==<span class="keyword">null</span>)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的<code>i</code>中的值，存储在内存中的堆内存中。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中抽象类和接口的区别？</title>
      <link href="/java-abstract-interface/"/>
      <url>/java-abstract-interface/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-转载声明"><a href="#0-转载声明" class="headerlink" title="0 转载声明"></a>0 转载声明</h3><blockquote><p>这是转载自<a href="https://blog.csdn.net/chenssy/article/details/12858267" target="_blank" rel="noopener" title="https://blog.csdn.net/chenssy/article/details/12858267">https://blog.csdn.net/chenssy/article/details/12858267</a>的一篇博客。个人觉得讲的挺好的，所以转载过来一是为了方便自己日后查看复习，二也是为了帮助博主转发，提高能见度。</p></blockquote><blockquote><p>接口和内部类为我们提供了一种将接口与实现分离的更加结构化的方法。</p></blockquote><p>抽象类与接口是java语言中对抽象概念进行定义的两种机制，正是由于他们的存在才赋予java强大的面向对象的能力。他们两者之间对抽象概念的支持有很大的相似，甚至可以互换，但是也有区别。</p><h3 id="一、抽象类"><a href="#一、抽象类" class="headerlink" title="一、抽象类"></a>一、抽象类</h3><p>我们都知道在面向对象的领域一切都是对象，同时所有的对象都是通过类来描述的，但是并不是所有的类都是来描述对象的。如果一个类没有足够的信息来描述一个具体的对象，而需要其他具体的类来支撑它，那么这样的类我们称它为抽象类。比如new Animal()，我们都知道这个是产生一个动物Animal对象，但是这个Animal具体长成什么样子我们并不知道，它没有一个具体动物的概念，所以他就是一个抽象类，需要一个具体的动物，如狗、猫来对它进行特定的描述，我们才知道它长成啥样。<br>在面向对象领域由于抽象的概念在问题领域没有对应的具体概念，所以用以表征抽象概念的抽象类是不能实例化的。<br>同时，抽象类体现了数据抽象的思想，是实现多态的一种机制。它定义了一组抽象的方法，至于这组抽象方法的具体表现形式有派生类来实现。同时抽象类提供了继承的概念，它的出发点就是为了继承，否则它没有存在的任何意义。所以说定义的抽象类一定是用来继承的，同时在一个以抽象类为节点的继承关系等级链中，叶子节点一定是具体的实现类。（不知这样理解是否有错!!!高手指点….）<br>在使用抽象类时需要注意几点：   </p><ul><li>1、抽象类不能被实例化，实例化的工作应该交由它的子类来完成，它只需要有一个引用即可。</li><li>2、抽象方法必须由子类来进行重写。</li><li>3、只要包含一个抽象方法的抽象类，该方法必须要定义成抽象类，不管是否还包含有其他方法。</li><li>4、抽象类中可以包含具体的方法，当然也可以不包含抽象方法。</li><li>5、子类中的抽象方法不能与父类的抽象方法同名。</li><li>6、abstract不能与final并列修饰同一个类。</li><li>7、abstract 不能与private、static、final或native并列修饰同一个方法。</li></ul><p>实例：<br>定义一个抽象动物类Animal，提供抽象方法叫cry()，猫、狗都是动物类的子类，由于cry()为抽象方法，所以Cat、Dog必须要实现cry()方法。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫叫：喵喵..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗叫:汪汪..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a1 = <span class="keyword">new</span> Cat();</span><br><span class="line">        Animal a2 = <span class="keyword">new</span> Dog();</span><br><span class="line">        </span><br><span class="line">        a1.cry();</span><br><span class="line">        a2.cry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Output:<br>猫叫：喵喵…<br>狗叫:汪汪…</p><hr><p>创建抽象类和抽象方法非常有用,因为他们可以使类的抽象性明确起来,并告诉用户和编译器打算怎样使用他们.抽象类还是有用的重构器,因为它们使我们可以很容易地将公共方法沿着继承层次结构向上移动。（From:Think in java ）</p><h3 id="二、接口"><a href="#二、接口" class="headerlink" title="二、接口"></a>二、接口</h3><p>接口是一种比抽象类更加抽象的“类”。这里给“类”加引号是我找不到更好的词来表示，但是我们要明确一点就是，接口本身就不是类，从我们不能实例化一个接口就可以看出。如new Runnable();肯定是错误的，我们只能new它的实现类。<br>接口是用来建立类与类之间的协议，它所提供的只是一种形式，而没有具体的实现。同时实现该接口的实现类必须要实现该接口的所有方法，通过使用implements关键字，他表示该类在遵循某个或某组特定的接口，同时也表示着“interface只是它的外貌，但是现在需要声明它是如何工作的”。<br>接口是抽象类的延伸，java了保证数据安全是不能多重继承的，也就是说继承只能存在一个父类，但是接口不同，一个类可以同时实现多个接口，不管这些接口之间有没有关系，所以接口弥补了抽象类不能多重继承的缺陷，但是推荐继承和接口共同使用，因为这样既可以保证数据安全性又可以实现多重继承。</p><p>在使用接口过程中需要注意如下几个问题：</p><ul><li>1、个Interface的方所有法访问权限自动被声明为public。确切的说只能为public，当然你可以显示的声明为protected、private，但是编译会出错！</li><li>2、接口中可以定义“成员变量”，或者说是不可变的常量，因为接口中的“成员变量”会自动变为为public static final。可以通过类命名直接访问：ImplementClass.name。</li><li>3、接口中不存在实现的方法。</li><li>4、实现接口的非抽象类必须要实现该接口的所有方法。抽象类可以不用实现。</li><li>5、不能使用new操作符实例化一个接口，但可以声明一个接口变量，该变量必须引用（refer to)一个实现该接口的类的对象。可以使用 instanceof 检查一个对象是否实现了某个特定的接口。例如：if(anObject instanceof Comparable){}。</li><li>6、在实现多接口的时候一定要避免方法名的重复。</li></ul><h3 id="三、抽象类与接口的区别"><a href="#三、抽象类与接口的区别" class="headerlink" title="三、抽象类与接口的区别"></a>三、抽象类与接口的区别</h3><p>尽管抽象类和接口之间存在较大的相同点，甚至有时候还可以互换，但这样并不能弥补他们之间的差异之处。下面将从语法层次和设计层次两个方面对抽象类和接口进行阐述。</p><h4 id="3-1语法层次"><a href="#3-1语法层次" class="headerlink" title="3.1语法层次"></a>3.1语法层次</h4><p>在语法层次，java语言对于抽象类和接口分别给出了不同的定义。下面已Demo类来说明他们之间的不同之处。</p><p>使用抽象类来实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用接口来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类方式中，抽象类可以拥有任意范围的成员数据，同时也可以拥有自己的非抽象方法，但是接口方式中，它仅能够有静态、不能修改的成员数据（但是我们一般是不会在接口中使用成员数据），同时它所有的方法都必须是抽象的。在某种程度上来说，接口是抽象类的特殊化。<br>对子类而言，它只能继承一个抽象类（这是java为了数据安全而考虑的），但是却可以实现多个接口。</p><h4 id="3-2设计层次"><a href="#3-2设计层次" class="headerlink" title="3.2设计层次"></a>3.2设计层次</h4><p>上面只是从语法层次和编程角度来区分它们之间的关系，这些都是低层次的，要真正使用好抽象类和接口，我们就必须要从较高层次来区分了。只有从设计理念的角度才能看出它们的本质所在。一般来说他们存在如下三个不同点：</p><ul><li>1、 抽象层次不同。抽象类是对类抽象，而接口是对行为的抽象。抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。</li><li>2、 跨域不同。抽象类所跨域的是具有相似特点的类，而接口却可以跨域不同的类。我们知道抽象类是从子类中发现公共部分，然后泛化成抽象类，子类继承该父类即可，但是接口不同。实现它的子类可以不存在任何关系，共同之处。例如猫、狗可以抽象成一个动物类抽象类，具备叫的方法。鸟、飞机可以实现飞Fly接口，具备飞的行为，这里我们总不能将鸟、飞机共用一个父类吧！所以说抽象类所体现的是一种继承关系，要想使得继承关系合理，父类和派生类之间必须存在”is-a” 关系，即父类和派生类在概念本质上应该是相同的。对于接口则不然，并不要求接口的实现者和接口定义在概念本质上是一致的， 仅仅是实现了接口定义的契约而已。</li><li>3、 设计层次不同。对于抽象类而言，它是自下而上来设计的，我们要先知道子类才能抽象出父类，而接口则不同，它根本就不需要知道子类的存在，只需要定义一个规则即可，至于什么子类、什么时候怎么实现它一概不知。比如我们只有一个猫类在这里，如果你这是就抽象成一个动物类，是不是设计有点儿过度？我们起码要有两个动物类，猫、狗在这里，我们在抽象他们的共同点形成动物抽象类吧！所以说抽象类往往都是通过重构而来的！但是接口就不同，比如说飞，我们根本就不知道会有什么东西来实现这个飞接口，怎么实现也不得而知，我们要做的就是事前定义好飞的行为接口。所以说抽象类是自底向上抽象而来的，接口是自顶向下设计出来的。</li></ul><p>为了更好的阐述他们之间的区别，下面将使用一个例子来说明。该例子引自：<a href="http://blog.csdn.net/ttgjz/article/details/2960451" target="_blank" rel="noopener" title="http://blog.csdn.net/ttgjz/article/details/2960451">http://blog.csdn.net/ttgjz/article/details/2960451</a></p><p>我们有一个Door的抽象概念，它具备两个行为open()和close()，此时我们可以定义通过抽象类和接口来定义这个抽象概念：</p><p>抽象类：   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Door</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于其他的具体类可以通过使用extends使用抽象类方式定义Door或者Implements使用接口方式定义Door，这里发现两者并没有什么很大的差异。<br>但是现在如果我们需要门具有报警的功能，那么该如何实现呢？</p><p>解决方案一：给Door增加一个报警方法:clarm();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Door</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法违反了面向对象设计中的一个核心原则 ISP (Interface Segregation Principle)—见批注，在Door的定义中把Door概念本身固有的行为方法和另外一个概念”报警器”的行为方 法混在了一起。这样引起的一个问题是那些仅仅依赖于Door这个概念的模块会因为”报警器”这个概念的改变而改变，反之依然。</p><p>解决方案二</p><p>既然open()、close()和alarm()属于两个不同的概念，那么我们依据ISP原则将它们分开定义在两个代表两个不同概念的抽象类里面，定义的方式有三种：</p><ul><li>1、两个都使用抽象类来定义。</li><li>2、两个都使用接口来定义。</li><li>3、一个使用抽象类定义，一个是用接口定义。</li></ul><p>由于java不支持多继承所以第一种是不可行的。后面两种都是可行的，但是选择何种就反映了你对问题域本质的理解。</p><p>如果选择第二种都是接口来定义，那么就反映了两个问题：1、我们可能没有理解清楚问题域，AlarmDoor在概念本质上到底是门还报警器。2、如果我们对问题域的理解没有问题，比如我们在分析时确定了AlarmDoor在本质上概念是一致的，那么我们在设计时就没有正确的反映出我们的设计意图。因为你使用了两个接口来进行定义，他们概念的定义并不能够反映上述含义。</p><p>第三种，如果我们对问题域的理解是这样的：AlarmDoor本质上Door，但同时它也拥有报警的行为功能，这个时候我们使用第三种方案恰好可以阐述我们的设计意图。AlarmDoor本质是们，所以对于这个概念我们使用抽象类来定义，同时AlarmDoor具备报警功能，说明它能够完成报警概念中定义的行为功能，所以alarm可以使用接口来进行定义。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Alarm</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlarmDoor</span> <span class="keyword">extends</span> <span class="title">Door</span> <span class="keyword">implements</span> <span class="title">Alarm</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种实现方式基本上能够明确的反映出我们对于问题领域的理解，正确的揭示我们的设计意图。其实抽象类表示的是”is-a”关系，接口表示的是”like-a”关系，大家在选择时可以作为一个依据，当然这是建立在对问题领域的理解上的，比如：如果我们认为AlarmDoor在概念本质上是报警器，同时又具有Door的功能，那么上述的定义方式就要反过来了。<br>批注：</p><blockquote><p>ISP（Interface Segregation Principle）：面向对象的一个核心原则。它表明使用<br>多个专门的接口比使用单一的总接口要好。<br>   一个类对另外一个类的依赖性应当是建立在最小的接口上的。<br>   一个接口代表一个角色，不应当将不同的角色都交给一个接口。没有关系的接口合并在一起，形成一个臃肿的大接口，这是对角色和接口的污染。</p></blockquote><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><ul><li>1、 抽象类在java语言中所表示的是一种继承关系，一个子类只能存在一个父类，但是可以存在多个接口。</li><li>2、 在抽象类中可以拥有自己的成员变量和非抽象类方法，但是接口中只能存在静态的不可变的成员数据（不过一般都不在接口中定义成员数据），而且它的所有方法都是抽象的。</li><li>3、抽象类和接口所反映的设计理念是不同的，抽象类所代表的是“is-a”的关系，而接口所代表的是“like-a”的关系。</li></ul><blockquote><p>抽象类和接口是java语言中两种不同的抽象概念，他们的存在对多态提供了非常好的支持，虽然他们之间存在很大的相似性。但是对于他们的选择往往反应了您对问题域的理解。只有对问题域的本质有良好的理解，才能做出正确、合理的设计。</p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web开发中转发和重定向的区别</title>
      <link href="/redirecting-forword/"/>
      <url>/redirecting-forword/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-转发"><a href="#1-转发" class="headerlink" title="1 转发"></a>1 转发</h3><p>转发是指浏览器在地址不变的情况下，页面内容发生变化</p><h3 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2 重定向"></a>2 重定向</h3><p>重定向是指浏览器的页面转到另外一个页面，此时页面内容和浏览器的地址都会发生变化</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 名词解释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何破解myeclipse|myeclipse破解教程</title>
      <link href="/how-to-crack-myeclipse/"/>
      <url>/how-to-crack-myeclipse/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-声明"><a href="#0-声明" class="headerlink" title="0 声明"></a>0 声明</h3><blockquote><p>本篇文章是转载自<a href="https://www.jianshu.com/p/f97916ff67e2" target="_blank" rel="noopener">该博客</a>，这里记录是为了方便自己日后使用，别无他用的目的。</p></blockquote><h3 id="1-下载软件"><a href="#1-下载软件" class="headerlink" title="1 下载软件"></a>1 下载软件</h3><p>链接: <a href="https://pan.baidu.com/s/1H-LUX1T07oXINVqDbKsgpg" target="_blank" rel="noopener">https://pan.baidu.com/s/1H-LUX1T07oXINVqDbKsgpg</a> 提取码: 1gxb    </p><h3 id="2-破解过程"><a href="#2-破解过程" class="headerlink" title="2 破解过程"></a>2 破解过程</h3><h4 id="2-1-解压文件之后，双击run-bat，运行软件。"><a href="#2-1-解压文件之后，双击run-bat，运行软件。" class="headerlink" title="2.1 解压文件之后，双击run.bat，运行软件。"></a>2.1 解压文件之后，双击run.bat，运行软件。</h4><p><img alt="face UI" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200204201928.png" class="lazyload"></p><h4 id="2-2-获取到SystemId后，点击菜单Tools–0-RebuildKey，然后点击Active按钮，将会看到生产一串数字。"><a href="#2-2-获取到SystemId后，点击菜单Tools–0-RebuildKey，然后点击Active按钮，将会看到生产一串数字。" class="headerlink" title="2.2 获取到SystemId后，点击菜单Tools–0.RebuildKey，然后点击Active按钮，将会看到生产一串数字。"></a>2.2 获取到SystemId后，点击菜单Tools–0.RebuildKey，然后点击Active按钮，将会看到生产一串数字。</h4><p><img alt="republickey" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200204202014.png" class="lazyload">   </p><h4 id="2-3-点击菜单Tools–1-ReplaceJarFile"><a href="#2-3-点击菜单Tools–1-ReplaceJarFile" class="headerlink" title="2.3 点击菜单Tools–1.ReplaceJarFile"></a>2.3 点击菜单Tools–1.ReplaceJarFile</h4><p><img alt="republicjarfile" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200204202037.png" class="lazyload"></p><h4 id="2-4-跳出一个文件夹选项，找到你的MyEclipse安装的位置，并进入plugins文件夹，然后点击右下方的打开按钮。"><a href="#2-4-跳出一个文件夹选项，找到你的MyEclipse安装的位置，并进入plugins文件夹，然后点击右下方的打开按钮。" class="headerlink" title="2.4 跳出一个文件夹选项，找到你的MyEclipse安装的位置，并进入plugins文件夹，然后点击右下方的打开按钮。"></a>2.4 跳出一个文件夹选项，找到你的MyEclipse安装的位置，并进入plugins文件夹，然后点击右下方的打开按钮。</h4><p><img alt="plugins" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200204202100.png" class="lazyload">   </p><h4 id="2-5-点击打开按钮后，程序会卡顿一会儿，然后出现下方页面，看到Done后说明成功替换Jar文件了："><a href="#2-5-点击打开按钮后，程序会卡顿一会儿，然后出现下方页面，看到Done后说明成功替换Jar文件了：" class="headerlink" title="2.5 点击打开按钮后，程序会卡顿一会儿，然后出现下方页面，看到Done后说明成功替换Jar文件了："></a>2.5 点击打开按钮后，程序会卡顿一会儿，然后出现下方页面，看到Done后说明成功替换Jar文件了：</h4><p><img alt="success" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200204202121.png" class="lazyload">   </p><h4 id="2-6-点击菜单Tools–2-SaveProperities"><a href="#2-6-点击菜单Tools–2-SaveProperities" class="headerlink" title="2.6 点击菜单Tools–2.SaveProperities"></a>2.6 点击菜单Tools–2.SaveProperities</h4><p><img alt="save file" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200204202142.png" class="lazyload">   </p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql server 2008，sql server 2012下载安装教程</title>
      <link href="/sql-server-download/"/>
      <url>/sql-server-download/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-Microsoft®-SQL-Server®-2008-R2-SP2-Express-Edition"><a href="#1-Microsoft®-SQL-Server®-2008-R2-SP2-Express-Edition" class="headerlink" title="1 Microsoft® SQL Server® 2008 R2 SP2 - Express Edition"></a>1 Microsoft® SQL Server® 2008 R2 SP2 - Express Edition</h3><p>官方下载地址：<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=30438" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/download/details.aspx?id=30438</a>   可以根据电脑的性能选择不同的版本，如下所示：<br><img alt="download face" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200131141213.png" class="lazyload">    </p><h3 id="2-Microsoft®-SQL-Server®-2012-Evaluation"><a href="#2-Microsoft®-SQL-Server®-2012-Evaluation" class="headerlink" title="2 Microsoft® SQL Server® 2012 Evaluation"></a>2 Microsoft® SQL Server® 2012 Evaluation</h3><p>官方下载地址：<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=29066" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/download/details.aspx?id=29066</a><br>同样你也一根据自己的电脑需求，下载不同的版本，如下所示：<br><img alt="download face 2012" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200131141641.png" class="lazyload"></p><h3 id="3-sql-server-2012-秘钥"><a href="#3-sql-server-2012-秘钥" class="headerlink" title="3 sql server 2012 秘钥"></a>3 sql server 2012 秘钥</h3><p><a href="https://blog.csdn.net/lmy4710/article/details/9089563" target="_blank" rel="noopener">原文</a>   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MICROSOFT SQL SERVER 2012 DEVELOPER 版（开发版）</span><br><span class="line">序列号：YQWTX-G8T4R-QW4XX-BVH62-GP68Y </span><br><span class="line">MICROSOFT SQL SERVER 2012 ENTERPRISE SERVER/CAL EDITION 版（服务器/ CAL版）</span><br><span class="line">序列号：748RB-X4T6B-MRM7V-RTVFF-CHC8H</span><br><span class="line"></span><br><span class="line">MICROSOFT SQL SERVER 2012 STANDARD 版（标准版）</span><br><span class="line">序列号：YFC4R-BRRWB-TVP9Y-6WJQ9-MCJQ7</span><br><span class="line"></span><br><span class="line">MICROSOFT SQL SERVER 2012 WEB 版（WEB 版）</span><br><span class="line">序列号：FB3W8-YRXDP-G8F8F-C46KG-Q998F</span><br><span class="line"></span><br><span class="line">MICROSOFT SQL SERVER 2012 ENTERPRISE CORE 版（企业版）</span><br><span class="line">序列号：FH666-Y346V-7XFQ3-V69JM-RHW28</span><br><span class="line"></span><br><span class="line">MICROSOFT SQL SERVER 2012 BUSINESS INTELLIGENCE 版（企业版）</span><br><span class="line">序列号：HRV7T-DVTM4-V6XG8-P36T4-MRYT6</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件下载 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> sql server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql server2008，数据库已经有表结构，如何还原数据？</title>
      <link href="/sql-server-reback-data/"/>
      <url>/sql-server-reback-data/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1 需求"></a>1 需求</h3><p>已经通过<a href="https://jums.club/sql-server-something">这篇文章</a>导入了数据库的表结构，但是还有数据没有导入进来，接下来，下面讲一下，如何通过命令行，将<code>.sql</code>文件的数据导入数据库中（大于1G）。</p><h3 id="2-执行命令"><a href="#2-执行命令" class="headerlink" title="2 执行命令"></a>2 执行命令</h3><p>进入到你安装的<code>sql server</code>的安装路径，路径地址如：<code>G:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn</code>，如果你将其安装在其他的盘，那就修改前面的盘符，然后执行下面的命令：<br><strong><code>sqlcmd -S xxx -i xxx -d xxx</code></strong><br>命令解释：</p><ul><li>-S（大写） xxx | 后面的xxx有两部分，前部分是你的计算机名，后部分是记得sql server的实例名，如下：<br><img alt="计算机名/实例名" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200131140435.png" class="lazyload">   </li><li>-i xxx | 后面的xxx代表你的<code>.sql</code>文件的地址</li><li>-d xxx | 后面的xxx代表你要还原到哪个数据库，且该数据库必须要提前创建好</li></ul><blockquote><p>注意：字母的大小写很重要，别看错了   </p></blockquote><p><img alt="效果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200131134502.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> sql server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何把高版本的sql server数据还原到低版本的sql server？</title>
      <link href="/sql-server-something/"/>
      <url>/sql-server-something/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><blockquote><p>这是转载的文章，个人觉得挺好的文章，不能埋没了，所以这里引用过来，一是为了方便自己以后有需要的时候可以翻出来看看，二是可以帮助作者宣传一下，尽自己微薄之力。</p></blockquote><p><strong>以下是原文</strong><a href="http://blog.sina.com.cn/s/blog_842339240102uzp6.html" target="_blank" rel="noopener">原文链接</a>  </p><hr><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1 需求"></a>1 需求</h3><p>我要实现的功能是把sql2012的数据库备份到sql2008，数据库名字为Test，并且这两个数据库在不同的电脑中。微软的软件设计方案基本上都是新版本兼容旧版本，旧版本不兼容新版本，就是逼着人用新版本的软件，这也属于正常，毕竟时代在发展嘛。废话不说。<br>步骤如下 </p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>首先把要把sql2012中要备份的数据库设置为兼容2008.<br>右键sql2012中的数据库Test-属性-选项<br>看到如下图：<br><img alt="01" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/002q1Tc8zy6LhCOA0ZTfd&690.jpg" class="lazyload">      </p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>右键Test-任务-生成脚本，下一步-下一步到达下图，点 高级  选项。把script for sql  version 改成你要降级的那个版本 也就是sql2008.确定完成即可。会生成一个script.sql脚本文件。<br><img alt="02" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/002q1Tc8zy6LhDsplHUce&690.jpg" class="lazyload">   </p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>下一步要把sqlserver2012源文件复制到另外一个电脑上。由于SqlServer正在运行 是无法复制的。所以首先要停止sqlserver服务。<br><img alt="03" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/002q1Tc8zy6LhDP0Lfd7b&690.jpg" class="lazyload">   </p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>找到你这个sql2012数据库在电脑中的位置。 右键这个数据库-文件 会有路径，复制出这两个文件来。 至此 sqlserver2012的电脑操作完成<br><img alt="04" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/002q1Tc8zy6LhDZgnKWea&690.jpg" class="lazyload">   </p><h4 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h4><p>把上面得到的script.sql 文件和两个数据源文件复制到sql2008所在的电脑中。在sql2008中  新建-查询管理器。把script.sql拖进去，会看到代码。<br><img alt="05" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/002q1Tc8zy6LhEhJ3bq38&690.jpg" class="lazyload"></p><p>注意绿色部分。此时显示的数据库文件位置是sql2012电脑的位置。我们需要把这两个地址改为 sql2008 中 你复制过来的那两个源文件的地址即可。运行F5执行  成功。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> sql server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于最近的传染病，我们应该注意点什么？</title>
      <link href="/sava-our-life/"/>
      <url>/sava-our-life/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-做好防护措施"><a href="#1-做好防护措施" class="headerlink" title="1 做好防护措施"></a>1 做好防护措施</h3><ul><li>戴口罩</li><li>尽量少出门</li><li>如果非要出门，也尽量别去人多的地方</li><li>今年可以不用找借口，在家里宅了</li><li>过年过节的，注意身体，别处意外</li></ul><h3 id="2-了解一下病毒"><a href="#2-了解一下病毒" class="headerlink" title="2 了解一下病毒"></a>2 了解一下病毒</h3><p><img alt="病毒-1" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200123151745.jpg" class="lazyload"><br><img alt="病毒-2" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200123151823.jpg" class="lazyload"><br><img alt="病毒-3" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200123151833.jpg" class="lazyload"><br><img alt="病毒-4" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200123151841.jpg" class="lazyload">   </p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 个人观点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题添加热度显示</title>
      <link href="/hexo-hot/"/>
      <url>/hexo-hot/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-注册leanCloud会员"><a href="#1-注册leanCloud会员" class="headerlink" title="1 注册leanCloud会员"></a>1 注册leanCloud会员</h3><p>点击官网：<a href="https://leancloud.cn/" target="_blank" rel="noopener">https://leancloud.cn/</a>注册会员，注册成功之后，按下面的提示点击：<br><img alt="注册成功之后" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200101213442.png" class="lazyload"><br>然后创建一个class，命名为：<code>Counter</code>，<strong>必须是这个名字</strong>。<br><img alt="创建class" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200101213643.png" class="lazyload"></p><p>然后找到你自己的<code>APP-ID</code>和<code>APP-KEY</code>:<br><img alt="app-id and app-key" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20200101213950.png" class="lazyload"></p><h3 id="2-配置主题配置文件"><a href="#2-配置主题配置文件" class="headerlink" title="2 配置主题配置文件"></a>2 配置主题配置文件</h3><p>在主题配置文件中，加入下面的代码：   </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="comment"># your app-id </span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="comment"># your app-key</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">  <span class="comment"># # If you don't care about security in lc counter and just want to use it directly</span></span><br><span class="line">  <span class="comment"># # (without hexo-leancloud-counter-security plugin), set the `security` to `false`.</span></span><br><span class="line">  <span class="comment"># security: true</span></span><br><span class="line">  <span class="comment"># betterPerformance: true</span></span><br></pre></td></tr></table></figure><h3 id="3-配置全局配置文件"><a href="#3-配置全局配置文件" class="headerlink" title="3 配置全局配置文件"></a>3 配置全局配置文件</h3><p>打开全局配置文件，路径如下：<code>your_blog/_config.yml</code>，添加下面的代码：   </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_counter_security:</span></span><br><span class="line">  <span class="attr">enable_sync:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="comment"># your app-id</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="comment"># your app-key</span></span><br><span class="line">  <span class="attr">username:</span> <span class="comment"># your username</span></span><br><span class="line">  <span class="attr">password:</span> <span class="comment"># your password</span></span><br></pre></td></tr></table></figure><h4 id="3-1-配置用户名和密码"><a href="#3-1-配置用户名和密码" class="headerlink" title="3.1 配置用户名和密码"></a>3.1 配置用户名和密码</h4><p>首先安全插件：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-leancloud-counter-security --save</span><br></pre></td></tr></table></figure><p>安装成功之后，注册用户名：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo lc-counter r &quot;your username&quot; &quot;your password&quot;</span><br></pre></td></tr></table></figure><p>如果出现下面的错误：<br><code>Error: Cannot find module &#39;babel-runtime/regenerator&#39;</code>   </p><p>可以试试下面的解决方案：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-runtime --save</span><br></pre></td></tr></table></figure><h3 id="4-leanCloud部署"><a href="#4-leanCloud部署" class="headerlink" title="4 leanCloud部署"></a>4 leanCloud部署</h3><p><img alt="部署" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/2019-08-05-1.54.13.png" class="lazyload"><br><img alt="创建函数" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/2019-08-05-2.05.59.png" class="lazyload"><br>部署完之后，将下面的代码复制进去。   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var AV = require(&apos;leanengine&apos;);</span><br><span class="line"></span><br><span class="line">AV.Cloud.beforeUpdate(&apos;Counter&apos;, async function(request) &#123;</span><br><span class="line">  var query = new AV.Query(&quot;Counter&quot;);</span><br><span class="line">if (request.object.updatedKeys.indexOf(&apos;time&apos;) !== -1) &#123;</span><br><span class="line">    return query.get(request.object.id).then(function (obj) &#123;</span><br><span class="line">        if (obj.get(&quot;time&quot;) + 1 !== request.object.get(&quot;time&quot;)) &#123;</span><br><span class="line">            throw new AV.Cloud.Error(&apos;Invalid update!&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-创建hot-page"><a href="#5-创建hot-page" class="headerlink" title="5 创建hot page"></a>5 创建hot page</h3><p>进入到你的<code>hexo</code>博客目录，使用<code>hexo new page hot</code>创建一个<code>hot</code>主页，打开<code>hot/index.md</code>文件，将下面的代码复制进去：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;hot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;AV.initialize(&quot;2lPeEraOnOk7GF6ou1WWs6BP-gzGzoHsz&quot;, &quot;nXeW1bmcRE4TDrorjmdqj0ML&quot;);&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  var time=0</span><br><span class="line">  var title=&quot;&quot;</span><br><span class="line">  var url=&quot;&quot;</span><br><span class="line">  var query = new AV.Query(&apos;Counter&apos;);</span><br><span class="line">  query.notEqualTo(&apos;id&apos;,0);</span><br><span class="line">  query.descending(&apos;time&apos;);</span><br><span class="line">  query.limit(1000);</span><br><span class="line">  query.find().then(function (todo) &#123;</span><br><span class="line">    for (var i=0;i&lt;1000;i++)&#123;</span><br><span class="line">      var result=todo[i].attributes;</span><br><span class="line">      time=result.time;</span><br><span class="line">      title=result.title;</span><br><span class="line">      url=result.url;</span><br><span class="line">      var content=&quot;&lt;p&gt;&quot;+&quot;&lt;font color=&apos;#1C1C1C&apos;&gt;&quot;+&quot;【文章热度:&quot;+time+&quot;℃】&quot;+&quot;&lt;/font&gt;&quot;+&quot;&lt;a href=&apos;&quot;+&quot;https://jums.club&quot; + url + &quot;&apos;&gt;&quot;+title+&quot;&lt;/a&gt;&quot;+&quot;&lt;/p&gt;&quot;;</span><br><span class="line">      document.getElementById(&quot;hot&quot;).innerHTML+=content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    console.log(&quot;error&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="5-添加菜单"><a href="#5-添加菜单" class="headerlink" title="5 添加菜单"></a>5 添加菜单</h3><p>打开主题的配置文件：找到<code>menu</code>，添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  hot /hot</span><br></pre></td></tr></table></figure><p>原文：<a href="https://blog.qust.cc/archives/48665.html" target="_blank" rel="noopener">https://blog.qust.cc/archives/48665.html</a></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何加速访问GitHub page页面</title>
      <link href="/github-page-speed-access/"/>
      <url>/github-page-speed-access/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-查询地址"><a href="#1-查询地址" class="headerlink" title="1 查询地址"></a>1 查询地址</h3><p>打开<a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a> 查询以下三个链接的的 DNS 地址：</p><ul><li>github.com</li><li>assets-cdn.github.com</li><li>github.global.ssl.fastly.net</li></ul><p><img alt="example" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234562019.png" class="lazyload"></p><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2 修改配置文件"></a>2 修改配置文件</h3><p>打开系统 hosts 文件(需管理员权限)。 路径：<code>C:\Windows\System32\drivers\etc</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.30.253.112     github.com</span><br><span class="line">151.101.72.133    assets-cdn.github.com</span><br><span class="line">151.101.193.194    github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure><h3 id="3-刷新DNS地址"><a href="#3-刷新DNS地址" class="headerlink" title="3 刷新DNS地址"></a>3 刷新DNS地址</h3><p>在命令行输入：<code>ipconfg /flushdns</code></p><p>原文出处：<a href="https://bestzuo.cn/posts/497652030.html" target="_blank" rel="noopener">https://bestzuo.cn/posts/497652030.html</a></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 解决问题 </tag>
            
            <tag> hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题如何添加谷歌广告，非Next主题教程，pug框架</title>
      <link href="/pug-how-to-add-google-ad/"/>
      <url>/pug-how-to-add-google-ad/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-在主题目录下添加语句"><a href="#1-在主题目录下添加语句" class="headerlink" title="1 在主题目录下添加语句"></a>1 在主题目录下添加语句</h3><p>打开主题目录下的<code>your_theme/_config.yml</code> 文件,添加个广告控制开关：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_ad_post: true  ##设置为 true</span><br></pre></td></tr></table></figure><h3 id="2-在head-pug中添加语句"><a href="#2-在head-pug中添加语句" class="headerlink" title="2 在head.pug中添加语句"></a>2 在head.pug中添加语句</h3><p><code>在 your_theme/layout/_partial/head.pug</code> 里添加代码：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if theme.show_ad_post</span><br><span class="line">      script(async=&apos;&apos;, src=&apos;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&apos;)</span><br><span class="line">      script.</span><br><span class="line">        (adsbygoogle = window.adsbygoogle || []).push(&#123;google_ad_client: &quot;ca-pub-XXXXX&quot;, enable_page_level_ads: true&#125;);</span><br></pre></td></tr></table></figure><p>这段代码是从你申请的 Adsense 账户中复制下来的，其中 ca-pub-XXXXX 替换成自己的账号就行了。但是这样的设置完全让 Google 为我们决定广告的位置，有时候显得页面比较乱，博客的可读性比较差。可以考虑在 Adsense 中创建广告位，然后在特定位置加上代码就好了，我的选择是在文章结束，评论上方加上一条的广告。</p><h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://www.jianshu.com/p/5a664fb9f325" target="_blank" rel="noopener">原文</a></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 解决问题 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决：Connection reset by 192.30.255.112 port 22 fatal: Could not read from remote repository.</title>
      <link href="/git-error-2/"/>
      <url>/git-error-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>问题：Connection reset by 192.30.255.112 port 22 fatal: Could not read from remote repository.</strong><br><img alt="error" data-src="https://img-blog.csdnimg.cn/20191230154340954.png" class="lazyload"></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>先检查能否<code>ping</code>通该地址<code>github.com</code>：<br><img alt="ping 失败" data-src="https://img-blog.csdnimg.cn/2019123015451024.png" class="lazyload"><br>有我的<code>git bash</code>没有支持中文，所以就出现了乱码，我们可以看到这是ping不通的结果，如何解决呢？将该地址加入<code>hosts</code>文件：<br><img alt="地址路径" data-src="https://img-blog.csdnimg.cn/20191230154631703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNTIxMTg0,size_16,color_FFFFFF,t_70" class="lazyload"><br><img alt="修改的内容" data-src="https://img-blog.csdnimg.cn/20191230154657302.png" class="lazyload"><br>然后在<code>ping</code>一次看看，我们就可以看到如下的结果：<br><img alt="成功之后" data-src="https://img-blog.csdnimg.cn/20191230154738775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNTIxMTg0,size_16,color_FFFFFF,t_70" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 解决问题 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决：Hi crazyjums! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</title>
      <link href="/git-error-1/"/>
      <url>/git-error-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>问题：Hi crazyjums! You’ve successfully authenticated, but GitHub does not provide shell access.</strong>   </p><p>使用<code>git</code>命令验证是否和<code>GitHub</code>连接成功，出现上述错误：<br><img alt="error" data-src="https://img-blog.csdnimg.cn/20191230153509480.png" class="lazyload"></p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>这种方式比较简单粗暴，直接将<code>GitHub</code>的<code>ssh key</code>删除掉，然后重新生成一份新的。<br>具体可参考<a href="https://blog.csdn.net/qq_33521184/article/details/89347390" target="_blank" rel="noopener">这篇博客</a>。</p><p>然后问题解决：<br><img alt="result" data-src="https://img-blog.csdnimg.cn/20191230153835772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNTIxMTg0,size_16,color_FFFFFF,t_70" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 解决问题 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中的logging.basicConfig模块是一个一次性工具函数</title>
      <link href="/python-logging-error-sloved/"/>
      <url>/python-logging-error-sloved/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>今天当我们使用<code>python</code>中的<code>logging</code>模块记录日志时，我在三个文件中分别定义了下面的语句，目的是想将三个文件产生的日志分别存在不同的日志文件中，唯一不同的是<code>filename</code>不同，为了区别文件。但是并没有像我想的那样走，最终程序运行，只产生了一个日志文件，左右的日志信息都存储在一个日志文件中个，然后我就开始Google找答案，最后还是说服了我。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">"MysqlDB_&#123;&#125;.log"</span>.format(get_year_mon_day())</span><br><span class="line">logging.basicConfig(filename=<span class="string">"MysqlDB_&#123;&#125;.log"</span>.format(get_year_mon_day()), level=logging.DEBUG, format=LOG_FORMAT, datefmt=DATE_FORMAT)</span><br></pre></td></tr></table></figure><p>答案来源：<a href="https://www.cnblogs.com/yyds/p/6901864.html" target="_blank" rel="noopener">Python之日志处理（logging模块）</a><br><img alt="原因介绍" data-src="https://img-blog.csdnimg.cn/20191230131342304.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 解决问题 </tag>
            
            <tag> python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python如何对程序记录日志 logging</title>
      <link href="/python-debug/"/>
      <url>/python-debug/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">LOG_FORMAT = <span class="string">"%(asctime)s - %(levelname)s - %(message)s"</span></span><br><span class="line">DATE_FORMAT = <span class="string">"%m/%d/%Y %H:%M:%S %p"</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">'apiStudy.log'</span>, level=logging.DEBUG, format=LOG_FORMAT, datefmt=DATE_FORMAT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"test"</span>)</span><br><span class="line">logging.info(<span class="string">"这是一个info log"</span>)</span><br><span class="line">logging.error(<span class="string">"这是一个error log"</span>)</span><br><span class="line">logging.debug(<span class="string">"这是一个debug log"</span>)</span><br><span class="line">logging.warn(<span class="string">"这是一个warn log"</span>)</span><br></pre></td></tr></table></figure><h3 id="最终显示效果"><a href="#最终显示效果" class="headerlink" title="最终显示效果"></a>最终显示效果</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">10</span><span class="string">:01:23</span> <span class="string">AM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">Starting</span> <span class="string">new</span> <span class="string">HTTPS</span> <span class="string">connection</span> <span class="string">(1):</span> <span class="string">www.aqistudy.cn:443</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">10</span><span class="string">:01:23</span> <span class="string">AM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">https://www.aqistudy.cn:443</span> <span class="string">"GET /historydata/ HTTP/1.1"</span> <span class="number">200</span> <span class="string">None</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">10</span><span class="string">:02:40</span> <span class="string">AM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">Starting</span> <span class="string">new</span> <span class="string">HTTPS</span> <span class="string">connection</span> <span class="string">(1):</span> <span class="string">www.aqistudy.cn:443</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">10</span><span class="string">:02:40</span> <span class="string">AM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">https://www.aqistudy.cn:443</span> <span class="string">"GET /historydata/ HTTP/1.1"</span> <span class="number">200</span> <span class="string">None</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">10</span><span class="string">:03:28</span> <span class="string">AM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">Starting</span> <span class="string">new</span> <span class="string">HTTPS</span> <span class="string">connection</span> <span class="string">(1):</span> <span class="string">www.aqistudy.cn:443</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">10</span><span class="string">:03:28</span> <span class="string">AM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">https://www.aqistudy.cn:443</span> <span class="string">"POST /historydata/api/historyapi.php HTTP/1.1"</span> <span class="number">200</span> <span class="string">None</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">12</span><span class="string">:11:19</span> <span class="string">PM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">Starting</span> <span class="string">new</span> <span class="string">HTTPS</span> <span class="string">connection</span> <span class="string">(1):</span> <span class="string">www.aqistudy.cn:443</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">12</span><span class="string">:11:28</span> <span class="string">PM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">https://www.aqistudy.cn:443</span> <span class="string">"POST /historydata/api/historyapi.php HTTP/1.1"</span> <span class="number">200</span> <span class="string">None</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">12</span><span class="string">:12:57</span> <span class="string">PM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">Starting</span> <span class="string">new</span> <span class="string">HTTPS</span> <span class="string">connection</span> <span class="string">(1):</span> <span class="string">www.aqistudy.cn:443</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">12</span><span class="string">:12:59</span> <span class="string">PM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">https://www.aqistudy.cn:443</span> <span class="string">"POST /historydata/api/historyapi.php HTTP/1.1"</span> <span class="number">200</span> <span class="string">None</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">12</span><span class="string">:15:17</span> <span class="string">PM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">Starting</span> <span class="string">new</span> <span class="string">HTTPS</span> <span class="string">connection</span> <span class="string">(1):</span> <span class="string">www.aqistudy.cn:443</span></span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下，如何将MySQL从C盘迁移到其他盘以及解决MySQL迁移数据目录后不能启动服务</title>
      <link href="/mysql-to-another-disk/"/>
      <url>/mysql-to-another-disk/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-关闭MySQL服务"><a href="#1-关闭MySQL服务" class="headerlink" title="1 关闭MySQL服务"></a>1 关闭MySQL服务</h3><p>右键点击【我的电脑】-》【管理】-》【服务和应用程序】-》【服务】-》关闭MySQL服务</p><h3 id="2-找到MySQL数据的存储位置"><a href="#2-找到MySQL数据的存储位置" class="headerlink" title="2 找到MySQL数据的存储位置"></a>2 找到MySQL数据的存储位置</h3><p><img alt="存储位置" data-src="https://upload-images.jianshu.io/upload_images/621273-ac528190b1b7bb0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><h3 id="3-修改MySQL的配置文件"><a href="#3-修改MySQL的配置文件" class="headerlink" title="3 修改MySQL的配置文件"></a>3 修改MySQL的配置文件</h3><p>找到<code>my.ini</code>配置文件，找到其中的<code>datadir</code>，如下：<br><img alt="配置文件" data-src="https://upload-images.jianshu.io/upload_images/621273-508a25fcbd91f21b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"><br>将路径修改为你想要修改的路径即可。</p><h3 id="4-修改文件夹的权限"><a href="#4-修改文件夹的权限" class="headerlink" title="4 修改文件夹的权限"></a>4 修改文件夹的权限</h3><p>找到新的路径文件夹，右键-》【安全】-【编辑】-》【添加】-》【高级】-》【立即查找】-》选择【NETWORK_SERVICE】<br>如下图所示：<br><img alt="权限" data-src="https://upload-images.jianshu.io/upload_images/621273-944e5e7af127b2a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><hr><h3 id="可能会遇到的问题："><a href="#可能会遇到的问题：" class="headerlink" title="可能会遇到的问题："></a>可能会遇到的问题：</h3><p><strong>2003 - can’t connect to mysql server on ‘localhost’ (10061)</strong><br>出现这种错误，就是说明<code>mysql</code>服务没有启动，可以通过查看服务页面：<br><img alt="服务启动" data-src="https://upload-images.jianshu.io/upload_images/621273-98e6f0e8ecea612a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>如果现实没有启动，那么有下面几种情况可以检查：   </p><h4 id="情况1"><a href="#情况1" class="headerlink" title="情况1"></a>情况1</h4><p>检查是不是新的<code>MySQL</code>目录没有<code>NETWORK SERVICE</code>权限，正确的权限应该如下：<br><img alt="正确权限" data-src="https://upload-images.jianshu.io/upload_images/621273-82f09c988a826ead.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>如果你的新的MySQL目录没有所有权限，那么可能导入服务时出了错误，可以重新导入<code>NETWORK SERVICE</code>。如下：<br><img alt="授权" data-src="https://img-blog.csdn.net/20181006100117453?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjI5MjUz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></p><h4 id="情况2"><a href="#情况2" class="headerlink" title="情况2"></a>情况2</h4><p>检查<code>MySQL</code>的配置文件的读取路径，如何查看读取路径，进入到【服务】窗口，查看<code>MySQL</code>的属性，可以看到如下所示：<br><img alt="配置读取路径" data-src="https://upload-images.jianshu.io/upload_images/621273-bacac516d8a7b29e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"><br>如果该路径下没有<code>my.ini</code>配置文件，那么我们有两种方法解决：</p><ul><li>将新目录下的配置文件拷贝到默认的路径下，不需要修改读取路径</li><li>修改配置文件的读取路径，不需要拷贝配置文件</li></ul><p>这里介绍如何修改读取路径，拷贝文件就不用介绍了吧。编辑新目录下的<code>my.ini</code>文件，修改这一部分，将路径修改成你的配置文件所在路径即可。<br><img alt="配置文件路径修改" data-src="https://upload-images.jianshu.io/upload_images/621273-6eef2f5fe0afe70a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 解决问题 </tag>
            
            <tag> Windows </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Python爬虫爬取基金网站基金数据</title>
      <link href="/python-spider-crawl-fund-data/"/>
      <url>/python-spider-crawl-fund-data/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-程序结构介绍"><a href="#1-程序结构介绍" class="headerlink" title="1 程序结构介绍"></a>1 程序结构介绍</h3><p>代码结构图：<br><img alt="代码结构图" data-src="https://upload-images.jianshu.io/upload_images/621273-5866743b51461e55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>代码目录结构：<br><img alt="代码目录结构" data-src="https://upload-images.jianshu.io/upload_images/621273-968868daae5c0dd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>结果图：<br><img alt="结果图" data-src="https://upload-images.jianshu.io/upload_images/621273-47c43f78bd151981.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><h3 id="2-数据源网站"><a href="#2-数据源网站" class="headerlink" title="2 数据源网站"></a>2 数据源网站</h3><p><a href="https://www.dayfund.cn/incrank.html" target="_blank" rel="noopener">https://www.dayfund.cn/incrank.html</a></p><h3 id="3-GitHub地址"><a href="#3-GitHub地址" class="headerlink" title="3 GitHub地址"></a>3 GitHub地址</h3><p><a href="https://github.com/crazyjums/crawl_fund_data" target="_blank" rel="noopener">https://github.com/crazyjums/crawl_fund_data</a></p><h3 id="4-文件代码："><a href="#4-文件代码：" class="headerlink" title="4 文件代码："></a>4 文件代码：</h3><p>main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> get_fund_code <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> get_fund_data <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> MysqlDB <span class="keyword">import</span> MysqlFundCode</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    s_time = time.time()</span><br><span class="line">    print(<span class="string">"程序正在运行...."</span>)</span><br><span class="line">    mysql_code = MysqlFundCode()</span><br><span class="line">    fund_code_lists = mysql_code.get_code_and_name_and_type(<span class="string">"指数型"</span>)</span><br><span class="line">    save_to_mysql(fund_code_lists=fund_code_lists)</span><br><span class="line"></span><br><span class="line">    e_time = time.time()</span><br><span class="line">    print(<span class="string">"一共运行了&#123;&#125;秒"</span>.format(e_time-s_time))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>get_fund_data.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">from</span> MysqlDB <span class="keyword">import</span> MysqlFundDetailData</span><br><span class="line"><span class="keyword">from</span> toolkit <span class="keyword">import</span> LOG_FORMAT,DATE_FORMAT,get_year_mon_day,get_class_name,get_HTML_content</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_refer_fund_detail_data</span><span class="params">(fund_code,start_date=<span class="string">"2019-09-28"</span>,end_date=<span class="string">"2019-12-28"</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    :param fund_code:</span></span><br><span class="line"><span class="string">    :param start_date:</span></span><br><span class="line"><span class="string">    :param end_date:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    date,</span></span><br><span class="line"><span class="string">    fund_name,</span></span><br><span class="line"><span class="string">    latest_nvalue_pu,</span></span><br><span class="line"><span class="string">    latest_sum_nvalue,</span></span><br><span class="line"><span class="string">    last_nvalue_pu,</span></span><br><span class="line"><span class="string">    last_sum_nvalue,</span></span><br><span class="line"><span class="string">    daily_growth,</span></span><br><span class="line"><span class="string">    daily_growth_rate</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">"https://www.dayfund.cn/fundvalue/&#123;&#125;.html?sdate=&#123;&#125;&amp;edate=&#123;&#125;"</span>.format(fund_code, start_date, end_date)</span><br><span class="line">        resp = get_HTML_content(url)</span><br><span class="line">        soup = bs(resp,<span class="string">"lxml"</span>)</span><br><span class="line">        trs = soup.find_all(<span class="string">"table"</span>,attrs=&#123;<span class="string">"class"</span>:<span class="string">"mt1 clear"</span>&#125;)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># fund_name = soup.find("h1",attrs=&#123;"class":"myfundTitle"&#125;).string</span></span><br><span class="line">        <span class="comment"># t = re.sub(r"\(","_",fund_name)</span></span><br><span class="line">        <span class="comment"># fund_name = re.sub(r"\)","",t)</span></span><br><span class="line">        _soup = bs(str(trs),<span class="string">"lxml"</span>)</span><br><span class="line">        lis = _soup.find_all(<span class="string">"tr"</span>)</span><br><span class="line">        fund_lists = []</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">            fund_dict = &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">1</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            t = list(i)</span><br><span class="line">            <span class="keyword">if</span> len(t) &gt;= <span class="number">17</span>:</span><br><span class="line">                date = t[<span class="number">1</span>].string</span><br><span class="line">                latest_nvalue_pu = t[<span class="number">7</span>].string</span><br><span class="line">                latest_sum_nvalue = t[<span class="number">9</span>].string</span><br><span class="line">                last_nvalue_pu = t[<span class="number">11</span>].string</span><br><span class="line">                last_sum_nvalue = t[<span class="number">13</span>].string</span><br><span class="line">                daily_growth = t[<span class="number">15</span>].string</span><br><span class="line">                daily_growth_rate = t[<span class="number">17</span>].string</span><br><span class="line">                fund_dict[<span class="string">"date"</span>] = date</span><br><span class="line">                fund_dict[<span class="string">"latest_nvalue_pu"</span>] = latest_nvalue_pu</span><br><span class="line">                fund_dict[<span class="string">"latest_sum_nvalue"</span>] = latest_sum_nvalue</span><br><span class="line">                fund_dict[<span class="string">"last_nvalue_pu"</span>] = last_nvalue_pu</span><br><span class="line">                fund_dict[<span class="string">"last_sum_nvalue"</span>] = last_sum_nvalue</span><br><span class="line">                fund_dict[<span class="string">"daily_growth"</span>] = daily_growth</span><br><span class="line">                fund_dict[<span class="string">"daily_growth_rate"</span>] = daily_growth_rate</span><br><span class="line">                fund_lists.append(fund_dict)</span><br><span class="line">                <span class="comment"># logging.info("&#123;&#125; | &#123;&#125; appended into fund_lists".format(date,latest_nvalue_pu))</span></span><br><span class="line">        <span class="keyword">return</span> fund_lists[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">"&#123;&#125; | &#123;&#125;"</span>.format(e,sys._getframe().f_code.co_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mysql</span><span class="params">(start_time=None,end_time=None, fund_code_lists=[])</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start_time == <span class="literal">None</span>:</span><br><span class="line">        start_time = get_year_mon_day(y=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> end_time == <span class="literal">None</span>:</span><br><span class="line">        end_time = get_year_mon_day()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(fund_code_lists) != <span class="number">0</span>:</span><br><span class="line">        mysql = MysqlFundDetailData()</span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> fund_code_lists:</span><br><span class="line">            fund_code = info[<span class="number">0</span>]</span><br><span class="line">            table_name = info[<span class="number">-1</span>]</span><br><span class="line">            fund_lists = get_refer_fund_detail_data(fund_code,start_time,end_time)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> mysql.check_table_if_exist(table_name):</span><br><span class="line">                logging.info(<span class="string">"&#123;&#125;表没有创建，正在创建... | &#123;&#125;"</span>.format(table_name, sys._getframe().f_code.co_name))</span><br><span class="line">                mysql.create_table(table_name)</span><br><span class="line">                logging.info(<span class="string">"创建成功！正在将数据写入&#123;&#125;中... | &#123;&#125;"</span>.format(table_name,sys._getframe().f_code.co_name))</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> fund_lists:</span><br><span class="line">                    mysql.insert_into_table(table_name,i)</span><br><span class="line">                logging.info(<span class="string">"&#123;&#125;。写入成功。 | &#123;&#125;"</span>.format(table_name,sys._getframe().f_code.co_name))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.info(<span class="string">"表已存在，正在将数据写入&#123;&#125;中... | &#123;&#125;"</span>.format(table_name, sys._getframe().f_code.co_name))</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> fund_lists:</span><br><span class="line">                    mysql.insert_into_table(table_name, i)</span><br><span class="line">                logging.info(<span class="string">"&#123;&#125;。写入成功。 | &#123;&#125;"</span>.format(table_name, sys._getframe().f_code.co_name))</span><br><span class="line">                <span class="comment"># for i in fund_lists:</span></span><br><span class="line">                <span class="comment">#     mysql.insert_into_table(table_name,i)</span></span><br><span class="line">                <span class="comment">#     print("&#123;&#125;,done".format(table_name))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.info(<span class="string">"列表为空，没有爬取到数据。| &#123;&#125;"</span>.format(sys._getframe().f_code.co_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name_data</span><span class="params">()</span>:</span></span><br><span class="line">    s = <span class="string">'''</span></span><br><span class="line"><span class="string">        fund_type = i[2]</span></span><br><span class="line"><span class="string">            date = i[3]</span></span><br><span class="line"><span class="string">            nvalue_pu = i[4]</span></span><br><span class="line"><span class="string">            day_growth_rate = i[5]</span></span><br><span class="line"><span class="string">            a_week_rate = i[6]</span></span><br><span class="line"><span class="string">            a_month_rate = i[7]</span></span><br><span class="line"><span class="string">            _3_month_rate = i[8]</span></span><br><span class="line"><span class="string">            _6_month_rate = i[9]</span></span><br><span class="line"><span class="string">            a_year_rate = i[10]</span></span><br><span class="line"><span class="string">            _2_year_rate = i[11]</span></span><br><span class="line"><span class="string">            _3_year_rate = i[12]</span></span><br><span class="line"><span class="string">            from_this_year = i[13]</span></span><br><span class="line"><span class="string">            from_found_year = i[14]</span></span><br><span class="line"><span class="string">            poundage = i[-2]</span></span><br><span class="line"><span class="string">            purchase_money = i[-5]</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">    l = s.split(<span class="string">"\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        li = i.strip().split(<span class="string">"="</span>)</span><br><span class="line">        <span class="keyword">if</span> len(li) == <span class="number">2</span>:</span><br><span class="line">            name = li[<span class="number">0</span>].strip()</span><br><span class="line">            data = li[<span class="number">-1</span>].strip()</span><br><span class="line">            print(<span class="string">"temp_dict[\"&#123;&#125;\"] = &#123;&#125;"</span>.format(name, data))</span><br></pre></td></tr></table></figure><p>get_fund_code.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> demjson,re</span><br><span class="line"><span class="keyword">import</span> logging,sys</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="keyword">from</span> MysqlDB <span class="keyword">import</span> MysqlFundCode</span><br><span class="line"><span class="keyword">from</span> toolkit <span class="keyword">import</span> LOG_FORMAT,DATE_FORMAT,get_year_mon_day,get_class_name,get_HTML_content</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_fund_code_lists_by_page</span><span class="params">(page)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="string">'''https://fundapi.eastmoney.com/fundtradenew.aspx</span></span><br><span class="line"><span class="string">        ?ft=zs&amp;sc=1n&amp;st=desc&amp;pi=1&amp;pn=100&amp;cp=&amp;ct=&amp;cd=&amp;ms=&amp;fr=&amp;plevel=&amp;fst=&amp;ftype=&amp;fr1=&amp;fl=0&amp;isab=1</span></span><br><span class="line"><span class="string">        https://fundapi.eastmoney.com/fundtradenew.aspx?ft=zs&amp;sc=1n&amp;st=desc&amp;pi=3&amp;pn=100&amp;cp=&amp;ct=&amp;cd=&amp;ms=&amp;fr=&amp;plevel=&amp;fst=&amp;ftype=&amp;fr1=&amp;fl=0&amp;isab=1'''</span></span><br><span class="line">        url = <span class="string">"https://fundapi.eastmoney.com/fundtradenew.aspx?ft=zs&amp;sc=1n&amp;st=desc&amp;pi=&#123;&#125;&amp;pn=100&amp;cp=&amp;ct=&amp;cd=&amp;ms=&amp;fr=&amp;plevel=&amp;fst=&amp;ftype=&amp;fr1=&amp;fl=0&amp;isab=1"</span>.format(page)</span><br><span class="line">        content = get_HTML_content(url)</span><br><span class="line">        _ = re.sub(<span class="string">"\|"</span>,<span class="string">"  "</span>,content[<span class="number">15</span>:<span class="number">-1</span>])</span><br><span class="line">        d = demjson.decode(_)</span><br><span class="line">        fund_info_lists = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> d[<span class="string">"datas"</span>]:</span><br><span class="line">            i = i.split(<span class="string">"  "</span>)</span><br><span class="line">            temp_dict = &#123;&#125;</span><br><span class="line">            temp_dict[<span class="string">"fund_code"</span>] = i[<span class="number">0</span>]</span><br><span class="line">            temp_dict[<span class="string">"fund_name"</span>] = i[<span class="number">1</span>]</span><br><span class="line">            temp_dict[<span class="string">"fund_type"</span>] = i[<span class="number">2</span>]</span><br><span class="line">            temp_dict[<span class="string">"date"</span>] = i[<span class="number">3</span>]</span><br><span class="line">            temp_dict[<span class="string">"nvalue_pu"</span>] = i[<span class="number">4</span>]</span><br><span class="line">            temp_dict[<span class="string">"day_growth_rate"</span>] = i[<span class="number">5</span>]</span><br><span class="line">            temp_dict[<span class="string">"a_week_rate"</span>] = i[<span class="number">6</span>]</span><br><span class="line">            temp_dict[<span class="string">"a_month_rate"</span>] = i[<span class="number">7</span>]</span><br><span class="line">            temp_dict[<span class="string">"_3_month_rate"</span>] = i[<span class="number">8</span>]</span><br><span class="line">            temp_dict[<span class="string">"_6_month_rate"</span>] = i[<span class="number">9</span>]</span><br><span class="line">            temp_dict[<span class="string">"a_year_rate"</span>] = i[<span class="number">10</span>]</span><br><span class="line">            temp_dict[<span class="string">"_2_year_rate"</span>] = i[<span class="number">11</span>]</span><br><span class="line">            temp_dict[<span class="string">"_3_year_rate"</span>] = i[<span class="number">12</span>]</span><br><span class="line">            temp_dict[<span class="string">"from_this_year"</span>] = i[<span class="number">13</span>]</span><br><span class="line">            temp_dict[<span class="string">"from_found_year"</span>] = i[<span class="number">14</span>]</span><br><span class="line">            temp_dict[<span class="string">"poundage"</span>] = i[<span class="number">-2</span>]</span><br><span class="line">            temp_dict[<span class="string">"purchase_money"</span>] = i[<span class="number">-5</span>]</span><br><span class="line">            fund_info_lists.append(temp_dict)</span><br><span class="line">        logging.info(<span class="string">"&#123;&#125; | &#123;&#125;"</span>.format(<span class="string">"第 &#123;&#125; 页数据抓取完成。"</span>.format(page),sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">return</span> fund_info_lists</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">"&#123;&#125; | &#123;&#125;"</span>.format(e, sys._getframe().f_code.co_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_total_page_num</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">"https://fundapi.eastmoney.com/fundtradenew.aspx?ft=zs&amp;sc=1n&amp;st=desc&amp;pi=1&amp;pn=100&amp;cp=&amp;ct=&amp;cd=&amp;ms=&amp;fr=&amp;plevel=&amp;fst=&amp;ftype=&amp;fr1=&amp;fl=0&amp;isab=1"</span></span><br><span class="line">        content = get_HTML_content(url)</span><br><span class="line">        _ = re.sub(<span class="string">"\|"</span>, <span class="string">"  "</span>, content[<span class="number">15</span>:<span class="number">-1</span>])</span><br><span class="line">        d = demjson.decode(_)</span><br><span class="line">        total_page = (int(d[<span class="string">"allPages"</span>]))</span><br><span class="line">        logging.info(<span class="string">"&#123;&#125; pages | &#123;&#125;"</span>.format(total_page, sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">return</span> total_page</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">"&#123;&#125; | &#123;&#125;"</span>.format(e, sys._getframe().f_code.co_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_fund_lists</span><span class="params">()</span>:</span></span><br><span class="line">    all_fund_lists = []</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,get_total_page_num() + <span class="number">1</span>):</span><br><span class="line">        all_fund_lists.append(get_fund_code_lists_by_page(page))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> all_fund_lists</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_all_fund_lists_into_file</span><span class="params">(filename=<span class="string">"all_fund_lists.txt"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">"a+"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> file:</span><br><span class="line">            logging.info(<span class="string">"&#123;&#125; 文件存在，正在追加... | &#123;&#125;"</span>.format(filename, sys._getframe().f_code.co_name))</span><br><span class="line">            file.write(<span class="string">"\n\n"</span>)</span><br><span class="line">            file.write(<span class="string">"-"</span>*<span class="number">20</span> + <span class="string">"这是新加的数据，时间：&#123;&#125;"</span>.format(time.ctime()) + <span class="string">"\n\n"</span>)</span><br><span class="line">            <span class="keyword">for</span> fund_list <span class="keyword">in</span> get_all_fund_lists():</span><br><span class="line">                file.write(str(fund_list))</span><br><span class="line">                file.write(<span class="string">"\n"</span>)</span><br><span class="line">            file.write(<span class="string">"\n"</span> + <span class="string">"-"</span>*<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> file:</span><br><span class="line">            logging.info(<span class="string">"&#123;&#125; 文件不存在，正在创建并写数据... | &#123;&#125;"</span>.format(filename, sys._getframe().f_code.co_name))</span><br><span class="line">            <span class="keyword">for</span> fund_list <span class="keyword">in</span> get_all_fund_lists():</span><br><span class="line">                file.write(str(fund_list))</span><br><span class="line">                file.write(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name_data</span><span class="params">()</span>:</span></span><br><span class="line">    s = <span class="string">'''fund_dict["date"] = date</span></span><br><span class="line"><span class="string">            fund_dict["latest_nvalue_pu"] = latest_nvalue_pu</span></span><br><span class="line"><span class="string">            fund_dict["latest_sum_nvalue"] = latest_sum_nvalue</span></span><br><span class="line"><span class="string">            fund_dict["last_nvalue_pu"] = last_nvalue_pu</span></span><br><span class="line"><span class="string">            fund_dict["last_sum_nvalue"] = last_sum_nvalue</span></span><br><span class="line"><span class="string">            fund_dict["daily_growth"] = daily_growth</span></span><br><span class="line"><span class="string">            fund_dict["daily_growth_rate"] = daily_growth_rate'''</span></span><br><span class="line">    li = s.split(<span class="string">"\n"</span>)</span><br><span class="line">    tt = <span class="string">""</span></span><br><span class="line">    data = <span class="string">""</span></span><br><span class="line">    values = <span class="string">""</span></span><br><span class="line">    <span class="keyword">import</span> re</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">        t = i.split(<span class="string">"="</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        t = re.sub(<span class="string">"fund_dict\[\""</span>, <span class="string">""</span>, t)</span><br><span class="line">        t = re.sub(<span class="string">"\"\]"</span>, <span class="string">""</span>, t)</span><br><span class="line">        tt += t + <span class="string">","</span></span><br><span class="line">        d = <span class="string">"&#123;&#125;=each_data[\"&#123;&#125;\"],"</span>.format(t, t)</span><br><span class="line">        data += d</span><br><span class="line">        v = <span class="string">r"\'&#123;"</span> + t + <span class="string">r"&#125;\'"</span></span><br><span class="line">        values += v + <span class="string">","</span></span><br><span class="line">        sql = <span class="string">r"insert into &#123;table_name&#125; "</span> + <span class="string">"(&#123;&#125;) values(&#123;&#125;)"</span>.format(tt,values)</span><br><span class="line">    print(sql)</span><br><span class="line">    print(values)</span><br><span class="line">    print(data)</span><br><span class="line">    print(tt)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sql</span><span class="params">()</span>:</span></span><br><span class="line">    s = <span class="string">"date,fund_name,latest_nvalue_pu,latest_sum_nvalue,last_nvalue_pu,last_sum_nvalue,daily_growth,daily_growth_rate"</span></span><br><span class="line">    li = s.split(<span class="string">","</span>)</span><br><span class="line">    s = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">        <span class="string">'''`fund_code` VARCHAR(50)  NULL,'''</span></span><br><span class="line">        t = <span class="string">"`"</span> + i + <span class="string">"`"</span> + <span class="string">"VARCHAR(50)  NULL,"</span> + <span class="string">"\n"</span></span><br><span class="line">        s += t</span><br><span class="line">    print(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mysql</span><span class="params">()</span>:</span></span><br><span class="line">    mysql = MysqlFundCode()</span><br><span class="line">    table_name = get_fund_code_lists_by_page(<span class="number">1</span>)[<span class="number">1</span>][<span class="string">"fund_type"</span>]</span><br><span class="line">    all_fund_lists = get_all_fund_lists()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> mysql.check_table_if_exist(table_name=table_name):</span><br><span class="line">        logging.info(<span class="string">"&#123;&#125;表没有创建，正在创建... | &#123;&#125;"</span>.format(table_name, sys._getframe().f_code.co_name))</span><br><span class="line">        mysql.create_table(table_name)</span><br><span class="line">        logging.info(<span class="string">"创建成功！正在将数据写入&#123;&#125;中... | &#123;&#125;"</span>.format(table_name,sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">for</span> fund_list <span class="keyword">in</span> all_fund_lists:</span><br><span class="line">            <span class="keyword">for</span> each_data <span class="keyword">in</span> fund_list:</span><br><span class="line">                <span class="comment"># print("now --&gt; &#123;&#125;".format(each_data))</span></span><br><span class="line">                mysql.insert_into_table(table_name,each_data)</span><br><span class="line">                <span class="comment"># logging.info("&#123;&#125; | &#123;&#125;".format(each_data, sys._getframe().f_code.co_name))</span></span><br><span class="line">        logging.info(<span class="string">"&#123;&#125;。写入成功。 | &#123;&#125;"</span>.format(table_name, sys._getframe().f_code.co_name))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.info(<span class="string">"表已存在，正在将数据写入&#123;&#125;中... | &#123;&#125;"</span>.format(table_name, sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">for</span> fund_list <span class="keyword">in</span> all_fund_lists:</span><br><span class="line">            <span class="keyword">for</span> each_data <span class="keyword">in</span> fund_list:</span><br><span class="line">                <span class="comment"># print("now --&gt; &#123;&#125;".format(each_data))</span></span><br><span class="line">                mysql.insert_into_table(table_name,each_data)</span><br><span class="line">        logging.info(<span class="string">"&#123;&#125;。写入成功。 | &#123;&#125;"</span>.format(table_name, sys._getframe().f_code.co_name))</span><br></pre></td></tr></table></figure><p>MysqlDB.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql,logging,sys</span><br><span class="line"><span class="keyword">from</span> toolkit <span class="keyword">import</span> LOG_FORMAT,DATE_FORMAT,get_year_mon_day,get_class_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlFundCode</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.host = <span class="string">"127.0.0.1"</span></span><br><span class="line">        self.user = <span class="string">"root"</span></span><br><span class="line">        self.password = <span class="string">"root"</span></span><br><span class="line">        self.database = <span class="string">"fund_data"</span></span><br><span class="line">        self.charset = <span class="string">"utf8mb4"</span></span><br><span class="line">        self.port = <span class="number">3306</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DB</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> pymysql.connect(self.host,self.user, self.password, self.database, self.port, charset=self.charset)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_into_table</span><span class="params">(self, table_name,each_data)</span>:</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info("&#123;&#125; | &#123;&#125; | &#123;&#125;".format(mysqlDB, get_class_name(self), sys._getframe().f_code.co_name))</span></span><br><span class="line">        <span class="comment"># if not isinstance(each_data,list):</span></span><br><span class="line">        <span class="comment">#     each_data = eval(each_data)</span></span><br><span class="line">        sql = <span class="string">'''</span></span><br><span class="line"><span class="string">            insert into &#123;table_name&#125;(fund_code,fund_name,fund_type,date,nvalue_pu,day_growth_rate,</span></span><br><span class="line"><span class="string">            a_week_rate,a_month_rate,_3_month_rate,_6_month_rate,a_year_rate,_2_year_rate,_3_year_rate,</span></span><br><span class="line"><span class="string">            from_this_year,from_found_year,poundage,purchase_money)</span></span><br><span class="line"><span class="string">            values(\'&#123;fund_code&#125;\',\'&#123;fund_name&#125;\',\'&#123;fund_type&#125;\',\'&#123;date&#125;\',\'&#123;nvalue_pu&#125;\',</span></span><br><span class="line"><span class="string">            \'&#123;day_growth_rate&#125;\',\'&#123;a_week_rate&#125;\',\'&#123;a_month_rate&#125;\',\'&#123;_3_month_rate&#125;\',</span></span><br><span class="line"><span class="string">            \'&#123;_6_month_rate&#125;\',\'&#123;a_year_rate&#125;\',\'&#123;_2_year_rate&#125;\',\'&#123;_3_year_rate&#125;\',</span></span><br><span class="line"><span class="string">            \'&#123;from_this_year&#125;\',\'&#123;from_found_year&#125;\',\'&#123;poundage&#125;\',\'&#123;purchase_money&#125;\')</span></span><br><span class="line"><span class="string">        '''</span>.format(table_name=table_name,fund_code=each_data[<span class="string">"fund_code"</span>],fund_name=each_data[<span class="string">"fund_name"</span>],</span><br><span class="line">                   fund_type=each_data[<span class="string">"fund_type"</span>],date=each_data[<span class="string">"date"</span>],nvalue_pu=each_data[<span class="string">"nvalue_pu"</span>],</span><br><span class="line">                   day_growth_rate=each_data[<span class="string">"day_growth_rate"</span>],a_week_rate=each_data[<span class="string">"a_week_rate"</span>],</span><br><span class="line">                   a_month_rate=each_data[<span class="string">"a_month_rate"</span>],_3_month_rate=each_data[<span class="string">"_3_month_rate"</span>],_6_month_rate=each_data[<span class="string">"_6_month_rate"</span>],</span><br><span class="line">                   a_year_rate=each_data[<span class="string">"a_year_rate"</span>],_2_year_rate=each_data[<span class="string">"_2_year_rate"</span>],_3_year_rate=each_data[<span class="string">"_3_year_rate"</span>],</span><br><span class="line">                   from_this_year=each_data[<span class="string">"from_this_year"</span>],from_found_year=each_data[<span class="string">"from_found_year"</span>],poundage=each_data[<span class="string">"poundage"</span>],</span><br><span class="line">                   purchase_money=each_data[<span class="string">"purchase_money"</span>])</span><br><span class="line">        <span class="comment"># print(sql)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                info = cursor.execute(sql)</span><br><span class="line">                mysqlDB.commit()</span><br><span class="line">                <span class="keyword">if</span> cursor.rowcount &gt;= <span class="number">1</span>:</span><br><span class="line">                    self.count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">"&#123;&#125; | &#123;&#125; | &#123;&#125;"</span>.format(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_table</span><span class="params">(self,table_name)</span>:</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info("&#123;&#125; | &#123;&#125; | &#123;&#125;".format(mysqlDB, get_class_name(self), sys._getframe().f_code.co_name))</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        date,fund_name,latest_nvalue_pu,latest_sum_nvalue,last_nvalue_pu,</span></span><br><span class="line"><span class="string">    last_sum_nvalue,daily_growth,daily_growth_rate</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        temp_dict["fund_code"] = i[0]</span></span><br><span class="line"><span class="string">        temp_dict["fund_name"] = i[1]</span></span><br><span class="line"><span class="string">        temp_dict["fund_type"] = i[2]</span></span><br><span class="line"><span class="string">        temp_dict["date"] = i[3]</span></span><br><span class="line"><span class="string">        temp_dict["nvalue_pu"] = i[4]</span></span><br><span class="line"><span class="string">        temp_dict["day_growth_rate"] = i[5]</span></span><br><span class="line"><span class="string">        temp_dict["a_week_rate"] = i[6]</span></span><br><span class="line"><span class="string">        temp_dict["a_month_rate"] = i[7]</span></span><br><span class="line"><span class="string">        temp_dict["_3_month_rate"] = i[8]</span></span><br><span class="line"><span class="string">        temp_dict["_6_month_rate"] = i[9]</span></span><br><span class="line"><span class="string">        temp_dict["a_year_rate"] = i[10]</span></span><br><span class="line"><span class="string">        temp_dict["_2_year_rate"] = i[11]</span></span><br><span class="line"><span class="string">        temp_dict["_3_year_rate"] = i[12]</span></span><br><span class="line"><span class="string">        temp_dict["from_this_year"] = i[13]</span></span><br><span class="line"><span class="string">        temp_dict["from_found_year"] = i[14]</span></span><br><span class="line"><span class="string">        temp_dict["poundage"] = i[-2]</span></span><br><span class="line"><span class="string">        temp_dict["purchase_money"] = i[-5]</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        sql = <span class="string">'''</span></span><br><span class="line"><span class="string">            CREATE TABLE IF NOT EXISTS `&#123;table_name&#125;`(</span></span><br><span class="line"><span class="string">               `id`  bigint NOT NULL AUTO_INCREMENT ,</span></span><br><span class="line"><span class="string">               `fund_code` VARCHAR(40)  NULL,</span></span><br><span class="line"><span class="string">               `fund_name` VARCHAR(100)  NULL,</span></span><br><span class="line"><span class="string">               `fund_type` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `date` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `nvalue_pu`  VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `day_growth_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `a_week_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `a_month_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `_3_month_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `_6_month_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `a_year_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `_2_year_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `_3_year_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `from_this_year` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `from_found_year` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `poundage` VARCHAR(40)  NULL,</span></span><br><span class="line"><span class="string">               `purchase_money` VARCHAR(40)  NULL,</span></span><br><span class="line"><span class="string">               PRIMARY KEY ( `id` )</span></span><br><span class="line"><span class="string">            )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span></span><br><span class="line"><span class="string">        '''</span>.format(table_name=table_name)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">"&#123;&#125; | &#123;&#125; | &#123;&#125;"</span>.format(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_table_if_exist</span><span class="params">(self,table_name)</span>:</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info("&#123;&#125; | &#123;&#125; | &#123;&#125;".format(mysqlDB,get_class_name(self),sys._getframe().f_code.co_name))</span></span><br><span class="line">        sql = <span class="string">"show tables"</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                _tables = cursor.fetchall()</span><br><span class="line">                table_lists = []</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> _tables:</span><br><span class="line">                    table_lists.append(i[<span class="number">0</span>])</span><br><span class="line">                <span class="comment"># print("all tables:&#123;&#125;".format(len(table_lists)))</span></span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> table_lists:</span><br><span class="line">                    <span class="keyword">if</span> table_name <span class="keyword">in</span> _:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">"&#123;&#125; | &#123;&#125; | &#123;&#125;"</span>.format(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_and_name_and_type</span><span class="params">(self,table_name)</span>:</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info("&#123;&#125; | &#123;&#125; | &#123;&#125;".format(mysqlDB, get_class_name(self), sys._getframe().f_code.co_name))</span></span><br><span class="line">        sql = <span class="string">"SELECT fund_code,fund_name,fund_type FROM &#123;&#125;"</span>.format(table_name)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                info = cursor.fetchall()</span><br><span class="line">                <span class="string">'''</span></span><br><span class="line"><span class="string">                info是一个&lt;class 'tuple'&gt;类型的数据</span></span><br><span class="line"><span class="string">                '''</span></span><br><span class="line">                return_info = []</span><br><span class="line">                <span class="keyword">for</span> each <span class="keyword">in</span> info:</span><br><span class="line">                    _ = []</span><br><span class="line">                    fund_code = each[<span class="number">0</span>]</span><br><span class="line">                    _table_name = <span class="string">"&#123;&#125;_&#123;&#125;_&#123;&#125;"</span>.format(each[<span class="number">0</span>],each[<span class="number">1</span>],each[<span class="number">2</span>])</span><br><span class="line">                    _.append(fund_code)</span><br><span class="line">                    _.append(_table_name)</span><br><span class="line">                    return_info.append(_)</span><br><span class="line">                <span class="keyword">return</span> return_info</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">"&#123;&#125; | &#123;&#125; | &#123;&#125;"</span>.format(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_data_rows</span><span class="params">(self)</span>:</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info("&#123;&#125; | &#123;&#125; | &#123;&#125;".format(mysqlDB, get_class_name(self), sys._getframe().f_code.co_name))</span></span><br><span class="line">        sql_1 = <span class="string">"show tables"</span></span><br><span class="line">        total_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                cursor.execute(sql_1)</span><br><span class="line">                _tables = cursor.fetchall()</span><br><span class="line">                table_lists = []</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> _tables:</span><br><span class="line">                    table_lists.append(i[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> table_lists:</span><br><span class="line">                    sql_2 = <span class="string">"select count(*) from &#123;&#125;"</span>.format(i)</span><br><span class="line">                    cursor.execute(sql_2)</span><br><span class="line">                    res = cursor.fetchall()</span><br><span class="line">                    num = res[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                    total_count = total_count + num</span><br><span class="line"></span><br><span class="line">                print(<span class="string">"_"</span>*<span class="number">20</span>)</span><br><span class="line">                print(<span class="string">"from now on,there are &#123;&#125; lines data in database."</span>.format(self.good_to_show(total_count)))</span><br><span class="line">                print(<span class="string">"_"</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">"&#123;&#125; | &#123;&#125; | &#123;&#125;"</span>.format(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_insert_rows</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"_"</span> * <span class="number">20</span>)</span><br><span class="line">        print(<span class="string">"there total insert &#123;&#125; lines data in database."</span>.format(self.good_to_show(self.count)))</span><br><span class="line">        print(<span class="string">"_"</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">good_to_show</span><span class="params">(num)</span>:</span></span><br><span class="line">        _s = str(num)</span><br><span class="line">        <span class="keyword">if</span> len(_s) == <span class="number">5</span>:</span><br><span class="line">            head = _s[<span class="number">0</span>]</span><br><span class="line">            tail = _s[<span class="number">1</span>]</span><br><span class="line">            total = head + <span class="string">"."</span> + tail + <span class="string">"万"</span></span><br><span class="line">            <span class="keyword">return</span> total</span><br><span class="line">        <span class="keyword">elif</span> len(_s) == <span class="number">6</span>:</span><br><span class="line">            head = _s[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">            tail = _s[<span class="number">2</span>]</span><br><span class="line">            total = head + <span class="string">"."</span> + tail + <span class="string">"万"</span></span><br><span class="line">            <span class="keyword">return</span> total</span><br><span class="line">        <span class="keyword">elif</span> len(_s) == <span class="number">7</span>:</span><br><span class="line">            head = _s[<span class="number">0</span>]</span><br><span class="line">            tail = _s[<span class="number">1</span>]</span><br><span class="line">            total = head + <span class="string">"."</span> + tail + <span class="string">"百万"</span></span><br><span class="line">            <span class="keyword">return</span> total</span><br><span class="line">        <span class="keyword">elif</span> len(_s) == <span class="number">8</span>:</span><br><span class="line">            head = _s[<span class="number">0</span>]</span><br><span class="line">            tail = _s[<span class="number">1</span>]</span><br><span class="line">            total = head + <span class="string">"."</span> + tail + <span class="string">"千万"</span></span><br><span class="line">            <span class="keyword">return</span> total</span><br><span class="line">        <span class="keyword">elif</span> len(_s) == <span class="number">9</span>:</span><br><span class="line">            head = _s[<span class="number">0</span>]</span><br><span class="line">            tail = _s[<span class="number">1</span>]</span><br><span class="line">            total = head + <span class="string">"."</span> + tail + <span class="string">"亿"</span></span><br><span class="line">            <span class="keyword">return</span> total</span><br><span class="line">        <span class="keyword">elif</span> len(_s) &gt; <span class="number">9</span>:</span><br><span class="line">            head = _s[<span class="number">0</span>:<span class="number">-8</span>]</span><br><span class="line">            tail = _s[<span class="number">1</span>]</span><br><span class="line">            total = head + <span class="string">"."</span> + tail + <span class="string">"亿"</span></span><br><span class="line">            <span class="keyword">return</span> total</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> str(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlFundDetailData</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.host = <span class="string">"127.0.0.1"</span></span><br><span class="line">        self.user = <span class="string">"root"</span></span><br><span class="line">        self.password = <span class="string">"root"</span></span><br><span class="line">        self.database = <span class="string">"fund_data"</span></span><br><span class="line">        self.charset = <span class="string">"utf8mb4"</span></span><br><span class="line">        self.port = <span class="number">3306</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DB</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> pymysql.connect(self.host,self.user, self.password, self.database, self.port, charset=self.charset)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_into_table</span><span class="params">(self, table_name,each_data)</span>:</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info("&#123;&#125; | &#123;&#125; | &#123;&#125;".format(mysqlDB, get_class_name(self), sys._getframe().f_code.co_name))</span></span><br><span class="line">        <span class="comment"># if not isinstance(each_data,list):</span></span><br><span class="line">        <span class="comment">#     each_data = eval(each_data)</span></span><br><span class="line">        sql = <span class="string">'''insert into &#123;table_name&#125;(date, latest_nvalue_pu, latest_sum_nvalue, last_nvalue_pu, last_sum_nvalue,</span></span><br><span class="line"><span class="string">        daily_growth,daily_growth_rate) </span></span><br><span class="line"><span class="string">        values(\'&#123;date&#125;\',\'&#123;latest_nvalue_pu&#125;\',\'&#123;latest_sum_nvalue&#125;\',\'&#123;last_nvalue_pu&#125;\',</span></span><br><span class="line"><span class="string">        \'&#123;last_sum_nvalue&#125;\',\'&#123;daily_growth&#125;\',\'&#123;daily_growth_rate&#125;\')</span></span><br><span class="line"><span class="string">        '''</span>.format(table_name=table_name, date=each_data[<span class="string">"date"</span>], latest_nvalue_pu=each_data[<span class="string">"latest_nvalue_pu"</span>],</span><br><span class="line">           latest_sum_nvalue=each_data[<span class="string">"latest_sum_nvalue"</span>], last_nvalue_pu=each_data[<span class="string">"last_nvalue_pu"</span>],</span><br><span class="line">           last_sum_nvalue=each_data[<span class="string">"last_sum_nvalue"</span>], daily_growth=each_data[<span class="string">"daily_growth"</span>],</span><br><span class="line">           daily_growth_rate=each_data[<span class="string">"daily_growth_rate"</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(sql)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                info = cursor.execute(sql)</span><br><span class="line">                mysqlDB.commit()</span><br><span class="line">                <span class="keyword">if</span> cursor.rowcount &gt;= <span class="number">1</span>:</span><br><span class="line">                    self.count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">"&#123;&#125; | &#123;&#125; | &#123;&#125;"</span>.format(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_table</span><span class="params">(self,table_name)</span>:</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info("&#123;&#125; | &#123;&#125; | &#123;&#125;".format(mysqlDB, get_class_name(self), sys._getframe().f_code.co_name))</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        date,fund_name,latest_nvalue_pu,latest_sum_nvalue,last_nvalue_pu,</span></span><br><span class="line"><span class="string">    last_sum_nvalue,daily_growth,daily_growth_rate</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        temp_dict["fund_code"] = i[0]</span></span><br><span class="line"><span class="string">        temp_dict["fund_name"] = i[1]</span></span><br><span class="line"><span class="string">        temp_dict["fund_type"] = i[2]</span></span><br><span class="line"><span class="string">        temp_dict["date"] = i[3]</span></span><br><span class="line"><span class="string">        temp_dict["nvalue_pu"] = i[4]</span></span><br><span class="line"><span class="string">        temp_dict["day_growth_rate"] = i[5]</span></span><br><span class="line"><span class="string">        temp_dict["a_week_rate"] = i[6]</span></span><br><span class="line"><span class="string">        temp_dict["a_month_rate"] = i[7]</span></span><br><span class="line"><span class="string">        temp_dict["_3_month_rate"] = i[8]</span></span><br><span class="line"><span class="string">        temp_dict["_6_month_rate"] = i[9]</span></span><br><span class="line"><span class="string">        temp_dict["a_year_rate"] = i[10]</span></span><br><span class="line"><span class="string">        temp_dict["_2_year_rate"] = i[11]</span></span><br><span class="line"><span class="string">        temp_dict["_3_year_rate"] = i[12]</span></span><br><span class="line"><span class="string">        temp_dict["from_this_year"] = i[13]</span></span><br><span class="line"><span class="string">        temp_dict["from_found_year"] = i[14]</span></span><br><span class="line"><span class="string">        temp_dict["poundage"] = i[-2]</span></span><br><span class="line"><span class="string">        temp_dict["purchase_money"] = i[-5]</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        sql = <span class="string">'''</span></span><br><span class="line"><span class="string">            CREATE TABLE IF NOT EXISTS `&#123;table_name&#125;`(</span></span><br><span class="line"><span class="string">               `id`  bigint NOT NULL AUTO_INCREMENT ,</span></span><br><span class="line"><span class="string">               `date`VARCHAR(50)  NULL,</span></span><br><span class="line"><span class="string">                `latest_nvalue_pu`VARCHAR(50)  NULL,</span></span><br><span class="line"><span class="string">                `latest_sum_nvalue`VARCHAR(50)  NULL,</span></span><br><span class="line"><span class="string">                `last_nvalue_pu`VARCHAR(50)  NULL,</span></span><br><span class="line"><span class="string">                `last_sum_nvalue`VARCHAR(50)  NULL,</span></span><br><span class="line"><span class="string">                `daily_growth`VARCHAR(50)  NULL,</span></span><br><span class="line"><span class="string">                `daily_growth_rate`VARCHAR(50)  NULL,</span></span><br><span class="line"><span class="string">               PRIMARY KEY ( `id` )</span></span><br><span class="line"><span class="string">            )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span></span><br><span class="line"><span class="string">        '''</span>.format(table_name=table_name)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">"&#123;&#125; | &#123;&#125; | &#123;&#125;"</span>.format(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_table_if_exist</span><span class="params">(self,table_name)</span>:</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info("&#123;&#125; | &#123;&#125; | &#123;&#125;".format(mysqlDB, get_class_name(self), sys._getframe().f_code.co_name))</span></span><br><span class="line">        sql = <span class="string">"show tables"</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                _tables = cursor.fetchall()</span><br><span class="line">                table_lists = []</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> _tables:</span><br><span class="line">                    table_lists.append(i[<span class="number">0</span>])</span><br><span class="line">                <span class="comment"># print("all tables:&#123;&#125;".format(len(table_lists)))</span></span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> table_lists:</span><br><span class="line">                    <span class="keyword">if</span> table_name <span class="keyword">in</span> _:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">"&#123;&#125; | &#123;&#125; | &#123;&#125;"</span>.format(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br></pre></td></tr></table></figure><p>toolkit.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time,sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">LOG_FORMAT = <span class="string">"%(asctime)s - %(levelname)s - %(message)s"</span></span><br><span class="line">DATE_FORMAT = <span class="string">"%m/%d/%Y %H:%M:%S %p"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_year_mon_day</span><span class="params">(y = <span class="number">0</span>,m = <span class="number">0</span>,d = <span class="number">0</span>)</span>:</span></span><br><span class="line">    t = time.localtime()</span><br><span class="line">    year = t.tm_year</span><br><span class="line">    month = t.tm_mon</span><br><span class="line">    day = t.tm_mday</span><br><span class="line">    _time = <span class="string">"&#123;&#125;-&#123;&#125;-&#123;&#125;"</span>.format(int(year) - y, month - m, day - d)</span><br><span class="line">    <span class="keyword">return</span> _time</span><br><span class="line"></span><br><span class="line">filename = <span class="string">"log/mylog_&#123;&#125;.log"</span>.format(get_year_mon_day())</span><br><span class="line">logging.basicConfig(filename=filename, level=logging.DEBUG, format=LOG_FORMAT, datefmt=DATE_FORMAT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_class_name</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.__class__.__name__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUser_Agent</span><span class="params">()</span>:</span></span><br><span class="line">    headers = [</span><br><span class="line">        <span class="string">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,   <span class="comment">#safari 5.1 – MAC</span></span><br><span class="line">        <span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,  <span class="comment">#safari 5.1 – Windows</span></span><br><span class="line">        <span class="string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0'</span>,   <span class="comment">#IE 9.0</span></span><br><span class="line">        <span class="string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)'</span>,   <span class="comment">#IE 8.0</span></span><br><span class="line">        <span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)'</span>,   <span class="comment">#IE 7.0</span></span><br><span class="line">        <span class="string">'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)'</span>,   <span class="comment"># IE6.0</span></span><br><span class="line">        <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'</span>,   <span class="comment">#Firefox 4.0.1 – MAC</span></span><br><span class="line">        <span class="string">'Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'</span>,     <span class="comment">#Firefox 4.0.1 – Windows</span></span><br><span class="line">        <span class="string">'Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11'</span>,     <span class="comment">#Opera 11.11 – MAC</span></span><br><span class="line">        <span class="string">'Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11'</span>,  <span class="comment">#Opera 11.11 – Windows</span></span><br><span class="line">        <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11'</span>,    <span class="comment">#Chrome 17.0 – MAC</span></span><br><span class="line">        <span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0)'</span>,  <span class="comment">#傲游（Maxthon）</span></span><br><span class="line">        <span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; TencentTraveler 4.0)'</span>,  <span class="comment">#腾讯TT</span></span><br><span class="line">        <span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)'</span>,  <span class="comment">#世界之窗（The World） 2.x</span></span><br><span class="line">        <span class="string">'ozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; The World)'</span>,  <span class="comment">#世界之窗（The World） 3.x</span></span><br><span class="line">        <span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0)'</span>,  <span class="comment">#搜狗浏览器 1.x</span></span><br><span class="line">        <span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)'</span>,  <span class="comment">#360浏览器</span></span><br><span class="line">        <span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser)'</span>,     <span class="comment">#Avant</span></span><br><span class="line">        <span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)'</span>,     <span class="comment">#Green Browser</span></span><br><span class="line">        <span class="comment">##移动端用户代理</span></span><br><span class="line">        <span class="string">'Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5'</span>,     <span class="comment">#safari iOS 4.33 – iPhone</span></span><br><span class="line">        <span class="string">'Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5'</span>,     <span class="comment">#safari iOS 4.33 – iPod Touch</span></span><br><span class="line">        <span class="string">'Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5'</span>,     <span class="comment">#safari iOS 4.33 – iPad</span></span><br><span class="line">        <span class="string">'Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1'</span>,  <span class="comment">#Android N1</span></span><br><span class="line">        <span class="string">'MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1'</span>,  <span class="comment">#Android QQ浏览器 For android</span></span><br><span class="line">        <span class="string">'Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) Presto/2.8.149 Version/11.10'</span>,  <span class="comment">#Android Opera Mobile</span></span><br><span class="line">        <span class="string">'Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+'</span>,  <span class="comment">#Android Pad Moto Xoom</span></span><br><span class="line">        <span class="string">'Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0'</span>,  <span class="comment">#WebOS HP Touchpad</span></span><br><span class="line">        <span class="string">'Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124'</span>,  <span class="comment">#Nokia N97</span></span><br><span class="line">        <span class="string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)'</span>,  <span class="comment">#Windows Phone Mango</span></span><br><span class="line">        <span class="string">'UCWEB7.0.2.37/28/999'</span>,  <span class="comment">#UC无</span></span><br><span class="line">        <span class="string">'Openwave/ UCWEB7.0.2.37/28/999'</span>,  <span class="comment">#UCOpenwave</span></span><br><span class="line">        <span class="string">'Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999'</span>,  <span class="comment">#UC Opera</span></span><br><span class="line">        <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">        <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER"</span>,</span><br><span class="line">        <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span>,</span><br><span class="line">        <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"</span>,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'User-Agent'</span>:headers[randint(<span class="number">0</span>,len(headers)<span class="number">-1</span>)]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = getUser_Agent()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_HTML_content</span><span class="params">(url)</span>:</span></span><br><span class="line">    resp = requests.get(url = url, headers=headers).content.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中：JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)</title>
      <link href="/python-json-problem-sloved/"/>
      <url>/python-json-problem-sloved/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>问题：JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)</strong></p><h3 id="问题代码："><a href="#问题代码：" class="headerlink" title="问题代码："></a>问题代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">s =  <span class="string">"&#123;'name':'zhuhonggen','age':20&#125;"</span></span><br><span class="line">d = json.loads(s)</span><br></pre></td></tr></table></figure><h3 id="错误截图"><a href="#错误截图" class="headerlink" title="错误截图"></a>错误截图</h3><p><img alt="error shot" data-src="https://upload-images.jianshu.io/upload_images/621273-3d7fb38caa1ad9c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><h3 id="解决问题思路"><a href="#解决问题思路" class="headerlink" title="解决问题思路"></a>解决问题思路</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s =  <span class="string">"&#123;'name':'zhuhonggen','age':20&#125;"</span></span><br></pre></td></tr></table></figure><p>我们发现<code>age</code>属性对应的<code>value</code>值是没有被<code>&#39;</code>单引号括起来的，这种形式的数据不符合<code>json</code>的转化数据格式，<code>json</code>数据转换的格式必须是符合其格式的，也就是说，<code>key</code>和<code>value</code>都得被<code>&#39;</code>括起来。我们看下<code>json</code>的格式：<br><img alt="json format" data-src="https://upload-images.jianshu.io/upload_images/621273-b5256f24e9fc59bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"><br>从图中我们可以看到，<code>key</code>和<code>value</code>都得被<code>&#39;</code>括起来。</p><h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><ul><li>手动修改字符串的格式</li><li>借助三方包，这里推荐demjson</li></ul><p>使用：   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> demjson</span><br><span class="line">s =  <span class="string">"&#123;'name':'zhuhonggen','age':20&#125;"</span></span><br><span class="line">d = demjson(s)</span><br></pre></td></tr></table></figure><p><img alt="result" data-src="https://upload-images.jianshu.io/upload_images/621273-d5310968756a3641.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 解决问题 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决hexo博客标题出错-》title: Python问题解决 re.error: unbalanced parenthesis at pos</title>
      <link href="/sloved-hexo-title/"/>
      <url>/sloved-hexo-title/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><img alt="problem" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191228141835.png" class="lazyload">   </p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>完美解决：用<code>&quot;&quot;</code>将标题引用起来，如：<br><img alt="sloved" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191228141630.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python问题解决:re.error: unbalanced parenthesis at position 88</title>
      <link href="/re-sub/"/>
      <url>/re-sub/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="问题：re-error-unbalanced-parenthesis-at-position-88"><a href="#问题：re-error-unbalanced-parenthesis-at-position-88" class="headerlink" title="问题：re.error: unbalanced parenthesis at position 88"></a>问题：re.error: unbalanced parenthesis at position 88</h4><p>在使用Python正则表达式的时候，用替换方法出现上述错误，</p><h3 id="下面是错误代码："><a href="#下面是错误代码：" class="headerlink" title="下面是错误代码："></a>下面是错误代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new_url = <span class="string">"https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191227161526664.png)"</span></span><br><span class="line">old_url = <span class="string">"https://img2018.cnblogs.com/blog/1212206/201912/1212206-20191227161526664-2133632479.png)"</span></span><br><span class="line">line = <span class="string">"![list example](https://img2018.cnblogs.com/blog/1212206/201912/1212206-20191227161526664-2133632479.png)"</span></span><br><span class="line">new_line = re.sub(old_url,new_url,line)</span><br><span class="line">print(new_line)</span><br></pre></td></tr></table></figure><h3 id="错误提示："><a href="#错误提示：" class="headerlink" title="错误提示："></a>错误提示：</h3><p><img alt="error" data-src="https://upload-images.jianshu.io/upload_images/621273-5780ef5219b1b55f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload">   </p><h3 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h3><p><img alt="reason" data-src="https://upload-images.jianshu.io/upload_images/621273-e6156da55498b8e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"><br>我们可以看到，需要替换的两个字符串末尾多出一个<code>)</code>来，导致匹配出错。我们去掉末尾那个<code>)</code>就可以了。</p><h3 id="更正代码："><a href="#更正代码：" class="headerlink" title="更正代码："></a>更正代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">line = <span class="string">'![list example](https://img2018.cnblogs.com/blog/1212206/201912/1212206-20191227161526664-2133632479.png)'</span></span><br><span class="line">old_url = <span class="string">"https://img2018.cnblogs.com/blog/1212206/201912/1212206-20191227161526664-2133632479.png"</span></span><br><span class="line">new_url = <span class="string">"https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191227161526664.png"</span></span><br><span class="line">l = re.sub(old_url,new_url,line)</span><br><span class="line">print(line)</span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure><h4 id="正确运行结果："><a href="#正确运行结果：" class="headerlink" title="正确运行结果："></a>正确运行结果：</h4><p><img alt="right result" data-src="https://upload-images.jianshu.io/upload_images/621273-cc9c055877a920b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 解决问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python使用命令行参数的用法</title>
      <link href="/how-to-use-python-command-param/"/>
      <url>/how-to-use-python-command-param/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="方法一（sys）"><a href="#方法一（sys）" class="headerlink" title="方法一（sys）"></a>方法一（<code>sys</code>）</h3><p>直接看代码： </p><pre><code class="python"><span class="comment">#!/usr/bin/python    </span><span class="comment"># -*- coding: UTF-8 -*-     </span><span class="keyword">import</span> sys    <span class="keyword">print</span> (<span class="string">'参数个数为:'</span>, len(sys.argv), <span class="string">'个参数。'</span>)    <span class="keyword">print</span> (<span class="string">'参数列表:'</span>, str(sys.argv))    </code></pre><p>运行结果：<br><img alt="方法一运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191228112401.png" class="lazyload">    </p><h3 id="方法二（argparse）"><a href="#方法二（argparse）" class="headerlink" title="方法二（argparse）"></a>方法二（<code>argparse</code>）</h3><p>还是一样，直接看代码：    </p><pre><code class="python">parser = argparse.ArgumentParser(description=<span class="string">"给Markdown文件中的每一行末尾，添加三个空格和换行符"</span>)    parser.add_argument(<span class="string">"-f"</span>, <span class="string">"--filename"</span>, default=<span class="literal">None</span>)    args = parser.parse_args()    filename = args.filename    print(filename)    </code></pre><p>运行结果：<br><img alt="方法二运行结果" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191228112638.png" class="lazyload">    </p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础知识介绍</title>
      <link href="/basic-python-knowledge/"/>
      <url>/basic-python-knowledge/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-下载Python"><a href="#1-下载Python" class="headerlink" title="1 下载Python"></a>1 下载Python</h3><ul><li>Windows:<a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">下载</a>    </li><li>mac os:<a href="https://www.python.org/downloads/mac-osx/" target="_blank" rel="noopener">下载</a>    </li></ul><h3 id="2-安装Python"><a href="#2-安装Python" class="headerlink" title="2 安装Python"></a>2 安装Python</h3><p>这里就不过多讲述这些，下载完安装包之后，直接点击下一步即可，记得添加到环境变量（Windows）    </p><h4 id="2-1-添加环境变量"><a href="#2-1-添加环境变量" class="headerlink" title="2.1 添加环境变量"></a>2.1 添加环境变量</h4><p>【我的电脑】-&gt;【属性】-&gt;【高级系统设置】-&gt;【环境变量】-&gt;【系统变量】-&gt;【path】<br><img alt="环境变量" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191226145021.png" class="lazyload">    </p><h3 id="3-pip的使用"><a href="#3-pip的使用" class="headerlink" title="3 pip的使用"></a>3 pip的使用</h3><h4 id="3-1-pip-install-xxx"><a href="#3-1-pip-install-xxx" class="headerlink" title="3.1 pip install xxx"></a>3.1 pip install xxx</h4><p>功能：通过<code>pip</code>命令来安装三方包，这里以<code>requests</code>为例:    </p><blockquote><p>pip install requests    </p></blockquote><h4 id="3-2-pip-list"><a href="#3-2-pip-list" class="headerlink" title="3.2 pip list"></a>3.2 pip list</h4><p>功能：显示本地已经安装的三方包，如：<br><img alt="pip list" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191226145436.png" class="lazyload">    </p><h4 id="3-3-pip-V-upper-letter"><a href="#3-3-pip-V-upper-letter" class="headerlink" title="3.3 pip -V(upper letter)"></a>3.3 pip -V(upper letter)</h4><p>功能：显示Python的路径以及当前版本号，如：<br><img alt="pip -V" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191226145543.png" class="lazyload">    </p><h4 id="3-4-其他-pip-h"><a href="#3-4-其他-pip-h" class="headerlink" title="3.4 其他 pip -h"></a>3.4 其他 pip -h</h4><p>功能：显示帮助信息，其他的更多的信息可以通过该命令查看，或者参考<a href="https://pypi.org/project/pip/" target="_blank" rel="noopener">这里</a><br><img alt="pip -h" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191226145626.png" class="lazyload">    </p><h3 id="4-Python中的变量"><a href="#4-Python中的变量" class="headerlink" title="4 Python中的变量"></a>4 Python中的变量</h3><p>本章前提：<code>id()</code>，该方法是用来显示变量在内存中的地址的。    </p><h4 id="4-1-不可变数据类型"><a href="#4-1-不可变数据类型" class="headerlink" title="4.1 不可变数据类型"></a>4.1 不可变数据类型</h4><p>不可变数据类型表示，如果某变量的值发生了变化，那么必须重新分配一个内存空间来盛放这个新的值。Python中的几种不可变数据类型：<code>number</code>,<code>str</code>,<code>tuple</code>。    </p><h5 id="4-1-1-number"><a href="#4-1-1-number" class="headerlink" title="4.1.1 number"></a>4.1.1 number</h5><p>Python中支持4中不同数值型的数据类型（<a href="https://www.runoob.com/python/python-numbers.html" target="_blank" rel="noopener">参考</a>）：    </p><ul><li>int（整型）    </li><li>long integters（长整型）    </li><li>floating point real values（浮点型）    </li><li>complex numbers（复杂数值型）<br>举例：<br><img alt="number example" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191226150623.png" class="lazyload">    </li></ul><h5 id="4-1-2-str"><a href="#4-1-2-str" class="headerlink" title="4.1.2 str"></a>4.1.2 str</h5><p>字符串类型也是不可信数据类型。<br>举例：<br><img alt="str example" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191226151208.png" class="lazyload"><br>字符串的特性：    </p><ul><li>截取    </li><li>连接    </li></ul><p>（1）截取<br>随便截取：<br><img alt="截取1" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191226151430.png" class="lazyload"><br>截取到倒数第一位为止：<br><img alt="截取2" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191226151531.png" class="lazyload"><br>截取所有：<br><img alt="截取3" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191226151608.png" class="lazyload"><br>这种截取方式相当于：<code>t=s</code>，即直接赋值。    </p><p>（2）连接<br>这种方式比较简单，就是直接用<code>+</code>号将前后两个字符串连接成一个。<br><img alt="连接1" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191226151817.png" class="lazyload">    </p><h5 id="4-1-3-tuple"><a href="#4-1-3-tuple" class="headerlink" title="4.1.3 tuple"></a>4.1.3 tuple</h5><p>元组是Python中的一种不可变数据类型，用小括号<code>()</code>包起来。<br>定义元祖：    </p><ul><li>直接用小括号包起来，如果只有一个变量，那么末尾加一个<code>,</code>，用以区分元组和普通变量    </li><li>用<code>tuple</code>关键字定义    </li></ul><p>举例：<br>（1）直接用<code>()</code>包起来<br><img alt="定义1" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191226152201.png" class="lazyload"><br>（2）用<code>tuple</code>关键字定义<br><img alt="定义2" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191226152412.png" class="lazyload">    </p><h4 id="4-2-可变数据类型"><a href="#4-2-可变数据类型" class="headerlink" title="4.2 可变数据类型"></a>4.2 可变数据类型</h4><h5 id="4-2-1-list"><a href="#4-2-1-list" class="headerlink" title="4.2.1 list"></a>4.2.1 list</h5><p>Python中的<code>list</code>是一种比较灵活的数据结构，也是一种可变数据结构，看下面的例子：<br><img alt="list example" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191227161328.png" class="lazyload"><br>下面这种情况，和我们以为的可能不太一样：<br><img alt="特例1" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191227161656.png" class="lazyload"><br>你觉得<code>a</code>和<code>b</code>是同一个对象吗？<br><img alt="答案" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191227161622.png" class="lazyload"><br><strong>注意：</strong>    </p><blockquote><p>当我们使用<code>=</code>进行列表的赋值的时候，我们要注意，默认情况下，<code>=</code>表示的是一种浅拷贝，即直接将<code>=</code>左边的变量的指针指向<code>=</code>右边的变量的内存空间，当右边的变量改变的时候，左边的变量也跟着改变，当我们在写程序的时候，这种方式显然不够安全。别不用着急，可以使用<code>Python</code>中的<strong>深拷贝</strong>进行赋值。    </p></blockquote><p><strong>深拷贝：</strong><br>深拷贝与浅拷贝的示意图：<br><img alt="deep and shallow copy" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/164e6856d76ff161.jpg" class="lazyload"><br>浅拷贝和赋值的区别？    </p><ul><li>当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。    </li><li>浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。    </li></ul><p>（1）浅拷贝和赋值举例：<br><code>Python</code>中有一个自带包<code>copy</code>，该包中的<code>copy</code>代表浅拷贝，<code>deepcopy</code>代表深拷贝。<br><img alt="浅拷贝和赋值举例" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191227162724.png" class="lazyload"><br>从图中我们可以看到，通过赋值的方式得到的<code>list_3</code>的地址和<code>list_1</code>的地址是一样的，这就印证了上面说的，赋值就是直接将指针指向源数据的内存空间。而浅拷贝则不然，浅拷贝则是赋值了一遍数据，但是复制也不是全盘复制，而是有条件的赋值，即如果该属性是基本类型（基本数据类型也可理解为不可变的数据结构，如<code>int</code>,<code>str</code>,’long int’等）就直接将该基本类型的值拷贝一份到新的内存中，如果该属性是一个内存地址（也就是说是可变的数据结构，通常这种数据类型在内存中是一种引用的方式，即内存地址），那么就将内存地址复制一份到新的内存中，那么如果该内存地址中的源数据改变了，新复制的数据中该内存地址所指向的数据也会改变，因为它们指向的是同一个数据。    </p><p>（2）深拷贝举例：<br><img alt="deepcopy" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191227163618.png" class="lazyload"><br>深拷贝就和其他的编程语言（比如<code>java</code>）的一致了，就是直接一模一样拷贝一份，源数据和新被赋值的数据进水不犯河水。它们的各自改变不会互相影响。<br>看下面的例子：<br><img alt="深拷贝和浅拷贝举例" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191227163848.png" class="lazyload">    </p><blockquote><p>关于深拷贝和浅拷贝的具体更深的内容，可以参考这篇博客：<a href="https://juejin.im/post/5b5dcf8351882519790c9a2e" target="_blank" rel="noopener">https://juejin.im/post/5b5dcf8351882519790c9a2e</a>    </p></blockquote><h5 id="4-2-2-dict"><a href="#4-2-2-dict" class="headerlink" title="4.2.2 dict"></a>4.2.2 dict</h5><p>字典是<code>Python</code>中的一种<code>key-value</code>的键值对形式的数据结构，也是一种可变的数据结构，基本原理和上一节讲的<code>list</code>差不多，这里简单介绍一下。    </p><p>（1）字典赋值的举例：<br>关于<code>python</code>中的这种数据赋值，我们叫它赋值，不如叫它给真正的数据对象取一个别名，这就好理解了。<br><img alt="字典赋值的举例" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191227164942.png" class="lazyload"><br>我们可以看到，字典的赋值和列表的赋值其实是一样的，都是简单粗暴的直接指针指过去，<code>dict_1</code>和<code>dict_2</code>是联动的。如我们修改<code>dict_1</code>的<code>name</code>属性，<code>dict_2</code>的<code>name</code>属性也改变了：<br><img alt="联动性" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191227165149.png" class="lazyload">    </p><p>（2）字典的浅拷贝举例：<br><code>dict.copy()</code>和<code>from copy import copy</code>的区别？    </p><ul><li><code>dict.copy()</code>：这种拷贝只是拷贝第一层，如果字典中还嵌套有可变数据类型，还是一样，只拷贝引用即地址，不会真正拷贝数据。    </li><li><code>from copy import copy</code>中导入的<code>copy</code>是浅拷贝的包，但是用在字典上，会拷贝第一层，再往下就不会再拷贝了。    </li></ul><p>举例：<br><code>dict.copy()</code>举例：<br><img alt="dict.copy()举例" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191227171641.png" class="lazyload"><br>我们可以看到，基本类型都是已经拷贝了，所以<code>dict_2</code>的<code>age</code>属性并没有改变。接着看修改可变数据类型之后的情况：<br><img alt="可变类型的改变" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191227171839.png" class="lazyload">    </p><p>（3）字典的深拷贝举例：<br><img alt="字典的深拷贝举例" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191227211521.png" class="lazyload">   </p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何正确的研究（for 研究生）</title>
      <link href="/how-to-do-research/"/>
      <url>/how-to-do-research/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img alt data-src="https://pic4.zhimg.com/v2-0de792fa46151391a3620b903fc3c273_b.jpg" class="lazyload"><br><img alt data-src="https://pic2.zhimg.com/v2-5c651983667044179df38467994be311_b.jpg" class="lazyload"><br><img alt data-src="https://pic4.zhimg.com/v2-c41f13c3df2b07dceeacf94b1b4ee9f3_b.jpg" class="lazyload"><br><img alt data-src="https://pic2.zhimg.com/v2-d6f3e82e1c04002e6cb51d9711a291c5_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-4ab941c0bc735ecb777575782308cfa4_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-87ff1da0f8138334b55900db578e679e_b.jpg" class="lazyload"><br><img alt data-src="https://pic4.zhimg.com/v2-d2de3a386532ed71990f951462bf55f7_b.jpg" class="lazyload"><br><img alt data-src="https://pic4.zhimg.com/v2-3f876e02e1f1784fa9e7b8d328a74077_b.jpg" class="lazyload"><br><img alt data-src="https://pic4.zhimg.com/v2-6b218d62ee4fb52d7b03165a541e441f_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-74a094d8a3db70d8cb76b6e6994b1576_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-221ac7855b0e3828860a07d388d4b0a4_b.jpg" class="lazyload"><br><img alt data-src="https://pic2.zhimg.com/v2-4d1b8f0ebfc40fc9454706f8fadc868d_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-0856f97457206e600903cc153e4641e2_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-2ff27b5f46d7c9117757e163a4f4d30c_b.jpg" class="lazyload"><br><img alt data-src="https://pic4.zhimg.com/v2-2a45cdf29f1d11faaa346f6d4cb8d41f_b.jpg" class="lazyload"><br><img alt data-src="https://pic4.zhimg.com/v2-07109407703f26a2069c5a68c3724d4f_b.jpg" class="lazyload"><br><img alt data-src="https://pic2.zhimg.com/v2-458d2f630fd191aa06164817b78969e9_b.jpg" class="lazyload"><br><img alt data-src="https://pic2.zhimg.com/v2-06ded3b2453d366e795dbb3c692abdb5_b.jpg" class="lazyload"><br><img alt data-src="https://pic2.zhimg.com/v2-209fb99b715393da4faf0ee24db11801_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-60df23229aefbb6f1d6f7c5040eaf522_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-d43a8ef0407e4c35c4ef0d892fcc58ec_b.jpg" class="lazyload"><br><img alt data-src="https://pic4.zhimg.com/v2-ab69c1425fa78c089a72fd0a51d88e57_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-4a484f3b7041b4f2473f8149c977f940_b.jpg" class="lazyload"><br><img alt data-src="https://pic4.zhimg.com/v2-03c37ddb5127b890128a6cc99c9d5d13_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-d1069e7057a10c0cb7aa4b81a18a7fde_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-9237a668d71ac3393ec561fe2a719514_b.jpg" class="lazyload"><br><img alt data-src="https://pic2.zhimg.com/v2-2d25fcf8e012650237da80acb924c295_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-a5066ecaf4f95bb81a27e82159dd3496_b.jpg" class="lazyload"><br><img alt data-src="https://pic2.zhimg.com/v2-429677b4480a173f028e4207e5c75985_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-93c1e022eecfed3f56b0e100193f1bc0_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-f4a7e9339950e4b4706266f7498b8e72_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-49dcc609038422abbfa7b23e8f394fba_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-3713003ac332e9dccb1f98841ceb080c_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-341153b0c00474a691ff84444246597e_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-8a9c1d379213e89495df90e9ed7d76c2_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-33046b15629ef1759c5b743dc54fc692_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-881e8d2a2052d00babbb5b98aadcf5fa_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-433bc1ab35450dbe6544358b9c6efc44_b.jpg" class="lazyload"><br><img alt data-src="https://pic2.zhimg.com/v2-08f782fd8620f8cc310c51a4f06064ad_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-ceae13eee989d104cf3e9c342f410ed0_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-26854d975ee0d213076618a345b3a904_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-4c7e98bdcd4e34e9994fb6047e7e543c_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-4b9ccc49f201478e5283ff145814047c_b.jpg" class="lazyload"><br><img alt data-src="https://pic4.zhimg.com/v2-45db6b762fbddd1df9ec7f7524e55313_b.jpg" class="lazyload"><br><img alt data-src="https://pic4.zhimg.com/v2-310f29e61688bdfd0e41d06e4010f6a7_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-284d23ee6d0c0f573ad95687af3e9fb8_b.jpg" class="lazyload"><br><img alt data-src="https://pic1.zhimg.com/v2-f3ae0b8c40004c853756cfa3262de5f8_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-6bfd04296d2ea1c43fdffabe27acc646_b.jpg" class="lazyload"><br><img alt data-src="https://pic2.zhimg.com/v2-eb47ea69bd8c67868072b1ae3824c04d_b.jpg" class="lazyload"><br><img alt data-src="https://pic2.zhimg.com/v2-f3ccb4763450d661032ca4df3adf1829_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-830f9253de72dbac3eeeaada5e9e26fe_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-d9ae56eec7f2c42e6890e1c294057d8a_b.jpg" class="lazyload"><br><img alt data-src="https://pic2.zhimg.com/v2-f70839afb86c1b4549c7e810849c3d81_b.jpg" class="lazyload"><br><img alt data-src="https://pic4.zhimg.com/v2-c5f588fb502ea3ebc0d3e7a137506603_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-20d7202bc82d38648552278e2440e6ba_b.jpg" class="lazyload"><br><img alt data-src="https://pic4.zhimg.com/v2-7f28d2d0672def7f0415f300b44e6653_b.jpg" class="lazyload"><br><img alt data-src="https://pic2.zhimg.com/v2-203c5b7314cf4d1038af614081abab75_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-6d909ac114d4aae1fe23f6494bf7f0fe_b.jpg" class="lazyload"><br><img alt data-src="https://pic3.zhimg.com/v2-3b18a6d30172420488ad9e8828f03522_b.jpg" class="lazyload">  </p><hr><h3 id="原文出处"><a href="#原文出处" class="headerlink" title="原文出处"></a>原文出处</h3><p>知乎文章：<a href="https://zhuanlan.zhihu.com/p/98747105" target="_blank" rel="noopener">周志华教授：如何做研究与写论文</a><br>文章中的PPT原件：<a href="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pdf/how_to_do_research.pdf" target="_blank" rel="noopener">PDF下载</a></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《庆余年》免费资源</title>
      <link href="/qing-yu-nian-resource/"/>
      <url>/qing-yu-nian-resource/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-国外资源"><a href="#1-国外资源" class="headerlink" title="1 国外资源"></a>1 国外资源</h3><p><a href="https://drive.google.com/drive/folders/1OEdzNsGgfx_t-b0cVy-V0lmyBAn8Jqp8?usp=drive_open" target="_blank" rel="noopener">https://drive.google.com/drive/folders/1OEdzNsGgfx_t-b0cVy-V0lmyBAn8Jqp8?usp=drive_open</a></p><h3 id="2-国内资源"><a href="#2-国内资源" class="headerlink" title="2 国内资源"></a>2 国内资源</h3><p>天翼云盘：<a href="https://cloud.189.cn/t/rMN3uq3MRFf2" target="_blank" rel="noopener">https://cloud.189.cn/t/rMN3uq3MRFf2</a>(密码：48sc)</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 影视 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享一个编程学习GitHub项目</title>
      <link href="/github-project/"/>
      <url>/github-project/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-这是个什么东西？"><a href="#1-这是个什么东西？" class="headerlink" title="1 这是个什么东西？"></a>1 这是个什么东西？</h3><p>12月已经过了块三分之一，然后我却一篇博客都还没来得及写，今天算是本月的第一篇博客了。今天分享一个GitHub的学习项目，这是很多人一起组成的一个分享项目，这是其<a href="https://github.com/crazyjums/HelloGitHub" target="_blank" rel="noopener">GitHub地址</a>，或者你可可以访问该分享项目的<a href="https://hellogithub.com/" target="_blank" rel="noopener">官网</a>，</p><h4 id="官网首页如下："><a href="#官网首页如下：" class="headerlink" title="官网首页如下："></a>官网首页如下：</h4><p><img alt="官网首页" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191208232553.png" class="lazyload">   </p><h4 id="你可以选择哪一期进行阅览"><a href="#你可以选择哪一期进行阅览" class="headerlink" title="你可以选择哪一期进行阅览"></a>你可以选择哪一期进行阅览</h4><p><img alt="选择最新一期" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191208232924.png" class="lazyload"></p><h4 id="你可以选择不同语言"><a href="#你可以选择不同语言" class="headerlink" title="你可以选择不同语言"></a>你可以选择不同语言</h4><p><img alt="编程语言" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191208233047.png" class="lazyload"></p><h4 id="或者直接搜索"><a href="#或者直接搜索" class="headerlink" title="或者直接搜索"></a>或者直接搜索</h4><p><img alt="搜索项目" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/sadfsadfasdfsad.PNG" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何免费访问Google</title>
      <link href="/how-to-access-google/"/>
      <url>/how-to-access-google/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="方法一-谷歌访问助手（破解版）"><a href="#方法一-谷歌访问助手（破解版）" class="headerlink" title="方法一 谷歌访问助手（破解版）"></a>方法一 谷歌访问助手（破解版）</h2><blockquote><p>此方法不需要注册登录，就可以使用，但是只能访问谷歌，其他的国外网站不能访问</p></blockquote><h3 id="1-下载插件"><a href="#1-下载插件" class="headerlink" title="1 下载插件"></a>1 下载插件</h3><p>在百度中搜索<code>github 谷歌访问助手</code>，点击如下所示，第一条，然后会跳转到GitHub页面，我们下载<code>clone</code>即可。或者点击<a href="https://github.com/haotian-wang/google-access-helper.git" target="_blank" rel="noopener">直接下载</a><br><img alt="github 谷歌访问助手" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191129102455.png" class="lazyload">   </p><h3 id="2-解压安装"><a href="#2-解压安装" class="headerlink" title="2 解压安装"></a>2 解压安装</h3><p>下载完成之后，我们解压压缩包，然后点击Google浏览器的<code>更多工具</code>-&gt;<code>扩展程序</code>。进入如下界面：<br><img alt="解压目录" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191207230134.png" class="lazyload"><br><img alt="Google插件" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191129102834.png" class="lazyload">   </p><h3 id="3-进行访问"><a href="#3-进行访问" class="headerlink" title="3 进行访问"></a>3 进行访问</h3><p>访问界面如下：<br><img alt="Google搜索案例" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191129103026.png" class="lazyload"></p><h3 id="4-快捷访问"><a href="#4-快捷访问" class="headerlink" title="4 快捷访问"></a>4 快捷访问</h3><p>你也可以直接访问这个地址<a href="https://so.bban.fun/" target="_blank" rel="noopener">https://so.bban.fun/</a>直接进行访问，但是改地址不能访问<code>Google mail</code>和<code>google shop</code>等应用</p><h2 id="方法二-Google-Helper（正式版）"><a href="#方法二-Google-Helper（正式版）" class="headerlink" title="方法二 Google Helper（正式版）"></a>方法二 Google Helper（正式版）</h2><blockquote><p>此方法需要注册登录，会有3天VIP，这3天，你可以访问任何国外网站，就想VPN一样，但是3天VIP过期之后，你就只能使用基本功能了，一样可以访问谷歌，但是VPN的服务就暂停了。</p></blockquote><h3 id="1-下载Google-Helper"><a href="#1-下载Google-Helper" class="headerlink" title="1 下载Google Helper"></a>1 下载Google Helper</h3><p>点击官网<a href="https://googlehelper.net/" target="_blank" rel="noopener">下载</a>，截图如下：<br><img alt="Google Helper官网" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191219222640.png" class="lazyload">   </p><h3 id="2-解压安装-1"><a href="#2-解压安装-1" class="headerlink" title="2 解压安装"></a>2 解压安装</h3><p>按照方法一中介绍的那样解压安装，这里不过多介绍</p><h3 id="3-注册和认证"><a href="#3-注册和认证" class="headerlink" title="3 注册和认证"></a>3 注册和认证</h3><p>我们需要注册一下<code>Google Helper</code>才能使用，注册完之后还需要邮箱认证。这里附上认证截图，点击我涂黑的部分即可<br><img alt="邮箱认证" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191219222640.jpg" class="lazyload"><br>认证完之后，等一会儿，我们就可以看到谷歌浏览右上角的一个图标，显示如下：<br><img alt="认证完毕" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191219221854.png" class="lazyload"><br><code>Google Helper</code>界面：<br><img alt="Google Helper界面" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191219221924.png" class="lazyload">   </p><h3 id="4-上网"><a href="#4-上网" class="headerlink" title="4 上网"></a>4 上网</h3><p>可以上<a href="https://www.youtube.com/" target="_blank" rel="noopener">youtube</a>等网站，相当强大。<br><img alt="youtube" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191219221840.png" class="lazyload">   </p><h2 id="三-其他的FQ方式"><a href="#三-其他的FQ方式" class="headerlink" title="三 其他的FQ方式"></a>三 其他的FQ方式</h2><h3 id="3-1-付费"><a href="#3-1-付费" class="headerlink" title="3.1 付费"></a>3.1 付费</h3><ul><li><a href="https://www.expressvpn.com/zh-cn/order" target="_blank" rel="noopener">ExpressVPN</a>   </li><li><a href="https://www.vyprvpn.com/zh/refer/?offer_id=223&aff_id=2231" target="_blank" rel="noopener">VyprVPN</a>   </li><li><a href="https://nordvpn.com/zh/?utm_medium=affiliate&utm_term&utm_content&utm_campaign=off157&utm_source=aff5221" target="_blank" rel="noopener">NordVPN </a>    </li><li><a href="https://www.avast.com/zh-cn/index" target="_blank" rel="noopener">avast</a>   </li><li><a href="https://www.purevpn.com/best-vpn-deal" target="_blank" rel="noopener">purevpn</a></li></ul><h3 id="3-2-免费"><a href="#3-2-免费" class="headerlink" title="3.2 免费"></a>3.2 免费</h3><ul><li><a href="https://windscribe.com/" target="_blank" rel="noopener">windscribe</a></li><li><a href="https://www.tunnelbear.com/b/vpn?aff_id=3188&offer_id=2&trans_id=102fb5a1a935d416ed9b3cf214069e&utm_source=Affiliate&ref_id=mkt_aff-free" target="_blank" rel="noopener">tunnelbear</a></li><li><a href="https://hide.me/en/?friend=ntvpn" target="_blank" rel="noopener">hide.me</a></li><li><a href="https://www.vpngate.net/cn/" target="_blank" rel="noopener">vpngate</a>  (是一个vpn列表，可参考)</li></ul><blockquote><p>自己斟酌，付费的有保障，但是有点贵。免费的不花钱，但是没有那么安全，我们国家现在禁止用vpn了，剩下的，就你们自己考虑了。</p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 破解软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow中reduce_mean有什么用？</title>
      <link href="/tensorflow-reduce-mean/"/>
      <url>/tensorflow-reduce-mean/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="TensorFlow中reduce-mean的作用"><a href="#TensorFlow中reduce-mean的作用" class="headerlink" title="TensorFlow中reduce_mean的作用"></a>TensorFlow中reduce_mean的作用</h3><blockquote><p>tf.reduce_mean 函数用于计算张量tensor沿着指定的数轴（tensor的某一维度）上的的平均值，主要用作降维或者计算tensor（图像）的平均值。</p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程框架 </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于TensorFlow的mnist手写体识别</title>
      <link href="/tensorflow-mnist-full-connection/"/>
      <url>/tensorflow-mnist-full-connection/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h3><p>昨天我做（学者网上的教程）了一个线性回归的模型，可以参考这篇<a href="https://jusm.club/liner-regression-writen-by-tensorflow/" target="_blank" rel="noopener">博客</a>，用的TensorFlow框架，今天我继续学习，用TensorFlow框架对mnist数据集进行手写体识别。</p><h3 id="1-准备数据"><a href="#1-准备数据" class="headerlink" title="1 准备数据"></a>1 准备数据</h3><p>这里用到的是TensorFlow里面的<code>placeholder</code>占位符，类似<code>constant</code>，只不过先定义但是不赋值，用起来的时候再赋值。   </p><ul><li>mnist数据集<br>from tensorflow.examples.tutorials.mnist import input_data<br>mnist_data = input_data.read_data_sets(“./mnist_data”, one_hot=True)</li><li>y_true<br>y_true = tf.placeholder(dtype=tf.float32, shape=[None, 10], name=”y_true”)   </li><li>label<br>X = tf.placeholder(dtype=tf.float32, shape=[None, 784], name=”X”)</li></ul><h3 id="2-构造模型"><a href="#2-构造模型" class="headerlink" title="2 构造模型"></a>2 构造模型</h3><ul><li>参数<br>weights = tf.Variable(initial_value=tf.random_normal(shape=[784,10]),name=”weight”)<br>bias = tf.Variable(initial_value=tf.random_normal([10]),name=”bias”)</li><li>模型<br>y_predict = tf.matmul(X,weights) + bias</li></ul><h3 id="3-构造损失函数"><a href="#3-构造损失函数" class="headerlink" title="3 构造损失函数"></a>3 构造损失函数</h3><ul><li>loss function<br>loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_true,logits=y_predict))</li></ul><h3 id="4-优化损失"><a href="#4-优化损失" class="headerlink" title="4 优化损失"></a>4 优化损失</h3><ul><li>梯度下降法<br>optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(loss)</li></ul><h3 id="5-计算准确率"><a href="#5-计算准确率" class="headerlink" title="5 计算准确率"></a>5 计算准确率</h3><ul><li>预测值和真实值进行比较<br>equal_list = tf.equal(tf.argmax(y_true, 1), tf.argmax(y_predict, 1))</li><li>求平均<br>accuracy = tf.<a href="https://jums.club/tensorflow-reduce-mean/">reduce_mean</a>(tf.cast(equal_list, tf.float32))</li></ul><h3 id="6-初始化变量"><a href="#6-初始化变量" class="headerlink" title="6 初始化变量"></a>6 初始化变量</h3><ul><li>初始化<br>init = tf.global_variables_initializer()</li><li>在会话中运行<br>sess.run(init)</li></ul><h3 id="7-开启会话"><a href="#7-开启会话" class="headerlink" title="7 开启会话"></a>7 开启会话</h3><ul><li>拉取mnist训练集<br>image, label = mnist_data.train.next_batch(batch_size)</li><li>开始训练<br>_optimizer, loss_value, accuracy_value = sess.run([optimizer, loss, accuracy], feed_dict={X: image, y_true: label})</li></ul><h3 id="8-运行效果"><a href="#8-运行效果" class="headerlink" title="8 运行效果"></a>8 运行效果</h3><p><img alt="running result" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191128161437.png" class="lazyload"></p><h3 id="9-源代码"><a href="#9-源代码" class="headerlink" title="9 源代码"></a>9 源代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fucc_connection</span><span class="params">(learning_rate=<span class="number">0.01</span>,error_value=np.exp<span class="params">(<span class="number">-5</span>)</span>,batch_size=<span class="number">100</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    这是一个通过全连接网络实现的手写字体识别demo</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">###############################</span></span><br><span class="line">    <span class="comment"># 分析过程</span></span><br><span class="line">    <span class="comment"># 这里的过程和线性回归的过程差不多，无非就是模型和函数有点不一样</span></span><br><span class="line">    <span class="comment"># 1 准备数据</span></span><br><span class="line">    <span class="comment"># 公式：</span></span><br><span class="line">    <span class="comment"># X([None,784]) * weight([784,10]) + bias[10] = y_predict([10])</span></span><br><span class="line">    <span class="comment"># with tf.variable_scope("prepare_data"):</span></span><br><span class="line">    mnist_data = input_data.read_data_sets(<span class="string">"./mnist_data"</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line">    X = tf.placeholder(dtype=tf.float32, shape=[<span class="literal">None</span>, <span class="number">784</span>], name=<span class="string">"X"</span>)</span><br><span class="line">    y_true = tf.placeholder(dtype=tf.float32, shape=[<span class="literal">None</span>, <span class="number">10</span>], name=<span class="string">"y_true"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2 构造模型</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">"create_model"</span>):</span><br><span class="line">        <span class="comment"># 参数</span></span><br><span class="line">        weights = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">784</span>,<span class="number">10</span>]),name=<span class="string">"weight"</span>)</span><br><span class="line">        bias = tf.Variable(initial_value=tf.random_normal([<span class="number">10</span>]),name=<span class="string">"bias"</span>)</span><br><span class="line">        <span class="comment"># 模型</span></span><br><span class="line">        y_predict = tf.matmul(X,weights) + bias</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3 构造损失函数</span></span><br><span class="line">    <span class="comment"># 这里使用的损失不再是均方差，这里用的softmax和交叉熵</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">"loss_function"</span>):</span><br><span class="line">        loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_true,logits=y_predict))</span><br><span class="line">        <span class="comment"># 什么是logits:https://blog.csdn.net/nbxzkok/article/details/84838984</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4 优化损失</span></span><br><span class="line">    <span class="comment"># 还是使用梯度下降方法进行优化损失</span></span><br><span class="line">    optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5 计算准确率</span></span><br><span class="line">    equal_list = tf.equal(tf.argmax(y_true, <span class="number">1</span>), tf.argmax(y_predict, <span class="number">1</span>))</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(equal_list, tf.float32))</span><br><span class="line"></span><br><span class="line">    <span class="comment">###############</span></span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2) 收集变量</span></span><br><span class="line">    tf.summary.scalar(<span class="string">"loss"</span>,loss)</span><br><span class="line">    tf.summary.histogram(<span class="string">"weights"</span>, weights)</span><br><span class="line">    tf.summary.histogram(<span class="string">"bias"</span>, bias)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3) 合并变量</span></span><br><span class="line">    merged = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line">    <span class="comment">## (1)定义一个模型的保存器</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启回话</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(init)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1) 创建事件</span></span><br><span class="line">        file_writer = tf.summary.FileWriter(graph=sess.graph, logdir=<span class="string">"./mnist_graph"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        image, label = mnist_data.train.next_batch(batch_size)</span><br><span class="line">        print(<span class="string">"loss:&#123;&#125;"</span>.format(sess.run(loss, feed_dict=&#123;X: image, y_true: label&#125;)))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始训练</span></span><br><span class="line">        <span class="comment"># count = 0</span></span><br><span class="line">        <span class="comment"># while(loss.eval() &gt; np.exp(-9)):</span></span><br><span class="line">        <span class="comment">#     count += 1</span></span><br><span class="line">        <span class="comment">#     _optimizer, loss = sess.run([optimizer,loss], feed_dict=&#123;X:image, y_true:label&#125;)</span></span><br><span class="line">        <span class="comment">#     print("NO.&#123;count&#125;,loss:&#123;value&#125;".format(value=loss.eval(), count=count))</span></span><br><span class="line">        error_value = error_value</span><br><span class="line">        <span class="keyword">for</span> count <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">            _optimizer, loss_value, accuracy_value = sess.run([optimizer, loss, accuracy], feed_dict=&#123;X: image, y_true: label&#125;)</span><br><span class="line">            <span class="keyword">if</span> accuracy_value &lt; <span class="number">0.9</span>:</span><br><span class="line">                print(<span class="string">"NO.&#123;count&#125;,loss:&#123;value&#125;, accuracy:&#123;accuracy&#125;"</span>.format(value=loss_value, count=count, accuracy=accuracy_value))</span><br><span class="line">                <span class="comment"># 4) 运行合并后的变量</span></span><br><span class="line">                <span class="comment"># summary = sess.run(merged)</span></span><br><span class="line">                <span class="comment"># file_writer.add_summary(summary,count)</span></span><br><span class="line">                <span class="comment">#</span></span><br><span class="line">                <span class="comment"># # (2) 开始保存模型</span></span><br><span class="line">                <span class="comment"># if count % 10 ==0 :</span></span><br><span class="line">                <span class="comment">#     saver.save("./temp/mnist/mnist.ckpt")</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"-"</span>*<span class="number">10</span> + <span class="string">"result"</span> + <span class="string">"-"</span>*<span class="number">10</span>)</span><br><span class="line">                print(<span class="string">"learning_rate:&#123;&#125;"</span>.format(learning_rate))</span><br><span class="line">                print(<span class="string">"minial error value:&#123;&#125;"</span>.format(error_value))</span><br><span class="line">                print(<span class="string">"accuracy is:&#123;&#125;"</span>.format(accuracy_value))</span><br><span class="line">                print(<span class="string">"total running times:&#123;&#125; times"</span>.format(count))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">    s_time = time.time()</span><br><span class="line">    fucc_connection(learning_rate=<span class="number">0.1</span>,batch_size=<span class="number">1000</span>)</span><br><span class="line">    e_time = time.time()</span><br><span class="line">    print(<span class="string">"running time:&#123;&#125; s"</span>.format(round((e_time - s_time),<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程框架 </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用TensorFlow实现线性回归</title>
      <link href="/liner-regression-writen-by-tensorflow/"/>
      <url>/liner-regression-writen-by-tensorflow/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h3><p>利用TensorFlow做一个线性回归的案例，我们需要知道我们要干一些什么？我们要的干的活：   </p><ul><li>1 准备数据</li><li>2 构造模型<ul><li>weights</li><li>bias</li></ul></li><li>3 构造损失函数</li><li>4 优化损失</li><li>5 运行代码（session）</li></ul><h3 id="2-开始写代码"><a href="#2-开始写代码" class="headerlink" title="2 开始写代码"></a>2 开始写代码</h3><ul><li>1 准备数据<br>X = tf.random_normal(shape=[100, 1],mean=0.0,stddev=1.0,name=”feature”) # 用高斯分布生成随机值，<br>  y_true =  tf.matmul( X, [[0.8]]) + 0.7 # 用高斯分布生成随机值， 默认均值是0 方差是1</li><li>2 构造模型<ul><li>weights<br>weights = tf.Variable(initial_value=tf.random_normal(shape=[1,1]),name=”weights”)</li><li>bias<br>bias = tf.Variable(initial_value=tf.random_normal(shape=[1, 1]),name=”bias”)</li><li>构造模型<br>y_predict = tf.matmul(X,weights) + bias</li></ul></li><li>3 构造损失函数<br>loss = tf.reduce_mean(tf.square(y_true - y_predict))</li><li>4 优化损失<br>optimaizer = tf.train.GradientDescentOptimizer(learning_rate=0.01).minimize(loss)</li><li>5 运行代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显式的初始化变量</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"><span class="comment"># 开启会话</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练前</span></span><br><span class="line">    print(<span class="string">"训练前参数："</span>)</span><br><span class="line">    print(<span class="string">"weights:&#123;0&#125;|bias:&#123;1&#125;|loss:&#123;2&#125;"</span>.format(weights.eval(),bias.eval(),loss.eval()))</span><br><span class="line">    print(<span class="string">"-"</span>*<span class="number">10</span> + <span class="string">"我是分割线"</span> + <span class="string">"-"</span>*<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始训练</span></span><br><span class="line">    count = <span class="number">0</span> <span class="comment"># 训练次数</span></span><br><span class="line">    <span class="comment"># 这里我们认为误差小于e^-9时，为合格</span></span><br><span class="line">    <span class="keyword">while</span> loss.eval() &gt; np.exp(<span class="number">-9</span>):</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        sess.run(optimaizer)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练后</span></span><br><span class="line">        <span class="comment"># print()</span></span><br><span class="line">        print(<span class="string">"第&#123;3&#125;次训练后参数：weights:&#123;0&#125;|bias:&#123;1&#125;|loss:&#123;2&#125;"</span>.format(weights.eval(),bias.eval(),loss.eval(),count))</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-搜集变量并显示tensorboard"><a href="#3-搜集变量并显示tensorboard" class="headerlink" title="3 搜集变量并显示tensorboard"></a>3 搜集变量并显示tensorboard</h3><p>步骤：</p><ul><li>1 创建事件<br>file_writer = tf.summary.FileWriter(graph=sess.graph,logdir=”./temp”)</li><li>2 收集变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.summary.scalar(&quot;loss&quot;,loss) # 标量</span><br><span class="line">tf.summary.histogram(&quot;weights&quot;,weights)</span><br><span class="line">tf.summary.histogram(&quot;bias&quot;,bias) # 收集高维变量</span><br></pre></td></tr></table></figure></li><li>3 合并变量<br>merged = tf.summary.merge_all()</li><li>4 运行合并后的变量<br>summary = sess.run(merged)<br>file_writer.add_summary(summary,count)</li></ul><h3 id="4-运行效果"><a href="#4-运行效果" class="headerlink" title="4 运行效果"></a>4 运行效果</h3><h4 id="4-1-迭代回归"><a href="#4-1-迭代回归" class="headerlink" title="4.1 迭代回归"></a>4.1 迭代回归</h4><p><img alt="liner regression" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191127142245.png" class="lazyload">   </p><h4 id="4-2-显示TensorBoard"><a href="#4-2-显示TensorBoard" class="headerlink" title="4.2 显示TensorBoard"></a>4.2 显示TensorBoard</h4><p>进入到TensorBoard的目录，输入下面的命令<code>tensorboard --logdir=&quot;./&quot;</code>，如下：<br><img alt="TensorBoard command" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191127142429.png" class="lazyload"><br>然后在浏览器输入<a href="http://127.0.0.1:6006" target="_blank" rel="noopener" title="http://127.0.0.1:6006">http://127.0.0.1:6006</a>访问，如下所示：<br><img alt="train result" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191127142847.png" class="lazyload"><br>如损失函数的图像吐如下：<br><img alt="loss image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191127142947.png" class="lazyload"></p><h3 id="5-增加命名空间"><a href="#5-增加命名空间" class="headerlink" title="5 增加命名空间"></a>5 增加命名空间</h3><h4 id="5-1-怎么增加命名空间？"><a href="#5-1-怎么增加命名空间？" class="headerlink" title="5.1 怎么增加命名空间？"></a>5.1 怎么增加命名空间？</h4><p>给我们需要添加命名空间的地方加上如下语句：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这里以准备数据为例</span><br><span class="line"># 1 准备数据</span><br><span class="line">    with tf.variable_scope(&quot;prepare_date&quot;):</span><br><span class="line">        X = tf.random_normal(shape=[100, 1],mean=0.0,stddev=1.0,name=&quot;feature&quot;) # 用高斯分布生成随机值，</span><br><span class="line">        y_true =  tf.matmul( X, [[0.8]]) + 0.7 # 用高斯分布生成随机值， 默认均值是0 方差是1</span><br></pre></td></tr></table></figure><p>增加完命名空间之后的TensorBoard显示：<br><img alt="name space" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191127144028.png" class="lazyload">   </p><h3 id="7-模型的保存与加载"><a href="#7-模型的保存与加载" class="headerlink" title="7 模型的保存与加载"></a>7 模型的保存与加载</h3><h4 id="7-1-为什么要是用这个功能？"><a href="#7-1-为什么要是用这个功能？" class="headerlink" title="7.1 为什么要是用这个功能？"></a>7.1 为什么要是用这个功能？</h4><p>这里使用的线性回归只有几个参数，假如我们使用深度学习算法对模型进行训练时，可能会用到很多参数，假如中间有意外发生，比如说断电等，那么我们的训练就相当于白训练了。所以这里引入模型的保存与加载功能。</p><h4 id="7-2-如何使用"><a href="#7-2-如何使用" class="headerlink" title="7.2 如何使用"></a>7.2 如何使用</h4><p>首先定义一个保存器<code>saver</code>:   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义保存模型的保存器</span></span><br><span class="line">saver = tf.train.Saver()</span><br></pre></td></tr></table></figure><p>然后在训练时保存模型，当断电发生时，我们在加载模型。   </p><ul><li>保存模型<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if count % 10 == 0:</span><br><span class="line">saver.save(sess,&quot;./temp/model.ckpt&quot;)</span><br></pre></td></tr></table></figure></li><li>加载模型<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if os.path.exists(&quot;./temp/checkpoint&quot;):</span><br><span class="line">    saver.restore(sess,&quot;./temp/model.ckpt&quot;)</span><br><span class="line">    print(&quot;第&#123;3&#125;次训练后参数：weights:&#123;0&#125;|bias:&#123;1&#125;|loss:&#123;2&#125;&quot;.format(weights.eval(), bias.eval(), loss.eval(), count))</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-添加命令行参数"><a href="#8-添加命令行参数" class="headerlink" title="8 添加命令行参数"></a>8 添加命令行参数</h3><h4 id="8-1-定义命令参数"><a href="#8-1-定义命令参数" class="headerlink" title="8.1 定义命令参数"></a>8.1 定义命令参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## 定义命令行参数</span><br><span class="line">FLGAS = tf.flags.FLAGS</span><br><span class="line">dirc = tf.flags.DEFINE_string(&quot;dirc&quot;,&quot;./temp&quot;,&quot;模型保存的路径&quot;)</span><br></pre></td></tr></table></figure><h4 id="8-2-使用命令行参数"><a href="#8-2-使用命令行参数" class="headerlink" title="8.2 使用命令行参数"></a>8.2 使用命令行参数</h4><p><img alt="command parameter" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191127152307.png" class="lazyload"></p><h4 id="8-3-tf-app-run的使用"><a href="#8-3-tf-app-run的使用" class="headerlink" title="8.3 tf.app.run的使用"></a>8.3 <code>tf.app.run</code>的使用</h4><p>首先定义个<code>main</code>函数，该<code>main</code>函数必须带参数<code>argv</code>，否则会报错<br>如下：   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">    <span class="comment"># liner_regression()</span></span><br><span class="line">    print(<span class="string">"dirc:&#123;&#125;"</span>.format(FLGAS.dirc))</span><br></pre></td></tr></table></figure><p>然后在<code>if __name__ == &#39;__main__&#39;:</code>中使用即可：   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure><h3 id="9-完整代码"><a href="#9-完整代码" class="headerlink" title="9 完整代码"></a>9 完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">os.environ[<span class="string">"TF_CPP_MIN_LOG_LEVEL"</span>]=<span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义命令行参数</span></span><br><span class="line">FLGAS = tf.flags.FLAGS</span><br><span class="line">dirc = tf.flags.DEFINE_string(<span class="string">"dirc"</span>,<span class="string">"./temp"</span>,<span class="string">"模型保存的路径"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">liner_regression</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    自实现一个线性回归</span></span><br><span class="line"><span class="string">    y_true = 0.8X + 0.7</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 1 准备数据</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">"prepare_date"</span>):</span><br><span class="line">        X = tf.random_normal(shape=[<span class="number">100</span>, <span class="number">1</span>],mean=<span class="number">0.0</span>,stddev=<span class="number">1.0</span>,name=<span class="string">"feature"</span>) <span class="comment"># 用高斯分布生成随机值，</span></span><br><span class="line">        y_true =  tf.matmul( X, [[<span class="number">0.8</span>]]) + <span class="number">0.7</span> <span class="comment"># 用高斯分布生成随机值， 默认均值是0 方差是1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2 构造模型</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">"create_model"</span>):</span><br><span class="line">        <span class="comment"># 模型构造用TensorFlow中的变量进行定义</span></span><br><span class="line">        <span class="comment"># 2.1 weights</span></span><br><span class="line">        weights = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">1</span>,<span class="number">1</span>]),name=<span class="string">"weights"</span>)</span><br><span class="line">        <span class="comment"># 2.2 bias</span></span><br><span class="line">        bias = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]),name=<span class="string">"bias"</span>)</span><br><span class="line">        <span class="comment"># 2.3 构建模型</span></span><br><span class="line">        y_predict = tf.matmul(X,weights) + bias</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3 构造损失函数</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">"create_loss_function"</span>):</span><br><span class="line">        loss = tf.reduce_mean(tf.square(y_true - y_predict))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4 优化损失 梯度下降算法</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">"loss_optimizer"</span>):</span><br><span class="line">        optimizer = tf.train.GradientDescentOptimizer(learning_rate=<span class="number">0.01</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显式的初始化变量</span></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2) 收集变量</span></span><br><span class="line">    tf.summary.scalar(<span class="string">"loss"</span>,loss) <span class="comment"># 标量</span></span><br><span class="line">    tf.summary.histogram(<span class="string">"weights"</span>,weights)</span><br><span class="line">    tf.summary.histogram(<span class="string">"bias"</span>,bias) <span class="comment"># 收集高维变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3) 合并变量</span></span><br><span class="line">    merged = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义保存模型的保存器</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启会话</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(init)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1) 创建事件</span></span><br><span class="line">        file_writer = tf.summary.FileWriter(graph=sess.graph,logdir=<span class="string">"./temp"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练前</span></span><br><span class="line">        print(<span class="string">"训练前参数："</span>)</span><br><span class="line">        print(<span class="string">"weights:&#123;0&#125;|bias:&#123;1&#125;|loss:&#123;2&#125;"</span>.format(weights.eval(),bias.eval(),loss.eval()))</span><br><span class="line">        print(<span class="string">"-"</span>*<span class="number">10</span> + <span class="string">"我是分割线"</span> + <span class="string">"-"</span>*<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始训练</span></span><br><span class="line">        count = <span class="number">0</span> <span class="comment"># 训练次数</span></span><br><span class="line">        <span class="comment"># 这里我们认为误差小于e^-9时，为合格</span></span><br><span class="line">        <span class="comment"># while loss.eval() &gt; np.exp(-9):</span></span><br><span class="line">        <span class="comment">#     count += 1</span></span><br><span class="line">        <span class="comment">#     sess.run(optimizer)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#     # 训练后</span></span><br><span class="line">        <span class="comment">#     # print()</span></span><br><span class="line">        <span class="comment">#     print("第&#123;3&#125;次训练后参数：weights:&#123;0&#125;|bias:&#123;1&#125;|loss:&#123;2&#125;".format(weights.eval(),bias.eval(),loss.eval(),count))</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#     # 4) 运行合并后的变量</span></span><br><span class="line">        <span class="comment">#     summary = sess.run(merged)</span></span><br><span class="line">        <span class="comment">#     file_writer.add_summary(summary,count)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#     # 开始保存模型</span></span><br><span class="line">        <span class="comment">#     if count % 10 == 0:</span></span><br><span class="line">        <span class="comment">#         saver.save(sess,"./temp/model.ckpt")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 检验一下模型是否保存成功</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">"./temp/checkpoint"</span>):</span><br><span class="line">            saver.restore(sess,<span class="string">"./temp/model.ckpt"</span>)</span><br><span class="line">            print(<span class="string">"第&#123;3&#125;次训练后参数：weights:&#123;0&#125;|bias:&#123;1&#125;|loss:&#123;2&#125;"</span>.format(weights.eval(), bias.eval(), loss.eval(), count))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv)</span>:</span></span><br><span class="line">    <span class="comment"># liner_regression()</span></span><br><span class="line">    print(<span class="string">"dirc:&#123;&#125;"</span>.format(FLGAS.dirc))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程框架 </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决【TypeError: Input &#39;b&#39; of &#39;MatMul&#39; Op has type int32 that does not match type float32 of argument &#39;a&#39;.】问题</title>
      <link href="/TypeError-Input-b-of-MatMul-Op-has-type-int32-that-does-not-match-type-float32-of-argument-a/"/>
      <url>/TypeError-Input-b-of-MatMul-Op-has-type-int32-that-does-not-match-type-float32-of-argument-a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1 发现问题"></a>1 发现问题</h3><p>利用TensorFlow框架进行自实现线性回归时，报错：TypeError: Input ‘b’ of ‘MatMul’ Op has type int32 that does not match type float32 of argument ‘a’.<br><img alt="error" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191127131420.png" class="lazyload">   </p><p><strong>源代码：</strong>    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">def liner_regression():</span><br><span class="line">    </span><br><span class="line">    自实现一个线性回归</span><br><span class="line">    y_true = 0.8X + 0.7</span><br><span class="line">    :return:</span><br><span class="line">    </span><br><span class="line">    # 1 准备数据</span><br><span class="line">    X = tf.random_normal(shape=[100, 1],mean=0.0,stddev=1.0,name=&quot;feature&quot;) # 用高斯分布生成随机值，</span><br><span class="line">    y_true =  tf.matmul( X, [[8]]) + 0.7 # 用高斯分布生成随机值， 默认均值是0 方差是1</span><br><span class="line"></span><br><span class="line">    # 2 构造模型</span><br><span class="line">    # 模型构造用TensorFlow中的变量进行定义</span><br><span class="line">    # 2.1 weights</span><br><span class="line">    weights = tf.Variable(initial_value=tf.random_normal(shape=[1,1]),name=&quot;weights&quot;)</span><br><span class="line">    # 2.2 bias</span><br><span class="line">    bias = tf.Variable(initial_value=tf.random_normal(shape=[1, 1]),name=&quot;bias&quot;)</span><br><span class="line">    # 2.3 构建模型</span><br><span class="line">    y_predict = tf.matmul(X,weights) + bias</span><br><span class="line"></span><br><span class="line">    # 3 构造损失函数</span><br><span class="line">    # loss = tf.reduce_mean(tf.square(y_predict - y_true))</span><br><span class="line"></span><br><span class="line">    # 4 优化损失 梯度下降算法</span><br><span class="line">    # optimaizer = tf.train.GradientDescentOptimizer(learning_rate=0.01).minimize(loss)</span><br><span class="line"></span><br><span class="line">    # 显式的初始化变量</span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">    # 开启会话</span><br><span class="line">    with tf.Session() as sess:</span><br><span class="line">        sess.run(init)</span><br><span class="line">        print(X)</span><br><span class="line">        print(weights)</span><br><span class="line">        print(bias)</span><br></pre></td></tr></table></figure><h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>问题代码：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X = tf.random_normal(shape=[100, 1],mean=0.0,stddev=1.0,name=&quot;feature&quot;) # 用高斯分布生成随机值，</span><br><span class="line">y_true =  tf.matmul( X, [[8]]) + 0.7 # 用高斯分布生成随机值， 默认均值是0 方差是1</span><br></pre></td></tr></table></figure><p><img alt="error code" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191127131913.png" class="lazyload"><br><strong>修改建议：</strong><br>将<code>y_true =  tf.matmul( X, [[8]]) + 0.7</code>中的<code>[[8]]</code>改成<code>[[8.0]]</code>或者使用<code>tf.cast([[8]],tf.float32)</code>进行数据类型转换</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程框架 </tag>
            
            <tag> TensorFlow </tag>
            
            <tag> 解决问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdownPad2下载以及破解</title>
      <link href="/markdownPad2-break/"/>
      <url>/markdownPad2-break/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h3><p>链接：<a href="https://pan.baidu.com/s/1vsP_eEaiepAzuJKYnfTvNg" target="_blank" rel="noopener" title="https://pan.baidu.com/s/1vsP_eEaiepAzuJKYnfTvNg">https://pan.baidu.com/s/1vsP_eEaiepAzuJKYnfTvNg</a><br>提取码：3em7</p><h3 id="2-MarkdownPad2破解"><a href="#2-MarkdownPad2破解" class="headerlink" title="2 MarkdownPad2破解"></a>2 MarkdownPad2破解</h3><p>点击<code>Enter Key</code> 进入输入邮箱和<code>License key</code></p><p>Email address:<br><a href="mailto:Soar360@live.com" target="_blank" rel="noopener">Soar360@live.com</a></p><p>License key :  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</span><br></pre></td></tr></table></figure><h3 id="3-HTML渲染器下载"><a href="#3-HTML渲染器下载" class="headerlink" title="3 HTML渲染器下载"></a>3 HTML渲染器下载</h3><p>链接：<a href="https://pan.baidu.com/s/1GULFGwC8yLKlYa-9CIjmSQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1GULFGwC8yLKlYa-9CIjmSQ</a><br>提取码：43ja</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 解决问题 </tag>
            
            <tag> 软件破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo绑定个人域名如何实现https访问</title>
      <link href="/use-cloudfree-make-your-hexo-to-https/"/>
      <url>/use-cloudfree-make-your-hexo-to-https/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1 发现问题"></a>1 发现问题</h3><p>当我们使用<code>github</code>+<code>hexo</code>+<code>personal domain</code>做自己的博客时，会发现只有http访问，不能进行https访问，关于个人域名的申请，请参考<a href="https://jums.club/personal-domain-for-github-page/">这篇博客</a>，这里介绍一个网站<a href="https://dash.cloudflare.com/" target="_blank" rel="noopener">cloudflare</a>，他是国外的一个提供网站安全管理、性能优化及相关的技术支持的网站，<code>github</code>服务器在国外，所以有时候可能会被墙，这个时候<a href="https://dash.cloudflare.com/" target="_blank" rel="noopener">cloudflare</a>就发挥作用了。</p><h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>首先去<a href="https://dash.cloudflare.com/" target="_blank" rel="noopener">cloudflare</a>注册一个账号，建议用邮箱注册。然后去首页添加自己的域名，如下所示：<br><img alt="add site" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191126125256.png" class="lazyload"><br>然后在点击SSL/TLS按钮将加密模式选为<strong>flexible</strong>：<br><img alt="flexible" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191126125421.png" class="lazyload"><br>再然后就是点击page ranks按钮添加对应的域名，一个是www，另一个是域名本身，如下：<br><img alt="page ranks" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191126125633.png" class="lazyload"><br>再然后点击DNS按钮，填上下图所示的信息，你的域名本身以及带www的域名：<br><img alt="dns" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191126125913.png" class="lazyload"><br>最后，修改域名提供商上的nameserver地址，我是用的<a href="https://jums.club/personal-domain-for-github-page/">腾讯云域名</a>，如下所示：<br><img alt="alert nameserver" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191126130329.png" class="lazyload">   </p><h3 id="3-查看邮箱邮件"><a href="#3-查看邮箱邮件" class="headerlink" title="3 查看邮箱邮件"></a>3 查看邮箱邮件</h3><p>当你设置完之后，过一会（官方说是72小时内）你会收到一封邮件，内容如下：<br><img alt="status active" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191126130752.png" class="lazyload"><br>还有收到一封欢迎加入cloudflare的邮件，如下：<br><img alt="welcome to cloudflare" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191126130859.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 解决问题 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo编辑器之HexoEditor安装以及闭坑教程</title>
      <link href="/hexo-editor/"/>
      <url>/hexo-editor/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h3><p>关于<a href="https://hexo.io/" target="_blank" rel="noopener"><code>hexo</code></a>+<code>github</code>配置自己的个人自定义博客是一个很好的个人博客解决方案，让<code>hexo</code>跑起来其实很简单，但是后期写博客，就显得有些不是很方便，你得：   </p><ul><li>打开<code>git bash</code>进入到博客目录</li><li>使用<code>hexo new &quot;post_name&quot;</code>命令创建博客文件</li><li>使用Markdown编辑器或者记事本写博客</li><li>在使用<code>git bash</code>使用<code>hexo clean &amp; hexo g &amp; hexo d</code>部署到GitHub或者coding上</li></ul><p>这么一看确实很麻烦，而且还有图床也需要自己手动解决，所以这里介绍一个hexo编辑器<a href="https://github.com/zhuzhuyule/HexoEditor" target="_blank" rel="noopener">HexoEditor</a>，可以创建博客，然后发布博客，还能编写边渲染，还支持图床备份等，很方便。当然还有其他的解决方案，比如：<a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener"><code>hexo-admin</code></a>,<a href="https://github.com/lwz7512/hexo-admin-ehc" target="_blank" rel="noopener"><code>hexo-admin-ehc</code></a>,<a href="https://github.com/nihgwu/hexo-hey" target="_blank" rel="noopener"><code>hexo-hey</code></a>等</p><p>这里是<code>HexoEditor</code>代码的下载安装地址：<a href="https://github.com/zhuzhuyule/HexoEditor" target="_blank" rel="noopener">https://github.com/zhuzhuyule/HexoEditor</a>。<br>该编辑器的界面如下，简洁大方：<br><img alt="HexoEditor main" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/main.png" class="lazyload"><br><img alt="HexoEditor side menu" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/side-menu.png" class="lazyload">   </p><p><strong>安装环境：</strong>   </p><ul><li>node.js，<a href="https://nodejs.org/en/" target="_blank" rel="noopener">install</a></li><li>git，<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">install</a></li></ul><h3 id="2-配置环境"><a href="#2-配置环境" class="headerlink" title="2 配置环境"></a>2 配置环境</h3><h4 id="2-1-for-Windows"><a href="#2-1-for-Windows" class="headerlink" title="2.1 for Windows"></a>2.1 for Windows</h4><figure class="highlight plain"><figcaption><span>Files/nodejs/npm_global```和```C:/Program Files/nodejs/npm_cache```是node.js的安装目录，如果该目录下没有下面两个文件夹的话，我们需要**手动**创建这两个文件夹，名字**务必**一致。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">npm config set prefix &quot;C:/Program Files/nodejs/npm_global&quot;</span><br><span class="line">npm config set cache &quot;C:/Program Files/nodejs/npm_cache&quot;</span><br></pre></td></tr></table></figure><h4 id="2-2-for-Linux-or-Mac"><a href="#2-2-for-Linux-or-Mac" class="headerlink" title="2.2 for Linux or Mac"></a>2.2 for Linux or Mac</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;~/nodejs/npm_global&quot;</span><br><span class="line">npm config set cache &quot;~/nodejs/npm_cache&quot;</span><br></pre></td></tr></table></figure><h3 id="3-克隆代码及安装"><a href="#3-克隆代码及安装" class="headerlink" title="3 克隆代码及安装"></a>3 克隆代码及安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zhuzhuyule/HexoEditor.git</span><br><span class="line">cd HexoEditor</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h3 id="4-闭坑"><a href="#4-闭坑" class="headerlink" title="4 闭坑"></a>4 闭坑</h3><p>当我们克隆完代码之后，然后<code>cd</code>到<code>HexoEditor</code>文件夹下，执行<code>npm install/i</code>命令之后，我们会发现一直不成功，如下面所示：<br><img alt="error install" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191125152248.png" class="lazyload"><br>试了网上的很多解决方案，但是都没有道出真谛，只是草草回答。本想放弃算了，但是还是不甘心，然后又百度了一下，找到了一个解决方案，参考该<a href="https://blog.csdn.net/sihai12345/article/details/98099639" target="_blank" rel="noopener">博客</a>，文件给出了一个回答，关于<code>otarget No matching version found for js-sequence-diagrams@^1000000.0.6.</code>的解决方案，<strong>执行如下命令即可解决</strong>：     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install js-sequence-diagrams@0.0.1-security</span><br></pre></td></tr></table></figure><h3 id="5-建议"><a href="#5-建议" class="headerlink" title="5 建议"></a>5 建议</h3><p>npm的三方库<a href="https://www.npmjs.com/" target="_blank" rel="noopener">官网</a>，该网站可以查找任何有关node.js的三方库，如果这里查不到，那就说明没有。<br>官网截图如下：<br><img alt="npm 官网" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191125152829.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm/npmr文件的原始内容</title>
      <link href="/npm-npmr-content/"/>
      <url>/npm-npmr-content/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1 发现问题"></a>1 发现问题</h3><p>今天我修改了node.js的安装路径下的一个文件的内容，后来发现不能npm运行了，然后无奈我就重新安装了一下，因为我要安装一个hexoEditer来编写我的hexo博客，因为采用git bash和Markdown编辑器太麻烦了，所以上GitHub上找到了hexo的编辑器，这里是下载安装地址：<a href="https://github.com/zhuzhuyule/HexoEditor" target="_blank" rel="noopener">HexoEditor</a>。<br>该编辑器的界面如下，简洁大方：<br><img alt="HexoEditor main" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/main.png" class="lazyload"><br><img alt="HexoEditor side menu" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/side-menu.png" class="lazyload">   </p><p>在GitHub的readme中，有提到使用下面的语句进行配置全局变量：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//if use Windows:</span><br><span class="line">npm config set prefix &quot;C:/Program Files/nodejs/npm_global&quot;</span><br><span class="line">npm config set cache &quot;C:/Program Files/nodejs/npm_cache&quot; </span><br><span class="line"></span><br><span class="line">//if use Linux\Mac:</span><br><span class="line">npm config set prefix &quot;~/nodejs/npm_global&quot;</span><br><span class="line">npm config set cache &quot;~/nodejs/npm_cache&quot; </span><br><span class="line"></span><br><span class="line">//If In China, China, China, you can set mirror to speed up !</span><br><span class="line">npm config set registry &quot;https://registry.npm.taobao.org/&quot;</span><br><span class="line">npm config set electron_mirror &quot;https://npm.taobao.org/mirrors/electron/&quot;</span><br><span class="line"></span><br><span class="line">git clone https://github.com/zhuzhuyule/HexoEditor.git</span><br><span class="line">cd HexoEditor</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>我用的Windows，执行完命令之后，并没有效果，然后我就按照网上的教程，修改了我的nodejs文件夹下的npmrc文件，<a href="https://blog.csdn.net/carechere/article/details/51279789" target="_blank" rel="noopener">参考博客</a>，此博客不可全信，只供参考。</p><h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>下面是<code>npm/npmrc</code>文件的原始内容，如果你修改了此文件，导致<code>npm</code>不能使用的话，那么可以修改回来,或者重新<a href="https://nodejs.org/en/" target="_blank" rel="noopener">安装</a>，或者再想想别的办法。   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prefix=$&#123;APPDATA&#125;\npm</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 解决方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决【hexo博客绑定个人域名之后，每次hexo d之后，页面总是失效，需要重新配置】</title>
      <link href="/error-by-hexo-d-person-domain/"/>
      <url>/error-by-hexo-d-person-domain/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1 发现问题"></a>1 发现问题</h3><p>我<a href="https://jums.club/personal-domain-for-github-page/">绑定个人域名</a>之后,每次写完博客，将本地博客使用<code>hexo d</code>提交到GitHub时，然后再在浏览器中查看返现页面成了404，然后通过百度，终于把问题解决。</p><blockquote><p>参考博客：<a href="https://blog.csdn.net/fake_hydra/article/details/82414965" target="_blank" rel="noopener">https://blog.csdn.net/fake_hydra/article/details/82414965</a></p></blockquote><h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>我们在<code>hexo</code>博客的本目录下的<code>source</code>目录下新建一个文件，该文件名为<code>CNAME</code>，必须是大写，且没有后缀，<a href="https://jums.club/personal-domain-for-github-page/#3-%E5%88%9B%E5%BB%BACNAME%E6%96%87%E4%BB%B6">参考博客</a><br>在CNAME文件里面加上我们的个人域名。如下所示：<br><img alt="CNAME content" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191123130306.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 解决问题 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建自己的博客</title>
      <link href="/hexo-for-all/"/>
      <url>/hexo-for-all/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0-作者肺腑之言"><a href="#0-作者肺腑之言" class="headerlink" title="0 作者肺腑之言"></a>0 作者肺腑之言</h3><p>程序员的强迫症真是可怕，一个<code>hexo</code>博客我硬是折腾了近一个月，但还是没有完全弄好，限于时间问题，只能就到此打住了，因为真的时间有限。这里对于这段时间折腾<code>hexo</code>个人博客的一个总结，包括很多坑吧，因为刚开始弄，有很多的坑都是自己一步一步踩出来的，然后又通过百度去填补，确实很费时间，这里整理一下，希望多个人博客感兴趣的可以少走一点弯路。<strong>让后人少走弯路，我想这就是前人存在的意义吧。</strong>   </p><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h3><p>因为<code>hexo</code>是基于node.js编写的一个静态网页生成工具，可以基于<code>GitHub page</code>进行部署，通过互联网访问，类似于B/S结构。但是底层逻辑有些不同。<br>你需要准备的环境：   </p><ul><li>node.js，<a href="https://nodejs.org/en/" target="_blank" rel="noopener">install</a></li><li>git，<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">install</a></li></ul><blockquote><p>因为安装都很简单，这里就不做赘述了，按照【下一步】方法操作安装完成之后，然后在继续下一步的操作。</p></blockquote><h3 id="2-开启GitHub-page服务"><a href="#2-开启GitHub-page服务" class="headerlink" title="2 开启GitHub page服务"></a>2 开启GitHub page服务</h3><h4 id="2-1-创建repository"><a href="#2-1-创建repository" class="headerlink" title="2.1 创建repository"></a>2.1 创建repository</h4><p>能完个人博客的人，应该都有一个GitHub账号了，这里就不讲述如何申请GitHub账号，应该很简单，对于大家来讲，如果实在不会的，可以参考这篇<a href="https://blog.csdn.net/xingkaifan/article/details/81105352" target="_blank" rel="noopener">博客</a>。我们要做的就是在GitHub创建自己的page，我们新建一个repository，该repository的命名规则如下：</p><blockquote><p>yourgithubaccount.github.io<br>比如：下面是我的GitHub page的repository名：crazyjums.github.io。   后面的两个是固定的，前面的必须是你的GitHub用户名，如下：<br><img alt="your github account" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124133708.png" class="lazyload">   </p></blockquote><h4 id="2-2-配置GitHub-page"><a href="#2-2-配置GitHub-page" class="headerlink" title="2.2 配置GitHub page"></a>2.2 配置GitHub page</h4><p>创建完成之后，然后进入该repository，点击setting，往下翻，找到page服务，有自己个人域名的可以绑定到自己的个人域名，关于如何申请个人域名，可以参考这篇<a href="https://jums.club/personal-domain-for-github-page">博客</a>，没有个人域名的话，也没关系，我们可以使用类似该域名进行访问：<a href="https://crazyjums.github.io" target="_blank" rel="noopener">https://crazyjums.github.io</a>。<br><img alt="into repository" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124133827.png" class="lazyload"><br><img alt="click setting" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124133950.png" class="lazyload"><br><img alt="set github page" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124134108.png" class="lazyload">      </p><h4 id="2-3-访问GitHub-page"><a href="#2-3-访问GitHub-page" class="headerlink" title="2.3 访问GitHub page"></a>2.3 访问GitHub page</h4><p>如果配置完成的话，我们可以使用自己的GitHub page地址进行访问，如：<a href="https://crazyjums.github.io" target="_blank" rel="noopener">https://crazyjums.github.io</a></p><h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3 安装hexo"></a>3 安装hexo</h3><p>在第一步中，我们已经安装好了hexo需要的环境，node.js和git，我们现在开始安装hexo，这里针对Windows用户进行讲解，Windows用户到桌面然后右键用过<code>git bash here</code>进入到git终端界面，如下所示：<br><img alt="git bash" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124135009.png" class="lazyload"><br>如果你是Mac或者Linux用户，那么直接在终端进行操作节课，因为这两个系统的终端就可以操作git命令。   </p><h4 id="3-1-安装hexo"><a href="#3-1-安装hexo" class="headerlink" title="3.1 安装hexo"></a>3.1 安装hexo</h4><p>使用下面的命令安装hexo客户端，详情可以查看 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a> 官网。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h4 id="3-2-启动hexo"><a href="#3-2-启动hexo" class="headerlink" title="3.2 启动hexo"></a>3.2 启动hexo</h4><p>安装完之后，我们通过git终端随便进入一个目录，通过cd进入到相应的目录，然后使用<code>hexo i/init your_blog_folder</code>，比如：<code>hexo i my_hexo_blog</code>，如下所示：<br><img alt="my first hexo" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124141310.png" class="lazyload"><br>创建完之后，我们使用命令<code>hexo g/generate</code>将Markdown文件生产静态网页，然后在使用<code>hexo s/server/start</code>命令启动服务，如下所示：<br><img alt="hexo start" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124140031.png" class="lazyload"><br>启动完之后，我们就可以通过本地链接访问了，链接地址：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，如下所示：<br><img alt="hexo first demo" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124140201.png" class="lazyload"></p><h4 id="3-3-部署hexo到GitHub"><a href="#3-3-部署hexo到GitHub" class="headerlink" title="3.3 部署hexo到GitHub"></a>3.3 部署<code>hexo</code>到<code>GitHub</code></h4><p>上面讲完了如何在本地安装使用<code>hexo</code>，但是我们的终极目的就是通过互联网访问自己的个人博客，这里通过<code>GitHub page</code>作为“服务器”来使用，当然你也可以使用腾讯的 <a href="https://dev.tencent.com/user" target="_blank" rel="noopener">coding</a> 来作为自己的“服务器”来配置<code>coding page</code>，但是我个人觉得，<code>coding</code>没有<code>GitHub</code>好用，个人觉得，大家可以尝试一下，然后在做选择。但是<code>coding</code>有一个好处，就是coding的服务器在国内，而<code>GitHub</code>的服务器在国外，所以<code>GitHub</code>有时候会卡一下，速度上没有<code>coding</code>快，你们决定吧。</p><p>安装<code>git</code>插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>这里将一下如何将自己的静态<code>page</code>部署到<code>GitHub</code>，当然你可以同时将page同时部署到<code>GitHub</code>和<code>coding</code>上，可以参考这篇 <a href="https://jums.club/git-to-github-and-coding/">博客</a>，这里只讲如何部署到<code>GitHub</code>，我们需要修改<code>hexo</code>根目录下的<code>_config.yml</code>文件，记住，是根目录下的<code>_config.yml</code>文件，不是<code>themes</code>下的<code>_config.yml</code>文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span> <span class="comment"># 通过git方式提交</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:crazyjums/crazyjums.github.io.git</span>  <span class="comment"># submit to github</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment"># 在GitHubrepository中的分支，一般为master</span></span><br></pre></td></tr></table></figure><blockquote><p>配置完成之后，我们使用<code>hexo d/deploy</code>命令进行部署，</p></blockquote><h3 id="4-hexo美化"><a href="#4-hexo美化" class="headerlink" title="4 hexo美化"></a>4 <code>hexo</code>美化</h3><h4 id="4-1-创建其他页面"><a href="#4-1-创建其他页面" class="headerlink" title="4.1 创建其他页面"></a>4.1 创建其他页面</h4><p><code>hexo</code>默认就只有两个两面，一个是home，另一个是<code>archives</code>，如果我们想要创建其他的固定页面的话，我们需要使用命令<code>hexo new page &quot;your page&quot;</code>，记住和<code>hexo new &quot;post page&quot;</code>区分开。</p><p><strong>区别：</strong>   </p><ul><li><code>hexo new page &quot;&quot;</code>用来创建一个页面，他会在hexo的source目录下创建一个index.md，用来生产.html页面，</li><li><code>hexo new &quot;your post&quot;</code>用来生产post页面，也就是我们需要发表的博客页，它会在 <code>hexo/source/_post</code>目录下生产一个 <code>your-post.md</code>文件，在 <code>hexo g</code>命令之后，会在 <code>public/</code>目录下生成一个 <code>.md</code>文件，用来放你写的博客。</li></ul><p><strong>举例：</strong><br>使用<code>hexo new &quot;about&quot;</code>创建自己的简历页面，如下所示：<br><img alt="hexo new about" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124144844.png" class="lazyload"><br><img alt="about page" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124145021.png" class="lazyload">   </p><p><strong>配置页面：</strong><br>打开 <code>about</code>文件夹下的 <code>index.md</code>文件，然后在台头上加上如下语句：<br><img alt="type about" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124145215.png" class="lazyload">   </p><p>还要对<code>themes</code>目录下的<code>_config.yml</code>文件进行配置，如下所示：   </p><p><img alt="config menu" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124152459.png" class="lazyload"></p><blockquote><p>#表示注释的意思</p></blockquote><p><strong>推广：</strong><br>我们配置完<code>about</code>页面之后，其他的页面我们可以按照这种方法进行配置。这里不多介绍。</p><h4 id="4-2-配置搜索页面"><a href="#4-2-配置搜索页面" class="headerlink" title="4.2 配置搜索页面"></a>4.2 配置搜索页面</h4><p>hexo提供了本地搜索功能，搜索本地的静态网页，首先我们需要安装一个三方包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>然后配置相应的配置文件，如下：<br><img alt="config local search" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124150945.png" class="lazyload">   </p><p>然后就是<code>hexo clean</code>和<code>hexo g -s</code>，然后就可以看到那个搜索按钮了，如下所示：<br><img alt="search button" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124151126.png" class="lazyload"></p><h4 id="4-3-配置百度站长"><a href="#4-3-配置百度站长" class="headerlink" title="4.3 配置百度站长"></a>4.3 配置百度站长</h4><h5 id="4-3-1-添加站点"><a href="#4-3-1-添加站点" class="headerlink" title="4.3.1 添加站点"></a>4.3.1 添加站点</h5><p>百度搜索“百度站长”，如下：     <img alt="百度站长" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124152031.png" class="lazyload"><br>百度账号登录或者微信登录都可以，下图进入到站点管理界面：<br><img alt="站点管理" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124152217.png" class="lazyload"><br><img alt="添加站点" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124152418.png" class="lazyload"></p><h5 id="4-3-2-验证站点"><a href="#4-3-2-验证站点" class="headerlink" title="4.3.2 验证站点"></a>4.3.2 验证站点</h5><p>进入到相应的站点进行管理，点击验证，有三种验证方式，这里推荐使用文件下载验证，如下所示：<br><img alt="站点验证" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/a50f4bfbfbedab645ccff490fe36afc379311e24.png" class="lazyload"><br>安装步骤验证完之后，接着在来配置站点地图</p><h5 id="4-3-3-配置站点地图"><a href="#4-3-3-配置站点地图" class="headerlink" title="4.3.3 配置站点地图"></a>4.3.3 配置站点地图</h5><p><strong>下载三个包：</strong>   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p><strong>配置：</strong><br>进入到根目录下的<code>_config.yml</code>文件中，进行配置，加入下面的语句： <img alt="sitemap" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124153208.png" class="lazyload">    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#----------------------------------------------</span><br><span class="line"># 添加百度网站地图</span><br><span class="line">#----------------------------------------------</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><p><img alt="百度推送" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124153313.png" class="lazyload">    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#----------------------------------------------</span><br><span class="line"># 添加百度推送  让百度可以搜索到</span><br><span class="line">#----------------------------------------------</span><br><span class="line">baidu_url_submit:</span><br><span class="line">  count: 100 # 提交最新的10链接 可以改成其他数字</span><br><span class="line">  host: jums.club # 在百度站长平台中注册的域名</span><br><span class="line">  token: yiOH4yHRf0eeVuko # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span><br><span class="line">  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure><p><strong>配置deploy：</strong><br><img alt="deploy config" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124153349.png" class="lazyload">   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- type: baidu_url_submitter</span><br></pre></td></tr></table></figure><blockquote><p>上面三个配置都是在根目录下的<code>_config.yml</code>文件中进行配置的。</p></blockquote><h4 id="4-4-SEO优化"><a href="#4-4-SEO优化" class="headerlink" title="4.4 SEO优化"></a>4.4 SEO优化</h4><blockquote><p>最后的网站就是我们只要点三次，就可以到达我们网站的任何网页，这样的话，我们的网站就可以更好的被百度爬虫爬取到，但是<code>hexo</code>的博客目录是<code>year/month/day/blog_name</code>进行排序的，这样严重影响了搜索的效率，下面我们一个插件，直接使用<code>your_domain/blog_name</code>的格式进行排序博客。</p></blockquote><p><strong>安装：</strong>   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p><strong>配置：</strong><br>同样，也是在根目录下的<code>_config.yml</code>文件中进行配置，如下所示：   <img alt="config SEO optimal" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124153749.png" class="lazyload"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abbrlink:</span><br><span class="line">  alg: crc32 # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure><h3 id="5-hexo插件"><a href="#5-hexo插件" class="headerlink" title="5 hexo插件"></a>5 hexo插件</h3><h4 id="5-1-安装豆瓣插件"><a href="#5-1-安装豆瓣插件" class="headerlink" title="5.1 安装豆瓣插件"></a>5.1 安装豆瓣插件</h4><p><a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">github地址</a>   </p><ul><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-douban --save</span><br></pre></td></tr></table></figure></li><li><p>配置</p><p>在主配置文件<code>_config.yml</code>中配置以下参数：（不是主题配置文件）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">mythsman</span>   <span class="comment">#这里填写你的豆瓣账号用户名</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">'This is my book title'</span>   <span class="comment"># 这是页面的标题</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my book quote'</span>   <span class="comment"># 这是页面中引用的一句话</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">'This is my movie title'</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my movie quote'</span></span><br><span class="line">  <span class="attr">game:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">'This is my game title'</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my game quote'</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span>   <span class="comment">#延迟时间</span></span><br></pre></td></tr></table></figure><ul><li><strong>user</strong>: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”<a href="https://www.douban.com/people/xxxxxx/&quot;" target="_blank" rel="noopener">https://www.douban.com/people/xxxxxx/&quot;</a> ，其中的”xxxxxx”就是你的个人ID了。</li><li><strong>builtin</strong>: 是否将生成页面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默认是<code>false</code>,另一可选项为<code>true</code>(1.x.x版本新增配置项)。</li><li><strong>title</strong>: 该页面的标题.</li><li><strong>quote</strong>: 写在页面开头的一段话,支持<code>html</code>语法.</li><li><strong>timeout</strong>: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul></li></ul><h4 id="5-2-hexo支持流程图"><a href="#5-2-hexo支持流程图" class="headerlink" title="5.2 hexo支持流程图"></a>5.2 <code>hexo</code>支持流程图</h4><ul><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure></li><li><p>使用说明</p><table><thead><tr><th>操作模块</th><th>说明</th></tr></thead><tbody><tr><td>start</td><td>开始</td></tr><tr><td>end</td><td>结束</td></tr><tr><td>opration</td><td>普通操作块</td></tr><tr><td>condition</td><td>判断块</td></tr><tr><td>subroutine</td><td>子任务块</td></tr><tr><td>inputoutput</td><td>输入输出块</td></tr></tbody></table></li><li><p>流程图案例</p><div id="flowchart-0" class="flow-chart"></div></li></ul><h4 id="5-3-hexo支持数学公式"><a href="#5-3-hexo支持数学公式" class="headerlink" title="5.3 hexo支持数学公式"></a>5.3 <code>hexo</code>支持数学公式</h4><ul><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-math --save</span><br></pre></td></tr></table></figure></li><li><p>配置</p><p>在主题的配置文件中，修改一下参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MathJax Support</span></span><br><span class="line"><span class="attr">mathjax:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>   <span class="comment"># 将false改成true</span></span><br></pre></td></tr></table></figure></li><li><p>用法</p><p><a href="https://jums.club/markdown-grammer/#12-数学公式">数学公式具体用法，参考这里</a></p></li></ul><h4 id="5-4-压缩静态资源"><a href="#5-4-压缩静态资源" class="headerlink" title="5.4 压缩静态资源"></a>5.4 压缩静态资源</h4><h5 id="5-4-1-安装插件："><a href="#5-4-1-安装插件：" class="headerlink" title="5.4.1 安装插件："></a>5.4.1 安装插件：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp,babel-core@6.26.3, gulp-minify-css,gulp-uglify,gulp-htmlmin,gulp-htmlclean,gulp-imagemin，gulp-babel@7.0.1,babel-preset-es2015@6.24.1 --save</span><br><span class="line">## 拆分：</span><br><span class="line">npm install gulp --save</span><br><span class="line">npm install gulp-minify-css --save</span><br><span class="line">npm install gulp-uglify --save</span><br><span class="line">npm install gulp-htmlmin --save</span><br><span class="line">npm install gulp-htmlclean --save</span><br><span class="line">npm install gulp-imagemin --save</span><br><span class="line"># 解决【Gulp打包问题】 GulpUglifyError: unable to minify JavaScript</span><br><span class="line"># 解决 gulp-uglify 压缩JavaScript 不兼容 es5 语法的问题</span><br><span class="line">npm install babel-core@6.26.3 --save</span><br><span class="line">npm install gulp-babel@7.0.1 --save</span><br><span class="line">npm install babel-preset-es2015@6.24.1 --save</span><br><span class="line"># gulp-babel 取消严格模式方法(&quot;use strict&quot;)</span><br><span class="line">npm install babel-plugin-transform-remove-strict-mode --save</span><br></pre></td></tr></table></figure><h5 id="5-4-2-创建gulpfile-js文件"><a href="#5-4-2-创建gulpfile-js文件" class="headerlink" title="5.4.2 创建gulpfile.js文件"></a>5.4.2 创建<code>gulpfile.js</code>文件</h5><p>在 <code>Hexo</code> 站点下根目录下新建<code>gulpfile.js</code>文件，文件内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            removeComments: <span class="literal">true</span>,</span><br><span class="line">            minifyJS: <span class="literal">true</span>,</span><br><span class="line">            minifyCSS: <span class="literal">true</span>,</span><br><span class="line">            minifyURLs: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./public/**/*.js'</span>, <span class="string">'!./public/**/*.min.js'</span>])</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            <span class="comment">//将ES6代码转译为可执行的JS代码</span></span><br><span class="line">            presets: [<span class="string">'es2015'</span>] <span class="comment">// es5检查机制</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/images 目录内图片(Version&lt;3)</span></span><br><span class="line"><span class="comment">// gulp.task('minify-images', function () &#123;</span></span><br><span class="line"><span class="comment">//     gulp.src('./public/images/**/*.*')</span></span><br><span class="line"><span class="comment">//         .pipe(imagemin(&#123;</span></span><br><span class="line"><span class="comment">//             optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span></span><br><span class="line"><span class="comment">//             progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line"><span class="comment">//             interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line"><span class="comment">//             multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line"><span class="comment">//         &#125;))</span></span><br><span class="line"><span class="comment">//         .pipe(gulp.dest('./public/images'));</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/images 目录内图片(Version&gt;3)</span></span><br><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./public/images/**/*.*'</span>)</span><br><span class="line">        .pipe(imagemin([</span><br><span class="line">            imagemin.gifsicle(&#123;<span class="attr">interlaced</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">            imagemin.jpegtran(&#123;<span class="attr">progressive</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">            imagemin.optipng(&#123;<span class="attr">optimizationLevel</span>: <span class="number">5</span>&#125;),</span><br><span class="line">            imagemin.svgo(&#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                    &#123;<span class="attr">removeViewBox</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">cleanupIDs</span>: <span class="literal">false</span>&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public/images'</span>));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.0以前的写法 </span></span><br><span class="line"><span class="comment">//gulp.task('default', [</span></span><br><span class="line"><span class="comment">//  'minify-html', 'minify-css', 'minify-js', 'minify-images'</span></span><br><span class="line"><span class="comment">//]);</span></span><br><span class="line"><span class="comment">//4.0以后的写法</span></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(gulp.parallel(<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>, <span class="string">'minify-images'</span>)), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------gulp Finished----------"</span>);</span><br><span class="line">    <span class="comment">// Do something after a, b, and c are finished.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="5-4-3-修改主配置文件"><a href="#5-4-3-修改主配置文件" class="headerlink" title="5.4.3 修改主配置文件"></a>5.4.3 修改主配置文件</h5><p>将根目录下的配置文件<code>_config.yaml</code>做如下修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://jums.club</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/media/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing '.html' from permalinks</span></span><br></pre></td></tr></table></figure><p>修改：</p><p>将上述配置中的第5行进行修改，将改成这样：<code>:title/</code>，注意<code>:</code>和<code>/</code>，将前面的年月日删除。</p><h5 id="5-4-4-静态资源压缩"><a href="#5-4-4-静态资源压缩" class="headerlink" title="5.4.4 静态资源压缩"></a>5.4.4 静态资源压缩</h5><p>只需要每次在执行 <code>generate</code> 命令后执行 <code>gulp</code> 就可以实现对静态资源的压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo gulp</span><br></pre></td></tr></table></figure><h4 id="5-5-配置gitalk评论"><a href="#5-5-配置gitalk评论" class="headerlink" title="5.5 配置gitalk评论"></a>5.5 配置<code>gitalk</code>评论</h4><h5 id="5-5-1-注册OAuth-Apps"><a href="#5-5-1-注册OAuth-Apps" class="headerlink" title="5.5.1 注册OAuth Apps"></a>5.5.1 注册<code>OAuth Apps</code></h5><p><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">OAuth Apps注册地址</a>   </p><p><img alt="注册" data-src="G:%5CcodeFolder%5Chexo-blog%5Cmeida-blog%5Csource%5Cimages%5C360%E6%88%AA%E5%9B%BE20200419200404360.jpg" class="lazyload"></p><p>注册完之后，可以查看对应的<code>client ID</code>和<code>client Sercet</code>：</p><p><img alt data-src="G:%5CcodeFolder%5Chexo-blog%5Cmeida-blog%5Csource%5Cimages%5C360%E6%88%AA%E5%9B%BE20200419165709363.jpg" class="lazyload"></p><h5 id="5-5-2-在hexo中配置"><a href="#5-5-2-在hexo中配置" class="headerlink" title="5.5.2 在hexo中配置"></a>5.5.2 <a name="jump1">在<code>hexo</code>中配置</a></h5><p>打开<strong>主题</strong>的配置文件：<code>_config.yaml</code>，配置一下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comment:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">gitalk</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">crazyjums</span>         <span class="comment"># 你的github用户名</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">media</span>          <span class="comment"># 你的位置对应的github仓库</span></span><br><span class="line">    <span class="attr">client_id:</span>      <span class="comment"># (required) OAuth application client id</span></span><br><span class="line">    <span class="attr">client_secret:</span>  <span class="comment"># (required) OAuth application client secret</span></span><br><span class="line">    <span class="attr">admin:</span> <span class="string">crazyjums</span>  <span class="comment">## 你的github用户名</span></span><br><span class="line">    <span class="attr">create_issue_manually:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">distraction_free_mode:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">has_hot_recommend:</span> <span class="literal">true</span> <span class="comment"># 是否有热门推荐</span></span><br><span class="line">    <span class="attr">has_latest_comment:</span> <span class="literal">true</span> <span class="comment">#是否有最新评论</span></span><br></pre></td></tr></table></figure><h5 id="5-5-3-配置github-page"><a href="#5-5-3-配置github-page" class="headerlink" title="5.5.3 配置github page"></a>5.5.3 配置<code>github page</code></h5><p>如果前面的<code>OAuth Apps</code>注册的是<code>https</code>的，那么在<code>github page</code>也需要设置<code>https</code>：</p><p><img alt="https" data-src="G:%5CcodeFolder%5Chexo-blog%5Cmeida-blog%5Csource%5Cimages%5C360%E6%88%AA%E5%9B%BE20200419200704372.jpg" class="lazyload"></p><h5 id="5-5-4-开始使用"><a href="#5-5-4-开始使用" class="headerlink" title="5.5.4 开始使用"></a>5.5.4 开始使用</h5><p>当第一次使用时，可能会遇到如下的问题：</p><ol><li><a href="https://github.com/Molunerfinn/hexo-theme-melody/issues/130" target="_blank" rel="noopener">gitalk提示Error Not Found</a></li><li><a href="https://github.com/mzlogin/mzlogin.github.io/issues/63" target="_blank" rel="noopener">未找到相关的 Issues 进行评论，请联系xxx初始化创建</a></li></ol><p>如果遇到这两个问题，可以做如下检查：</p><ol><li>看看是否在<code>github page</code>中设置了<code>https</code></li><li>看看<code>OAuth Apps</code>中的你的网站链接的末尾是否添加了一个<code>/</code>符号</li><li>你的配置文件中的信息是否填写正确，参见<a href="#jump1">修改配置文件</a></li></ol><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">  st=>start: 开始  op=>operation: My Operation  cond=>condition: Yes or No?  e=>end  st->op->cond  cond(yes)->e  cond(no)->op  &</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo绑定个人域名之后，不能访问，已经解决</title>
      <link href="/config-ssh-for-github/"/>
      <url>/config-ssh-for-github/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1 发现问题"></a>1 发现问题</h3><p>昨天为了优化SEO，我给我的GitHub page 加了一个三方包，如下：   </p><pre><code class="editorconfig">npm install hexo-abbrlink --save</code></pre><p>但是，当我再次hexo d的时候，发现本地的hexo可用，但是GitHub page就用不了了，因为我用了域名解析，用的腾讯云的域名解析系统，可以参考我的这篇博客，<a href="https://jums.club/personal-domain-for-github-page/">如何用一元开通自己的个性域名</a><br>当我使用<a href="https://jums.club/">https://jums.club/</a>进行访问时，发现出现了下面的界面：<br><img alt="error page" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124093619.png" class="lazyload">   </p><h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>发现了问题，当然得解决问题，否则发现问题就没有什么意义了。<br>首先我百度了一下，看了一篇<a href="https://blog.csdn.net/tr1912/article/details/80673610" target="_blank" rel="noopener">博客</a>，看了一下，然后我的问题解决，虽然是百度的，但是问题能解决就行。<br>我发现我的GitHub page 的域名绑定突然好像失效了，所以我又从新绑定了一下，我是用的是IP地址和GitHub page 的域名同时绑定到我的个人域名上，如下所示：<br><img alt="domain photo" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124095621.png" class="lazyload"><br><strong>如何获取GitHub page的IP地址：</strong><br><img alt="github page ip" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124095730.png" class="lazyload">   </p><p><strong>最后：</strong>   </p><blockquote><p>最后，问题终于解决，就是域名没有绑定，绑定完之后，渠道GitHub page 的setting界面，可以看到如下配置，即为配置成功。<br><img alt="success config" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124100230.png" class="lazyload"></p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 解决问题 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决【Please make sure you have the correct access rights and the repository exists.】</title>
      <link href="/ssh-connect-to-github/"/>
      <url>/ssh-connect-to-github/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1 发现问题"></a>1 发现问题</h3><blockquote><p>问题：Please make sure you have the correct access rights and the repository exists.<br>当你使用git工具向GitHub提交代码时，遇到了上述问题，那么没关系，该问题已经解决<br>问题的关键就是没有在GitHub配置ssh key</p></blockquote><h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>进入到你的GitHub账户的setting中，然后找到ssh key选项，添加自己的公钥即可。<br><strong>第一步：</strong><br>产生自己的公钥,执行如下命令：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your github account&quot;</span><br><span class="line">#比如：我的GitHub账户是123456@qq.com，那么命令如下：</span><br><span class="line">ssh-keygen -t rsa -C &quot;123456@qq.com&quot;</span><br></pre></td></tr></table></figure><p>一路默认即可，然后在cd到存放公钥的文件夹里面，使用cat命令查看，然后将其复制到GitHub的setting中：<br><img alt="ssh key" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191124130021.png" class="lazyload">  </p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐一个免费图床，了解一下</title>
      <link href="/a-free-tuchuang-site/"/>
      <url>/a-free-tuchuang-site/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="免费图床"><a href="#免费图床" class="headerlink" title="免费图床"></a>免费图床</h3><p>免费图床可以让我们免去很多上传图片的操作，特别是当我们自己使用<code>GitHub page</code>和<code>hexo</code>来弄自己的个人博客时,那么图床就显得很重要了，当然我们也可以直接将图片放到GitHub上，但是当博客数量多了之后，这样就显得过于臃肿了。</p><p>关于优缺点，自己可以衡量一下，使用GitHub作为自己的图床，那么安全性是相对有保障的，GitHub至少不会那么快就倒闭。而其他的图床的话，万一哪天xx，是吧。东西已经放在这里了，怎么选择就看你的了。</p><blockquote><p>图床推荐：<a href="https://www.tuchuang001.com/" target="_blank" rel="noopener">https://www.tuchuang001.com/</a></p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何同时将hexo代码部署到GitHub以及coding上</title>
      <link href="/git-to-github-and-coding/"/>
      <url>/git-to-github-and-coding/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1 安装插件"></a>1 安装插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2 修改配置文件"></a>2 修改配置文件</h3><p><strong>修改hexo根目录下的<code>_config.yml</code>文件，代码如下：</strong>   </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:crazyjums/crazyjums.github.io.git</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="string">git@git.dev.tencent.com:dtid_f0ed6967903b604b/hexo_blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让自己的hexo博客被Google和百度收录</title>
      <link href="/put-your-hexo-blog-to-baidu-sitmap/"/>
      <url>/put-your-hexo-blog-to-baidu-sitmap/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><p>关于如何让自己的hexo博客能够让百度或者谷歌收录，可以查看下面这篇博客。</p><blockquote><p><a href="https://www.jianshu.com/p/25145964abf3" target="_blank" rel="noopener">如何让自己的hexo博客被Google和百度收录</a></p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Python扫描文件夹中所有文件，并将部分文件按要求改名字</title>
      <link href="/change-file-name-by-python/"/>
      <url>/change-file-name-by-python/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="话不多说，直接上代码"><a href="#话不多说，直接上代码" class="headerlink" title="话不多说，直接上代码"></a>话不多说，直接上代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan_files</span><span class="params">(directory, prefix=None, postfix=None)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files[<span class="number">2</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"微信截图_"</span> <span class="keyword">in</span> file:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                newname = re.sub(<span class="string">"微信截图_"</span>,<span class="string">""</span>,file)</span><br><span class="line">                os.rename(directory+file,directory+newname)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"改名完成,一共改名&#123;&#125;个文件"</span>.format(count))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    dir = <span class="string">r"xxx/xxx"</span> <span class="comment"># 这里写你的路径，记得加上前面的r，否则容易出错</span></span><br><span class="line">    scan_files(dir)</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看hexo已经安装的三方包命令</title>
      <link href="/view-package-of-npm/"/>
      <url>/view-package-of-npm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list --depth 0</span><br></pre></td></tr></table></figure><p><strong>命令解释：</strong>   </p><ul><li>–depth  查看已经三方的深度，默认是显示所有，用0只显示最外层</li></ul><p><strong>显示结果下所示：</strong><br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191123135324.png" class="lazyload"> </p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo个人博客绑定个人域名</title>
      <link href="/personal-domain-for-github-page/"/>
      <url>/personal-domain-for-github-page/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-注册个人域名"><a href="#1-注册个人域名" class="headerlink" title="1 注册个人域名"></a>1 注册个人域名</h3><p>进入到腾讯云平台，自己注册一个账号（微信登录即可），下面是网址：<br><a href="https://cloud.tencent.com/act/domainsales?from=dnspodqcloud" target="_blank" rel="noopener">https://cloud.tencent.com/act/domainsales?from=dnspodqcloud</a><br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191123125246.png" class="lazyload">   </p><h3 id="2-开始域名解析"><a href="#2-开始域名解析" class="headerlink" title="2 开始域名解析"></a>2 开始域名解析</h3><p>自己按照步骤购买域名，第一年是1元，然后进入到控制台，进入域名解析界面，如下：<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191123125742.png" class="lazyload"><br>点击【解析】进入到域名解析界面，如下：<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191123125952.png" class="lazyload">   </p><h3 id="3-创建CNAME文件"><a href="#3-创建CNAME文件" class="headerlink" title="3 创建CNAME文件"></a>3 创建CNAME文件</h3><p>创建一个CNAME文件：   </p><ul><li>这几个字母必须是大写</li><li>没有后缀名</li><li>用记事本打开将自己的域名写在里面，如：<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191123130306.png" class="lazyload">   </li></ul><h3 id="4-部署到GitHub"><a href="#4-部署到GitHub" class="headerlink" title="4 部署到GitHub"></a>4 部署到GitHub</h3><p>将CNAME文件放到publics文件夹里面，然后上传到GitHub，命令如下：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow如何控制输出控制台的日志等级</title>
      <link href="/tensorflow-log-level/"/>
      <url>/tensorflow-log-level/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 输出所有 默认等级</span></span><br><span class="line">os.environ[<span class="string">"TF_CPP_MIN_LOG_LEVEL"</span>]=<span class="string">'1'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出warm和error</span></span><br><span class="line">os.environ[<span class="string">"TF_CPP_MIN_LOG_LEVEL"</span>]=<span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只输出error</span></span><br><span class="line">os.environ[<span class="string">"TF_CPP_MIN_LOG_LEVEL"</span>]=<span class="string">'3'</span></span><br></pre></td></tr></table></figure><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程框架 </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN典型模型：AlexNet</title>
      <link href="/AlexNet/"/>
      <url>/AlexNet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>论文出处：《<a href="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pdf/ImageNet_Classification_with_Deep_Convolutional_Neural_Networks.pdf" target="_blank" rel="noopener">ImageNet Classification with Deep Convolutional Neural Networks</a>》<br><a href="https://blog.csdn.net/luoluonuoyasuolong/article/details/81750190" target="_blank" rel="noopener">一篇很好的理解AlexNet模型的博客</a><br>AlexNet 的网络结构如下所示：<br><img alt="AlexNet 的网络结构" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/AlexNet.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 计算机视觉 </tag>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于局部响应归一化层（LRN），了解一下</title>
      <link href="/lrn/"/>
      <url>/lrn/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="局部响应归一化层（Local-Response-Normalization）"><a href="#局部响应归一化层（Local-Response-Normalization）" class="headerlink" title="局部响应归一化层（Local Response Normalization）"></a>局部响应归一化层（Local Response Normalization）</h3><p>本篇博客参考自：<a href="https://note.youdao.com/" target="_blank" rel="noopener">https://www.jianshu.com/p/c014f81242e7</a></p><p>局部响应归一化层简称LRN，<strong>是在深度学习中提高准确度的技术方法</strong>。一般是在激活、池化后进行的一种处理方法，因在<a href="https://note.youdao.com/" target="_blank" rel="noopener">Alexnet</a>中运用到，故做一下整理。   </p><blockquote><p><strong>为什么要引入LRN层？</strong><br>首先要引入一个神经生物学的概念：侧抑制（lateral inhibitio），即指被激活的神经元抑制相邻的神经元。归一化（normaliazation）的目的就是“抑制”,LRN就是借鉴这种侧抑制来实现局部抑制，尤其是我们使用RELU的时候，这种“侧抑制”很有效 ，因而在alexnet里使用有较好的效果。</p><p><strong>归一化有什么好处？</strong><br>1.归一化有助于快速收敛；<br>2.对局部神经元的活动创建竞争机制，使得其中响应比较大的值变得相对更大，并抑制其他反馈较小的神经元，增强了模型的泛化能力。<br>【补充：神经网络学习过程本质就是为了学习数据分布，一旦训练数据与测试数据的分布不同，那么网络的泛化能力也大大降低；另外一方面，一旦每批训练数据的分布各不相同(batch 梯度下降)，那么网络就要在每次迭代都去学习适应不同的分布，这样将会大大降低网络的训练速度，这也正是为什么我们需要对数据都要做一个归一化预处理的原因。<br>深度网络的训练是复杂的过程，只要网络的前面几层发生微小的改变，那么后面几层就会被累积放大下去。一旦网络某一层的输入数据的分布发生改变，那么这一层网络就需要去适应学习这个新的数据分布，所以如果训练过程中，训练数据的分布一直在发生变化，那么将会影响网络的训练速度。】</p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习和机器学习的区别？</title>
      <link href="/machine-learning-different-from-deep-learning/"/>
      <url>/machine-learning-different-from-deep-learning/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于深度学习和机器学习，他们有如下几点不同之处：</p><h3 id="1-特征提取方面"><a href="#1-特征提取方面" class="headerlink" title="1 特征提取方面"></a>1 特征提取方面</h3><ul><li>机器学习必须通过人工特征提取之后，才能进行后续的识别等操作</li><li>深度学习则不同，深度学习深刻网络框架可以不需要人工进行特征提取，而是通过网络自动进行提取，那么深度学习就显得更加强大了</li></ul><h3 id="2-数据量和计算性能方面"><a href="#2-数据量和计算性能方面" class="headerlink" title="2 数据量和计算性能方面"></a>2 数据量和计算性能方面</h3><p><img alt="数据量和计算性能方面" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191121140526768.jpg" class="lazyload">   </p><h3 id="算法代表"><a href="#算法代表" class="headerlink" title="算法代表"></a>算法代表</h3><p>机器学习：</p><ul><li>素朴贝叶斯</li><li>决策树<br>…   </li></ul><p>深度学习</p><ul><li>神经网络</li></ul><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于SSPNet（空间金字塔池化网络），了解一下</title>
      <link href="/SSPNet/"/>
      <url>/SSPNet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-SSPNet论文出处"><a href="#1-SSPNet论文出处" class="headerlink" title="1 SSPNet论文出处"></a>1 SSPNet论文出处</h3><p>SSPNet（Spatial Pyramid Pooling Network），中文名字是空间金字塔池化网络<br>SSPNet论文出自《<a href="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pdf/Spatial_Pyramid_Pooling_in_Deep_Convolutional_Networks_for_Visual_Recognition.pdf" target="_blank" rel="noopener">Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition</a>》<br><a href="https://blog.csdn.net/tinyzhao/article/details/53717136" target="_blank" rel="noopener">一篇较好的解读SSPNet的博客</a></p><h4 id="1-1-为什么会提出SSPNet"><a href="#1-1-为什么会提出SSPNet" class="headerlink" title="1.1 为什么会提出SSPNet"></a>1.1 为什么会提出SSPNet</h4><p>SSPNet的中文名称是空间金字塔池化网络，SSPNet的提出，是为了解决R-CNN遇到的一个拼劲问题，也就是R-CNN在候选区提取时，每张图片都需要经过一次CNN，运行速度很慢。如果你有2000张图片的话，那么你需要经过2000次CNN网络，这样的计算速度是非常慢的。 在了解SSPNet之前，让我们先了解一下<a href="https://crazyjums.github.io/2019/11/18/cv-concept-you-must-know/#R-CNN的工作原理" target="_blank" rel="noopener">R-CNN的工作原理</a>，才能对其进行改进。  </p><p><strong>SSPNet完美解决上述R-CNN遗留的两个问题:</strong>   </p><blockquote><ul><li>R-CNN在生成了候选区域后，需要对每个区域进行统一尺寸的压缩或放大，当候选集的长与宽差别较大时强行压缩至比例为1:1时会使图像产生变形和丢失图像的原始特征</li><li>R-CNN生成了多个候选集后需要全部输入到CNN中，当生成了2000个候选集时，就需要对图片进行2000次单模型特征提取，这无疑是效率低下的</li></ul></blockquote><h4 id="1-2-SSPNet的解决方案"><a href="#1-2-SSPNet的解决方案" class="headerlink" title="1.2 SSPNet的解决方案"></a>1.2 SSPNet的解决方案</h4><p>针对R-CNN遗留的两个问题，SSPNet提出了如下的解决方案：   </p><blockquote><ul><li>SPPNet网络结构图如下所示，在输入时直接输入整张图像，只需要对整张图像做一次卷积操作，同时会生成整张图像的候选集特征映射(Feature Map)，这<strong>样候选集对应的特征图可以直接传递到下一层，这样一来对图像进行2000次的计算就变成了1次</strong>，大大增加了网络的效率。</li><li>SPPNet中另一关键模块就是金字塔池化层（Spatial Pyramid Pooling Layer），这一层的<strong>设计思路是通过池化操作将任意尺寸的输入都转换成固定大小输出</strong>，<strong>因为在池化层中只要池化的核结构不变，输入的维度就不会变化</strong>。Kaiming He等人正是利用了<strong>池化输出固定的原理</strong>避免了<strong>原始R-CNN模型中需要缩放图片候选集</strong>的操作   </li></ul></blockquote><p><strong>SPPNet在R-CNN拥有的区域提取、卷积层、池化层、全连接层、SVM分类器和Bounding-Box回归网络结构基础上，加入了候选集特征图映射和SPP Pooling层。将R-CNN网络的预测速度提升了数十倍，极大地优化了网络的计算法复杂度</strong><br>SSPNet的结构图如下所示：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20150105213522578.png" class="lazyload"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 目标检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于深度学习中的梯度下降，了解一下</title>
      <link href="/gradient-descent/"/>
      <url>/gradient-descent/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.jianshu.com/p/c7e642877b0e" target="_blank" rel="noopener">一篇让你很容易理解什么是梯度下降的博客</a></p><h3 id="0-什么是梯度下降"><a href="#0-什么是梯度下降" class="headerlink" title="0 什么是梯度下降"></a>0 什么是梯度下降</h3><blockquote><p>梯度下降法的基本思想可以类比为一个下山的过程。假设这样一个场景：一个人被困在山上，需要从山上下来(i.e. 找到山的最低点，也就是山谷)。但此时山上的浓雾很大，导致可视度很低。因此，下山的路径就无法确定，他必须利用自己周围的信息去找到下山的路径。这个时候，他就可以利用梯度下降算法来帮助自己下山。具体来说就是，以他当前的所处的位置为基准，寻找这个位置最陡峭的地方，然后朝着山的高度下降的地方走，同理，如果我们的目标是上山，也就是爬到山顶，那么此时应该是朝着最陡峭的方向往上走。然后每走一段距离，都反复采用同一个方法，最后就能成功的抵达山谷。<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-6ae594f795406b8b.png" class="lazyload"><br>我们同时可以假设这座山最陡峭的地方是无法通过肉眼立马观察出来的，而是需要一个复杂的工具来测量，同时，这个人此时正好拥有测量出最陡峭方向的能力。所以，此人每走一段距离，都需要一段时间来测量所在位置最陡峭的方向，这是比较耗时的。那么为了在太阳下山之前到达山底，就要尽可能的减少测量方向的次数。这是一个两难的选择，如果测量的频繁，可以保证下山的方向是绝对正确的，但又非常耗时，如果测量的过少，又有偏离轨道的风险。所以需要找到一个合适的测量方向的频率，来确保下山的方向不错误，同时又不至于耗时太多！</p></blockquote><h3 id="1-1-什么是微分"><a href="#1-1-什么是微分" class="headerlink" title="1.1 什么是微分"></a>1.1 什么是<strong>微分</strong></h3><p>微分的两种数学意义：</p><ul><li>函数图像中，某点的切线的斜率</li><li>函数的变化率<br>单变量微分的例子：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-0eb0f1bfd7de705b.png" class="lazyload"><br>多变量微分的例子：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-4029977524e3b365.png" class="lazyload"></li></ul><h3 id="1-2-什么是梯度"><a href="#1-2-什么是梯度" class="headerlink" title="1.2 什么是梯度"></a>1.2 什么是梯度</h3><blockquote><p>梯度实际上就是多变量微分的一般化。<br>看下面的例子：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-570afdfc6fabf3b6.png" class="lazyload"><br>我们可以看到，梯度就是分别对每个变量进行微分，然后用逗号分割开，梯度是用&lt;&gt;包括起来，说明梯度其实一个向量。</p></blockquote><p>梯度的意义：</p><ul><li>在单变量的函数中，梯度其实就是函数的微分，代表着函数在某个给定点的切线的斜率</li><li>在多变量函数中，梯度是一个向量，向量有方向，梯度的方向就指出了函数在给定点的上升最快的方向</li></ul><p>这也就说明了为什么我们需要千方百计的求取梯度！我们需要到达山底，就需要在每一步观测到此时最陡峭的地方，梯度就恰巧告诉了我们这个方向。梯度的方向是函数在给定点上升最快的方向，那么梯度的反方向就是函数在给定点下降最快的方向，这正是我们所需要的。所以我们只要沿着梯度的方向一直走，就能走到局部的最低点！</p><h3 id="1-3-梯度下降的数学解释"><a href="#1-3-梯度下降的数学解释" class="headerlink" title="1.3 梯度下降的数学解释"></a>1.3 梯度下降的数学解释</h3><blockquote><p>上面我们花了大量的篇幅介绍梯度下降算法的基本思想和场景假设，以及梯度的概念和思想。下面我们就开始从数学上解释梯度下降算法的计算过程和思想！<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-f20521a962005299.png" class="lazyload"><br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191119145602186.jpg" class="lazyload"><br>就想下年的的图中的解释那样：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-af8dd9722c762c13.png" class="lazyload"></p></blockquote><h3 id="1-4-对于公式中的疑问"><a href="#1-4-对于公式中的疑问" class="headerlink" title="1.4 对于公式中的疑问"></a>1.4 对于公式中的疑问</h3><p><strong>1. α是什么含义？</strong><br>α在梯度下降算法中被称作为学习率或者步长，意味着我们可以通过α来控制每一步走的距离，以保证不要步子跨的太大扯着蛋，哈哈，其实就是不要走太快，错过了最低点。同时也要保证不要走的太慢，导致太阳下山了，还没有走到山下。所以α的选择在梯度下降法中往往是很重要的！α不能太大也不能太小，太小的话，可能导致迟迟走不到最低点，太大的话，会导致错过最低点！<br>如下图所示：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-ba3da0b06da97ddb.png" class="lazyload">   </p><p><strong>2. 为什么要梯度要乘以一个负号？</strong><br>梯度前加一个负号，就意味着朝着梯度相反的方向前进！我们在前文提到，梯度的方向实际就是函数在此点上升最快的方向！而我们需要朝着下降最快的方向走，自然就是负的梯度的方向，所以此处需要加上负号</p><h3 id="1-5-梯度下降算法举例"><a href="#1-5-梯度下降算法举例" class="headerlink" title="1.5 梯度下降算法举例"></a>1.5 梯度下降算法举例</h3><ul><li><strong>单变量函数举例</strong><br>首先我们假设有一个单变量的函数，形式如下所示：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-abb73822fb6d2a2c.png" class="lazyload"><br>函数的微分形式如下所示：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-66ce0cdcef5e2686.png" class="lazyload"><br>初始化起点为：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-8ee36cc5ce832b17.png" class="lazyload"><br>学习率为：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-798b134107b6593d.png" class="lazyload"><br>梯度的计算公式如下：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-f20521a962005299.png" class="lazyload"><br>开始计算梯度下降的迭代过程：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-57538d21dbb34e65.png" class="lazyload"><br>经过4次运算之后，基本就到达了谷底，也就是收敛了，计算结果如下图所示：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-57538d21dbb34e65.png" class="lazyload"></li></ul><ul><li><strong>多变量函数举例</strong><br>下面是目标函数：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-a56cfde25c688859.png" class="lazyload">   <blockquote><p>现在要通过梯度下降法计算这个函数的最小值。我们通过观察就能发现最小值其实就是 (0，0)点。但是接下来，我们会从梯度下降算法开始一步步计算到这个最小值！</p></blockquote></li></ul><p>假设初始的起点为：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-8b1b6f1b200fd7b5.png" class="lazyload"><br>初始学习率为：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-ccc1493848871074.png" class="lazyload"><br>目标函数的梯度为：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-3d744d9364a4ba40.png" class="lazyload"><br>进行梯度下降迭代计算：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-b21bf64600c4e32f.png" class="lazyload"><br>梯度下降计算结果如下图所示：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1234352-becdcdfdefb4eab7.png" class="lazyload">   </p><blockquote><p>上述解释来自下面这篇<a href="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pdf/Gradient_Descent.pdf" target="_blank" rel="noopener">PDF</a>，大家可以下载该PDF进行查看，只不过是英文的。</p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于卷积神经网络，了解一下</title>
      <link href="/cnn/"/>
      <url>/cnn/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-卷积神经网络"><a href="#1-卷积神经网络" class="headerlink" title="1 卷积神经网络"></a>1 <a href="https://baike.baidu.com/item/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/17541100?fr=aladdin" target="_blank" rel="noopener">卷积神经网络</a></h3><blockquote><p><a href="https://blog.csdn.net/weixin_42451919/article/details/81381294" target="_blank" rel="noopener">一篇很好的关于理解卷积神经网络的博客</a>（博客中的<strong>filter助手</strong>表示的是<strong>卷积核</strong>的意思）<br><a href="https://blog.csdn.net/u013093426/article/details/81086396" target="_blank" rel="noopener">一篇关于如何搭建CNN的博客</a><br><a href="https://www.zhihu.com/question/39022858/answer/224446917" target="_blank" rel="noopener">知乎回答：能否对卷积神经网络工作原理做一个直观的解释？</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&mid=2650728746&idx=1&sn=61e9cb824501ec7c505eb464e8317915&scene=0#wechat_redirect" target="_blank" rel="noopener">机器视角：长文揭秘图像处理和卷积神经网络架构</a>|<a href="https://www.analyticsvidhya.com/blog/2017/06/architecture-of-convolutional-neural-networks-simplified-demystified/" target="_blank" rel="noopener"><strong>该文原文</strong></a><br>定义：卷积神经网络（Convolutional Neural Network，CNN）是一种前馈神经网络，它的人工神经元可以响应一部分覆盖范围内的周围单元，对于大型图像处理有出色表现。 它包括卷积层(convolutional layer)和池化层(pooling layer)    </p></blockquote><h3 id="1-1-卷积神经网络的结构："><a href="#1-1-卷积神经网络的结构：" class="headerlink" title="1.1 卷积神经网络的结构："></a>1.1 <strong>卷积神经网络的结构：</strong></h3><p><strong>卷积神经网络的结构包括：</strong>   </p><ul><li>输入层（input，输入一张全尺寸的黑白或彩色图像）</li><li>卷积层（filter，对ROI(region of interest)进行特征提取，一个CNN可以有很多的卷积核也可以有很多的卷积层）</li><li>池化层（pooling，可选，目的是减少上层的输入参数）</li><li>输出层（也叫全连接层FC，该层可以用来对图像进行分类和识别操作）</li></ul><p><strong>下面这张图是CNN的结构图：</strong>   </p><blockquote><p><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/48540923dd54564e223d3494bdde9c82d0584fc7.jpg" class="lazyload">   </p></blockquote><p><strong>人工神经网络和卷积神经网络的对比：</strong>   </p><blockquote><p><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFreggeAJhflAACFamG9M3o011.png" class="lazyload"><br>左图：全连接神经网络（平面），组成：输入层、激活函数、全连接层<br>右图：卷积神经网络（立体），组成：输入层、卷积层、激活函数、池化层、全连接层<br><strong>在卷积神经网络中有一个重要的概念：深度，它是指一幅图像的通道数量，如：RGB图像的深度是3，灰度图像的深度是1等</strong><br><strong>在卷积神经网络中，有一个非常重要的特性：权值共享：</strong>  所谓的权值共享就是说，给一张输入图片，用一个filter去扫这张图，filter里面的数就叫权重，这张图每个位置是被同样的filter扫的，所以权重是一样的，也就是共享。</p></blockquote><p><strong>注意：特征提取之后，一般使用几个filter助手（卷积核）就会得到几个深度为1的feature map</strong></p><blockquote><p><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFreggiAC8-aAACAg54bzYo475.png" class="lazyload"><br>卷积不仅限于对原始输入的卷积。蓝色方块是在原始输入上进行卷积操作，使用了6个filter得到了6个提取特征图。绿色方块还能对蓝色方块进行卷积操作，使用了10个filter得到了10个特征图。每一个filter的深度必须与上一层输入的深度相等。</p></blockquote><p><strong>更加直观理解卷积：</strong>   </p><blockquote><p><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFreggiATHJ7AAEstloH4_M280.png" class="lazyload"><br>以上图为例：<br>第一次卷积可以提取出低层次的特征。<br>第二次卷积可以提取出中层次的特征。<br>第三次卷积可以提取出高层次的特征。<br>特征是不断进行提取和压缩的，最终能得到比较高层次特征，简言之就是对原式特征一步又一步的浓缩，最终得到的特征更可靠。利用最后一层特征可以做各种任务：比如分类、回归等。</p></blockquote><h3 id="1-2-卷积的计算流程："><a href="#1-2-卷积的计算流程：" class="headerlink" title="1.2 卷积的计算流程："></a>1.2 <strong>卷积的计算流程：</strong></h3><blockquote><p><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFreggiAVJYtAAEv0s5MlhM898.png" class="lazyload"><br>左区域的三个大矩阵是原式图像的输入，RGB三个通道用三个矩阵表示，大小为7x7x3。<br>Filter W0表示1个filter助手，尺寸为3*3，深度为3（三个矩阵）；Filter W1也表示1个filter助手。因为卷积中我们用了2个filter，因此该卷积层结果的输出深度为2（绿色矩阵有2个）。<br>Bias b0是Filter W0的偏置项，Bias b1是Filter W1的偏置项。<br>OutPut是卷积后的输出，尺寸为3x3，深度为2。</p></blockquote><p><strong>计算过程：</strong></p><blockquote><p>输入是固定的，filter是指定的，因此计算就是如何得到绿色矩阵。<br>第一步，在输入矩阵上有一个和filter相同尺寸的滑窗，然后输入矩阵的在滑窗里的部分与filter矩阵对应位置相乘：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191118163546.png" class="lazyload"><br>第二步，将3个矩阵产生的结果求和，并加上偏置项，即0+2+0+1=3，因此就得到了输出矩阵的左上角的3：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFreggqAMAUIAAAur4t_qLQ857.png" class="lazyload"><br>第三步，让每一个filter都执行这样的操作，便可得到第一个元素：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFreggqAbb1DAABnl3M4AWY167.png" class="lazyload"><br>第四步，滑动窗口2个步长，重复之前步骤进行计算<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFreggqAUl7yAACokZwIXaM214.png" class="lazyload"><br>第五步，最终可以得到，在2个filter下，卷积后生成的深度为2的输出结果：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFreggqAPt54AAAfaKfUS8U979.png" class="lazyload"></p></blockquote><p><strong>思考：</strong></p><blockquote><ul><li>为什么每次滑动是2个格子？   </li></ul><p><em>滑动的步长叫stride记为S。S越小，提取的特征越多，但是S一般不取1，主要考虑时间效率的问题。S也不能太大，否则会漏掉图像上的信息。</em></p><ul><li>由于filter的边长大于S，会造成每次移动滑窗后有交集部分，交集部分意味着多次提取特征，尤其表现在图像的中间区域提取次数较多，边缘部分提取次数较少，怎么办？    </li></ul><p><em>一般方法是在图像外围加一圈0，细心的同学可能已经注意到了，在演示案例中已经加上这一圈0了，即+pad 1。 +pad n表示加n圈0.</em></p><ul><li>一次卷积后的输出特征图的尺寸是多少呢？<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFregguAJvoGAAATqFaF_Pk601.png" class="lazyload"><br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFreggyAVvcCAACg_W9CZgQ877.png" class="lazyload"><br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFreggyAWtpLAADAYQTV2bk952.png" class="lazyload"></li></ul></blockquote><p>==<strong>注意：在一层卷积操作里可以有多个filter，他们是尺寸必须相同。</strong>==</p><h3 id="1-3-卷积神经网络的组成："><a href="#1-3-卷积神经网络的组成：" class="headerlink" title="1.3 卷积神经网络的组成："></a>1.3 <strong>卷积神经网络的组成：</strong></h3><blockquote><p><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFreggyAFTuVAAEZZ59r0Cs173.png" class="lazyload"><br>卷积——激活——卷积——激活——池化——……——池化——全连接——分类或回归</p></blockquote><h3 id="1-4-前向传播与反向传播"><a href="#1-4-前向传播与反向传播" class="headerlink" title="1.4 前向传播与反向传播"></a>1.4 <strong>前向传播与反向传播</strong></h3><h4 id="1-4-1-前向传播"><a href="#1-4-1-前向传播" class="headerlink" title="1.4.1 前向传播"></a>1.4.1 前向传播</h4><blockquote><p><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFregg2ATy5SAAEQUsv9WF8019.png" class="lazyload">   </p></blockquote><h4 id="1-4-2-反向传播"><a href="#1-4-2-反向传播" class="headerlink" title="1.4.2 反向传播"></a>1.4.2 反向传播</h4><h4 id="1-4-3-训练一个CGGNet需要的内存开销"><a href="#1-4-3-训练一个CGGNet需要的内存开销" class="headerlink" title="1.4.3 训练一个CGGNet需要的内存开销"></a>1.4.3 训练一个CGGNet需要的内存开销</h4><blockquote><p><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFregg-AEan1AAMj4rvJat4359.png" class="lazyload"></p></blockquote><h3 id="1-2-残差网络-Residual-Network"><a href="#1-2-残差网络-Residual-Network" class="headerlink" title="1.2 残差网络(Residual Network)"></a>1.2 <a id="残差网络"><a href="https://baike.baidu.com/item/%E6%AE%8B%E5%B7%AE%E7%BD%91%E7%BB%9C/22701838?fr=aladdin" target="_blank" rel="noopener">残差网络</a></a>(Residual Network)</h3><p>论文出处：<a href="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article//pdf/Deep_Residual_Learning_for_Image_Recognition.pdf" target="_blank" rel="noopener">Deep Residual Learning for Image Recognition.pdf</a></p><blockquote><p>残差网络是由来自Microsoft Research的4位学者提出的卷积神经网络，在2015年的ImageNet大规模视觉识别竞赛（ImageNet Large Scale Visual Recognition Challenge, ILSVRC）中获得了图像分类和物体识别的优胜。 残差网络的特点是容易优化，并且能够通过增加相当的深度来提高准确率。其内部的残差块使用了跳跃连接，缓解了在深度神经网络中增加深度带来的梯度消失问题</p></blockquote><blockquote><p>我们都知道增加网络的宽度和深度可以很好的提高网络的性能，深的网络一般都比浅的的网络效果好，比如说一个深的网络A和一个浅的网络B，那A的性能至少都能跟B一样，为什么呢？因为就算我们把B的网络参数全部迁移到A的前面几层，而A后面的层只是做一个等价的映射，就达到了B网络的一样的效果。一个比较好的例子就是VGG，该网络就是在AlexNex的基础上通过增加网络深度大幅度提高了网络性能。<br>对于原来的网络，如果简单地增加深度，会导致<a href="#梯度消失">梯度弥散</a>或<a href="#梯度爆炸">梯度爆炸</a>。对于该问题的解决方法是正则化初始化和中间的正则化层（Batch Normalization），这样的话可以训练几十层的网络。<br>虽然通过上述方法能够训练了，但是又会出现另一个问题，就是退化问题，网络层数增加，但是在训练集上的准确率却饱和甚至下降了。这个不能解释为overfitting，因为overfit应该表现为在训练集上表现更好才对。退化问题说明了深度网络不能很简单地被很好地优化。作者通过实验：通过浅层网络等同映射构造深层模型，结果深层模型并没有比浅层网络有等同或更低的错误率，推断退化问题可能是因为深层的网络并不是那么好训练，也就是求解器很难去利用多层网络拟合同等函数。</p></blockquote><h3 id="1-3-梯度消失"><a href="#1-3-梯度消失" class="headerlink" title="1.3 梯度消失"></a>1.3 <a id="梯度消失">梯度消失</a></h3><p><strong>概念</strong><br>在神经网络中，当前面隐藏层的学习速率低于后面隐藏层的学习速率，即随着隐藏层数目的增加，分类准确率反而下降了。这种现象叫做消失的梯度问题<br><strong>梯度消失产生的原因</strong>   </p><blockquote><p><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191119094513.png" class="lazyload"></p></blockquote><h3 id="1-4-梯度爆炸"><a href="#1-4-梯度爆炸" class="headerlink" title="1.4 梯度爆炸"></a>1.4 <a id="梯度爆炸">梯度爆炸</a></h3><p>梯度爆炸是梯度消失（梯度弥散）的对立面</p><h3 id="1-5-梯度消失和梯度爆炸的解决方案"><a href="#1-5-梯度消失和梯度爆炸的解决方案" class="headerlink" title="1.5 梯度消失和梯度爆炸的解决方案"></a>1.5 梯度消失和梯度爆炸的解决方案</h3><blockquote><p><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/39a9707f892b4d39811a2d3ad0c67ff2.jpg" class="lazyload"><br>举个例子，对于一个含有三层隐藏层的简单神经网络来说，当梯度消失发生时，接近于输出层的隐藏层由于其梯度相对正常，所以权值更新时也就相对正常，但是当越靠近输入层时，由于梯度消失现象，会导致靠近输入层的隐藏层权值更新缓慢或者更新停滞。这就导致在训练时，只等价于后面几层的浅层网络的学习。</p></blockquote><p>==<strong>梯度消失和梯度爆炸本质上是一样的，都是因为网络层数太深而引发的梯度反向传播中的连乘效应。</strong>==<br><strong>解决方案：</strong></p><ul><li>换用<a href="#ReLU函数">Relu</a>、<a href="#LeakyReLU函数">LeakyRelu</a>、<a href="#ELU函数">Elu</a>等激活函数</li><li><a href="#残差网络">ResNet残差结构</a></li><li>BatchNormalization BN本质上是解决传播过程中的梯度问题</li><li>LSTM结构 LSTM不太容易发生梯度消失，主要原因在于LSTM内部复杂的“门（gates）”，具体看LSTM基本原理解析</li><li>预训练加finetunning 此方法来自Hinton在06年发表的论文上，其基本思想是每次训练一层隐藏层节点，将上一层隐藏层的输出作为输入，而本层的输出作为下一层的输入，这就是逐层预训练。 训练完成后，再对整个网络进行“微调（fine-tunning）”。 此方法相当于是找全局最优，然后整合起来寻找全局最优，但是现在基本都是直接拿imagenet的预训练模型直接进行finetunning。</li><li>梯度剪切、正则<br>这个方案主要是针对梯度爆炸提出的，其思想是设值一个剪切阈值，如果更新梯度时，梯度超过了这个阈值，那么就将其强制限制在这个范围之内。这样可以防止<a href="#梯度爆炸">梯度爆炸</a>。<br>另一种防止梯度爆炸的手段是采用权重正则化，正则化主要是通过对网络权重做正则来限制过拟合，但是根据正则项在损失函数中的形式可以看出，如果发生梯度爆炸，那么权值的范数就会变的非常大，反过来，通过限制正则化项的大小，也可以在一定程度上限制梯度爆炸的发生。</li></ul><hr><h3 id="2-卷积神经网络的实现"><a href="#2-卷积神经网络的实现" class="headerlink" title="2 卷积神经网络的实现"></a>2 卷积神经网络的实现</h3><p>下面B站上的一个视频：  </p><iframe src="//player.bilibili.com/player.html?aid=24673328&cid=41481052&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="700" height="480"> </iframe>       <p>视频2：   </p><iframe src="//player.bilibili.com/player.html?aid=39049499&cid=68618808&page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="700" height="480"> </iframe><p>可以参考一下该博客：<a href="https://www.cnblogs.com/further-further-further/p/10430073.html" target="_blank" rel="noopener">卷积神经网络(CNN)详解与代码实现</a></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法中锚点的使用方法</title>
      <link href="/archor-for-markdown/"/>
      <url>/archor-for-markdown/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[<span class="string">测试</span>](<span class="link">#测试</span>)</span><br><span class="line"><span class="section">### &lt;a id="测试"&gt;测试&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><ul><li><a href="#测试">测试</a><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a><a id="测试">测试</a></h3></li></ul><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习计算机视觉，你必须了解的基础概念</title>
      <link href="/cv-concept-you-must-know/"/>
      <url>/cv-concept-you-must-know/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-图像的高频和低频成分"><a href="#1-图像的高频和低频成分" class="headerlink" title="1 图像的高频和低频成分"></a>1 图像的高频和低频成分</h4><blockquote><p>形象一点说：亮度或灰度变化激烈的地方对应高频成分，如边缘；变化不大的地方对于低频成分，如大片色块区画个直方图，大块区域是低频，小块或离散的是高频把图像看成二维函数，变化剧烈的地方就对应高频，反之低频。<br>举个通俗易懂的例子：<br>一幅图象，你戴上眼镜，盯紧了一个地方看到的是高频分量<br>摘掉眼镜，眯起眼睛，模模糊糊看到的就是低频分量。<br>图像的高低频是对图像各个位置之间强度变化的一种度量方法.<br>低频分量:主要对整副图像的强度的综合度量.<br>高频分量:主要是对图像边缘和轮廓的度量.<br>如果一副图像的各个位置的强度大小相等,则图像只存在低频分量,从图像的频谱图上看,只有一个主峰,且位于频率为零的位置.<br>如果一副图像的各个位置的强度变化剧烈,则图像不仅存在低频分量,同时也存在多种高频分量,从图像的频谱上看,不仅有一个主峰,同时也存在多个旁峰.<br>以上的现象可以通过对傅里叶变换的公式分析得出.<br>以下所说的积分是对x进行的.<br>exp(-jwx)的数值变化是均匀的,如果对exp(-jwx)进行积分,则积分值为零.如果对exp(-jwx)乘以一个加权函数f(x),则在对f(x)exp(-jwx)进行积分,积分值不一定为零.如果exp(-jwx)的取值为1时,则对f(x)exp(-jwx)积分,既为对f(x)积分,此时f(x)exp(-jwx)最大,既频谱中的主峰.如果f(x) 是常数则, 除w=0处f(x)exp(-jwx)的积分不为零外,在w不为零的其它处,f(x)exp(-jwx)的积分都为零.</p></blockquote><hr><h4 id="2-低通滤波"><a href="#2-低通滤波" class="headerlink" title="2 低通滤波"></a>2 <a href="https://baike.baidu.com/item/%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2/3506429?fr=aladdin" target="_blank" rel="noopener">低通滤波</a></h4><blockquote><p>低通滤波(Low-pass filter) 是一种过滤方式，规则为低频信号能正常通过，而超过设定临界值的高频信号则被阻隔、减弱。但是阻隔、减弱的幅度则会依据不同的频率以及不同的滤波程序（目的）而改变。它有的时候也被叫做高频去除过滤（high-cut filter）或者最高去除过滤（treble-cut filter)。低通过滤是高通过滤的对立。</p></blockquote><hr><h4 id="3-bounding-box"><a href="#3-bounding-box" class="headerlink" title="3 bounding-box"></a>3 <a href="https://blog.csdn.net/love1055259415/article/details/80041936" target="_blank" rel="noopener">bounding-box</a></h4><blockquote><p>如图所示，绿色的框为飞机的Ground Truth，红色的框是提取的Region Proposal。那么即便红色的框被分类器识别为飞机，但是由于红色的框定位不准(IoU&lt;0.5)，那么这张图相当于没有正确的检测出飞机。如果我们能对红色的框进行微调，使得经过微调后的窗口跟Ground Truth更接近，这样岂不是定位会更准确。确实，Bounding-box regression 就是用来微调这个窗口的。<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20161020131820060.png" class="lazyload"></p></blockquote><hr><h4 id="4-R-CNN"><a href="#4-R-CNN" class="headerlink" title="4 R-CNN"></a>4 <a href="https://blog.csdn.net/ture_dream/article/details/52896452" target="_blank" rel="noopener">R-CNN</a></h4><p>R-CNN的论文原文是《<a href="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pdf/Rich_feature_hierarchies_for_accurate_object_detection_and_semantic_segmentation.pdf" target="_blank" rel="noopener">Rich feature hierarchies for accurate object detection and semantic segmentation</a>》全是英文，有兴趣的可以读一读<br>R-CNN是计算机视觉中目标检测算法的鼻祖，很多的目标检测算法都是基于R-CNN的改进，这里有一篇<a href="https://blog.csdn.net/ture_dream/article/details/52896452" target="_blank" rel="noopener">很好的博客</a>，介绍了R-CNN,Fast R-CNN,Faster R-CNN的一个工作原理<br><a href="https://space.bilibili.com/209599371?from=search&seid=7888318736309109130" target="_blank" rel="noopener">B站目标检测大牛</a><br><strong>关于R-CNN的一个入门视频</strong></p><iframe src="//player.bilibili.com/player.html?aid=24795835&cid=41764245&page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="720" height="480"> </iframe><p><a id="R-CNN的工作原理"><strong>R-CNN的工作原理：</strong></a>   </p><blockquote><p>R-CNN利用<strong>网络</strong>将特征提取和特征分类合并到一起，大大提升了特征的提取效率。但是无论是<em>传统方式</em>还是R-CNN，<strong>目标检测和目标识别的最大区别就是需要提取候选区域</strong>（region proposals） R-CNN采用<strong>选择性搜索（selective search）</strong>算法，又称区域合并算法，selective search会将对图片暴力生成多个候选区域   </p></blockquote><p>R-CNN算法的计算过程：   </p><blockquote><ul><li>首先输入图像会被分为R个初始候选集，</li><li>然后通过贪心策略去计算相邻候选集之前的相似度，通过相似度的大小去合并候选集，直到产生目标个数的候选集,</li><li>候选集的相似度计算有多种方式，有颜色、纹理、而枳和吻合相似度计算。</li><li><strong>最后生成的L个Region Proposal与CNN相结合，这就是R-CNN名字的由来</strong>,    </li></ul></blockquote><p><em>R-CNN作者证明了在当前任务下SVM的分类效果要比神经网络分类器好。最后每个SNM分类器都会得到图像对于该类别的得分和置信度，置信度最高的类别为改图像区域对应的预测类别</em></p><p><a id="总结一下R-CNN存在的两个问题"><strong>总结一下R-CNN存在的两个问题：</strong></a></p><ul><li>R-CNN在生成了候选区域后，需要对每个区域进行统一尺寸的压缩或放大，当候选集的长与宽差别较大时强行压缩至比例为1:1时会使图像产生变形和丢失图像的原始特征</li><li>R-CNN生成了多个候选集后需要全部输入到CNN中，当生成了2000个候选集时，就需要对图片进行2000次单模型特征提取，这无疑是效率低下的</li></ul><p>针对上述的两个问题，Kaiming He等人提出了SSPNet（空间金字塔池化网络）来解决。<a href="https://crazyjums.github.io/2019/11/21/SSPNet/" target="_blank" rel="noopener">详细了解什么是SSPNet</a></p><hr><h4 id="5-IoU"><a href="#5-IoU" class="headerlink" title="5 IoU"></a>5 <a href="https://blog.csdn.net/u014061630/article/details/82818112" target="_blank" rel="noopener">IoU</a></h4><blockquote><p>IoU 的全称为交并比（Intersection over Union），通过这个名称我们大概可以猜到 IoU 的计算方法。IoU 计算的是 “预测的边框” 和 “真实的边框” 的交集和并集的比值。<br><img alt="IoU计算公式" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20180922220708895.png" class="lazyload"></p></blockquote><hr><h4 id="6-卷积"><a href="#6-卷积" class="headerlink" title="6 卷积"></a>6 卷积</h4><p>卷积在图像识别中的概念是提取一幅图像的特征，通常对一幅图像进行卷积会有一个卷积核，该卷积核是一个正方形矩阵。一般是奇数矩阵，这样做的目的是为了卷积核总是有一个中心。大部分情况使用的3x3或者5x5等</p><p><a href="https://crazyjums.github.io/2019/11/21/cnn/" target="_blank" rel="noopener">详细了解什么是卷积神经网络</a></p><hr><h4 id="7-池化-下采样（pooling）"><a href="#7-池化-下采样（pooling）" class="headerlink" title="7 池化/下采样（pooling）"></a>7 池化/下采样（pooling）</h4><p>上面介绍了卷积操作，卷积的目的是提取一幅图像的特征，也就是边缘部分。但是一幅图像往往很大，有的甚至几百万的像素，每一个像素对应一个参数，那就意味着会有几百万个参数，这对于计算机的内存处理来讲是一个很大的问题。那么为了减少参数，提升计算机的运行效率，这里提出一个pooling的概念，也就是较少一部分对图像影响较小的参数，从而使得计算机的运行效率能够提升。池化操作一般在卷积之后。  </p><blockquote><p><img alt="池化操作" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/pIYBAFreggyACO9FAABorvOb-GE402.png" class="lazyload"><br>如上图所示，池化就是对特征图进行特征压缩，池化也叫做下采样。选择原来某个区域的max或mean代替那个区域，整体就浓缩了</p></blockquote><p>pooling有很多种，这里<a href="https://blog.csdn.net/danieljianfeng/article/details/42433475" target="_blank" rel="noopener">介绍几种</a>：   </p><ul><li>一般池化（general pooling）</li><li>重叠池化（OverlappingPooling）</li><li>空金字塔池化（Spatial Pyramid Pooling）<br>还有一些池化，这篇<a href="https://blog.csdn.net/nwu_NBL/article/details/80901427" target="_blank" rel="noopener">博客</a>有介绍</li></ul><p><strong>pooling layer视频介绍</strong></p><iframe src="//player.bilibili.com/player.html?aid=16022575&cid=26141211&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="720" height="480"> </iframe><h5 id="7-1-General-pooling"><a href="#7-1-General-pooling" class="headerlink" title="7.1 General pooling"></a>7.1 General pooling</h5><blockquote><p>池化作用于图像中不重合的区域（这与卷积操作不同），过程如下图<br><img alt="一般池化" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/Pooling_schematic.gif" class="lazyload"><br>我们定义池化窗口的大小为sizeX，即下图中红色正方形的边长，定义两个相邻池化窗口的水平位移/竖直位移为stride。一般池化由于每一池化窗口都是不重复的，所以sizeX=stride。<br><img alt="步长等于尺寸" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20150105213214237.png" class="lazyload">   </p></blockquote><blockquote><p>最常见的池化操作为平均池化mean pooling和最大池化max pooling：   </p><ul><li>平均池化：计算图像区域的平均值作为该区域池化后的值。   </li><li>最大池化：选图像区域的最大值作为该区域池化后的值。</li></ul></blockquote><h5 id="7-2-Overlapping-pooling"><a href="#7-2-Overlapping-pooling" class="headerlink" title="7.2 Overlapping pooling"></a>7.2 Overlapping pooling</h5><blockquote><p>重叠池化正如其名字所说的，相邻池化窗口之间会有重叠区域，此时sizeX&gt;stride</p></blockquote><h5 id="7-3-Spatial-Pyramid-Pooling"><a href="#7-3-Spatial-Pyramid-Pooling" class="headerlink" title="7.3 Spatial Pyramid Pooling"></a>7.3 Spatial Pyramid Pooling</h5><blockquote><p>空间金字塔池化可以把任何尺度的图像的卷积特征转化成相同维度，这不仅可以让CNN处理任意尺度的图像，还能避免cropping和warping操作，导致一些信息的丢失，具有非常重要的意义</p></blockquote><blockquote><p>一般的CNN都需要输入图像的大小是固定的，这是因为全连接层的输入需要固定输入维度，但在卷积操作是没有对图像尺度有限制，所有作者提出了空间金字塔池化，先让图像进行卷积操作，然后转化成维度相同的特征输入到全连接层，这个可以把CNN扩展到任意大小的图像。<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20150105213450046.png" class="lazyload"><br>空间金字塔池化的思想来自于Spatial Pyramid Model，它一个pooling变成了多个scale的pooling。用不同大小池化窗口作用于卷积特征，我们可以得到1X1,2X2,4X4的池化结果，由于conv5中共有256个过滤器，所以得到1个256维的特征，4个256个特征，以及16个256维的特征，然后把这21个256维特征链接起来输入全连接层，通过这种方式把不同大小的图像转化成相同维度的特征。<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20150105213522578.png" class="lazyload">   </p></blockquote><h5 id="7-4-Rol-pooling"><a href="#7-4-Rol-pooling" class="headerlink" title="7.4 Rol pooling"></a>7.4 <a href="https://blog.csdn.net/auto1993/article/details/78514071" target="_blank" rel="noopener">Rol pooling</a></h5><p>Rol(Region of Interest)是图像中我们感兴趣的区域的意思，也可以理解为region proposal（候选区域）。<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191118150551.png" class="lazyload"><br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191118150631.png" class="lazyload"><br>ROI pooling总结：<br>（1）用于目标检测任务；<br>（2）允许我们对CNN中的feature map进行reuse；<br>（3）可以显著加速training和testing速度；<br>（4）允许end-to-end的形式训练目标检测系统。   </p><hr><h4 id="8-RPN（Region-Proposal-Network）"><a href="#8-RPN（Region-Proposal-Network）" class="headerlink" title="8 RPN（Region Proposal Network）"></a>8 <a href="https://blog.csdn.net/ture_dream/article/details/52896452" target="_blank" rel="noopener">RPN</a>（Region Proposal Network）</h4><blockquote><p>目前最先进的目标检测网络需要先用区域建议(region proposal)算法推测目标位置，像SPPnet[7]和Fast R-CNN[5]这些网络已经减少了检测网络的运行时间，这时计算区域建议(region proposal)就成了瓶颈问题。本文中，我们介绍一种区域建议网络（Region Proposal Network, RPN），<strong>它和检测网络共享全图的卷积特征(共享卷积核)</strong>，使得区域建议几乎不花时间。<strong>RPN是一个全卷积网络</strong>，在每个位置同时预测目标边界和objectness得分。RPN是端到端训练的，生成高质量区域建议框，用于Fast R-CNN来检测。通过一种简单的交替运行优化方法，RPN和Fast R-CNN可以在训练时共享卷积特征。对于非常深的VGG-16模型[19]，我们的检测系统在GPU上的帧率为5fps（包含所有步骤），在PASCAL VOC 2007和PASCAL VOC 2012上实现了最高的目标检测准确率（2007是73.2%mAP，2012是70.4%mAP），每个图像用了300个建议框。<a href="https://github.com/ShaoqingRen/faster_rcnn" target="_blank" rel="noopener">代码</a>已公开</p></blockquote><hr><h4 id="9-梯度下降"><a href="#9-梯度下降" class="headerlink" title="9 梯度下降"></a>9 <a id="梯度下降"><a href="https://www.jianshu.com/p/c7e642877b0e" target="_blank" rel="noopener">梯度下降</a></a></h4><blockquote><p>百度百科解释：梯度下降是迭代法的一种,可以用于求解最小二乘问题(线性和非线性都可以)。在求解机器学习算法的模型参数，即无约束优化问题时，梯度下降（Gradient Descent）是最常采用的方法之一，另一种常用的方法是最小二乘法。在求解损失函数的最小值时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数和模型参数值。反过来，如果我们需要求解损失函数的最大值，这时就需要用梯度上升法来迭代了。在机器学习中，基于基本的梯度下降法发展了两种梯度下降方法，分别为随机梯度下降法和批量梯度下降法</p></blockquote><p><a href="https://crazyjums.github.io/2019/11/21/gradient-descent" target="_blank" rel="noopener">详细了解什么是梯度下降</a></p><hr><h4 id="10-损失函数"><a href="#10-损失函数" class="headerlink" title="10 损失函数"></a>10 <a href="https://blog.csdn.net/qq_24753293/article/details/78788844" target="_blank" rel="noopener">损失函数</a></h4><blockquote><p>损失函数（loss function）或代价函数（cost function）是将随机事件或其有关随机变量的取值映射为非负实数以表示该随机事件的“风险”或“损失”的函数。在应用中，损失函数通常作为学习准则与优化问题相联系，即通过最小化损失函数求解和评估模型。</p></blockquote><p><strong>损失函数的作用：衡量模型模型预测的好坏</strong></p><blockquote><p>比如你做一个线性回归，实际值和你的 预测值肯定会有误差，那么我们找到一个函数表达这个误差就是损失函数  </p></blockquote><p>损失函数与鲁棒性的关系：   </p><blockquote><p>损失函数（loss function）是用来估量你模型的预测值f(x)与真实值Y的不一致程度，它是一个非负实值函数,通常使用L(Y, f(x))来表示，损失函数越小，模型的鲁棒性就越好。</p></blockquote><p>常用的损失函数：<br>(1) 0-1损失函数(0-1 lossfunction):<br>L(Y,f(X))={1,0,Y≠f(X)Y=f(X)<br>(2)平方损失函数(quadraticloss function)<br>L(Y,f(X))=(Y−f(X))2<br>(3)绝对损失函数(absoluteloss function)<br>L(Y,f(X))=|Y−f(X)|<br>(4)对数损失函数(logarithmicloss function)或对数似然损失函数(log-likelihood loss function)<br>L(Y,P(Y|X))=−logP(Y|X)</p><hr><h4 id="11-激活函数"><a href="#11-激活函数" class="headerlink" title="11 激活函数"></a>11 <a href="https://baike.baidu.com/item/激活函数/2520792?fr=aladdin" target="_blank" rel="noopener">激活函数</a></h4><blockquote><p>实际上．激活函数也是在模拟神经元的特点。人体的祌经元不是接收到输入就会全部输出的，是当输入达到一定的阈值后，线性或非线性的将输入转化成输出，这也就是激活函数的原理,在人工神经网络中，<a href="https://blog.csdn.net/edogawachia/article/details/80043673" target="_blank" rel="noopener">激活函数</a>就在神经元的连接形式中，以非线性的映射关系而存在，是神经网络能表达复杂非线性关系的关键所在。</p></blockquote><h5 id="11-1-sigmoid函数"><a href="#11-1-sigmoid函数" class="headerlink" title="11.1 sigmoid函数"></a>11.1 <a href="https://www.jianshu.com/p/506595ec4b58" target="_blank" rel="noopener">sigmoid函数</a></h5><blockquote><p>Sigmoid函数是一个在生物学中常见的S型函数，也称为S型生长曲线。 在信息科学中，由于其单增以及反函数单增等性质，Sigmoid函数常被用作神经网络的激活函数，将变量映射到0,1之间<br>sigmoid公式如下：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/o_191114110431111.png" class="lazyload"><br>sigmoid函数图像如下：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/c9fcc3cec3fdfc03f23fbf16d73f8794a5c226dc.jpg" class="lazyload"></p></blockquote><p><strong>sigmoid函数的缺点：</strong>   </p><ul><li>计算量很大</li><li>会带来梯度（函数图像中某一点的斜率，即导数）消失的问题</li><li>输入的范围基本在[-6,6]之间，当输入的数的绝对值大于6时，效果和6差不多</li></ul><p>sigmoid函数的Python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span>/(<span class="number">1</span>+np.exp(-x))</span><br><span class="line"> </span><br><span class="line">sigmoid_inputs = np.arange(<span class="number">-10</span>,<span class="number">10</span>,<span class="number">0.1</span>)</span><br><span class="line">sigmoid_outputs = sigmoid(sigmoid_inputs)</span><br><span class="line">print(<span class="string">"Sigmoid Function Input :: &#123;&#125;"</span>.format(sigmoid_inputs))</span><br><span class="line">print(<span class="string">"Sigmoid Function Output :: &#123;&#125;"</span>.format(sigmoid_outputs))</span><br><span class="line"> </span><br><span class="line">plt.plot(sigmoid_inputs,sigmoid_outputs)</span><br><span class="line">plt.xlabel(<span class="string">"Sigmoid Inputs"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Sigmoid Outputs"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h5 id="11-2-ReLU函数"><a href="#11-2-ReLU函数" class="headerlink" title="11.2 ReLU函数"></a>11.2 <a id="ReLU函数"><a href="https://www.cnblogs.com/adong7639/p/9213038.html" target="_blank" rel="noopener">ReLU函数</a></a></h5><blockquote><p>ReLU函数：为了避免sigmoid函数梯度趋于０产生的梯度饱和问题，线性整流函数（Rectified Linear Unit, ReLU),被提出并在卷积神经网络中取得了不错的效果。<br>当输入取值小于0时ReLU不会被激活，特别是在后向传播计算中梯度很容易变为0，这是ReLU函数本身存在的硬饱和，又会带来梯度消失的问题。而且ReLU函数的输出值是不存在负数的，这代表了ReLU也不是以0为均值的函数<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/d788d43f8794a4c25b5e4dd902f41bd5ac6e39c6.jpg" class="lazyload"><br>CNN中常用。对正数原样输出，负数直接置零。在正数不饱和，在负数硬饱和。<strong>ReLU计算上比sigmoid或者tanh更省计算量</strong>，因为不用exp，因而收敛较快。但是还是非zero-centered。<br>ReLU在负数区域被kill的现象叫做dead ReLU，这样的情况下，有人通过初始化的时候用一个稍微大于零的数比如0.01来初始化神经元，从而使得ReLU更偏向于激活而不是死掉，但是这个方法是否有效有争议。</p></blockquote><p><strong>ReLU的好处：</strong>   </p><ul><li>计算量很小，吗，速度很快   </li><li>图像本身就没有负的像素值   </li><li>解决了梯度消失的问题    </li></ul><h5 id="11-3-LeakyReLU函数"><a href="#11-3-LeakyReLU函数" class="headerlink" title="11.3 LeakyReLU函数"></a>11.3 <a id="LeakyReLU函数">LeakyReLU函数</a></h5><blockquote><p>为了解决上述的dead ReLU现象。这里选择一个数，让负数区域不在饱和死掉。这里的斜率都是确定的。<img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/dfbsdfgsdfg.png" class="lazyload"></p></blockquote><h5 id="11-4-PReLU函数"><a href="#11-4-PReLU函数" class="headerlink" title="11.4 PReLU函数"></a>11.4 <a id="PReLU函数">PReLU函数</a></h5><blockquote><p>PReLU(Parametric Rectified Linear Unit)顾名思义：带参数的ReLU,<a href="https://blog.csdn.net/shuzfan/article/details/51345832#prelu%E6%BF%80%E6%B4%BB" target="_blank" rel="noopener">PReLU函数</a>是为了解决ReLU的硬饱和问题产生的激活函数，在LeakyReLU函数中，斜率是固定的，这里的PRelu函数的斜率a是不固定的一个值，这个值可以在运算过程中不算学习改变原来的值。<strong>计算量不是很大，因为不用计算exp</strong><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20160508143448263.png" class="lazyload"></p></blockquote><h5 id="11-5-ELU函数"><a href="#11-5-ELU函数" class="headerlink" title="11.5 ELU函数"></a>11.5 <a id="ELU函数">ELU函数</a></h5><blockquote><p>ELU函数是Sigmoid函数和ReLU函数的结合体，它的提出主要是为了解决ReLUＵ函数输入负值时陷入卡死的问题<img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20180422215147575.png" class="lazyload"><br>具有ReLU的优势，且输出均值接近零，实际上PReLU和LeakyReLU都有这一优点。有负数饱和区域，从而对噪声有一些鲁棒性。可以看做是介于ReLU和LeakyReLU之间的一个东西。当然，这个函数也需要计算exp，从而<strong>计算量上更大一些</strong>。<br>ELU的优点：<br>和PReLU一样，ELU也引入了可学习的斜率a，使得激活函数在负半段是存在输出值的。但是和PReLU不一样的是，当输入值小于０时ELU的结构为非线性单元，这使得ELU具有良好的鲁棒性和抗干扰能力，但是还是具有一定程度的软饱和性</p></blockquote><h5 id="11-6-tan-h-函数"><a href="#11-6-tan-h-函数" class="headerlink" title="11.6 tan(h)函数"></a>11.6 tan(h)函数</h5><blockquote><p>tanh是双曲函数中的一个，tanh()为双曲正切。在数学中，双曲正切“tanh”是由双曲正弦和双曲余弦这两种基本双曲函数推导而来。<br>tan(h)函数的公式为：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/5366d0160924ab188eed6a943dfae6cd7a890b9d.png" class="lazyload"><br>tan(h)函数的图像为：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/29381f30e924b8994bb77cac64061d950b7bf69f.png" class="lazyload"></p></blockquote><h5 id="11-7-softmax函数"><a href="#11-7-softmax函数" class="headerlink" title="11.7 softmax函数"></a>11.7 softmax函数</h5><blockquote><p>softmax逻辑回归模型是logistic回归模型在多分类问题上的推广，在多分类问题中，类标签y可以取两个以上的值。 Softmax回归模型对于诸如MNIST手写数字分类等问题是很有用的，该问题的目的是辨识10个不同的单个数字。Softmax回归是有监督的，不过后面也会介绍它与深度学习无监督学习方法的结合。<br><img alt="softmax function" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/asdfsdaffasdf.jpg" class="lazyload"><br>公式：<br><img alt="softmax 公式" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191128170755.png" class="lazyload"></p></blockquote><h4 id="12-残差（Residual）"><a href="#12-残差（Residual）" class="headerlink" title="12 残差（Residual）"></a>12 残差（Residual）</h4><blockquote><p>残差在数理统计中是指实际观察值与估计值（拟合值）之间的差。“残差”蕴含了有关模型基本假设的重要信息。如果回归模型正确的话， 我们可以将残差看作误差的观测值。</p></blockquote><p>比如：<br>y_true=10,y^=9.8,residual=y_true-y^=0.2</p><h4 id="13-残差-Residual-和损失-loss-函数的区别"><a href="#13-残差-Residual-和损失-loss-函数的区别" class="headerlink" title="13 残差(Residual)和损失(loss)函数的区别"></a>13 残差(Residual)和损失(loss)函数的区别</h4><p><strong>什么是残差：</strong>   </p><blockquote><p>残差在数理统计中是指实际观察值与估计值（拟合值）之间的差。“残差”蕴含了有关模型基本假设的重要信息。如果回归模型正确的话， 我们可以将残差看作误差的观测值。</p></blockquote><blockquote><p>比如：<br>y_true=10,y^=9.8,re</p><p>sidual=y_true-y^=0.2</p></blockquote><p><strong>什么是损失：</strong>   </p><blockquote><p>损失函数（loss function）或代价函数（cost function）是将随机事件或其有关随机变量的取值映射为非负实数以表示该随机事件的“风险”或“损失”的函数。在应用中，损失函数通常作为学习准则与优化问题相联系，即通过最小化损失函数求解和评估模型。</p></blockquote><h4 id="14-生成对抗网络（GAN）"><a href="#14-生成对抗网络（GAN）" class="headerlink" title="14 生成对抗网络（GAN）"></a>14 生成对抗网络（GAN）</h4><blockquote><p>生成式对抗网络（GAN, Generative Adversarial Networks ）是一种深度学习模型，是近年来复杂分布上无监督学习最具前景的方法之一。模型通过框架中（至少）两个模块：生成模型（Generative Model）和判别模型（Discriminative Model）的互相博弈学习产生相当好的输出。原始 GAN 理论中，并不要求 G 和 D 都是神经网络，只需要是能拟合相应生成和判别的函数即可。但实用中一般均使用深度神经网络作为 G 和 D 。一个优秀的GAN应用需要有良好的训练方法，否则可能由于神经网络模型的自由性而导致输出不理想。</p></blockquote><p><a href="https://www.cnblogs.com/bonelee/p/9166084.html" target="_blank" rel="noopener">详细了解生成对抗网络</a></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 概念解释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你玩转hexo个人博客，自定义主题，博客发布，GitHub部署</title>
      <link href="/conclusion-hexo-1/"/>
      <url>/conclusion-hexo-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-总结"><a href="#1-总结" class="headerlink" title="1.总结"></a>1.总结</h3><p>最近几天一直在玩<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a>个人博客，因为一直就想弄一个这样的博客平台，一个是为了兴趣，还有一个就是为了找工作的时候能够让面试官觉得自己很牛逼（这里涉及到社会学知识点，下次有机会我们再谈），所以就花了一点时间，弄了一下，也发现了一些坑，这里和大家一起分享一下。</p><h3 id="2-开始搭建hexo平台"><a href="#2-开始搭建hexo平台" class="headerlink" title="2.开始搭建hexo平台"></a>2.开始搭建hexo平台</h3><h4 id="2-1-前提"><a href="#2-1-前提" class="headerlink" title="2.1 前提"></a>2.1 前提</h4><p>因为hexo是一个基于node.js开发的一个博客平台，可以将Markdown文件也就是以.md为扩展名的文件生成为静态文件，然后在自动将其部署到整个系统的其他固定页面（比如：tags,archives等）中。我们还可以将其部署到GitHub上，这样就实现了可以通过互联网访问的目的了，我们最终的目的也就是通过互联网访问。</p><ul><li>安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a> 建议大家的所有操作都在git控制台进行操作，git控制台的类似Linux的命令，但不是所有Linux命令都支持，基本命令都已使用，真的很好用。<strong>力荐</strong></li><li>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a><br>大家安装提示进行安装就可以，安装完成之后，我们才可以进行下面的操作</li></ul><h4 id="2-2-通过npm-node-package-manager-安装hexo"><a href="#2-2-通过npm-node-package-manager-安装hexo" class="headerlink" title="2.2 通过npm(node package manager)安装hexo"></a>2.2 通过npm(node package manager)安装hexo</h4><blockquote><p>npm install -g hexo-cli或者npm i -g hexo-cli或者npm<br>hexo可以支持代码简写：<br>hexo generate = hexo g  编译网页文件<br>hexo deploy = hexo d 部署到GitHub等平台<br>hexo server/start = hexo s 开启本地预览服务，访问地址：<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a><br>这里是几个hexo主要用到的命令，其他的可以通过命令hexo –help查看</p></blockquote><h4 id="2-3-生成自己的hexo博客"><a href="#2-3-生成自己的hexo博客" class="headerlink" title="2.3 生成自己的hexo博客"></a>2.3 生成自己的hexo博客</h4><p>随便找一个目录，存放我们的个人博客所有的源代码，为了后期维护，大家尽量找一个空间大一些的盘进行文件存放<br>第一步：</p><blockquote><p>hexo init <folder> or hexo i <folder>  </folder></folder></p></blockquote><p><folder>是你的存放个人博客文件的文件夹的名字<br>比如：hexo i hexo-blog  那么系统会自动生成一个名为hexo-blog的文件夹，并且会配有相应的文件目录结构，如下所示：<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article//20191118102100.png" class="lazyload">     </folder></p><p>第二步：</p><blockquote><p>hexo generate or hexo g  生成编译之后的静态网页文件</p></blockquote><p>第三步：</p><blockquote><p>hexo start/server or hexo s    </p></blockquote><p>第二步和第三步可以通过下面的一条语句执行：</p><blockquote><p>hexo s -g //但是这样做的话，是不会生成public/文件夹的，该文件夹是存放编译完之后的所有静态网页的文件夹</p></blockquote><p>第四步：<br>在浏览器中输入<a href="http://localhost:4000地址进行访问，访问效果如下：" target="_blank" rel="noopener">http://localhost:4000地址进行访问，访问效果如下：</a><br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article//20191118102814.png" class="lazyload">   </p><h4 id="2-4-修改hexo主题"><a href="#2-4-修改hexo主题" class="headerlink" title="2.4 修改hexo主题"></a>2.4 修改hexo主题</h4><p>通过git控制台，cd到我们的博客目录下，然后在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo themes</a>网站上找到自己喜欢的主题，使用git clone命令将其克隆到自己的博客目录下即可。这里以我的主题为例，我用的是基于<a href="https://github.com/Molunerfinn/hexo-theme-melody" target="_blank" rel="noopener">melody</a>的<a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener">butterfly</a><br>通过下面的命令克隆主题，该主题需要一个渲染插件，还得安装一下下面的插件，否则不会生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/Molunerfinn/hexo-theme-melody.git themes/melody</span><br><span class="line">$ npm install hexo-renderer-jade hexo-renderer-stylus</span><br></pre></td></tr></table></figure><p>如果想修改该主题的参数，进行自定义的话，可以参开这个<a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener">文档</a></p><h4 id="2-5-发布博客"><a href="#2-5-发布博客" class="headerlink" title="2.5 发布博客"></a>2.5 发布博客</h4><p>发布post博客，有如下命令：</p><blockquote><p>hexo new “title” 如：hexo new “my first post”</p></blockquote><p>创建完的post博客文件格式如下：<img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191118104655.png" class="lazyload"></p><p>下面这条命令是发布一个网页，不会在主页或者archives中显示的，类似于【主页】这么一个静态网页</p><blockquote><p>hexo new page “my first page” 如：hexo new page “tags”</p></blockquote><p>hexo中只有主页和archives是已经创建好的，其他的都是需要我们手动创建的，用的就是这条命令，创建完的文件如下：<img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191118104450.png" class="lazyload"></p><p>创建完post博客之后，我们通过Markdown编辑器编辑好，我们就可以发布到GitHub上，发布命令：</p><blockquote><p>hexo deploy or hexo d</p></blockquote><h5 id="2-5-1-如何写博客"><a href="#2-5-1-如何写博客" class="headerlink" title="2.5.1 如何写博客"></a>2.5.1 如何写博客</h5><p>博客的front master也就是上面的固定格式，我们可以通过一些参数进行修改，这里附上<a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">官网</a>的一些修改意见。   </p><ul><li>tags: 标签修改</li><li>top_img: 置顶图片</li><li>cover: 博客封面</li><li>categories: 分类，我这里一直显现不了，所以大家看看你们的情况吧，书写规范类似tags</li></ul><h4 id="2-6-部署到GitHub"><a href="#2-6-部署到GitHub" class="headerlink" title="2.6 部署到GitHub"></a>2.6 部署到GitHub</h4><p>修改博客根目录下的_config.yml文件（<strong>注意：这里不是themes目录下的_config.yml文件</strong>）<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191118105240.png" class="lazyload"><br>安装上面的形式配置完自己的GitHub参数即可</p><ul><li>type: 这里写git 因为是通过GitHub部署</li><li>repo: 仓库的意思，写自己存放博客的仓库，必须是page版的</li><li>branch: 分支，一般是master，如果有变动的话，写自己的博客文件分支</li></ul><h3 id="3-hexo博客美化"><a href="#3-hexo博客美化" class="headerlink" title="3.hexo博客美化"></a>3.hexo博客美化</h3><h4 id="3-1-为hexo博客添加本地搜索引擎"><a href="#3-1-为hexo博客添加本地搜索引擎" class="headerlink" title="3.1 为hexo博客添加本地搜索引擎"></a>3.1 <a href="https://crazyjums.github.io/2019/11/16/hexo-search-function/" target="_blank" rel="noopener">为hexo博客添加本地搜索引擎</a></h4><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硕士论文笔记</title>
      <link href="/note-master-1/"/>
      <url>/note-master-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-《智能交通图像识别系统的研究》from"><a href="#1-《智能交通图像识别系统的研究》from" class="headerlink" title="1.《智能交通图像识别系统的研究》from"></a>1.《智能交通图像识别系统的研究》<a href="https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CMFD&dbname=CMFD9904&filename=2003041026.nh&uid=WEEvREdxOWJmbC9oM1NjYkZCbDdrNXcwaGROd1Z6Qmo3emF5S1A3SnV3QjE=$R1yZ0H6jyaa0en3RxVUd8df-oHi7XMMDo7mtKT6mSmEvTuk11l2gFA!!&v=MzA1NzVUcldNMUZyQ1VSTE9lWitWdUZpSGhVN3ZCVjEyN0hiTzhIOUhPcVpFYlBJUjhlWDFMdXhZUzdEaDFUM3E=" target="_blank" rel="noopener">from</a></h3><h4 id="1-1人工神经网络进行字符识别"><a href="#1-1人工神经网络进行字符识别" class="headerlink" title="1.1人工神经网络进行字符识别"></a>1.1人工神经网络进行字符识别</h4><blockquote><p>主要有两种方法:<strong>一种方法</strong>是<strong>先对待识别字符进行特征提取</strong>,然后用所获得的特征来训练神经网络分类器。这种网络的识别效果与字符特征的提取有关,而字符的特征提取往往比较耗时。因此,字符特征的提取就成为研究的关键。文献四中使用由6个多层感知器构成的神经网络来进行车牌字符识别,在特征提取上提出二值线性变换方法以减少输入特征向量,另外改善网络结构以提高识别速度。另<strong>一种方法</strong>则充分利用神经网络的特点,直接把待处理图像输入网络,由网络自动实现特征提取直至识别。这种网络互连较多、待处理信息量大。</p></blockquote><p>神经网络在并行非线性处理及大容量计算方面存在着巨大潜力,<br>且神经元状态是二值的</p><h4 id="1-2图像预处理"><a href="#1-2图像预处理" class="headerlink" title="1.2图像预处理"></a>1.2图像预处理</h4><blockquote><p>预处理相当于对获取的原始图像数据进行整理加工、去伪存真的过程。由于原始图像信号中存在着许多噪声和畸变,一般要进行<strong>滤波、平滑、增强、复原、提取边缘、图像分割</strong>等预处理,以便提高图像质量,并<strong>为下一步特征提取提供必要的基础</strong>。</p></blockquote><p><strong>决策分类</strong><br>根据具体问题的性质,提出一个反映分类好坏的标准,从而找到最符合这一标准的分类方一法。  从数学观点来看,决策分类就是找出决策函数(边界函数)。</p><h5 id="1-2-1灰度图化"><a href="#1-2-1灰度图化" class="headerlink" title="1.2.1灰度图化"></a>1.2.1<a href="https://baike.baidu.com/item/%E7%81%B0%E5%BA%A6%E5%8C%96/3206969?fr=aladdin" target="_blank" rel="noopener">灰度图化</a></h5><blockquote><p>灰度化，在RGB模型中，如果R=G=B时，则彩色表示一种灰度颜色，其中R=G=B的值叫灰度值，因此，灰度图像每个像素只需一个字节存放灰度值（又称强度值、亮度值），灰度范围为0-255。一般有分量法<br>最大值法平均值法加权平均法四种方法对彩色图像进行灰度化。</p></blockquote><p><a href="https://blog.csdn.net/saltriver/article/details/79677116" target="_blank" rel="noopener">RGB图像如何转换成灰度图像</a></p><h6 id="1-2-1-1平均法"><a href="#1-2-1-1平均法" class="headerlink" title="1.2.1.1平均法"></a>1.2.1.1平均法</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">lenna = cv2.imread(<span class="string">"lenna.png"</span>)</span><br><span class="line">row, col, channel = lenna.shape</span><br><span class="line">lenna_gray = np.zeros((row, col))</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> range(row):</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> range(col):</span><br><span class="line">        lenna_gray[r, l] = <span class="number">1</span> / <span class="number">3</span> * lenna[r, l, <span class="number">0</span>] + <span class="number">1</span> / <span class="number">3</span> * lenna[r, l, <span class="number">1</span>] + <span class="number">1</span> / <span class="number">3</span> * lenna[r, l, <span class="number">2</span>]</span><br><span class="line">cv2.imshow(<span class="string">"lenna_gray"</span>, lenna_gray.astype(<span class="string">"uint8"</span>))</span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure><h6 id="1-2-1-2最大最小平均法"><a href="#1-2-1-2最大最小平均法" class="headerlink" title="1.2.1.2最大最小平均法"></a>1.2.1.2最大最小平均法</h6><blockquote><p>取同一个像素位置的RGB中亮度最大的和最小的进行平均</p></blockquote><h6 id="1-2-1-3加权平均法"><a href="#1-2-1-3加权平均法" class="headerlink" title="1.2.1.3加权平均法"></a>1.2.1.3加权平均法</h6><blockquote><p>I(x,y) = 0.3 * I_R(x,y) +0.59 * I_G(x,y)+ 0.11 * I_B(x,y)<br>这是最流行的方法。几个加权系数0.3,0.59,0.11是根据人的亮度感知系统调节出来的参数，是个广泛使用的标准化参数。</p></blockquote><h6 id="1-2-1-4二值图像"><a href="#1-2-1-4二值图像" class="headerlink" title="1.2.1.4二值图像"></a>1.2.1.4二值图像</h6><blockquote><p>图像二值化（ Image Binarization）就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的黑白效果的过程。<br>在数字图像处理中，二值图像占有非常重要的地位，图像的二值化使图像中数据量大为减少，从而能凸显出目标的轮廓。</p></blockquote><h6 id="1-2-1-4反转图像"><a href="#1-2-1-4反转图像" class="headerlink" title="1.2.1.4反转图像"></a>1.2.1.4反转图像</h6><blockquote><p>反转图像也很简单：s = 255-r。反转图像特别适用于<strong>增强暗色图像中的白色或灰色</strong>细节</p></blockquote><h5 id="1-2-2中值滤波"><a href="#1-2-2中值滤波" class="headerlink" title="1.2.2中值滤波"></a>1.2.2中值滤波</h5><blockquote><p><strong>中值滤波法</strong>是一种非线性平滑技术，它将每一像素点的灰度值设置为该点某邻域窗口内的所有像素点灰度值的中值.<br>中值滤波是基于排序统计理论的一种能有效抑制噪声的非线性信号处理技术，中值滤波的基本原理是把数字图像或数字序列中一点的值用该点的一个邻域中各点值的中值代替，让周围的像素值接近的真实值，从而消除孤立的噪声点。方法是用某种结构的二维滑动模板，将板内像素按照像素值的大小进行排序，生成单调上升（或下降）的为二维数据序列。二维中值滤波输出为g（x,y）=med{f(x-k,y-l),(k,l∈W)} ，其中，f(x,y)，g(x,y)分别为原始图像和处理后图像。W为二维模板，通常为3<em>3，5</em>5区域，也可以是不同的的形状，如线状，圆形，十字形，圆环形等。</p></blockquote><p><strong>中值滤波对于消除孤立点和线段的干扰十分有用,特别是对于二进噪声尤为有效,对于消除高斯噪声则效果不佳</strong></p><h5 id="1-2-3边缘检测"><a href="#1-2-3边缘检测" class="headerlink" title="1.2.3边缘检测"></a>1.2.3<a href="https://blog.csdn.net/tercel_zhang/article/details/79538317" target="_blank" rel="noopener">边缘检测</a></h5><blockquote><p>边缘检测是图像处理和计算机视觉中的基本问题，边缘检测的目的是标识数字图像中亮度变化明显的点。图像属性中的显著变化通常反映了属性的重要事件和变化。 这些包括（i）深度上的不连续、（ii）表面方向不连续、（iii）物质属性变化和（iv）场景照明变化。 边缘检测是图像处理和计算机视觉中，尤其是特征提取中的一个研究领域。</p></blockquote><h6 id="1-2-3-1检测方法"><a href="#1-2-3-1检测方法" class="headerlink" title="1.2.3.1检测方法"></a>1.2.3.1检测方法</h6><p>有许多用于边缘检测的方法, 他们大致可分为两类：<strong>**基于搜索</strong>和基于<strong>零交叉</strong>。<br>基于搜索的边缘检测方法首先计算边缘强度， 通常用一阶导数表示， 例如梯度模，然后，用计算估计边缘的局部方向， 通常采用梯度的方向，并利用此方向找到局部梯度模的最大值。<br>基于零交叉的方法找到由图像得到的二阶导数的零交叉点来定位边缘。 通常用拉普拉斯算子或非线性微分方程的零交叉点。<br>滤波做为边缘检测的预处理通常是必要的，通常采用高斯滤波。<br>已发表的边缘检测方法应用计算边界强度的度量，这与平滑滤波有本质的不同。 正如许多边缘检测方法依赖于图像梯度的计算，他们用不同种类的滤波器来估计x-方向和y-方向的梯度。</p><h4 id="1-3车牌定位"><a href="#1-3车牌定位" class="headerlink" title="1.3车牌定位"></a>1.3车牌定位</h4><blockquote><p>车牌定位的主要方法可分为五种!:①直线边缘检测;②基于域值迭代的方法;③基于神经网络的车牌定位方法;④基于灰度的检测方法;均基于彩色图像的车牌分割方`法。</p></blockquote><p>利用BP神经网络在灰度图像中提取车牌。具体步骤为:先收集一定数量的车牌样本,用BP算法对其进行训练,达到一定正确率后,训练结束,得到一个对牌照敏感的神经网络,提取牌照时,对输入图像进行预处理,然后利用训练出的神经网络来搜索车牌。</p><h4 id="1-4改进之处"><a href="#1-4改进之处" class="headerlink" title="1.4改进之处"></a>1.4改进之处</h4><p>本轮文提出的有待改进的地方：</p><ul><li>目前的车牌号码自动识别系统只能处理单个车牌的汽车图像,对于一幅图像中多个车牌的识别则无能为力,</li><li>如何消除外界因素的干扰仍然是闯红灯系统需要解决的一个问题。</li></ul><h3 id="2-《基于卷积神经网络的无人机侦察图像识别》from"><a href="#2-《基于卷积神经网络的无人机侦察图像识别》from" class="headerlink" title="2.《基于卷积神经网络的无人机侦察图像识别》from"></a>2.《基于卷积神经网络的无人机侦察图像识别》<a href="https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CMFD&dbname=CMFD201902&filename=1019042269.nh&v=MjUxODFyQ1VSTE9lWnVkdEZ5bmdVYnZLVkYyNkY3TzhITlBLcHBFYlBJUjhlWDFMdXhZUzdEaDFUM3FUcldNMUY=" target="_blank" rel="noopener">from</a></h3><h4 id="2-1特征降维"><a href="#2-1特征降维" class="headerlink" title="2.1特征降维"></a>2.1特征降维</h4><blockquote><p><a href="https://blog.csdn.net/qq_41455420/article/details/79859622" target="_blank" rel="noopener">特征降维</a>，有时候也称之为特征抽取（用于降维的特征选择方法）或数据压缩，因为现实生活中产生的数据是越来越多，数据压缩技术可以帮助我们对数据进行存储和分析。<br>特征降维是无监督学习的另一个应用，目的有 2：（1）我们会经常在实际项目中遭遇特征维度非常之高的训练样本，而往往又无法借助自己的领域知识人工构建有效特征；（2）在数据表现方面，我们无法用肉眼观测超过三个维度的特征。因此，特征降维不仅仅重构了有效的低纬度特征，同时也为数据展现提供了可能。在特征降维技术中 PCA 主成分分析是最为经典和实用的特征降维技术，在图像识别方面表现的也很突出。</p></blockquote><h4 id="2-2灰度共生矩阵"><a href="#2-2灰度共生矩阵" class="headerlink" title="2.2灰度共生矩阵"></a>2.2灰度共生矩阵</h4><blockquote><p><a href="https://baike.baidu.com/item/%E7%81%B0%E5%BA%A6%E5%85%B1%E7%94%9F%E7%9F%A9%E9%98%B5/1498946?fr=aladdin" target="_blank" rel="noopener">灰度共生矩阵</a>，指的是一种通过研究灰度的空间相关特性来描述纹理的常用方法。  1973年Harali width=”480” height=”720” 等人提出了用灰度共生矩阵来描述纹理特征。<br>由于纹理是由灰度分布在空间位置上反复出现而形成的，因而在图像空间中相隔某距离的两像素之间会存在一定的灰度关系，即图像中灰度的空间相关特性。</p></blockquote><h4 id="2-3特征抽取"><a href="#2-3特征抽取" class="headerlink" title="2.3特征抽取"></a>2.3特征抽取</h4><blockquote><p>特征抽取是将已有的特征变换成新的特征子集的方式，特征变换的方式多种多样，其中线性组合方式最受欢迎。线性组合不仅计算简单，并且解释性强，比如说主成分分析PCA。PCA通过线性变换的方式，将高维的特征映射到了低维空间。特征通过PCA降维后，特征子集可以一定程度的表示原始特征集［1４］，但是特征子集在用于特征分类里效果不一定最好，另一种更好的降维方法是线性判别分析(LDA)。</p></blockquote><h4 id="2-4激活函数"><a href="#2-4激活函数" class="headerlink" title="2.4激活函数"></a>2.4<a href="https://baike.baidu.com/item/激活函数/2520792?fr=aladdin" target="_blank" rel="noopener">激活函数</a></h4><blockquote><p>实际上．激活函数也是在模拟神经元的特点。人体的祌经元不是接收到输入就会全部输出的，是当输入达到一定的阈值后，线性或非线性的将输入转化成输出，这也就是激活函数的原理,在人工神经网络中，<a href="https://blog.csdn.net/edogawachia/article/details/80043673" target="_blank" rel="noopener">激活函数</a>就在神经元的连接形式中，以非线性的映射关系而存在，是神经网络能表达复杂非线性关系的关键所在。</p></blockquote><h5 id="2-4-1sigmoid函数"><a href="#2-4-1sigmoid函数" class="headerlink" title="2.4.1sigmoid函数"></a>2.4.1<a href="https://www.jianshu.com/p/506595ec4b58" target="_blank" rel="noopener">sigmoid函数</a></h5><blockquote><p>Sigmoid函数是一个在生物学中常见的S型函数，也称为S型生长曲线。 在信息科学中，由于其单增以及反函数单增等性质，Sigmoid函数常被用作神经网络的激活函数，将变量映射到0,1之间<br>sigmoid公式如下：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/o_191114110431111.png" class="lazyload"><br>sigmoid函数图像如下：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/c9fcc3cec3fdfc03f23fbf16d73f8794a5c226dc.png" class="lazyload"></p></blockquote><p>sigmoid函数的Python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span>/(<span class="number">1</span>+np.exp(-x))</span><br><span class="line"> </span><br><span class="line">sigmoid_inputs = np.arange(<span class="number">-10</span>,<span class="number">10</span>,<span class="number">0.1</span>)</span><br><span class="line">sigmoid_outputs = sigmoid(sigmoid_inputs)</span><br><span class="line">print(<span class="string">"Sigmoid Function Input :: &#123;&#125;"</span>.format(sigmoid_inputs))</span><br><span class="line">print(<span class="string">"Sigmoid Function Output :: &#123;&#125;"</span>.format(sigmoid_outputs))</span><br><span class="line"> </span><br><span class="line">plt.plot(sigmoid_inputs,sigmoid_outputs)</span><br><span class="line">plt.xlabel(<span class="string">"Sigmoid Inputs"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Sigmoid Outputs"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h5 id="2-4-2ReLU函数"><a href="#2-4-2ReLU函数" class="headerlink" title="2.4.2ReLU函数"></a>2.4.2<a href="https://www.cnblogs.com/adong7639/p/9213038.html" target="_blank" rel="noopener">ReLU函数</a></h5><blockquote><p>ReLU函数：为了避免sigmoid函数梯度趋于0产生的梯度饱和问题，线性整流函数（Rectified Linear Unit, ReLU),被提出并在卷积神经网络中取得了不错的效果。<br>当输入取值小于0时ReLU不会被激活，特别是在后向传播计算中梯度很容易变为0，这是ReLU函数本身存在的硬饱和，又会带来梯度消失的问题。而且ReLU函数的输出值是不存在负数的，这代表了ReLU也不是以0为均值的函数<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/d788d43f8794a4c25b5e4dd902f41bd5ac6e39c6.png" class="lazyload"><br>CNN中常用。对正数原样输出，负数直接置零。在正数不饱和，在负数硬饱和。<strong>ReLU计算上比sigmoid或者tanh更省计算量</strong>，因为不用exp，因而收敛较快。但是还是非zero-centered。<br>ReLU在负数区域被kill的现象叫做dead ReLU，这样的情况下，有人通过初始化的时候用一个稍微大于零的数比如0.01来初始化神经元，从而使得ReLU更偏向于激活而不是死掉，但是这个方法是否有效有争议。</p></blockquote><h5 id="2-4-3LeakyReLU函数"><a href="#2-4-3LeakyReLU函数" class="headerlink" title="2.4.3LeakyReLU函数"></a>2.4.3LeakyReLU函数</h5><blockquote><p>为了解决上述的dead ReLU现象。这里选择一个数，让负数区域不在饱和死掉。这里的斜率都是确定的。<img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20180422215128864.png" class="lazyload"></p></blockquote><h5 id="2-4-4PReLU函数"><a href="#2-4-4PReLU函数" class="headerlink" title="2.4.4PReLU函数"></a>2.4.4PReLU函数</h5><blockquote><p>PReLU(Parametric Rectified Linear Unit)顾名思义：带参数的ReLU,<a href="https://blog.csdn.net/shuzfan/article/details/51345832#prelu%E6%BF%80%E6%B4%BB" target="_blank" rel="noopener">PReLU函数</a>是为了解决ReLU的硬饱和问题产生的激活函数，在LeakyReLU函数中，斜率是固定的，这里的PRelu函数的斜率a是不固定的一个值，这个值可以在运算过程中不算学习改变原来的值。<strong>计算量不是很大，因为不用计算exp</strong><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20160508143448263.jpg" class="lazyload"></p></blockquote><h5 id="2-4-5ELU函数"><a href="#2-4-5ELU函数" class="headerlink" title="2.4.5ELU函数"></a>2.4.5ELU函数</h5><blockquote><p>ELU函数是Sigmoid函数和ReLU函数的结合体，它的提出主要是为了解决ReLUＵ函数输入负值时陷入卡死的问题<img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20180422215147575.png" class="lazyload"><br>具有ReLU的优势，且输出均值接近零，实际上PReLU和LeakyReLU都有这一优点。有负数饱和区域，从而对噪声有一些鲁棒性。可以看做是介于ReLU和LeakyReLU之间的一个东西。当然，这个函数也需要计算exp，从而<strong>计算量上更大一些</strong>。<br>ELU的优点：<br>和PReLU一样，ELU也引入了可学习的斜率a，使得激活函数在负半段是存在输出值的。但是和PReLU不一样的是，当输入值小于0时ELU的结构为非线性单元，这使得ELU具有良好的鲁棒性和抗干扰能力，但是还是具有一定程度的软饱和性</p></blockquote><h4 id="2-5卷积神经网络"><a href="#2-5卷积神经网络" class="headerlink" title="2.5卷积神经网络"></a>2.5卷积神经网络</h4><blockquote><p><a href="https://blog.csdn.net/weixin_41417982/article/details/81412076" target="_blank" rel="noopener">一篇好的介绍卷积神经网络的博客</a></p></blockquote><h5 id="2-5-1池化层（pooling）"><a href="#2-5-1池化层（pooling）" class="headerlink" title="2.5.1池化层（pooling）"></a>2.5.1池化层（pooling）</h5><blockquote><p>当p=1时池化层所采用的方式是均值池化，而p=∞池化层则采用了最大池化操作。池化层和卷积层一样，也会通过非线性的激活函数来连接池化单元。按模型的泛化能力来看，随机池化的效果要好于最大池化和均值池化，其中均值池化的泛化能力最差<br><strong>池化的目的：</strong><br>最直接的目的，就是降低了下一层待处理的数据量。比如说，当卷积层的输出大小是32×32时，如果池化层过滤器的大小为2×2时，那么经过池化层处理后，输出数据的大小为16×16，也就是说现有的数据量一下子减少到池化前的1/4。当池化层最直接的目的达到了，那么它的间接目的也达到了：减少了参数数量，从而可以预防网络过拟合。</p></blockquote><h5 id="2-5-1全连接层"><a href="#2-5-1全连接层" class="headerlink" title="2.5.1全连接层"></a>2.5.1全连接层</h5><blockquote><p><a href="https://baike.baidu.com/item/%E5%85%A8%E8%BF%9E%E6%8E%A5%E5%B1%82/22689531?fr=aladdin" target="_blank" rel="noopener"><strong>全连接层</strong></a>在卷积层和池化层之后，全连接层的神经元与所有输入神经元全部相连，这和多层感知机的结构是一样的。通常情况下卷积神经网络会有一到多个全连接层，他们每层之间也是全部相连，直到最后一层全连接层和输出层连接。卷积祌经网络的卷积层和池化层会提取图像的局部信息或区域信息，而全连接层会破坏原始数据的空间结构性，所以CNN采用了卷积池化在前，全连接在后的网络结构。利用全连接层将卷积和池化得到的高维局部特征整合，生成出可以提供给输出层的分类特征，所以全连接层和输出层的组合可以看做是CNN的分类器。<br><strong>全连接层概念：</strong><br>全连接层的每一个结点都与上一层的所有结点相连，用来把前边提取到的特征综合起来。由于其全相连的特性，一般全连接层的参数也是最多的。例如在<a href="https://www.cnblogs.com/lfri/p/10493408.html" target="_blank" rel="noopener">VGG16</a>中，第一个全连接层FC1有4096个节点，上一层POOL2是7<em>7</em>512 = 25088个节点，则该传输需要4096*25088个权值，需要耗很大的内存。</p></blockquote><h4 id="2-6卷积神经网络的训练方法"><a href="#2-6卷积神经网络的训练方法" class="headerlink" title="2.6卷积神经网络的训练方法"></a>2.6卷积神经网络的训练方法</h4><blockquote><p>CNN的训练方法是通过前向传播计算出的样本值与样本的真实比较并计算出损失，再通过反向传播算法调整网络参数结构以最小化损失的有监督学习方法。CNN的优势在于，不需要用无监督学习的方式对网络进行初始化，直接进行有监督学习即可，因为CNN会在训练之前将整体的网络参数通过小随机数初始化。但是通常情况下为了减少网络的学习时间，会将CNN的网络结构按照当前的任务环境或者利用之前相同网络的模型的参数进行初始化。<br>所以CNN的训练分为前向传播和反向传播两个阶段，前向传播在上文的网络结构介绍中己经详细说明，输入层到卷积层的传递、卷积核卷积操作、激活函数计算值、池化操作和全连接计算等等都是属于前向传播。他们通过网络结构的参数将输入值计算为预测值，再将预测值交给BP算法去进行反向传播更新网络结构参数。反向传播算法是经典卷积祌经网络训练方式的核心，在反向传播阶段中，BP算法会与基于梯度的最优化算法相结合。卷积神经网络的误差或者损失会传递到网络各层，在每层网络通过计算梯度的方式迭代更新网络参数并逐层链式计算。<br>当反向传递到输入层时，才会重新开始前向传播计算，直到网络收敛或者达到了迭代轮数。</p></blockquote><h5 id="2-6-1最小均方误差"><a href="#2-6-1最小均方误差" class="headerlink" title="2.6.1最小均方误差"></a>2.6.1最小均方误差</h5><blockquote><p>最小均方差是损失函数的常见形式，在浅层网络中运用较多，能有效地衡量预测值和实际值之间的误差。均方差的计算方式简单，也容易让人理解，所以在较多模型中作为损失函数的一种简单形式</p></blockquote><h5 id="2-6-2最小分类误差"><a href="#2-6-2最小分类误差" class="headerlink" title="2.6.2最小分类误差"></a>2.6.2最小分类误差</h5><blockquote></blockquote><h4 id="2-7基于卷积神经网络的目标检测算法"><a href="#2-7基于卷积神经网络的目标检测算法" class="headerlink" title="2.7基于卷积神经网络的目标检测算法"></a>2.7基于卷积神经网络的目标检测算法</h4><blockquote><p>卷积神经网络对于图像特征的提取能力远远超过人为设计的目标特征提取，这是近年来卷积神经网络在图像领域飞速发展的关键</p></blockquote><h5 id="2-7-1R-CNN"><a href="#2-7-1R-CNN" class="headerlink" title="2.7.1R-CNN"></a>2.7.1R-CNN</h5><blockquote><p><a href="https://www.jianshu.com/p/381ffa6e525a" target="_blank" rel="noopener">一篇好的解析R-CNN的博客</a><br><a href="https://baike.baidu.com/item/AlexNet/22689612?fr=aladdin" target="_blank" rel="noopener">关于AlexNet</a><br>R-CNN网络于2014被Girshi width=”480” height=”720” 等人在论文中被提出，R-CNN的出现标志了目标检测任务从传统方式过渡到了深度学习阶段。<strong>在此之前的十多年内工业级的目标检测几乎都是采用了人工提取图像特征算子例如HOG和SIFT，再将特征输入到分类器进行识别的方式。传统的方式尽管在许多领域取得了不错的效果，但是很难有进一步的提升</strong>。当任务的场景变换时，又不得不去挖掘和发现一些新的特征，目标检测的相关研究进展十分缓慢。R-CNN在VOC2012上直接超越了之前传统方式检测识别最好结果的30%，这代表了CNN从目标识别到目标检测的领域跨越。   </p></blockquote><h6 id="2-7-1-1R-CNN工作原理"><a href="#2-7-1-1R-CNN工作原理" class="headerlink" title="2.7.1.1R-CNN工作原理"></a>2.7.1.1R-CNN工作原理</h6><blockquote><p>R-CNN利用网络将特征提取和特征分类合并到一起，大大提升了特征的提取效率。但是无论是传统方式还是R-CNN，目标检测和目标识别的最大区别就是需要提取候选区域（region proposals）<br>R-CNN采用选择性搜索（selective search）算法，又称区域合并算法，selective search会将对图片暴力生成多个候选区域<br>R-CNN算法的计算过程：<br>首先输入图像会被分为R个初始候选集，然后通过贪心策略去计算相邻候选集之前的相似度，通过相似度的大小去合并候选集，直到产生目标个数的候选集。候选集的相似度计算有多种方式，有颜色、纹理、而枳和吻合相似度计算。最后生成的L个Region Proposal与CNN相结合，这就是R-CNN名字的由来。<br>R-CNN作者证明了在当前任务下SVM的分类效果要比神经网络分类器好。最后每个SNM分类器都会得到图像对于该类别的得分和置信度，置信度最高的类别为改图像区域对应的预测类别。</p></blockquote><h5 id="2-7-2金字塔池化网络"><a href="#2-7-2金字塔池化网络" class="headerlink" title="2.7.2金字塔池化网络"></a>2.7.2金字塔池化网络</h5><blockquote><p><a href="https://blog.csdn.net/wsp_1138886114/article/details/81778202" target="_blank" rel="noopener"><strong>金字塔池化网络</strong></a>(Spatial Pyramid Pooling Network)是为了解决R-CNN遗留问题诞生出来的网络模型。回顾一下R-CNN网络，首先R-CNN在生成了候选区域后，需要对每个区域进行统一尺寸的压缩或放大，当候选集的长与宽差别较大时强行压缩至比例为1会使图像产生变形和丢失图像的原始特征，SPPNet提出了…种解决方案可以不用压缩图像候选集而直接做为网络输入。另 外一点是R-CNN生成了多个候选集后需要全部输入到CNN中，当生成了2000个候选集时，就需要对图片进行2000次单模型特征提取，这无疑是效率低下的，同样SPPNet也完美解决了这个问题<br><strong>SPPNet的解决方案：</strong></p><ul><li>SPPNet网络结构图如下所示，在输入时直接输入整张图像，只需要对整张图像做一次卷积操作，同时会生成整张图像的候选集特征映射(Reature Map)，这样候选集对应的特征阁可以直接传递到下－层，这样…来对图像进行2000次的计算就变成了1次，大大增加了网络的效率。</li><li>SPPNet中另一关键模块就是金字塔池化层（Spatial Pyramid Pooling Layer），这一层的设计思路是通过池化操作将任意尺寸的输入都转换成固定大小输出，因为在池化层中只要池化的核结构不变，输入的维度就不会变化。Kaiming He等人正是利用了池化输出固定的原理避免了原始R-CNN模型中需要缩放图片候选集的操作   </li></ul><p><strong>SPPNet在R-CNN拥有的区域提取、卷积层、池化层、全连接层、SVM分 类器和Bounding-Box回归网络结构基础上，加入了候选集特征图映射和SPP Pooling层。将R-CNN网络的预测速度提升了数十倍，极大地优化了网络的计算 法复杂度</strong><br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20180817153030153.png" class="lazyload"></p></blockquote><h5 id="2-7-3Fast-R-CNN"><a href="#2-7-3Fast-R-CNN" class="headerlink" title="2.7.3Fast R-CNN"></a>2.7.3Fast R-CNN</h5><blockquote><p>虽然SPPNet网路对R-CNN进行了改进，且效率有提升，但是R-CNN和SPPNet同时还是存在一些缺陷：==<em>网络模型分开训练会产生大量的中间计算量和缓存特征，同时各个模型的独立加大了在线训练的难度</em>==。针对R-CNN和SPPNet两个算法的共同缺陷，Girshi width=”480” height=”720” 提出的Fast R-CNN算法对上述缺陷进行了一些改进。<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/o_1911140113383940902-7569280b566d0e58.png" class="lazyload"><br>上图是Fast R-CNN的结构图，相比于R-CNN，Fast R-CNN有如下几点改进之处：</p><ul><li>加入了Feature Map，在这里Fast R-CNN和SPPNet的思路是一样的，利用候选集和特征图的映 射来对图像只做一次卷积就能得到所有候选集的特征图。</li><li>卷积后连接Rol Pooling Layer,Fast R-CNN借鉴了SPPNet的池化固定输出维度的思路，是SSP Pooling Layer的精简版，同样也不需要对候选集的尺寸进行缩放。</li><li>分类器和Bounding-Box Regression合并为Multi-Task结构。这是Fast R-CNN相比于SPPNet和R-CNN模型独立的重要改进，Fast R-CNN将<a href="https://baike.baidu.com/item/softmax%20%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/22689563?fr=aladdin" target="_blank" rel="noopener">Softmax</a>作为网络的分类器，并将全连接输出的一部分输入到了Bounding-Box Regression中。不用像R-CNN一样将CNN、SVM分类器和Bounding-Box Regression中分开成独立的三部分，模型的在线预测成为了可能。  </li></ul></blockquote><blockquote><p>++在R-CNN中全连接层的计算特别耗时，Fast R-CNN对全连接层采用了SVD分解，全连接层拆分为两个简单公式计算，加快了计算速度。++</p></blockquote><blockquote><p>综上所述，Fast R-CNN在结合SPPNet的思想下针对R-CNN<strong>候选集统一尺度</strong>、<strong>候选集依次卷积</strong>和<strong>模型结构独立</strong>等问题下提出了诸多改进方式，并沿用了R-CNN的大部分结构。<strong>Fast R-CNN仅在运算速度上超越了R-CNN</strong>，模型<strong>的预测效果</strong>也得到了<strong>不少的提升</strong>。但是Fast R-CNN还是保留了一些<strong>缺陷</strong>，在<a href="https://blog.csdn.net/liuxiaoheng1992/article/details/81843363" target="_blank" rel="noopener"><strong>Faster R-CNN</strong></a>中针对在这些问题得到了改善，为了解决这一问题，Faster R-CNN于2016年被提出，通过引入RPN模块快速完成了proposal的生成</p></blockquote><blockquote><p><strong>注意：</strong>Fast R-CNN在对原始图像卷积后，会串行的对原图进行候选集提取并映射，到特征图上生成多个大小不同的特征图候选集，而Faster R-CNN在卷积之后特征图会并行的进入两个通道，一个是Fast R-CNN的Rol Pooling层，另一个就是Faster R-CNN中引入的RPN结构，所以Faster R-CNN可以看作是RPN和Fast R-CNN的组合模式 </p></blockquote><blockquote><p><strong>softmax逻辑回归函数：</strong><br><a href="https://baike.baidu.com/item/softmax%20%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/22689563?fr=aladdin" target="_blank" rel="noopener">Softmax</a>逻辑回归模型是logistic回归模型在多分类问题上的推广，在多分类问题中，类标签y可以取两个以上的值。 Softmax回归模型对于诸如MNIST手写数字分类等问题是很有用的，该问题的目的是辨识10个不同的单个数字。Softmax回归是有监督的，不过后面也会介绍它与深度学习无监督学习方法的结合。<br><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/d62a6059252dd42af3835f580f3b5bb5c8eab8bf.jpg" class="lazyload"></p></blockquote><h4 id="2-8对Faster-R-CNN目标检测算法的改进"><a href="#2-8对Faster-R-CNN目标检测算法的改进" class="headerlink" title="2.8对Faster R-CNN目标检测算法的改进"></a>2.8对Faster R-CNN目标检测算法的改进</h4><h5 id="2-8-1RPN网络"><a href="#2-8-1RPN网络" class="headerlink" title="2.8.1RPN网络"></a>2.8.1<a href="https://blog.csdn.net/qq_36269513/article/details/80421990" target="_blank" rel="noopener">RPN网络</a></h5><blockquote><p>区域提名网络（RegionProposalNetworks，RPN）是Faster R-CNN中的重要 结构，其主要功能是生成带有坐标的感兴趣区域框，和R－CNN或FastR－CNN中 候选集生成算法的作用是一样的。<br><strong>视频介绍RPN</strong></p></blockquote><iframe src="//player.bilibili.com/player.html?aid=29987414&cid=52249531&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="720" height="480"> </iframe><h5 id="2-8-2Fast-R-CNN-特征提取与-RolP"><a href="#2-8-2Fast-R-CNN-特征提取与-RolP" class="headerlink" title="2.8.2Fast R-CNN 特征提取与 RｏｌＰ"></a>2.8.2Fast R-CNN 特征提取与 RｏｌＰ</h5><blockquote><p>图像特征提取采用的卷积层是<a href="https://www.cnblogs.com/lfri/p/10493408.html" target="_blank" rel="noopener">VGG1６</a>， </p></blockquote><h5 id="2-8-3基于Faster-R-CNN的航拍图像分析"><a href="#2-8-3基于Faster-R-CNN的航拍图像分析" class="headerlink" title="2.8.3基于Faster R-CNN的航拍图像分析"></a>2.8.3基于Faster R-CNN的航拍图像分析</h5><blockquote><p>航拍图像实例的特点：实例多数处于相对位置不变化的状态<br>航拍图像中的一大难点：</p><ul><li>也是基于航拍图像的目标检测研究面临的第一大难点。 </li><li>由于航拍图像拍摄的距离不同，同一类别物体在 不冋图像中的差别会很人</li></ul></blockquote><h5 id="2-8-4基于改进Faster-R-CNN算法的目标检测"><a href="#2-8-4基于改进Faster-R-CNN算法的目标检测" class="headerlink" title="2.8.4基于改进Faster R-CNN算法的目标检测"></a>2.8.4基于改进Faster R-CNN算法的目标检测</h5><blockquote><p>从网络结构出发优化目标可主要分为 CNN特征提取层、RPN结构和Fast R-CNN并行的OHEM算法嵌入三部分。<br>Faster R-CNN中的特征提取采用的是VGG1６网络，<br><strong>改论文创新点：本论文 基于ResNet－101的卷积神经网络设计出了一版Faster R-CNN框架</strong></p></blockquote><h5 id="2-8-6RPN网络改进"><a href="#2-8-6RPN网络改进" class="headerlink" title="2.8.6RPN网络改进"></a>2.8.6RPN网络改进</h5><blockquote><p>RPN网络是Faster R-CNN区别于Fast R-CNN的核心，高精度、准确的 Proposal是网络训练和预测的关键。<br>方法：</p><ul><li>调整RPN中Anchors</li><li>修改Proposal输出阈值</li><li>正负采样调整<br>改进结果：通过对RPN网络的优化对小目标的检测有不错提升，但是训练和预测速度 下降不少，在这里并没有对计算性能进行过多的优化</li></ul></blockquote><h5 id="2-8-7OHEM算法模型嵌入"><a href="#2-8-7OHEM算法模型嵌入" class="headerlink" title="2.8.7OHEM算法模型嵌入"></a>2.8.7<a href="https://blog.csdn.net/u012426298/article/details/81773319" target="_blank" rel="noopener">OHEM</a>算法模型嵌入</h5><blockquote><p>OHEM（Online Hard Example Mining）算法在基于机器学习的任务中十分常见，通常用来解决正负样本不均衡的问题。</p></blockquote><h4 id="2-9本轮文的结构"><a href="#2-9本轮文的结构" class="headerlink" title="2.9本轮文的结构"></a>2.9本轮文的结构</h4><blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191118093651.png" class="lazyload"></p></blockquote><h4 id="2-10未来展望"><a href="#2-10未来展望" class="headerlink" title="2.10未来展望"></a>2.10未来展望</h4><blockquote><p><img alt data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/20191118093842.png" class="lazyload"></p></blockquote><h3 id="3-《智能交通图像识别系统的研究》from"><a href="#3-《智能交通图像识别系统的研究》from" class="headerlink" title="3.《智能交通图像识别系统的研究》from"></a>3.《智能交通图像识别系统的研究》from</h3><h4 id="3-1人工神经网络进行字符识别"><a href="#3-1人工神经网络进行字符识别" class="headerlink" title="3.1人工神经网络进行字符识别"></a>3.1人工神经网络进行字符识别</h4><blockquote><p>主要有两种方法:一种方法是先对待识别字符进行特征提取,然后用所获得的特征来训练神经网络分类器。这种网络的识别效果与字符特征的提取有关,而字符的特征提取往往比较耗时。因此,字符特征的提取就成为研究的关键。文献四中使用由6个多层感知器构成的神经网络来进行车牌字符识别,在特征提取上提出二值线性变换方法以减少输入特征向量,另外改善网络结构以提高识别速度。另一种方法则充分利用神经网络的特点,直接把待处理图像输入网络,由网络自动实现特征提取直至识别。这种网络互连较多、待处理信息量大。<br>神经网络在并行非线性处理及大容量计算方面存在着巨大潜力, 且神经元状态是二值的</p></blockquote><h4 id="3-2图像预处理"><a href="#3-2图像预处理" class="headerlink" title="3.2图像预处理"></a>3.2图像预处理</h4><blockquote><p>预处理相当于对获取的原始图像数据进行整理加工、去伪存真的过程。由于原始图像信号中存在着许多噪声和畸变,一般要进行滤波、平滑、增强、复原、提取边缘、图像分割等预处理,以便提高图像质量,并为下一步特征提取提供必要的基础。<br>决策分类<br>根据具体问题的性质,提出一个反映分类好坏的标准,从而找到最符合这一标准的分类方一法。 从数学观点来看,决策分类就是找出决策函数(边界函数)。</p></blockquote><h5 id="3-2-1灰度图化"><a href="#3-2-1灰度图化" class="headerlink" title="3.2.1灰度图化"></a>3.2.1灰度图化</h5><p>灰度化，在RGB模型中，如果R=G=B时，则彩色表示一种灰度颜色，其中R=G=B的值叫灰度值，因此，灰度图像每个像素只需一个字节存放灰度值（又称强度值、亮度值），灰度范围为0-255。一般有分量法 最大值法平均值法加权平均法四种方法对彩色图像进行灰度化。<br>RGB图像如何转换成灰度图像</p><h6 id="3-2-1-1平均法"><a href="#3-2-1-1平均法" class="headerlink" title="3.2.1.1平均法"></a>3.2.1.1平均法</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">lenna = cv2.imread(<span class="string">"lenna.png"</span>)</span><br><span class="line">row, col, channel = lenna.shape</span><br><span class="line">lenna_gray = np.zeros((row, col))</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> range(row):</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> range(col):</span><br><span class="line">        lenna_gray[r, l] = <span class="number">1</span> / <span class="number">3</span> * lenna[r, l, <span class="number">0</span>] + <span class="number">1</span> / <span class="number">3</span> * lenna[r, l, <span class="number">1</span>] + <span class="number">1</span> / <span class="number">3</span> * lenna[r, l, <span class="number">2</span>]</span><br><span class="line">cv2.imshow(<span class="string">"lenna_gray"</span>, lenna_gray.astype(<span class="string">"uint8"</span>))</span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure><h6 id="3-2-1-2最大最小平均法"><a href="#3-2-1-2最大最小平均法" class="headerlink" title="3.2.1.2最大最小平均法"></a>3.2.1.2最大最小平均法</h6><blockquote><p>取同一个像素位置的RGB中亮度最大的和最小的进行平均</p></blockquote><h5 id="3-2-1-3加权平均法"><a href="#3-2-1-3加权平均法" class="headerlink" title="3.2.1.3加权平均法"></a>3.2.1.3加权平均法</h5><blockquote><p>I(x,y) = 0.3 * I_R(x,y) +0.59 * I_G(x,y)+ 0.11 * I_B(x,y) 这是最流行的方法。几个加权系数0.3,0.59,0.11是根据人的亮度感知系统调节出来的参数，是个广泛使用的标准化参数。</p></blockquote><h5 id="3-2-1-4二值图像"><a href="#3-2-1-4二值图像" class="headerlink" title="3.2.1.4二值图像"></a>3.2.1.4二值图像</h5><blockquote><p>图像二值化（ Image Binarization）就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的黑白效果的过程。 在数字图像处理中，二值图像占有非常重要的地位，图像的二值化使图像中数据量大为减少，从而能凸显出目标的轮廓。</p></blockquote><h5 id="3-2-1-5反转图像"><a href="#3-2-1-5反转图像" class="headerlink" title="3.2.1.5反转图像"></a>3.2.1.5反转图像</h5><blockquote><p>反转图像也很简单：s = 255-r。反转图像特别适用于增强暗色图像中的白色或灰色细节</p></blockquote><h4 id="3-2-2中值滤波"><a href="#3-2-2中值滤波" class="headerlink" title="3.2.2中值滤波"></a>3.2.2中值滤波</h4><blockquote><p>中值滤波法是一种非线性平滑技术，它将每一像素点的灰度值设置为该点某邻域窗口内的所有像素点灰度值的中值. 中值滤波是基于排序统计理论的一种能有效抑制噪声的非线性信号处理技术，中值滤波的基本原理是把数字图像或数字序列中一点的值用该点的一个邻域中各点值的中值代替，让周围的像素值接近的真实值，从而消除孤立的噪声点。方法是用某种结构的二维滑动模板，将板内像素按照像素值的大小进行排序，生成单调上升（或下降）的为二维数据序列。二维中值滤波输出为g（x,y）=med{f(x-k,y-l),(k,l∈W)} ，其中，f(x,y)，g(x,y)分别为原始图像和处理后图像。W为二维模板，通常为33，55区域，也可以是不同的的形状，如线状，圆形，十字形，圆环形等。<br>中值滤波对于消除孤立点和线段的干扰十分有用,特别是对于二进噪声尤为有效,对于消除高斯噪声则效果不佳</p></blockquote><h4 id="3-2-3边缘检测"><a href="#3-2-3边缘检测" class="headerlink" title="3.2.3边缘检测"></a>3.2.3边缘检测</h4><blockquote><p>边缘检测是图像处理和计算机视觉中的基本问题，边缘检测的目的是标识数字图像中亮度变化明显的点。图像属性中的显著变化通常反映了属性的重要事件和变化。 这些包括（i）深度上的不连续、（ii）表面方向不连续、（iii）物质属性变化和（iv）场景照明变化。 边缘检测是图像处理和计算机视觉中，尤其是特征提取中的一个研究领域。</p></blockquote><h5 id="3-2-3-1检测方法"><a href="#3-2-3-1检测方法" class="headerlink" title="3.2.3.1检测方法"></a>3.2.3.1检测方法</h5><blockquote><p>有许多用于边缘检测的方法, 他们大致可分为两类：基于搜索和基于零交叉**。 基于搜索的边缘检测方法首先计算边缘强度， 通常用一阶导数表示， 例如梯度模，然后，用计算估计边缘的局部方向， 通常采用梯度的方向，并利用此方向找到局部梯度模的最大值。 基于零交叉的方法找到由图像得到的二阶导数的零交叉点来定位边缘。 通常用拉普拉斯算子或非线性微分方程的零交叉点。 滤波做为边缘检测的预处理通常是必要的，通常采用高斯滤波。 已发表的边缘检测方法应用计算边界强度的度量，这与平滑滤波有本质的不同。 正如许多边缘检测方法依赖于图像梯度的计算，他们用不同种类的滤波器来估计x-方向和y-方向的梯度。</p></blockquote><h4 id="3-3车牌定位"><a href="#3-3车牌定位" class="headerlink" title="3.3车牌定位"></a>3.3车牌定位</h4><blockquote><p>车牌定位的主要方法可分为五种!:①直线边缘检测;②基于域值迭代的方法;③基于神经网络的车牌定位方法;④基于灰度的检测方法;均基于彩色图像的车牌分割方`法。<br>利用BP神经网络在灰度图像中提取车牌。具体步骤为:先收集一定数量的车牌样本,用BP算法对其进行训练,达到一定正确率后,训练结束,得到一个对牌照敏感的神经网络,提取牌照时,对输入图像进行预处理,然后利用训练出的神经网络来搜索车牌。</p></blockquote><h4 id="3-4改进之处"><a href="#3-4改进之处" class="headerlink" title="3.4改进之处"></a>3.4改进之处</h4><blockquote><p>本轮文提出的有待改进的地方：<br>目前的车牌号码自动识别系统只能处理单个车牌的汽车图像,对于一幅图像中多个车牌的识别则无能为力,<br>如何消除外界因素的干扰仍然是闯红灯系统需要解决的一个问题。</p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 论文笔记 </tag>
            
            <tag> 航拍识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视频test</title>
      <link href="/video-1/"/>
      <url>/video-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-video-demo"><a href="#1-video-demo" class="headerlink" title="1.video demo"></a>1.video demo</h3><p>这是一个视频demo，hexo可以通过GitHub实现视频播放功能，下面这段视频的Markdown代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;video id=&quot;video&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/IMG_2987.JPG&quot; width=&quot;720&quot; height=&quot;480&quot;&gt;</span><br><span class="line">      &lt;source id=&quot;mp4&quot; src=&quot;https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/videos/123.mp4&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure><h3 id="2-注意"><a href="#2-注意" class="headerlink" title="2.注意"></a>2.注意</h3><blockquote><p><strong>在GitHub上的视频必须是小于20M的视频才可以，可以使用视频压缩技术对视频进行压缩</strong></p></blockquote><video id="video" controls preload="none" poster="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/IMG_2987.JPG" width="720" height="480">      <source id="mp4" src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/videos/123.mp4" type="video/mp4"></video><h3 id="3-引用B站上的视频"><a href="#3-引用B站上的视频" class="headerlink" title="3.引用B站上的视频"></a>3.引用<a href="https://www.bilibili.com/" target="_blank" rel="noopener">B站</a>上的视频</h3><p>下面的视频的引用代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=75534775&amp;cid=129216147&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; width=&quot;720&quot; height=&quot;480&quot;&gt; &lt;/iframe&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>建议：</strong> 我们可以将我们自己的视频上传到B站然后下面的代码格式对自己的视频进行引用</p></blockquote><iframe src="//player.bilibili.com/player.html?aid=75534775&cid=129216147&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="720" height="480"> </iframe><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 玩艺 </tag>
            
            <tag> movie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你现在的能力和你需要达到的高度</title>
      <link href="/your-plan/"/>
      <url>/your-plan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h3><h4 id="1-深度学习框架热度排名"><a href="#1-深度学习框架热度排名" class="headerlink" title="1.深度学习框架热度排名"></a>1.深度学习框架热度排名</h4><p><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/framework.png" class="lazyload"></p><h4 id="2-计算机视觉领域算法发展史"><a href="#2-计算机视觉领域算法发展史" class="headerlink" title="2.计算机视觉领域算法发展史"></a>2.计算机视觉领域算法发展史</h4><p><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/deep_learning_object_detection_history.png" class="lazyload"></p><h4 id="3-你应该具备的能力"><a href="#3-你应该具备的能力" class="headerlink" title="3.你应该具备的能力"></a>3.你应该具备的能力</h4><ul><li><strong>算法能力</strong><ul><li>机器学习-吴恩达，<a href="https://www.bilibili.com/video/av9912938" target="_blank" rel="noopener">course</a></li><li>卷积神经网络（CNN） 是计算机视觉的基础中的基础，一定得了解透彻，不能一知半解，<a href="https://blog.csdn.net/weixin_42451919/article/details/81381294" target="_blank" rel="noopener">blog</a>/<a href="https://www.bilibili.com/video/av36381900?from=search&seid=3318225737780585556" target="_blank" rel="noopener">course</a></li><li>R-CNN是计算机视觉算法鼻祖，先学透R-CNN，在学相关其他算法会好学很多。<a href="https://arxiv.org/abs/1311.2524" target="_blank" rel="noopener">paper</a>/<a href="https://www.jianshu.com/p/381ffa6e525a" target="_blank" rel="noopener">blog</a></li></ul></li><li><strong>深度学习框架能力</strong><ul><li>pytorch(<a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">pytorch.org</a>)，<a href="https://www.bilibili.com/video/av15997678" target="_blank" rel="noopener">course</a></li><li>TensorFlow(<a href="http://www.tensorfly.cn/" target="_blank" rel="noopener">chinese community</a>)</li></ul></li><li><strong>编程能力</strong><ul><li>Python编程能力</li><li>MATLAB分析能力</li></ul></li></ul><h4 id="4-你已经具备的能力"><a href="#4-你已经具备的能力" class="headerlink" title="4.你已经具备的能力"></a>4.你已经具备的能力</h4><ul><li><strong>编程能力</strong><ul><li>Python编程能力（可以使用PurePython实现一些算法功能）</li><li>Java编程能力（了解Java编程规范，会使用Java实现一些后端功能）</li><li>HTML能力/CSS（可以编写静态网页）<a href="https://www.bilibili.com/video/av10298843" target="_blank" rel="noopener">course</a></li><li>JavaScript能力（了解的不是很多，需要加强）<a href="https://www.bilibili.com/video/av29885002" target="_blank" rel="noopener">course</a></li><li>git使用能力（仅会上传代码，不会追加代码，有待进一步加强）<a href="https://www.bilibili.com/video/av24441039?from=search&seid=10646578285914070658" target="_blank" rel="noopener">course</a>/<a href="http://www.uml.org.cn/pzgl/201902251.asp" target="_blank" rel="noopener">blog</a></li></ul></li><li>图像预处理能力<ul><li>数字图像处理<ul><li>图像增强</li><li>图像锐化</li><li>灰度变换</li><li>正交变换</li><li>图像降噪</li></ul></li></ul></li><li><strong>算法能力</strong><ul><li>暂无</li></ul></li><li><strong>深度学习框架能力</strong><ul><li>暂无</li></ul></li></ul><h4 id="5-关于你的研究方向"><a href="#5-关于你的研究方向" class="headerlink" title="5.关于你的研究方向"></a>5.关于你的研究方向</h4><ul><li><a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/2803351?fr=aladdin#4" target="_blank" rel="noopener">计算机视觉</a>的<a href="http://www.elecfans.com/d/901496.html" target="_blank" rel="noopener">研究方向</a><ul><li><strong>目标检测</strong>(Object detection)</li><li>目标跟踪(Target tracking)</li><li>语义分割(Sentiment segmention)</li><li>生产对抗网络(Generated antagonistic network)</li><li>图像检索(Image retrieval)</li><li>图像增强(Image enhancement)</li><li>图像滤波与降噪(Image filtering and noise reduction)</li><li>三维重建(3D reconstruction)</li><li>风格化(stylized)</li><li>图像识别(image recognition)<ul><li><strong>航拍图像识别</strong>（识别航拍图像中的人，毕业论文可与应急救援相结合）</li><li>航拍公开数据集<a href="https://captain-whu.github.io/DOTA/dataset.html" target="_blank" rel="noopener">DOTA</a>，<a href="https://github.com/jessemelpolio/Faster_RCNN_for_DOTA" target="_blank" rel="noopener">Faster_RCNN_for_DOTA at github</a></li><li><a href="https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CMFD&dbname=CMFD201902&filename=1019042269.nh&v=MjUxODFyQ1VSTE9lWnVkdEZ5bmdVYnZLVkYyNkY3TzhITlBLcHBFYlBJUjhlWDFMdXhZUzdEaDFUM3FUcldNMUY=" target="_blank" rel="noopener">《基于卷积神经网络的无人机侦察图像识别》</a>，北邮硕士论文，2019</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
            <tag> plan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你如何用Markdown引用网易云音乐</title>
      <link href="/music-test/"/>
      <url>/music-test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-固定长度"><a href="#1-固定长度" class="headerlink" title="1 固定长度"></a>1 固定长度</h3><p>复制下面的代码，到你的Markdown中，就可以实现音乐播放的功能，音乐源引用自网易云音乐。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"yes"</span> <span class="attr">border</span>=<span class="string">"100"</span> <span class="attr">marginwidth</span>=<span class="string">"4"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">333</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=1295824647&amp;auto=1&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=3932159&auto=1&height=66"></iframe> <p><strong>参数解释：</strong>  </p><ul><li>auto 1:自动播放 0:不自动播放</li><li>width 控制播放条的长度，默认是333px</li><li>height 控制播放条的高度，默认是86px(px是像素的单位)</li><li>src 歌曲的链接地址，可以在网页版的网易云平台搜索自己喜欢的歌曲查看，如下所示：<br><img alt="image" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/1232314fdgdfsg.png" class="lazyload"></li></ul><h3 id="2-自适应长度"><a href="#2-自适应长度" class="headerlink" title="2 自适应长度"></a>2 自适应长度</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">100%</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=1295824647&amp;auto=0&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=1295824647&auto=0&height=66"></iframe><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 玩艺 </tag>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理（dip）</title>
      <link href="/dip/"/>
      <url>/dip/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="学科：数字图像处理（Digital-Image-Processing-video）"><a href="#学科：数字图像处理（Digital-Image-Processing-video）" class="headerlink" title="学科：数字图像处理（Digital Image Processing -video）"></a>学科：<a href="[https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/5199259?fr=aladdin](https://baike.baidu.com/item/数字图像处理/5199259?fr=aladdin)">数字图像处理</a>（<a href="https://www.bilibili.com/video/av61178093/" target="_blank" rel="noopener">Digital Image Processing -video</a>）</h2><h2 id="作者：zhuhonggen"><a href="#作者：zhuhonggen" class="headerlink" title="作者：zhuhonggen"></a>作者：zhuhonggen</h2><p><img alt="作者微信公众号" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rBVBy82ZFdxLvnJGcqQT6QvhMib9OvDMtwPjSyKHWzQXtgDVdWafOcLA/0?wx_fmt=jpeg" class="lazyload"></p><hr><h1 id="计算机视觉入门基础"><a href="#计算机视觉入门基础" class="headerlink" title="计算机视觉入门基础"></a>计算机视觉入门基础</h1><h2 id="0概念介绍"><a href="#0概念介绍" class="headerlink" title="0概念介绍"></a>0概念介绍</h2><h3 id="0-1数字图像处理概念"><a href="#0-1数字图像处理概念" class="headerlink" title="0.1数字图像处理概念"></a>0.1数字图像处理概念</h3><h4 id="0-1-1图像的高频分量和低频分量"><a href="#0-1-1图像的高频分量和低频分量" class="headerlink" title="0.1.1图像的高频分量和低频分量"></a>0.1.1<a href="https://blog.csdn.net/Chaolei3/article/details/79443520" target="_blank" rel="noopener">图像的高频分量和低频分量</a></h4><blockquote><p>总得来说，低频分量（低频信号）代表着图像中亮度或者灰度值变化缓慢的区域，也就是图像中大片平坦的区域，描述了图像的主要部分。高频分量（高频信号）对应着图像变化剧烈的部分，也就是图像的边缘（轮廓）或者噪声以及细节部分。<br>之所以说噪声也对应着高频分量，是因为图像噪声在大部分情况下都是高频的。<br>低频分量：主要对整幅图像强度的综合度量。高频分量：主要是对图像边缘和轮廓的度量。而人眼对高频分量比较敏感。<br>我们试着用傅立叶变换站在另外一个角度观察图像，将图像从灰度分布转化到频率分布（频谱图）上去观察图像的特征。需要了解的是，图像进行二维傅立叶变换之后得到的频谱图，就是图像梯度的分布图。具体的，傅立叶频谱图上我们能看到明暗不一的亮点，实际是图像上某一点与邻域点差异的强弱，即梯度的大小。<br>所以说，如果一幅图像的各个位置的强度大小相等，则图像只存在低频分量。从图像的频谱图上看，只有一个主峰,且位于频率为零的位置.。需要提一句的是，图像的频谱图可以由傅里叶变换得到。<br>如果一幅图像的各个位置的强度变化剧烈，则图像不仅存在低频分量，同时也存在多种高频分量。从图像的频谱上看，不仅有一个主峰,同时也存在多个旁峰。可以这样理解：图像中的低频分量就是图像中梯度较小的部分，高频分量则相反。<br>从直方图上看，低频分量对应直方图内大块区域，而小块或者离散的区域就是高频分量。这说明低频分量占据了图像的主要部分。<br>从二维函数上理解，变化剧烈的地方就是高频分量，变化少的地方就是低频分量。</p></blockquote><h4 id="0-1-2采样定理"><a href="#0-1-2采样定理" class="headerlink" title="0.1.2采样定理"></a>0.1.2<a href="https://baike.baidu.com/item/%E9%87%87%E6%A0%B7%E5%AE%9A%E7%90%86/8599843?fr=aladdin" target="_blank" rel="noopener">采样定理</a></h4><blockquote><p>样定理是美国电信工程师H.奈奎斯特在1928年提出的，在数字信号处理领域中，采样定理是连续时间信号（通常称为“模拟信号”）和离散时间信号（通常称为“数字信号”）之间的基本桥梁。该定理说明采样频率与信号频谱之间的关系，是连续信号离散化的基本依据。 它为采样率建立了一个足够的条件，该采样率允许离散采样序列从有限带宽的连续时间信号中捕获所有信息。</p></blockquote><h5 id="0-1-2-1定理说明"><a href="#0-1-2-1定理说明" class="headerlink" title="0.1.2.1定理说明"></a>0.1.2.1定理说明</h5><blockquote><p>采样过程所应遵循的规律，又称取样定理、抽样定理。采样定理说明采样频率与信号频谱之间的关系，是连续信号离散化的基本依据。<br>在进行模拟/数字信号的转换过程中，当采样频率fs.max大于信号中最高频率fmax的2倍时(fs.max&gt;2fmax)，采样之后的数字信号完整地保留了原始信号中的信息，一般实际应用中保证采样频率为信号最高频率的2.56～4倍；采样定理又称奈奎斯特定理。<br>如果对信号的其它约束是已知的，则当不满足采样率标准时，完美重建仍然是可能的。 在某些情况下（当不满足采样率标准时），利用附加的约束允许近似重建。 这些重建的保真度可以使用Bochner定理来验证和量化。</p></blockquote><h4 id="0-1-3PCM编码"><a href="#0-1-3PCM编码" class="headerlink" title="0.1.3PCM编码"></a>0.1.3<a href="https://baike.baidu.com/item/pcm%E7%BC%96%E7%A0%81/10865033?fr=aladdin" target="_blank" rel="noopener">PCM编码</a></h4><blockquote><p>PCM（Pulse Code Modulation）脉冲编码调制是数字通信的编码方式之一。主要过程是将话音、图像等模拟信号每隔一定时间进行取样，使其离散化，同时将抽样值按分层单位四舍五入取整量化，同时将抽样值按一组二进制码来表示抽样脉冲的幅值。</p></blockquote><h4 id="0-1-4图像分辨率"><a href="#0-1-4图像分辨率" class="headerlink" title="0.1.4图像分辨率"></a>0.1.4<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%83%8F%E5%88%86%E8%BE%A8%E7%8E%87/872374?fr=aladdin" target="_blank" rel="noopener">图像分辨率</a></h4><blockquote><p>图像分辨率指图像中存储的信息量，是每英寸图像内有多少个像素点，分辨率的单位为PPI(Pixels Per Inch)，通常叫做像素每英寸。图像分辨率一般被用于ps中，用来改变图像的清晰度。</p></blockquote><h5 id="0-1-4-1图像分辨率原理"><a href="#0-1-4-1图像分辨率原理" class="headerlink" title="0.1.4.1图像分辨率原理"></a>0.1.4.1图像分辨率原理</h5><blockquote><p>数码图像有两大类，一类是矢量图，也叫向量图；另一类是点阵图，也叫位图。矢量图比较简单，它是由大量数学方程式创建的，其图形是由线条和填充颜色的块面构成的，而不是由像素组成的，对这种图形进行放大和缩小，不会引起图形失真。<br>点阵图很复杂，是通过摄像机、数码相机和扫描仪等设备，利用扫描的方法获得，由像素组成的，是以每英寸的像素数（PPI）来衡量。点阵图具有精细的图像结构、丰富的灰度层次和广阔的颜色阶调。当然，矢量图经过图像软件的处理，也可以转换成点阵图。家庭影院所使用的图像，动画片的原图属于矢量图一类，但经过制作中的转化，已经和其他电影片一样，也属于点阵图一类了。</p></blockquote><h4 id="0-1-5显示分辨率"><a href="#0-1-5显示分辨率" class="headerlink" title="0.1.5显示分辨率"></a>0.1.5<a href="https://baike.baidu.com/item/%E6%98%BE%E7%A4%BA%E5%88%86%E8%BE%A8%E7%8E%87/3431933?fr=aladdin" target="_blank" rel="noopener">显示分辨率</a></h4><blockquote><p>显示分辨率是显示器在显示图像时的分辨率，分辨率是用点来衡量的，显示器上这个“点”就是指像素(pixel)。显示分辨率的数值是指整个显示器所有可视面积上水平像素和垂直像素的数量。例如800×600的分辨率，是指在整个屏幕上水平显示800个像素，垂直显示600个像素。</p></blockquote><h5 id="0-1-5-1清晰度和眼睛辨识度的关系"><a href="#0-1-5-1清晰度和眼睛辨识度的关系" class="headerlink" title="0.1.5.1清晰度和眼睛辨识度的关系"></a>0.1.5.1清晰度和眼睛辨识度的关系</h5><blockquote><p><img alt="视觉效果和绝对清晰度" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer4wE9l3mtiayiaSqldER20ae1U1k8Aqic8aQMoibic0rOvXApjibFvmO5sDBvwhOSymW8vfPFwdjOkuYClg/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="0-1-6像素深度"><a href="#0-1-6像素深度" class="headerlink" title="0.1.6像素深度"></a>0.1.6像素深度</h4><blockquote><p>像素深度是指存储每个像素所用的位数，也用它来度量图像的分辨率。像素深度决定彩色图像的每个像素可能有的颜色数，或者确定灰度图像的每个像素可能有的灰度级数。<br>例如，一幅彩色图像的每个像素用R，G，B三个分量表示，若每个分量用8位，那么一个像素共用24位表示，就说像素的深度为24，每个像素可以是16 777 216（2的24次方）种颜色中的一种。在这个意义上，往往把像素深度说成是图像深度。表示一个像素的位数越多，它能表达的颜色数目就越多，而它的深度就越深。</p></blockquote><h4 id="0-1-7位面数量"><a href="#0-1-7位面数量" class="headerlink" title="0.1.7位面数量"></a>0.1.7位面数量</h4><blockquote><p>一幅图像的位面数量相当于组成图像的像素矩阵维数。<br>灰度图像一个位面<br>彩色图像三个位面：红色分量、蓝色分量、绿色分量<br>假定图像尺寸、，每个像素所具有的离散灰度级数为，,那么存储这幅图像所需的位数以及所需的字节数如下：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer4wE9l3mtiayiaSqldER20ae14SYjTyy1Tm3PYJfg1K0CEnc61Q9muFFQuexE2HY7icN4uEKSFsL7erA/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="0-1-8邻域与邻接"><a href="#0-1-8邻域与邻接" class="headerlink" title="0.1.8邻域与邻接"></a>0.1.8邻域与邻接</h4><h5 id="0-1-8-1领域"><a href="#0-1-8-1领域" class="headerlink" title="0.1.8.1领域"></a>0.1.8.1领域</h5><blockquote><p>邻域：数字图像中，邻域分为4邻域和8邻域，4邻域就是某个（x,y）点的上下左右四个点，8邻域再加上左上右上左下右下四个点。如果p在q周围的8个点内，就是p在q的8邻域内。</p></blockquote><h6 id="0-1-8-1-1四邻域"><a href="#0-1-8-1-1四邻域" class="headerlink" title="0.1.8.1.1四邻域"></a>0.1.8.1.1四邻域</h6><blockquote><p><img alt="4邻域" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer4wE9l3mtiayiaSqldER20ae1bKNfk2OWZXln7rVezatbx5Sor4xrEdHAr3zJcXWTdttBAnicgOYDwKg/0?wx_fmt=png" class="lazyload"></p></blockquote><h6 id="0-1-8-1-2对角邻域"><a href="#0-1-8-1-2对角邻域" class="headerlink" title="0.1.8.1.2对角邻域"></a>0.1.8.1.2对角邻域</h6><blockquote><p><img alt="对角邻域" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer4wE9l3mtiayiaSqldER20ae1ibqo9j5aibUGTpzd4b7rubXqibUR2c53HnodUxE28t3r5AzZ9ypfm1CNg/0?wx_fmt=png" class="lazyload"></p></blockquote><h6 id="0-1-8-1-3八邻域"><a href="#0-1-8-1-3八邻域" class="headerlink" title="0.1.8.1.3八邻域"></a>0.1.8.1.3八邻域</h6><blockquote><p>4邻域和对角邻域的并集就是8邻域</p></blockquote><h5 id="0-1-8-2邻接"><a href="#0-1-8-2邻接" class="headerlink" title="0.1.8.2邻接"></a>0.1.8.2邻接</h5><blockquote><p>邻接：邻接算是包含了邻域，如果说p和q是邻接，那么p和q必须互在邻域内，而且这两个的像素还要都在同一个集合V1内。（什么叫都在集合V1内：假如集合V1包含{012345}，这五个数代表的是像素值，而p值为2，q值为6，那它们两个就不在同一个集合V1内，当然如果有个集合V2，它俩可能也在另一个集合V2内）数字图像中常见的邻接有三种，4邻接、8邻接和m邻接。如果p在q的4邻域内，且q和p的值都在V中，那么p和q是4邻接的，8邻接概念一样。m邻接（mixed，混合邻接）不太一样，如果q和p互在8邻域内，p和q都在V内，且q的4邻域和p的4邻域的共同覆盖的点不在V内，则p和q是m邻接的。m邻接是为了消除8邻接的二义性而引进的。比如有个3*3矩阵{0,1，1；0,1,0；0,0,1}，假设对于V={1}的集合而言，如果两个点能构成邻接，就算有一条路可以通过，那么右上角的1走到右下角的1，如果按照8邻接有两条路，而按照m邻接，只有一条路，这就是m邻接提出的意义。</p></blockquote><h6 id="0-1-8-2-1四-邻接"><a href="#0-1-8-2-1四-邻接" class="headerlink" title="0.1.8.2.1四-邻接"></a>0.1.8.2.1四-邻接</h6><blockquote><ul><li>2个像素p和q在V中取值；</li><li>且q在中p的4邻域中<br><img alt="4-邻接" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer4wE9l3mtiayiaSqldER20ae13XNEC0oRQRCqnWUpWg7jRGyAf5tJsDUgUqAPFfjvdylNncUuaRSFlw/0?wx_fmt=png" class="lazyload"></li></ul></blockquote><h6 id="0-1-8-2-2八-邻域"><a href="#0-1-8-2-2八-邻域" class="headerlink" title="0.1.8.2.2八-邻域"></a>0.1.8.2.2八-邻域</h6><blockquote><ul><li>2个像素p和q在V中取值；</li><li>且q在中p的8邻域中<br><img alt="8-邻域" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer4wE9l3mtiayiaSqldER20ae1j8PAsJ7ibtuAOaiaQuXfmflMHX4WOC8iahvPb2r7Y4ePvTrQW1Le5Zwjg/0?wx_fmt=png" class="lazyload"></li></ul></blockquote><h6 id="0-1-8-2-3四-邻接和八-邻接的关系"><a href="#0-1-8-2-3四-邻接和八-邻接的关系" class="headerlink" title="0.1.8.2.3四-邻接和八-邻接的关系"></a>0.1.8.2.3四-邻接和八-邻接的关系</h6><blockquote><p>2个像素p和q在V中取值且满足下列条件之一<br>   1.q在中p的4-邻域中<br>   2.q在中p的对角邻域中且集合N(4)(p)和N(4)(q)是空集<br><img alt="4和8邻接的关系" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer4wE9l3mtiayiaSqldER20ae1dW9AibqwlcEo5wgAUhTnDe96PTqsRRs6GNoGvSj18tq26ykFur4JSxw/0?wx_fmt=png" class="lazyload"><br> <strong>实质：</strong><br> 当像素间同时存在4-邻接和8-邻接时，优先采用4-邻接，屏蔽两个和统一像素间存在4-邻接的像素之间的8-邻接。</p></blockquote><h6 id="0-1-8-2-2-3m-邻接（混合邻接）"><a href="#0-1-8-2-2-3m-邻接（混合邻接）" class="headerlink" title="0.1.8.2.2.3m-邻接（混合邻接）"></a>0.1.8.2.2.3m-邻接（混合邻接）</h6><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rE8U6LpS2RzWexVu1agtX8WwUy4m9eLlMXZD3eXMa5aicB1oQavjbnSQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rTxKERFicjhmFE35qaRLhP7k1eU3NbDhYOcdsictcgcXlnDW7JicaBCcLg/0?wx_fmt=png" class="lazyload"><br>实质：当像素间同时存在4-邻接和8-邻接时，优先采用4-邻接，屏蔽两个和统一像素间存在4-邻接的像素之间的8-邻接。</p></blockquote><h4 id="0-1-9连通性"><a href="#0-1-9连通性" class="headerlink" title="0.1.9连通性"></a>0.1.9连通性</h4><h5 id="0-1-9-1通路"><a href="#0-1-9-1通路" class="headerlink" title="0.1.9.1通路"></a>0.1.9.1通路</h5><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rEG5QUmvEKqpdQ0085EiaWOB5GmEYgzJdaxXLgqGiblUBVyE8BCibRetYQ/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="0-1-9-2连通"><a href="#0-1-9-2连通" class="headerlink" title="0.1.9.2连通"></a>0.1.9.2连通</h5><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rsPPxO4D0DDGmK1cabQib1KemktllpeTYEA6FISBHCMdROuX9OdhaY0w/0?wx_fmt=png" class="lazyload"><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rp80EzTNAOTuvX2JhDeU1iay1cgE223YgaDibOKIJXEHW1vJ3sj9KRmIQ/0?wx_fmt=png" class="lazyload"><br>实例：像素s和t间（上图）<br>4-连通：不存在<br>8-连通：2条<br>m-连通：1条</p></blockquote><h4 id="0-1-10距离度量"><a href="#0-1-10距离度量" class="headerlink" title="0.1.10距离度量"></a>0.1.10距离度量</h4><h5 id="0-1-10-1距离"><a href="#0-1-10-1距离" class="headerlink" title="0.1.10.1距离"></a>0.1.10.1距离</h5><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rWXQp7PuadcTCTkHsRZO3PoPNng1rTroCr6f4qic0wk2eJmP2TMKGZKA/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="0-1-10-2欧氏距离"><a href="#0-1-10-2欧氏距离" class="headerlink" title="0.1.10.2欧氏距离"></a>0.1.10.2欧氏距离</h5><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7ry1oic2TMHDQlictuhUibIo8QyxbhGbBCiaicGsicyoIZmoPyI1wuUI44b1pA/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="0-1-10-3城市距离"><a href="#0-1-10-3城市距离" class="headerlink" title="0.1.10.3城市距离"></a>0.1.10.3城市距离</h5><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rJruicqZdG795cZeHulgBHQOsHn2l9hBAib0HF7ib98SyuxIWZBSpqoGxw/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="0-1-11数字图像格式"><a href="#0-1-11数字图像格式" class="headerlink" title="0.1.11数字图像格式"></a>0.1.11数字图像格式</h4><h5 id="0-1-11-1矢量图"><a href="#0-1-11-1矢量图" class="headerlink" title="0.1.11.1矢量图"></a>0.1.11.1矢量图</h5><blockquote><p>用数学公式描述的图像，用一系列绘图指令表示图像；图像中每个形状都用一个完整的公式描述，称为一个对象。<br>优点：<br>A．文件数据量很小；<br>B．图像质量与分辨率无关；<br>无论图像放大或缩小多少倍，总是以显示设备允许的最大清晰度显示。计算机计算与显示图像时，往往能看到画图的过程。<br>缺点：<br>A．不易制作色调丰富或色彩变化太多的图像；<br>B．绘出来的图像不是很逼真；<br>C．不易在不同的软件间交换文件。</p></blockquote><h5 id="0-1-11-2位图"><a href="#0-1-11-2位图" class="headerlink" title="0.1.11.2位图"></a>0.1.11.2位图</h5><blockquote><p>通过像素点表示图像，每个像素具有颜色属性和位置属性。<br>优点：<br>A．显示速度快；<br>B．真实世界的图像可以通过扫描仪、数码相机、摄像机等设备方便的转化为点位图<br>缺点：<br>A．存储和传输时数据量比较大；<br>B．缩放、旋转时算法复杂且容易失真</p></blockquote><h6 id="0-1-11-2-1线画稿-Line-Art"><a href="#0-1-11-2-1线画稿-Line-Art" class="headerlink" title="0.1.11.2.1线画稿(Line Art)"></a>0.1.11.2.1线画稿(Line Art)</h6><blockquote><p>只有黑白两种颜色。适合于由黑白两色构成而没有灰度阴影的图像。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7ralP8Ia0BzaCibib64O8fHGFd3ib7ib8Y9evibNKvBX9A6npuv9AQ3HFTJBw/0?wx_fmt=png" class="lazyload"></p></blockquote><h6 id="0-1-11-2灰度图像-GrayScale"><a href="#0-1-11-2灰度图像-GrayScale" class="headerlink" title="0.1.11.2灰度图像(GrayScale)"></a>0.1.11.2灰度图像(GrayScale)</h6><blockquote><p>从技术上说，就是具有从黑到白的若干种灰度的单色图像。<br>若灰度图像像素的灰度级用8bit表示，则每个像素都是介于黑色和白色之间的256(28=256)种灰度种的一种.<br>通常所说的黑白图片，其实包含了黑白之间的所有灰度色调。</p></blockquote><h6 id="0-1-11-3索引颜色图像-Index-Color"><a href="#0-1-11-3索引颜色图像-Index-Color" class="headerlink" title="0.1.11.3索引颜色图像(Index Color)"></a>0.1.11.3索引颜色图像(Index Color)</h6><blockquote><p>索引颜色通常也称为映射颜色。在这种模式下，颜色是一组预先定义的、有限的颜色。<br>索引颜色的图像最多只能显示256中颜色。<br>索引颜色图像在图像文件里定义索引颜色。打开该文件时，构成该图像具有颜色的索引值就被读入程序里，然后根据索引值找到最终的颜色。</p></blockquote><h6 id="0-1-11-4真彩色图像-True-Color-24位图"><a href="#0-1-11-4真彩色图像-True-Color-24位图" class="headerlink" title="0.1.11.4真彩色图像(True Color)-24位图"></a>0.1.11.4真彩色图像(True Color)-24位图</h6><blockquote><p>自然界中几乎所有颜色都可以有红、绿、蓝（R、G、B）组合而成。<br>真彩色图像中，每一个像素由红、绿和蓝三个字节组成，每个字节为8bit，表示0到255之间的不同的亮度值。<br>256×256×256，能表示约1670万种颜色。<br>颜色深度为每个像素24位的数字图像是目前所能获取、浏览和保存的颜色信息最丰富的彩色图像，由于它所表达的颜色远远超出了人眼所能辨别的范围，故将其称为“真彩色”。<br>真彩色图并不是说一幅图包含了所有的颜色，而是说它具有所有颜色的能力，即最多可以包含所有的颜色。<br><strong>常见RGB颜色：</strong><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rqO34xyqcK6ASR7eHkIn1fJRwBle8RiarSicFUiay3Js9XLniaY6mxaP6WQ/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="0-1-12图像文件格式"><a href="#0-1-12图像文件格式" class="headerlink" title="0.1.12图像文件格式"></a>0.1.12图像文件格式</h4><blockquote><p>图像文件的格式，即图像文件的数据构成。<br>一般每种图像文件均有一个文件头，在文件头之后是图像数据。<br>文件头：一般包含文件类型、文件制作者、制作时间、版本号、文件大小等内容。内容由制作该图像文件的公司决定<br>图像数据：各种图像文件的制作还涉及到图像文件的压缩方式和存储效率等。<br>数字图像有多种存储格式，每种格式一般由不同的开发商支持。随着信息技术的发展和图像应用领域的不断拓宽，还会出现新的图像格式。<br>图像文件格式体系<br>1.互联网用：GIF、JPG、PNG<br>2.印刷用：TIF、JPG、TAG、PCX<br>3.国际标准：TIF、JPG</p></blockquote><h5 id="0-1-12-1BMP格式"><a href="#0-1-12-1BMP格式" class="headerlink" title="0.1.12.1BMP格式"></a>0.1.12.1<strong>BMP</strong>格式</h5><h6 id="0-1-12-1-1位图文件头"><a href="#0-1-12-1-1位图文件头" class="headerlink" title="0.1.12.1.1位图文件头"></a>0.1.12.1.1位图文件头</h6><blockquote><p>位图文件图是一个结构，其定义如下：<img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rADsCwugYGDX5KFHQ87hTJ1SthvKCtNUQB0zwaDiarltwcZceuTvLKaQ/0?wx_fmt=png" class="lazyload">结构长度固定，为14个字节（WORD为无符号16位整数，DWORD为无符号32位整数）</p></blockquote><h6 id="0-1-12-1-2位图信息头"><a href="#0-1-12-1-2位图信息头" class="headerlink" title="0.1.12.1.2位图信息头"></a>0.1.12.1.2位图信息头</h6><blockquote><p>位图信息头是一个结构，其定义如下：<img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rmOvXFv8m46VklC0TepE9mGJaRTg48Td74iby6SKVor6jAiaTPrPjU38w/0?wx_fmt=png" class="lazyload">结构长度为40个字节（LONG为32位整数）</p></blockquote><h6 id="0-1-12-1-3调色板"><a href="#0-1-12-1-3调色板" class="headerlink" title="0.1.12.1.3调色板"></a>0.1.12.1.3调色板</h6><blockquote><p>实际上是一个数组，共有biClrUsed个元素。数组中每个元素的类型是是一个RGBQUAD结构，占4个字节。<img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rYQqEmQwgw2obmgR4rVToERAQS3vJibLrT3nBrUfVhick7feMLb9YGPcQ/0?wx_fmt=png" class="lazyload">真彩色图像不需要调色板，BITMAPINFOHEADER后直接是位图数据。</p></blockquote><h6 id="0-1-12-1-4实际的位图数据"><a href="#0-1-12-1-4实际的位图数据" class="headerlink" title="0.1.12.1.4实际的位图数据"></a>0.1.12.1.4实际的位图数据</h6><blockquote><p>真彩色图像，图像数据就是实际的R、G、B值，三个字节表示1个像素。<br>对于用到调色板的位图，图像数据就是该像素颜色在调色板中的索引值。<br>2色位图，用1位就可以表示该像素的颜色（一般0表示黑，1表示百=白），所以一个字节可以表示8个像素。<br>16色位图，用4位可以表示一个像素的颜色，所以一个字节可以表示2个像素。<br>256色位图，一个字节刚好可以表示1个像素。<br>下面两点需注意：<br>(1)每一行的字节数必须是4的整数倍，如果不是，则需要补齐。<br>(2)BMP文件的数据存放是从下到上，从左到右的。<br>从文件中最先读到的是图像最下面一行的左边第一个像素，然后是左边第二个像素，接下来是倒数第二行左边第一个像素，左边第二个像素。以此类推，最后得到的是最上面一行的最右边的一个像素。</p></blockquote><h6 id="0-1-12-1-5例子"><a href="#0-1-12-1-5例子" class="headerlink" title="0.1.12.1.5例子"></a>0.1.12.1.5例子</h6><p>例1：</p><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r8sZGnq7tNGj7l1T74C0ibyhSCbOaBmtprrqnVZauxkmeooFTHMfgYWw/0?wx_fmt=png" class="lazyload"><br>200×200×3×8bit,每个像素需要用3个字节 120k字节<br>图像中最多只有16中颜色。用一个表：表中的每一行记录一种颜色RGB值。当表示一个像素的颜色时，只需要指出该颜色是在第几行，即该颜色在表中的索引值。<br>表占用的字节为3(RGB) ×8(bit) ×16(颜色)=48字节<br>16种颜色可以用4bit表示，一个像素要用半个字节。整个图像要用200×200×0.5，约20k字节，约为前面的1/6。<br>RGB表，即调色板。</p></blockquote><p>例2：</p><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rJIwPC6TutoaPKMk1yDdRAn41CVm4IQCyemOWjyMRmFVs1nkzjXUrFQ/0?wx_fmt=png" class="lazyload">反色（invert）:就是形成底片效果。<br>反色的实际含义是将R、G、B值反转。<br>若颜色的量化级别是256，则新图的R、G、B值为255减去原图的R、G、B值。包括真彩图、带调色板的彩色图（伪彩色图）和灰度图。<br>真彩图：把反转后的R、G、B值写入新图即可。<br>带调色板彩色图：只需要将调色板中的颜色反转，形成新调色板，位图数据不动。<br>灰度图：直接反转。</p></blockquote><h3 id="0-2数学概念"><a href="#0-2数学概念" class="headerlink" title="0.2数学概念"></a>0.2数学概念</h3><h4 id="0-2-1算子"><a href="#0-2-1算子" class="headerlink" title="0.2.1算子"></a>0.2.1<a href="https://baike.baidu.com/item/%E7%AE%97%E5%AD%90/970194?fr=aladdin" target="_blank" rel="noopener">算子</a></h4><blockquote><p>算子是一个函数空间到函数空间上的映射O：X→X。广义上的算子可以推广到任何空间，如内积空间等。<br>广义的讲，对任何函数进行某一项操作都可以认为是一个算子，甚至包括求幂次，开方都可以认为是一个算子，只是有的算子我们用了一个符号来代替他所要进行的运算罢了，所以大家看到算子就不要纠结，他和 的 没区别，它甚至和加减乘除的基本运算符号都没有区别，只是他可以对单对象操作罢了(有的符号比如大于、小于号要对多对象操作)。又比如取概率P{X&lt;x}，概率是集合{X&lt;x}(他是属于实数集的子集)对[0,1]区间的一个映射，我们知道实数域和[0,1]区间是可以一一映射的(这个后面再说)，所以取概率符号P，我们认为也是一个算子，和微分，积分算子算子没区别。总而言之，算子就是映射，就是关系，就是变换。</p></blockquote><h4 id="0-2-2卷积"><a href="#0-2-2卷积" class="headerlink" title="0.2.2卷积"></a>0.2.2<a href="https://baike.baidu.com/item/%E5%8D%B7%E7%A7%AF/9411006?fr=aladdin" target="_blank" rel="noopener">卷积</a></h4><blockquote><p>在泛函分析中，卷积、旋积或摺积(英语：Convolution)是通过两个函数f 和g 生成第三个函数的一种数学算子，表征函数f 与g经过翻转和平移的重叠部分函数值乘积对重叠长度的积分。<br>如果将参加卷积的一个函数看作区间的指示函数，卷积还可以被看作是“滑动平均”的推广。</p></blockquote><h5 id="0-2-2-1定义"><a href="#0-2-2-1定义" class="headerlink" title="0.2.2.1定义"></a>0.2.2.1定义</h5><blockquote><p><img alt="卷积定义" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer4wE9l3mtiayiaSqldER20ae1QZq0Jk3sy7ro3xIaskaB5VN3farg1JdId0Xjuoyetw0icnaUhp5QKnQ/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="0-2-3平滑算子"><a href="#0-2-3平滑算子" class="headerlink" title="0.2.3平滑算子"></a>0.2.3平滑算子</h4><h4 id="0-2-4梯度算法（梯度下降）"><a href="#0-2-4梯度算法（梯度下降）" class="headerlink" title="0.2.4梯度算法（梯度下降）"></a>0.2.4梯度算法（<a href="https://baike.baidu.com/item/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/4864937?fr=aladdin" target="_blank" rel="noopener">梯度下降</a>）</h4><h5 id="0-2-4-1定义"><a href="#0-2-4-1定义" class="headerlink" title="0.2.4.1定义"></a>0.2.4.1定义</h5><blockquote><p>梯度下降是迭代法的一种,可以用于求解最小二乘问题(线性和非线性都可以)。在求解机器学习算法的模型参数，即无约束优化问题时，梯度下降（Gradient Descent）是最常采用的方法之一，另一种常用的方法是最小二乘法。在求解损失函数的最小值时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数和模型参数值。反过来，如果我们需要求解损失函数的最大值，这时就需要用梯度上升法来迭代了。在机器学习中，基于基本的梯度下降法发展了两种梯度下降方法，分别为随机梯度下降法和批量梯度下降法。</p></blockquote><h5 id="0-2-4-2简介"><a href="#0-2-4-2简介" class="headerlink" title="0.2.4.2简介"></a>0.2.4.2简介</h5><blockquote><p><img alt data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer4wE9l3mtiayiaSqldER20ae1Ef1VA5GIXWhr8TiaF6xLpkvOpJPHTbdXMIDNwhIFTR6u5fib0TGLueWg/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="0-2-4-3缺点"><a href="#0-2-4-3缺点" class="headerlink" title="0.2.4.3缺点"></a>0.2.4.3缺点</h5><blockquote><ul><li>靠近极小值时收敛速度减慢。</li><li>直线搜索时可能会产生一些问题。</li><li>可能会“之字形”地下降。</li></ul></blockquote><h5 id="0-2-4-4求解过程"><a href="#0-2-4-4求解过程" class="headerlink" title="0.2.4.4求解过程"></a>0.2.4.4求解过程</h5><blockquote><p><img alt data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer4wE9l3mtiayiaSqldER20ae1nbnGicbGYu96LELUZj81bm4hu25dc8xd7BHzzKgQNNtD3OnYWAI58qA/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="0-2-5概率密度"><a href="#0-2-5概率密度" class="headerlink" title="0.2.5概率密度"></a>0.2.5<a href="https://blog.csdn.net/sigai_csdn/article/details/83586458" target="_blank" rel="noopener">概率密度</a></h4><blockquote><p>概率指事件随机发生的机率，对于均匀分布函数，概率密度等于一段区间(事件的取值范围)的概率除以该段区间的长度，它的值是非负的，可以很大也可以很小。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rSwU52HTTXDDMO4PmoE8EicfPXdvGUZwMoMCnGuc1ylTD8Vj52Ynp5cw/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="0-2-6分布函数"><a href="#0-2-6分布函数" class="headerlink" title="0.2.6分布函数"></a>0.2.6<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0/2439796?fr=aladdin" target="_blank" rel="noopener">分布函数</a></h4><blockquote><p>分布函数（英文Cumulative Distribution Function, 简称CDF），是概率统计中重要的函数，正是通过它，可用数学分析的方法来研究随机变量。分布函数是随机变量最重要的概率特征，分布函数可以完整地描述随机变量的统计规律，并且决定随机变量的一切其他概率特征。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rEoVS8IItEqvV6maMLrueJwjPb0sTEIHGg1oYhGLPtl8FXp4HicIULuQ/0?wx_fmt=png" class="lazyload"></p></blockquote><h2 id="1数字图像处理基础"><a href="#1数字图像处理基础" class="headerlink" title="1数字图像处理基础"></a>1数字图像处理基础</h2><h3 id="1-1直方图变化"><a href="#1-1直方图变化" class="headerlink" title="1.1直方图变化"></a>1.1直方图变化</h3><h4 id="1-1-1灰度直方图"><a href="#1-1-1灰度直方图" class="headerlink" title="1.1.1灰度直方图"></a>1.1.1灰度直方图</h4><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rsAqFmVm9Rg7BAtuvlx3ic58OeCJPgAbgib4o7VsnRyBrV9Q0VWTPeOUA/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rm5ftURKRiaHpsqysOb7EjL9mibPRiabD0JuRBIGcmuqkFGjib6FH8xE27A/0?wx_fmt=png" class="lazyload"><br>直方图性质<br>1.无空间信息；<br>2.直方图与图像一对多关系；<br>3.可叠加性（全图与子图像）<br><strong>直方图的作用：</strong><br>直方图反映了图像清晰程度。直方图均匀分布时，图像最清晰。<br>判断一幅图像是否清晰，查看是否合理的利用了全部被允许的灰度级。<br>一幅图像应该尽可能利用全部可能的灰度级。</p></blockquote><blockquote><p>中间灰度级像素多，动态范围小，图像对比度低。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rBDd8NRPGGHNouRicPZGrctibEPK7zZ3xG9SuaOhtNIEy20MeerGnNmXQ/0?wx_fmt=png" class="lazyload"></p></blockquote><blockquote><p>高灰度的像素占了绝大部分，图像偏亮。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rJ7U7RhrxILxylvQAC4WC5GjTDH198mNibFeAnVYExCJDcDEX1icsws9A/0?wx_fmt=png" class="lazyload"></p></blockquote><blockquote><p>过低、过高灰度级的像素占了绝大部分，对比度过大。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r1Os1g0t2m8m8cbKFD5xMibJ4V8SS82ceADXI3DCd9qz5TiadWZn3xvibQ/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="1-1-2直方图均衡化"><a href="#1-1-2直方图均衡化" class="headerlink" title="1.1.2直方图均衡化"></a>1.1.2直方图均衡化</h4><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rd76IrTV4ttic8HfSYb6hB2PY6YVbIQOb1c7G0vTBib3HSjIsIOLc8nIQ/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="1-1-2-1直方图均衡化灰度映射函数"><a href="#1-1-2-1直方图均衡化灰度映射函数" class="headerlink" title="1.1.2.1直方图均衡化灰度映射函数"></a>1.1.2.1直方图均衡化灰度映射函数</h5><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rW3u4fmz8tBRTwmo9W7icn05b31chSskO1RsyApc5ZQ7LwMW0ibUK4fog/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rThPsvp88ZDCSCmftn1iacB2bDluWaw9Bp2afGAVHJUN3nAicPX0NJ94Q/0?wx_fmt=png" class="lazyload"><br><strong>步骤：</strong><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rx16yXjTWjI613ibm3r92IeYrbJhiaKlonhOKSfa8cIKoLrcNZ9ibZibXuw/0?wx_fmt=png" class="lazyload"></p></blockquote><blockquote><p><strong>例题：</strong><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rbca3PicibncFCSdwgZj2ppkojsSREqIgUa7SccibyicqY9D9S4gfoydxaw/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r8nUh2JJxSmb0BjOQcWFmQPhJkLxaczKaAwiamt8D97vabA6PZrDpoaw/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rRb0ywA2Ohb8nYUBf8xmJhDuwupQsYR3Dx1Vg630CluIP39pIvYTEiag/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r1rs2Xibr7uOmWjqxGIY76XPVYwrSakaiaZbXYaVusa97ewAD85ROOoPA/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7ruKBxk7Aq7CKvUS2nWd1PZjvjgyC9Lomqoa2M7hiaRk82nsP3QWNxyzA/0?wx_fmt=png" class="lazyload"><br>经过直方图处理后，出现了伪轮廓：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rmazAH0X7QDicXJ9icmKz3RGZoogBBBe9icRtjskO33AjChLKsibOvPRIZw/0?wx_fmt=png" class="lazyload"><br>直方图处理图像不适用的情况：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rBs0ictCicCzrqPgdCm4qPWjGlIzaEicJhkRaI0uXonNsoCVNl016QxPLQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rjyOyZqC60jue7J6ZHYbpONGpP1Doll3SdoDr7TuhBvJAGUa6YE3Fuw/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="1-1-3直方图规定化"><a href="#1-1-3直方图规定化" class="headerlink" title="1.1.3直方图规定化"></a>1.1.3直方图规定化</h4><blockquote><p>修改一幅图像的直方图，使得它与另一幅图像的直方图匹配或具有一种预先规定的函数形状。<br><strong>目标：</strong> <strong>突出感兴趣的灰度范围，使图像质量改善。</strong><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rO8bKgt8f96cUglDqkMmelMZAAghk1mHPX3bITfQjrHGKg9ErziblVhw/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rQltzMr45oUtEfyNNkAg1NqiaV9MnHusohnGlpoE954qgvALkQk1jZsQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rbzbZwbR83btrUP2DzxB1mNJNvqvf9uFZmOXJB4uVddAzVzE3oicrZyA/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7ra8IqHl1WKVIN309fD0yC9icqmGrDgUZibnfglVEodeH828TKQzAO12nQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rC11Mpk2tJnDMicDTye6XwIb4JerVdfBOByBW4TPrj2PRu6xuMxwDz0w/0?wx_fmt=png" class="lazyload"></p></blockquote><h3 id="1-2灰度变换"><a href="#1-2灰度变换" class="headerlink" title="1.2灰度变换"></a>1.2灰度变换</h3><blockquote><p><strong>定义：</strong><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r8KOmMHFMGRibE6FpKmWFpPWOFZRPlvANMCWYJ67ryBEB0tbS2gEa9yQ/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="1-2-1线性灰度变换"><a href="#1-2-1线性灰度变换" class="headerlink" title="1.2.1线性灰度变换"></a>1.2.1线性灰度变换</h4><blockquote><p><strong>定义：</strong><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rUhNpEncBJicOwYVFEhQVJJtp73S1cwbEibqYe90hQAd9xaFtG8HT59HQ/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="1-2-1-1加常数"><a href="#1-2-1-1加常数" class="headerlink" title="1.2.1.1加常数"></a>1.2.1.1加常数</h5><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7ruhSc32MYibibyKDAVbpAOxXdQkulnzndFfcfzsibg8U8SuwweZ4ib04WDg/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rrrSlNQq2tTOXVKOJxcZeIwl0ZdA4YIJJGUPbLElQOEBCWib7fEtcJ8Q/0?wx_fmt=png" class="lazyload"><br>图像亮度增加：<img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rGFmIcZIZHzHDjicqoLxj1ThS3UT8Wicibia716Gp8Nvx0FhVcWqkeMgCicA/0?wx_fmt=png" class="lazyload"><br>图像亮度降低：<img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r2Jdkiam9YnibE2umJ3MmibK6bIWTJrzr4qJVWf1J8z10GUxtibd9mWKwtg/0?wx_fmt=png" class="lazyload"><br>对比度降低：<img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rwH0ib2qia3ciarf6Fx6QibrW5tOAcLVg1Y4v9qHRiay9wgVdqiahbUq2Ou0Q/0?wx_fmt=png" class="lazyload"><br>图像的反转公式：<img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7riaAOa8cAVfRBBmeic8iadCrPOYiaCOCu17j5mLbNvDpHICIsy4h1JT9aUw/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rYaL6X0FddMKxDK9brmIdMVCKv0Fvus372VG2ETzJJg8ibQyDqIS8wxg/0?wx_fmt=png" class="lazyload"><br>反转例子：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rNgOr9MKxMS7SVbicZpV8o71T5eUq4mgJv9crZlcPOLUl0pFYlNkDTlw/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="1-2-1-2乘常数"><a href="#1-2-1-2乘常数" class="headerlink" title="1.2.1.2乘常数"></a>1.2.1.2乘常数</h5><blockquote><p>公式：g(x,y)=C*f(x,y)<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r7LL3iahl67urH8CppgUGFUmBQGXIib6bbreNwfX3ibehZ223CWyKCgCUw/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rcIvbWRbT1XYviaBhpNRpaYHX8ODbkmxAhibQD6ibCUHcibxBwGKxSsnQGg/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r23djncLjVic7dxPTu0HCOWX8O6Y42I4lbvbGOialcQVsxvouArnwF0Sg/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rOZvpHaZQvBwW0ibdwvp1mFx8RQYrGhVR8nzgNDJVlJY83y0UgVJerMg/0?wx_fmt=png" class="lazyload"><br>线性灰度一般表达式：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rkh9yfVj9CYqgC9Z9qfDtKocFy0uuD1Hha9HPnwprzf47GsvaYKV5DQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rEhM3dhA39jvwrD3g3w24Kg8Dy3flUk8Cv8a3HFC4UHgqnuRDict975w/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="1-2-2-分段线性灰度变换"><a href="#1-2-2-分段线性灰度变换" class="headerlink" title="1.2.2 分段线性灰度变换"></a>1.2.2 分段线性灰度变换</h4><blockquote><p><strong>目的：将感兴趣的灰度范围线性拓展，相对抑制不感兴趣的灰度区域。</strong><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rOFoe29NYY8ia4zRIG6P3z4mMdJL2jCjyouaeNFlX4wf5C1UTGzZDWTA/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rxdpXCqeJZQuvy0h6AsRBXRcvibxYr6piaajU56qUXuxo6ZAgTXHvGUCw/0?wx_fmt=png" class="lazyload"><br>分段线性灰度变换例子：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rF6OHyYSiaGcxia8IXjcBSrccgcOIhU0nysbwTJbl6ZX0acMulDWxB4nw/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="1-2-2-1削波"><a href="#1-2-2-1削波" class="headerlink" title="1.2.2.1削波"></a>1.2.2.1削波</h5><blockquote><p><strong>削波(cliping)</strong> 可以看做是<strong>对比度拓展</strong>的一个特例。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7reZASibS2uKge0icWmmaWxQ24jUpicCRItvnqGOXFGgkE3jgew8tvxPRjQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7ryVIk5wWyXCe89SdC6iaEUKclppU3qXqBoLP5egmo79nhAtAO5kEQRuQ/0?wx_fmt=png" class="lazyload"><br>削波例子：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rZialJicqBdMK0N9buPyZPm3gjK8z1icOynOpKZu26j2XdAg83cMWKXz6Q/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="1-2-2-2阈值化"><a href="#1-2-2-2阈值化" class="headerlink" title="1.2.2.2阈值化"></a>1.2.2.2阈值化</h5><blockquote><p><strong>阈值化（thresholding）</strong> 可以看作是<strong>削波</strong>的一个特例。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7ryANhJicIEydwG6icxo3OgY62DoCY28icLXybx9tq5kDEE9Abvlln4jexg/0?wx_fmt=png" class="lazyload"><br>阈值化后的图像是<strong>黑白二值图</strong>。阈值化是<strong>灰度图像</strong>转<strong>二值图像</strong>的一种常用方法。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r0n5RK0WPZBRtMiahVjCkslGwpkicobGzibHgKsVdZam3o13CD9lIE4Peg/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rvBlCNl0KZBaYA3F5r3ibjmlMctNMPuBDvfXy7oYDUTiaibV7JSvaAVnMA/0?wx_fmt=png" class="lazyload"><br>阈值化处理后的结果，是一幅<strong>二值图像图</strong>。</p></blockquote><h5 id="1-2-2-3灰度窗口变换"><a href="#1-2-2-3灰度窗口变换" class="headerlink" title="1.2.2.3灰度窗口变换"></a>1.2.2.3灰度窗口变换</h5><blockquote><p>灰度窗口变换是将某一区间的<strong>灰度级</strong>和<strong>其它部分（背景）</strong> 分开。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rGEU0RtSK5B954pFexcRqA7D9ShUYeEVzF6pj2UXVqibucicC9JvHuOSw/0?wx_fmt=png" class="lazyload"><br>灰度窗口变换可以<strong>检测出在某一灰度窗口范围内的所有像素</strong>，是图像灰度分析中的一个有力工具。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7ribnyicicr7e6V19Rkl5NvKhy2FNLzej1WY7lDB4h2kKfFCC0YuwoPoKNg/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="1-2-3非线性灰度变换"><a href="#1-2-3非线性灰度变换" class="headerlink" title="1.2.3非线性灰度变换"></a>1.2.3非线性灰度变换</h4><h5 id="1-2-3-1对数变换"><a href="#1-2-3-1对数变换" class="headerlink" title="1.2.3.1对数变换"></a>1.2.3.1对数变换</h5><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rLWq61oeNFRpaWibbcAlgPw0PvwTybDAv3TOCMFVngpK7QBGMhibpOOGA/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rtOdOJ66WdplUia0ayO37HPg8CwgNiacATMoehMIIapU8BecR9OwiaFzdA/0?wx_fmt=png" class="lazyload"><br>a,b,c是按需可以调整的参数。<br>低灰度区拓展，高灰度区压缩<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r6hIf9Bl8YWBggjA1EJwnIhs5AgicdSiawK2R5mdtZz7mpHRibgibn2faxQ/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="1-2-3-2指数变换"><a href="#1-2-3-2指数变换" class="headerlink" title="1.2.3.2指数变换"></a>1.2.3.2指数变换</h5><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rZibcNGLvaOghZBHPbn6RNywu8BDQVZ0rjuCW4cszxaXLpGRbouZ0ndA/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rYEnzKyfVRVc1sxUVicfZz2OPuMibFVSDW0Xhfq1S4bRftk0Py2aKcDWQ/0?wx_fmt=png" class="lazyload"><br>a,b,c是按需可以调整的参数。<br>低灰度区压缩，高灰度区拓展<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rKDKbVen4fhuVA21wR70MxVhIWMibI185icd4UJKxFWnhuaBs0Iqtiakxw/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="1-2-3-3幂函数"><a href="#1-2-3-3幂函数" class="headerlink" title="1.2.3.3幂函数"></a>1.2.3.3幂函数</h5><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rJHiaUE596C8JqgL2cQJZic141E2cySTCcXLaM15c8RDIPVEBicsDANBkA/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="1-2-3-4LUT-Look-Up-Table"><a href="#1-2-3-4LUT-Look-Up-Table" class="headerlink" title="1.2.3.4LUT(Look-Up-Table)"></a>1.2.3.4LUT(Look-Up-Table)</h5><blockquote><p>灰度级变换定义了输入像素值与输出像素之间的映射关系，通常通过<strong>查表</strong>实现。可用户自定义。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rDDhiaiaho3ognQX5y14LKs4gdT26OBicLPdNhHaFZphyehU731CJpTGrg/0?wx_fmt=png" class="lazyload"><br>组合使用：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r7fxvDkQpXjlibj9MzYXCSWl7pLY0yzSqK47QNtIThH2ex1ZkBwicDhkg/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rWYJJ8RVKTQXTbypMCYMV4IqDaWVoCXWKcol1uic46JoY7zQmXxUVp4w/0?wx_fmt=png" class="lazyload"></p></blockquote><h3 id="1-3图像运算"><a href="#1-3图像运算" class="headerlink" title="1.3图像运算"></a>1.3图像运算</h3><h4 id="1-3-1算术运算"><a href="#1-3-1算术运算" class="headerlink" title="1.3.1算术运算"></a>1.3.1算术运算</h4><blockquote><ul><li>加法、减法</li><li>乘法、除法</li></ul></blockquote><h5 id="1-3-1-1加法"><a href="#1-3-1-1加法" class="headerlink" title="1.3.1.1加法"></a>1.3.1.1加法</h5><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r12aglLPOD3Eibho1H55WRxa0X7g4tMzgeic9VbATnXnfXhjsrpOHHwZw/0?wx_fmt=png" class="lazyload"><br>主要应用举例：<br>(1)去除“叠加性”噪声（多幅图像平均）<br>(2)生成图像叠加效果<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r1KXr9icUEnxJemwsbUD47O31kjsG29AES52TcDXGRB0SXMaDkIbvnBQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rv5kiaQsib3acMSIGqHfHDZicQwfYRxEUBr1p7fFhPmDqJK4w4fcQUcGhg/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="1-3-1-2减法"><a href="#1-3-1-2减法" class="headerlink" title="1.3.1.2减法"></a>1.3.1.2减法</h5><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rfQlsONrJV81IcAtkD5mcSE20RDqwpgfibKMOZJXWkONLMLhqLyrg6BQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rIiaExwsv7NzA8yEl5ss968MxHlTRqOFcPd9yGTRdiajfZo5ozFJkSYNw/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7rVHDlRWK4RDLn5XtUQPR64zTUhnMu5WElrFic78y50jicib3x5iaLAicZkGw/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7re49wibiasFibMk2ciaWz0mJXm46lkGNgPFOw4FgjHYhm2NQtAbJJfHIIfQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r87bygfprA0piaJgIntzYiaWlia5uqWG8VO3D5dcZCwD72s6gP8cDQ4uGg/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="1-3-1-3乘法"><a href="#1-3-1-3乘法" class="headerlink" title="1.3.1.3乘法"></a>1.3.1.3乘法</h5><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAWb3cb6O0ppSTUBxrXmpwibhY3iaGAjPiaed7IQWPyYnsf23OvSPyV0AYw/0?wx_fmt=png" class="lazyload"><br>主要应用举例：<br>(1)图像的<strong>局部显示</strong><br>(2)用<strong>二值蒙板图像</strong>与<strong>原图像</strong>做乘法<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAicPpoJwkey1nQBPNnenlICMU2l25OKw5QWGBwGDLsHyrcia8CicUeq1Uw/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAFtG5bJh4jMqdAQ5pf1GzicrEXO4HnaEoh5kWoiauZicwJVLC0smKFSuOA/0?wx_fmt=png" class="lazyload"><br><img alt="![enter description here](https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxA0f95iaCw7cQLejibZCZiaxOcBCVu57UoQ26tN5Yciafzp6YARKW9OykW4w/0?wx_fmt=png)" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxA0f95iaCw7cQLejibZCZiaxOcBCVu57UoQ26tN5Yciafzp6YARKW9OykW4w/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="1-3-2逻辑运算"><a href="#1-3-2逻辑运算" class="headerlink" title="1.3.2逻辑运算"></a>1.3.2逻辑运算</h4><blockquote><ul><li>与</li><li>或、异或</li></ul></blockquote><h5 id="1-3-2-1异或运算"><a href="#1-3-2-1异或运算" class="headerlink" title="1.3.2.1异或运算"></a>1.3.2.1异或运算</h5><blockquote><p>公式：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxA9C4N1GMiaV9adQAYDawNzcgEAO5cugXZWB8NkZ7Vnk4MJuRTRB0szCw/0?wx_fmt=png" class="lazyload"><br><strong>只有同时为0时才为0，否则都为1</strong><br>主要应用举例：<br>(1)获得相交子图像<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAZ4VZTcFgw5mMgufZsXudWNOarzKQMfWiadvtUsckaBrsMHPdT2fURtA/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="1-3-2-2或运算"><a href="#1-3-2-2或运算" class="headerlink" title="1.3.2.2或运算"></a>1.3.2.2或运算</h5><blockquote><p>公式：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxA4qiaC5ibv1C2wfTXXfh6kAicCtBzMicUBrZR60OSNDftsibd28TFOvEFUAQ/0?wx_fmt=png" class="lazyload">主要应用举例：<br>(1)合并子图像<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxANib50Bib8ygEIat7TBSjfY02NEAqY9TxJdUbVwoibKNia9oiaAA90G2ewqQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxA9A3skiavKTRstxsuugnic9TOqviaDNsQMRia2PvuAUbHJwW2oKSIUnWpSA/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="1-3-2-3与运算"><a href="#1-3-2-3与运算" class="headerlink" title="1.3.2.3与运算"></a>1.3.2.3与运算</h5><blockquote><p>公式：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAGBWNT4M49osiaj5Zw2Pg8icxWIbO9b7YKiaR0qrZ5ZVJunp18meYTW7qQ/0?wx_fmt=png" class="lazyload"><br>主要应用举例：<br>(1)求两个子图像的相交子图<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAME7ZaQ51Aiafib4Y3LWqFZsXW57vFyE8vEpUHNeic87cVeCkNXlqHNh9Q/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAzFibAwgZhRnOx7iazhwmSwwyZyibGFMRPckYwBlWNXYnicEtcCYMWaf2Bg/0?wx_fmt=png" class="lazyload"><br>比较运算：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAp7ebe0AXP41K4REtH7ibFhu7Ke2t5J6vxPjY59icxCRSx3yJd865gw8A/0?wx_fmt=png" class="lazyload"><br>上图从左到右执行平均、最大值、最小值、Clear if &gt;、Clear if =、Clear if &lt;操作。</p></blockquote><h3 id="1-4几何运算"><a href="#1-4几何运算" class="headerlink" title="1.4几何运算"></a>1.4几何运算</h3><blockquote><p>图像生成过程中，由于系统本身具有非线性或拍摄角度不同，会使生成的图像产生几何失真。几何失真一般分为系统失真和非系统失真，系统失真是有规律的、能预测的；非系统失真则是随机的。<br>例如：<br>(1)镜头畸变；<br>(2)遥感图像校正；<br>(3)图像配准（配准：同一目标两幅图像间的空间对准。）<br>几何变换不改变像素值，仅改变像素所在位置！<br>几何变换可以改变图像中物体之间的空间关系。这种运算可以看成是图像内的各物体在图像内移动的过程。例如，物体的转动、扭曲、倾斜、拉伸等，都是几何运算的结果。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAtzcO1eERz9gh9vib1TNHNbO3F18OxAqBhYVjAIzN16ZGKsc4EUbH2qQ/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="1-4-1基本几何变换定义"><a href="#1-4-1基本几何变换定义" class="headerlink" title="1.4.1基本几何变换定义"></a>1.4.1基本几何变换定义</h4><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxANsab78JArYJzRTVicDOKI9iclWulmrDQeCWicymCbGBImicw44IWspAjXA/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="1-4-2常用的基本几何变换"><a href="#1-4-2常用的基本几何变换" class="headerlink" title="1.4.2常用的基本几何变换"></a>1.4.2常用的基本几何变换</h4><h5 id="1-4-2-1平移变换"><a href="#1-4-2-1平移变换" class="headerlink" title="1.4.2.1平移变换"></a>1.4.2.1平移变换</h5><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxA0UZ0iawhfD6365kcCqPVSRDhyRh0c0IW4S49Z2S8sOMK2IWNcXwxYlw/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxATRzwNY6ibfLLGsT7FbFcl0QqcsT6IzZvXVs21pUHct7Zhg6GoRS5wbA/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAdpjvJ4C6tLR2S8v01ApJgBvBria0K8j7LQ5eDPk4qwScyicFL93hSCZg/0?wx_fmt=png" class="lazyload"><br>移出的部分被截断，文件大小不会改变，新点的值统一设成(0)或(255)<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxApN1d5P5nwibY3w8fyG0L5z18n9a5kcPywbBIXU3dj5gicYia3J7opqZxw/0?wx_fmt=png" class="lazyload"><br>拓展画布，文件大小改变</p></blockquote><h5 id="1-4-2-2镜像变换"><a href="#1-4-2-2镜像变换" class="headerlink" title="1.4.2.2镜像变换"></a>1.4.2.2镜像变换</h5><blockquote><p>包括水平镜像和垂直镜像两种。<br><strong>a、水平镜像</strong><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAtqv8XicYibibj1rLaFLXRGAHbQBueUGUCdo772aUoDkRLOGAe1WbPo6tw/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxA5b1THWO810Q2M2czxqKYTOf06icSExpdBxAOuPjUld9w14t05ViaJlwA/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAOCyrky80ibhiclicrus6Uh4jIZJ3Nezn9lIoGvXBM7lokSVFDpQTcJd5w/0?wx_fmt=png" class="lazyload"><br><strong>b、垂直图像</strong><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAtKMnB3oelM61KBVbrXOZJtv85KNsn5a0g1R1r9G5UiacbdY7wiaXFntA/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxASbFQXF3PFtr7ROE8TevsfsIkeicuicGT6LH94JS5h040bGiaAsYecDOyw/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAQ16LEuZRDK7ZDmucesYicbEODFPK4icLtIykwv4nICHXUbPZPnaS3pkw/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAaz0C7ibvhN08Mia0KwJeOLDicTcU8dqkxXTppPPB92icBOXKENgVl6C3Ww/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="1-4-2-3旋转变换"><a href="#1-4-2-3旋转变换" class="headerlink" title="1.4.2.3旋转变换"></a>1.4.2.3旋转变换</h5><blockquote><p>绕原点旋转-α度<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxA0vsLbKrG2ntdACpgibysKrIWnI1uqKvr2xAVUu8PCUE33uVJiaSmibgNQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAicFpibyYVVbgdfpc0yHwKAmJqk3gu5ibekgoYrP1ZwQcgx22kMmicy98AQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAv8NNHP1z1h1m4oohwibgxRfbk3SDMcRiaLH9uBzvN93nbpPzuuCmEZicg/0?wx_fmt=png" class="lazyload"><br>通常的做法是以图像的中心为圆心旋转<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAOgjYvHZnn5jkcnXF7VDeO119AnI3fTfjeG64rom79icT39bgzMP2YBg/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAa5KUfdnibJLCaDxX9Iw1J5BCVW61lQsae5LvjPUW9MHJI62niaJPicgibg/0?wx_fmt=png" class="lazyload"><br><strong>旋转出现的问题：</strong><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAtsicbKpNDvebvUDHOsia8bJd4lRFEJZZvZBib2SjJlfrOcdVAiaZFsjxyQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxA2gNia3yhMUd8AbhXh1RMibncvYtWWwNKwb057H6DIKyk7icyiajbJj6XBg/0?wx_fmt=png" class="lazyload"><br><strong>原因：</strong><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAeWhYmibSluiaf55g83JtWa2KjuP3gickiaNQaTicdqBCBo9mbphyYh3Rgng/0?wx_fmt=png" class="lazyload"><br>图像旋转后，出现了两个问题：<br>1)像素的排列不是完全按照原有的相邻关系。相邻像素之间只有8个方向。<br>2)会出现许多的空洞点。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAjCsfVic07TR9IXI7BfW57z3EibpKDbVSTcibEJTAQHvr7C2oiav923sZIw/0?wx_fmt=png" class="lazyload"><br>图像旋转出现的两个问题，本质都是因为像素值的填充不连续的。<br>采用插值填充的方法解决</p></blockquote><h5 id="1-4-2-4放缩变换"><a href="#1-4-2-4放缩变换" class="headerlink" title="1.4.2.4放缩变换"></a>1.4.2.4放缩变换</h5><blockquote><p>公式：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAVNpVxLiapf8yibjD9jIEsNa6IvyBNfiauLWEkDd4xkRpsV3zEb4FZt3Tw/0?wx_fmt=png" class="lazyload"><br>a.缩小<br>图像缩小实际上就是对原有的多个数据进行抽取，获得期望缩小尺寸的数据，并且尽量保持原有的特征不丢失。<br>最简单的方法就是等间隔地选取数据。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxANYEOWfcrbOwSsjog7icgcGWl5entKQ6YmQcy8YK9Zwb8abArM3uDepg/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAGoqlNELCVXv0ZrgqDJ6YIIm2G4awMum5Rq42ZfgbiayvWeUickV7REibA/0?wx_fmt=png" class="lazyload"><br>图像缩小后承载的信息量减小，所以画布可相应缩小。<br>b.放大<br>图像放大从字面上看，是图像缩小的逆操作，但是，从信息处理的角度来看，则难易程度完全不一样。<br>图像缩小是从多个信息中选出所需要的信息，而图像放大则是需要对多出的空位填入适当的新值，是信息的统计。<br>放大最简单的思想是，如果需要将原图像方法k倍，则将原图像中的每个像素值，填在新图像中对应的k*k大小字块中。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxA3KPcVD3AwRLBDcptdTHIvk5x5tLoKrkjbe0wA0JiayibHGNPu0znUVgg/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxADpWWC4aFjqEtZiaxWoe71cEiawD5ImU8DCSoty56uaTSicjRMhEGqd4Pw/0?wx_fmt=png" class="lazyload"><br>放大倍数太大，会出现马赛克效应。</p></blockquote><h5 id="1-4-2-5拉伸变换"><a href="#1-4-2-5拉伸变换" class="headerlink" title="1.4.2.5拉伸变换"></a>1.4.2.5拉伸变换</h5><blockquote><p>公式：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAJnicd2QZes9gCsQFqmTb4jA7m5v4yo9XVexuwBDmWVzOXibWGKKD3Gxg/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAqhcSsUAWff437A6bRl84iaJLJPBYroDkVvaMA2TiahbkxuL901s6ubhw/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="1-4-3灰度级插值"><a href="#1-4-3灰度级插值" class="headerlink" title="1.4.3灰度级插值"></a>1.4.3灰度级插值</h4><blockquote><p>旋转与放大图像时，产生了新的像素（漏点）。采用插值法，即利用邻域的像素来估计新的像素值。</p></blockquote><h5 id="1-4-3-1最近邻插值法"><a href="#1-4-3-1最近邻插值法" class="headerlink" title="1.4.3.1最近邻插值法"></a>1.4.3.1最近邻插值法</h5><blockquote><p>重复最临近点<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAjbmNZ4mVts3pmn6icyOFLjFMMsnb0ZDlNtGFt6JTNyibSUcKWZlxWgJg/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAQJF67NkMAN5PKdFDVhYGRgR8kZdLaiad96eziaqeMYjkIOicN29fBibmAQ/0?wx_fmt=png" class="lazyload"><br>方法倍数太大，出现马赛克效应。</p></blockquote><h5 id="1-4-3-2双线性插值"><a href="#1-4-3-2双线性插值" class="headerlink" title="1.4.3.2双线性插值"></a>1.4.3.2双线性插值</h5><blockquote><p>双线性插值是对最近邻的一种改进，即用线性内插方法，根据点的四个相邻点的灰度值，分别在x和y方向上进行两次插值，计算新值。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAKlo4lrF3jJt12SgicEENCg1aeicfia2TPeib8qQ2l8PVXtCic03d9iaBKr3Q/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxA8C9Z9gBuicZBgeh1l7JOXibebV2Kvq241U4wHbOvQQUXqtOeDhbp3o0Q/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAwXgv7bSjpaEj9hAQcYxlicAXecK6r53ONvrDXAPnTNicibzHX18uoJezA/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxA2YIW0grIpicibHPKGKgteIzN7GNG1BbjuGB2K6sr4FMstpbG1fiaiaqCkQ/0?wx_fmt=png" class="lazyload"></p></blockquote><h5 id="1-4-3-3高阶插值"><a href="#1-4-3-3高阶插值" class="headerlink" title="1.4.3.3高阶插值"></a>1.4.3.3高阶插值</h5><blockquote><p>三次立方插值<br>利用三次多项式s(x)来逼近理论上的最佳插值函数sin(x)/x，进行插值.<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAVoic9lghrN4IibbWCvGMh0OKJDwV2pEXtBUIrUMUnD9koCnxdNfMwQRg/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAPjUqCgQZUPiaN4TWTicomicWHhGM6qdJ9qdB1ufRCUw71icLEasCSLQC3w/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxARr4Sv4d1mfl8FOrKo1INFKs4g4SEbJicjSMficds5okxsg8dUEhibTwkQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxATa9hiaicwSe4QeK422GoUuLR1uBxMia1Nuly2DowNUbCawjKJAibgwsSmA/0?wx_fmt=png" class="lazyload"></p></blockquote><h2 id="2数字图像处理数学基础"><a href="#2数字图像处理数学基础" class="headerlink" title="2数字图像处理数学基础"></a>2数字图像处理数学基础</h2><h3 id="2-1线性系统理论"><a href="#2-1线性系统理论" class="headerlink" title="2.1线性系统理论"></a>2.1线性系统理论</h3><h4 id="2-1-1线性系统"><a href="#2-1-1线性系统" class="headerlink" title="2.1.1线性系统"></a>2.1.1线性系统</h4><blockquote><p>许多图像处理系统都可以用一个线性系统作为模型：<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxApXzac87FL0ibxkC0MXgQ1C3pXbF3DvdREqmZJaegibSQ1PzZedqBVpeA/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxArXNaBWBfnRHAB9eX6pAiayCo61pGJmL3muROa0WOQvaFEmIZxS8zQiaQ/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="2-1-2线性空间不变系统-Linear-Space-Invariant-LSI"><a href="#2-1-2线性空间不变系统-Linear-Space-Invariant-LSI" class="headerlink" title="2.1.2线性空间不变系统(Linear Space Invariant, LSI)"></a>2.1.2线性空间不变系统(Linear Space Invariant, LSI)</h4><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAkyWZK6Fay6Khv1t1vqibNfnQnMxZGX3fOGkzh1kfTD73O00HichYtTrQ/0?wx_fmt=png" class="lazyload"><br>如果系统响应与输入脉冲的中心位置无关，则该系统称为空间不变系统。<br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAYB9kPvzywWwmFRkXYgm0mxjPO9iaVp7xtm3iafBiaHiaIzDhyjSYnRk7HA/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="2-1-3卷积"><a href="#2-1-3卷积" class="headerlink" title="2.1.3卷积"></a>2.1.3卷积</h4><blockquote><p><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAWyt6PUMb8yWIw62DfprzzObrYBFpATA7IqYHgjqGpnLn4bhKGibtL5A/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxANRWxMjr30qcdK9MHwtXOuBujoRENrNHDvRc0zFdgSxn5ZkvV9ZAUkQ/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxAa3S9xgUY1WnnxrMaxZ1nSGEx8NSXEoMcibJ1xqWyOoB2FicCHwk6xRyg/0?wx_fmt=png" class="lazyload"><br><img alt="enter description here" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxApPL2JElz7wnjGrHRypxNAUiaUTHUlY4vRYoibLUtGtMbExRdteFZXOCA/0?wx_fmt=png" class="lazyload"></p></blockquote><h2 id="1-正交变换"><a href="#1-正交变换" class="headerlink" title="1.正交变换"></a>1.正交变换</h2><h3 id="1-1正交变换"><a href="#1-1正交变换" class="headerlink" title="1.1正交变换"></a>1.1正交变换</h3><h4 id="1-1-1定义"><a href="#1-1-1定义" class="headerlink" title="1.1.1定义"></a>1.1.1定义</h4><p><img alt data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer6BP88nYMEBwvBo5DIBgq7qS96HTWvboxhIVP0k8uAxoF4Hv47eic0NibVb9yNzGXqmqWlsUuc7kLnQ/0?wx_fmt=png" class="lazyload"></p><h4 id="1-1-2正交矩阵"><a href="#1-1-2正交矩阵" class="headerlink" title="1.1.2正交矩阵"></a>1.1.2正交矩阵</h4><blockquote><p>定义：n级实矩阵A称为正交矩阵，如果A<em>A=E。(A</em>表示A的共轭转置，E是单位矩阵)  </p></blockquote><h4 id="1-1-3正交变换的性质"><a href="#1-1-3正交变换的性质" class="headerlink" title="1.1.3正交变换的性质"></a>1.1.3正交变换的性质</h4><p><img alt data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer6BP88nYMEBwvBo5DIBgq7qujuibz0vDSXvnjiaYTUicrGmH6hvlZJ6RSs6sHfBSvof0wkibibRJLZCWOA/0?wx_fmt=png" class="lazyload"></p><h4 id="1-1-4等价刻画"><a href="#1-1-4等价刻画" class="headerlink" title="1.1.4等价刻画"></a>1.1.4等价刻画</h4><p><img alt data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer6BP88nYMEBwvBo5DIBgq7qGDMzcpgpfreaIDoP6Vnu3B4OdkbW8SibxoFxNshfexJaZoCVN6gr7Jg/0?wx_fmt=png" class="lazyload"></p><h4 id="1-1-5正交变换分类"><a href="#1-1-5正交变换分类" class="headerlink" title="1.1.5正交变换分类"></a>1.1.5正交变换分类</h4><p><img alt data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer6BP88nYMEBwvBo5DIBgq7qsfdjlpfnq6KK4LEmO3k3F7iauFibyVdFOXyeibVKCSXIwwM5Ew2mk2XBQ/0?wx_fmt=png" class="lazyload"></p><h3 id="1-2傅立叶变换"><a href="#1-2傅立叶变换" class="headerlink" title="1.2傅立叶变换"></a>1.2<a href="https://baike.baidu.com/item/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/7119029?fromtitle=%E5%82%85%E7%AB%8B%E5%8F%B6%E5%8F%98%E6%8D%A2&fromid=3472079" target="_blank" rel="noopener">傅立叶变换</a></h3><h4 id="1-2-1概念"><a href="#1-2-1概念" class="headerlink" title="1.2.1概念"></a>1.2.1概念</h4><blockquote><p>傅立叶变换，表示能将满足一定条件的某个函数表示成三角函数（正弦和/或余弦函数）或者它们的积分的线性组合。在不同的研究领域，傅立叶变换具有多种不同的变体形式，如连续傅立叶变换和离散傅立叶变换。最初傅立叶分析是作为热过程的解析分析的工具被提出的。</p></blockquote><h4 id="1-2-2定义"><a href="#1-2-2定义" class="headerlink" title="1.2.2定义"></a>1.2.2定义</h4><p><img alt data-src="https://chuantu.xyz/t6/702/1572317923x1031866013.png" class="lazyload"></p><h4 id="1-2-3快速傅立叶变换（FFT）"><a href="#1-2-3快速傅立叶变换（FFT）" class="headerlink" title="1.2.3快速傅立叶变换（FFT）"></a>1.2.3<a href="https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/214957?fr=aladdin" target="_blank" rel="noopener">快速傅立叶变换</a>（FFT）</h4><h5 id="1-2-3-1概念"><a href="#1-2-3-1概念" class="headerlink" title="1.2.3.1概念"></a>1.2.3.1概念</h5><blockquote><p>快速傅里叶变换 (fast Fourier transform), 即利用计算机计算离散傅里叶变换（DFT)的高效、快速计算方法的统称，简称FFT。快速傅里叶变换是1965年由J.W.库利和T.W.图基提出的。采用这种算法能使计算机计算离散傅里叶变换所需要的乘法次数大为减少，特别是被变换的抽样点数N越多，FFT算法计算量的节省就越显著。</p></blockquote><h5 id="1-2-3-2基本思想"><a href="#1-2-3-2基本思想" class="headerlink" title="1.2.3.2基本思想"></a>1.2.3.2基本思想</h5><blockquote><p>FFT的基本思想是把原始的N点序列，依次分解成一系列的短序列。充分利用DFT计算式中指数因子 所具有的对称性质和周期性质，进而求出这些短序列相应的DFT并进行适当组合，达到删除重复计算，减少乘法运算和简化结构的目的。此后，在这思想基础上又开发了高基和分裂基等快速算法，随着数字技术的高速发展，1976年出现建立在数论和多项式理论基础上的维诺格勒傅里叶变换算法(WFTA）和素因子傅里叶变换算法。它们的共同特点是，当N是素数时，可以将DFT算转化为求循环卷积，从而更进一步减少乘法次数，提高速度。</p></blockquote><h3 id="1-3离散余弦变换-DCT"><a href="#1-3离散余弦变换-DCT" class="headerlink" title="1.3离散余弦变换(DCT)"></a>1.3<a href="https://www.jianshu.com/p/b923cd47ac4a" target="_blank" rel="noopener">离散余弦变换</a>(DCT)</h3><blockquote><p>离散余弦变换(DCT for Discrete Cosine Transform)是与傅里叶变换相关的一种变换，它类似于离散傅里叶变换(DFT for Discrete Fourier Transform),但是只使用实数。离散余弦变换相当于一个长度大概是它两倍的离散傅里叶变换，这个离散傅里叶变换是对一个实偶函数进行的（因为一个实偶函数的傅里叶变换仍然是一个实偶函数），在有些变形里面需要将输入或者输出的位置移动半个单位(DCT有8种标准类型，其中4种是常见的)。</p></blockquote><h4 id="1-3-1离散余弦变换应用"><a href="#1-3-1离散余弦变换应用" class="headerlink" title="1.3.1离散余弦变换应用"></a>1.3.1离散余弦变换应用</h4><blockquote><p>离散余弦变换，尤其是它的第二种类型，经常被信号处理和图像处理使用，用于对信号和图像(包括静止图像和运动图像)进行有损数据压缩。这是由于离散余弦变换具有很强的”能量集中”特性:大多数的自然信号(包括声音和图像)的能量都集中在离散余弦变换后的低频部分，而且当信号具有接近马尔科夫过程(Markov processes)的统计特性时，离散余弦变换的去相关性接近于K-L变换(Karhunen-Loève 变换–它具有最优的去相关性)的性能。<br>例如，在静止图像编码标准JPEG中，在运动图像编码标准MJPEG和MPEG的各个标准中都使用了离散余弦变换。在这些标准制中都使用了二维的第二种类型离散余弦变换，并将结果进行量化之后进行熵编码。这时对应第二种类型离散余弦变换中的n通常是8，并用该公式对每个8x8块的每行进行变换，然后每列进行变换。得到的是一个8x8的变换系数矩阵。其中(0,0)位置的元素就是直流分量，矩阵中的其他元素根据其位置表示不同频率的交流分量。<br>一个类似的变换, 改进的离散余弦变换被用在高级音频编码(AAC for Advanced Audio Coding)，Vorbis 和 MP3 音频压缩当中。<br>离散余弦变换也经常被用来使用谱方法来解偏微分方程，这时候离散余弦变换的不同的变量对应着数组两端不同的奇/偶边界条件。 </p></blockquote><h4 id="1-3-2matlab应用"><a href="#1-3-2matlab应用" class="headerlink" title="1.3.2matlab应用"></a>1.3.2matlab应用</h4><p><img alt="image" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer6pN9g3ibSe0rVRvEDAQ0MuG82jbia2qIOCXUyiakMbkG158XTWWBDZvicSwUI0Kst1nL8W2bpEYP69Og/0?wx_fmt=png" class="lazyload"></p><h4 id="1-3-3DCT性质"><a href="#1-3-3DCT性质" class="headerlink" title="1.3.3DCT性质"></a>1.3.3DCT性质</h4><p><img alt="image" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer6pN9g3ibSe0rVRvEDAQ0MuGENvXyTpibb2vxRN2UkBiaZJ4Njy3DL10IcYc7fgkFbib5wqEH3Wd3mEcg/0?wx_fmt=png" class="lazyload"></p><h3 id="1-4沃尔什变换"><a href="#1-4沃尔什变换" class="headerlink" title="1.4沃尔什变换"></a>1.4<a href="https://blog.csdn.net/grllery/article/details/89056484" target="_blank" rel="noopener">沃尔什变换</a></h3><blockquote><p>沃尔什变换（Walsh transform) 以沃尔什函数为基本函数的一种非正弦正交变换</p></blockquote><h4 id="1-4-1一维沃尔什变换"><a href="#1-4-1一维沃尔什变换" class="headerlink" title="1.4.1一维沃尔什变换"></a>1.4.1一维沃尔什变换</h4><p><img alt="image" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer6pN9g3ibSe0rVRvEDAQ0MuGSjKSQEsTyIvfBicwCdlhGnyGeEpqx5hhMuBeL99mPI0NkYUBas5Tdicw/0?wx_fmt=png" class="lazyload"></p><h5 id="1-4-1-1离散沃尔什变换"><a href="#1-4-1-1离散沃尔什变换" class="headerlink" title="1.4.1.1离散沃尔什变换"></a>1.4.1.1离散沃尔什变换</h5><p><img alt="image" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer6pN9g3ibSe0rVRvEDAQ0MuG9op0VPibVbfghQzkp7a6xCSjPPibBtY7hbEM9JGCQtBcgQeObKWDCMlA/0?wx_fmt=png" class="lazyload"></p><h5 id="1-4-1-2应用"><a href="#1-4-1-2应用" class="headerlink" title="1.4.1.2应用"></a>1.4.1.2应用</h5><p><img alt="image" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer6pN9g3ibSe0rVRvEDAQ0MuG4xYNrDqkArbdGQtveFibjly72AcibbdkuNGLkF3Av5Rqa6jNibJzlWrQg/0?wx_fmt=png" class="lazyload"></p><h4 id="1-4-2一维沃尔什反变换"><a href="#1-4-2一维沃尔什反变换" class="headerlink" title="1.4.2一维沃尔什反变换"></a>1.4.2一维沃尔什反变换</h4><p><img alt="image" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer6pN9g3ibSe0rVRvEDAQ0MuGSjKSQEsTyIvfBicwCdlhGnyGeEpqx5hhMuBeL99mPI0NkYUBas5Tdicw/0?wx_fmt=png" class="lazyload"></p><h3 id="1-5哈达玛变换"><a href="#1-5哈达玛变换" class="headerlink" title="1.5哈达玛变换"></a>1.5<a href="https://baike.baidu.com/item/%E5%93%88%E8%BE%BE%E7%8E%9B%E5%8F%98%E6%8D%A2/14679032?fr=aladdin" target="_blank" rel="noopener">哈达玛变换</a></h3><blockquote><p>哈达玛变换是遥感图像自动分类中一种常用的特征变换，是利用哈达玛矩阵作为变换矩阵新实施的遥感多光谱域变换<br><img alt="image" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer6pN9g3ibSe0rVRvEDAQ0MuGucVJ5DovR4x8oaWJHLobcm3yFTF7h3meqEBiasSfW3SiaPzkdOghhkYw/0?wx_fmt=png" class="lazyload"></p></blockquote><h4 id="1-5-1反变换"><a href="#1-5-1反变换" class="headerlink" title="1.5.1反变换"></a>1.5.1反变换</h4><p><img alt="image" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer6pN9g3ibSe0rVRvEDAQ0MuGUiaQD0zdiaKPpQtdFDndFOtzHjLwhumppCns0u0pogOPSvOhknwR0KlA/0?wx_fmt=png" class="lazyload"></p><h2 id="2-灰度变换"><a href="#2-灰度变换" class="headerlink" title="2.灰度变换"></a>2.<a href="https://baike.baidu.com/item/%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2/20868243?fr=aladdin" target="_blank" rel="noopener">灰度变换</a></h2><p>一篇较好的关于灰度变换的博客<a href="https://www.cnblogs.com/laumians-notes/p/8629396.html" target="_blank" rel="noopener">more details</a></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 数字图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为你的hexo个人博客添加本地搜索功能</title>
      <link href="/hexo-search-function/"/>
      <url>/hexo-search-function/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1.下载安装包"></a>1.下载安装包</h3><p>先下载安装下面的安装包，进入到对应的博客目录里面执行下面的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h3 id="2-配置themes下面的配置文件-config-yml"><a href="#2-配置themes下面的配置文件-config-yml" class="headerlink" title="2.配置themes下面的配置文件_config.yml"></a>2.配置themes下面的配置文件_config.yml</h3><p>将enable选项改为true 很重要，否则不会有效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true # 将false改为true</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: &quot;We didn&apos;t find any results for the search: $&#123;query&#125;&quot; # if there are no result</span><br></pre></td></tr></table></figure><h3 id="3-重新启动本地服务器"><a href="#3-重新启动本地服务器" class="headerlink" title="3.重新启动本地服务器"></a>3.重新启动本地服务器</h3><blockquote><p>hexo clean<br>hexo s -g //相当于 hexo g和hexo s一起执行</p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img alt="微信公众号" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 本地搜索 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
