<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CNN典型模型：AlexNet</title>
    <url>/AlexNet/</url>
    <content><![CDATA[<p>论文出处：《<a href="https://jums.club/pdf/ImageNet_Classification_with_Deep_Convolutional_Neural_Networks.pdf">ImageNet Classification with Deep Convolutional Neural Networks</a>》<br><a href="https://blog.csdn.net/luoluonuoyasuolong/article/details/81750190">一篇很好的理解AlexNet模型的博客</a><br>AlexNet 的网络结构如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/AlexNet.png" alt="AlexNet 的网络结构"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList和LinkedList的区别？</title>
    <url>/ArrayList-and-LinkedList/</url>
    <content><![CDATA[<h2 id="1-二者的区别"><a href="#1-二者的区别" class="headerlink" title="1 二者的区别"></a>1 二者的区别</h2><ul>
<li>底层数据结构：<ul>
<li>ArrayList底层是通过动态数组实现的</li>
<li>LinkedList底层是通过双向链表实现的</li>
</ul>
</li>
<li>随机访问<ul>
<li>ArrayList的随机访问<code>get</code>和<code>set</code>要优于LinkedList，因为LinkedList需要遍历移动指针</li>
<li>LinkedList的随机访问时间复杂度是$O(N)$，ArrayList的随机访问时间复杂度是$O(1)$</li>
</ul>
</li>
<li>插入和删除操作<ul>
<li>对于插入和删除操作而言，LinkedList并不比ArrayList快，因为LinkedList需要定位到某个插入或者删除的位置（<code>index</code>）也需要$O(N)$的时间复杂度，数据量越大，LinkedList较ArrayList的性能就越低（后面的测试用例可证明这一点）。</li>
</ul>
</li>
</ul>
<h2 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2 源码分析"></a>2 源码分析</h2><h3 id="2-1-ArrayList中的随机访问、添加和删除部分源码如下："><a href="#2-1-ArrayList中的随机访问、添加和删除部分源码如下：" class="headerlink" title="2.1 ArrayList中的随机访问、添加和删除部分源码如下："></a>2.1 ArrayList中的随机访问、添加和删除部分源码如下：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取index位置的元素值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index); <span class="comment">//首先判断index的范围是否合法</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将index位置的值设为element，并返回原来的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"> </span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将element添加到ArrayList的指定位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"> </span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">//将index以及index之后的数据复制到index+1的位置往后，即从index开始向后挪了一位</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index); </span><br><span class="line">    elementData[index] = element; <span class="comment">//然后在index处插入element</span></span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//删除ArrayList指定位置的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"> </span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//向左挪一位，index位置原来的数据已经被覆盖了</span></span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    <span class="comment">//多出来的最后一位删掉</span></span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-LinkedList中的随机访问、添加和删除部分源码如下："><a href="#2-2-LinkedList中的随机访问、添加和删除部分源码如下：" class="headerlink" title="2.2 LinkedList中的随机访问、添加和删除部分源码如下："></a>2.2 LinkedList中的随机访问、添加和删除部分源码如下：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得第index个节点的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	checkElementIndex(index);</span><br><span class="line">	<span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//设置第index元素的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">	checkElementIndex(index);</span><br><span class="line">	Node&lt;E&gt; x = node(index);</span><br><span class="line">	E oldVal = x.item;</span><br><span class="line">	x.item = element;</span><br><span class="line">	<span class="keyword">return</span> oldVal;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//在index个节点之前添加新的节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">	checkPositionIndex(index);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">if</span> (index == size)</span><br><span class="line">		linkLast(element);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//删除第index个节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	checkElementIndex(index);</span><br><span class="line">	<span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//定位index处的节点</span></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// assert isElementIndex(index);</span></span><br><span class="line">	<span class="comment">//index&lt;size/2时，从头开始找</span></span><br><span class="line">	<span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">		Node&lt;E&gt; x = first;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">			x = x.next;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123; <span class="comment">//index&gt;=size/2时，从尾开始找</span></span><br><span class="line">		Node&lt;E&gt; x = last;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">			x = x.prev;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从源码可以看出，ArrayList想要get(int index)元素时，直接返回index位置上的元素，而LinkedList需要通过for循环进行查找，虽然LinkedList已经在查找方法上做了优化，比如index &lt; size / 2，则从左边开始查找，反之从右边开始查找，但是还是比ArrayList要慢。这点是毋庸置疑的。<br>        ArrayList想要在指定位置插入或删除元素时，主要耗时的是System.arraycopy动作，会移动index后面所有的元素；LinkedList主耗时的是要先通过for循环找到index，然后直接插入或删除。</p>
<h3 id="2-3-测试用例"><a href="#2-3-测试用例" class="headerlink" title="2.3 测试用例"></a>2.3 测试用例</h3><p>这就导致了两者并非一定谁快谁慢，下面通过一个测试程序来测试一下两者插入的速度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;  </span><br><span class="line"><span class="keyword">import</span> java.util.Collections;  </span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @description 测试ArrayList和LinkedList插入的效率</span></span><br><span class="line"><span class="comment"> * @eson_15     </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayOrLinked</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; array=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();  </span><br><span class="line">    <span class="keyword">static</span> List&lt;Integer&gt; linked=<span class="keyword">new</span> LinkedList&lt;Integer&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    	<span class="comment">//首先分别给两者插入10000条数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;  </span><br><span class="line">            array.add(i);  </span><br><span class="line">            linked.add(i);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//获得两者随机访问的时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;array time:&quot;</span>+getTime(array));  </span><br><span class="line">        System.out.println(<span class="string">&quot;linked time:&quot;</span>+getTime(linked));  </span><br><span class="line">        <span class="comment">//获得两者插入数据的时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;array insert time:&quot;</span>+insertTime(array));  </span><br><span class="line">        System.out.println(<span class="string">&quot;linked insert time:&quot;</span>+insertTime(linked));  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">(List&lt;Integer&gt; list)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">long</span> time=System.currentTimeMillis();  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;  </span><br><span class="line">            <span class="keyword">int</span> index = Collections.binarySearch(list, list.get(i));  </span><br><span class="line">            <span class="keyword">if</span>(index != i)&#123;  </span><br><span class="line">                System.out.println(<span class="string">&quot;ERROR!&quot;</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis()-time;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//插入数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">insertTime</span><span class="params">(List&lt;Integer&gt; list)</span></span>&#123; </span><br><span class="line">    	<span class="comment">/*</span></span><br><span class="line"><span class="comment">    	 * 插入的数据量和插入的位置是决定两者性能的主要方面，</span></span><br><span class="line"><span class="comment">    	 * 我们可以通过修改这两个数据，来测试两者的性能</span></span><br><span class="line"><span class="comment">    	 */</span></span><br><span class="line">    	<span class="keyword">long</span> num = <span class="number">10000</span>; <span class="comment">//表示要插入的数据量</span></span><br><span class="line">    	<span class="keyword">int</span> index = <span class="number">1000</span>; <span class="comment">//表示从哪个位置插入</span></span><br><span class="line">        <span class="keyword">long</span> time=System.currentTimeMillis();  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num; i++)&#123;  </span><br><span class="line">            list.add(index, i);     </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis()-time;  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>主要有两个因素决定他们的效率，插入的数据量和插入的位置。我们可以在程序里改变这两个因素来测试它们的效率。<br>        当数据量较小时，测试程序中，大约小于30的时候，两者效率差不多，没有显著区别；当数据量较大时，大约在容量的1/10处开始，LinkedList的效率就开始没有ArrayList效率高了，特别到一半以及后半的位置插入时，LinkedList效率明显要低于ArrayList，而且数据量越大，越明显。比如我测试了一种情况，在index=1000的位置(容量的1/10)插入10000条数据和在index=5000的位置以及在index=9000的位置插入10000条数据的运行时间如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在index=<span class="number">1000</span>出插入结果：</span><br><span class="line">array time:<span class="number">4</span></span><br><span class="line">linked time:<span class="number">240</span></span><br><span class="line">array insert time:<span class="number">20</span></span><br><span class="line">linked insert time:<span class="number">18</span></span><br><span class="line"> </span><br><span class="line">在index=<span class="number">5000</span>处插入结果：</span><br><span class="line">array time:<span class="number">4</span></span><br><span class="line">linked time:<span class="number">229</span></span><br><span class="line">array insert time:<span class="number">13</span></span><br><span class="line">linked insert time:<span class="number">90</span></span><br><span class="line"> </span><br><span class="line">在index=<span class="number">9000</span>处插入结果：</span><br><span class="line">array time:<span class="number">4</span></span><br><span class="line">linked time:<span class="number">237</span></span><br><span class="line">array insert time:<span class="number">7</span></span><br><span class="line">linked insert time:<span class="number">92</span></span><br></pre></td></tr></table></figure>
<p> 从运行结果看，LinkedList的效率是越来越差。<br>        所以当插入的数据量很小时，两者区别不太大，当插入的数据量大时，大约在容量的1/10之前，LinkedList会优于ArrayList，在其后就劣与ArrayList，且越靠近后面越差。所以个人觉得，一般首选用ArrayList，由于LinkedList可以实现栈、队列以及双端队列等数据结构，所以当特定需要时候，使用LinkedList，当然咯，数据量小的时候，两者差不多，视具体情况去选择使用；当数据量大的时候，如果只需要在靠前的部分插入或删除数据，那也可以选用LinkedList，反之选择ArrayList反而效率更高。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/eson_15/article/details/51145788">https://blog.csdn.net/eson_15/article/details/51145788</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap的HashTable区别？</title>
    <url>/HashMap-and-HashTable/</url>
    <content><![CDATA[<h2 id="1-二者区别"><a href="#1-二者区别" class="headerlink" title="1 二者区别"></a>1 二者区别</h2><ul>
<li><p>线程安全</p>
<ul>
<li>HashMap是线程不安全的，如果多个线程同时访问某一个具体的HashMap实例时，需要提供相应的同步操作</li>
<li>HashTable是线程安全的（从下面的部分源码可以看出，HashTable的每个方法都是用了关键字<code>synchronized</code>进行修饰，也就是加了同步锁，而HashMap都没有），多个线程同时访问某个具体的实例不需要额外的同步操作，内部已经实现</li>
</ul>
</li>
<li><p>是否运行为空</p>
<ul>
<li>HashMap允许<code>key=null</code>和<code>value=null</code></li>
<li>HashTable不允许</li>
</ul>
</li>
<li><p>Hashtable 和 HashMap 采用的 hash/rehash 算法都大概一样，所以性能不会有很大的差异</p>
</li>
<li><p>继承关系</p>
<ul>
<li>HashMap是<code>Map</code>接口的一个实现</li>
<li>HashTable是继承自<code>Dictionary</code>的一个子类</li>
</ul>
</li>
<li><p>哈希方式</p>
<ul>
<li>HashMap重新计算了key对象的哈希值</li>
<li>HashTable直接使用对象的hashCode值作为哈希值</li>
</ul>
</li>
<li><p>初始大小和扩容方式</p>
<ul>
<li><p>HashMap的初始大小为16，默认按照<code>old*0.75</code>的方式进行扩容，关键代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123; <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">    newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">    newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>HashTable的初始大小为11，扩容方式为<code>old*2+1</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="1-1-HashMap部分源码"><a href="#1-1-HashMap部分源码" class="headerlink" title="1.1 HashMap部分源码"></a>1.1 HashMap部分源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span></span><br><span class="line"><span class="comment">    * (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> : e.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(hash(key), key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; V v;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((v = e.value) == value ||</span><br><span class="line">                        (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-HashTable部分源码"><a href="#1-2-HashTable部分源码" class="headerlink" title="1.2 HashTable部分源码"></a>1.2 HashTable部分源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constructs a new, empty hashtable with a default initial capacity (11)</span></span><br><span class="line"><span class="comment">         * and load factor (0.75).</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Make sure the value is not null</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">        <span class="keyword">for</span>(; entry != <span class="keyword">null</span> ; entry = entry.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">                V old = entry.value;</span><br><span class="line">                entry.value = value;</span><br><span class="line">                <span class="keyword">return</span> old;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        addEntry(hash, key, value, index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">        <span class="keyword">for</span>(Entry&lt;K,V&gt; prev = <span class="keyword">null</span> ; e != <span class="keyword">null</span> ; prev = e, e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">                modCount++;</span><br><span class="line">                <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    prev.next = e.next;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tab[index] = e.next;</span><br><span class="line">                &#125;</span><br><span class="line">                count--;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contains(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = tab.length ; i-- &gt; <span class="number">0</span> ;) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.value.equals(value)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一些资料建议，当需要同步时，用Hashtable，反之用HashMap。但是，因为在需要时，HashMap可以被同步，HashMap的功能比Hashtable的功能更多，而且它不是基于一个陈旧的类的，所以有人认为，在各种情况下，HashMap都优先于Hashtable。</p>
</blockquote>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://blog.csdn.net/u010983881/article/details/49762595">https://blog.csdn.net/u010983881/article/details/49762595</a></p>
<p><a href="https://www.jianshu.com/p/5c34133ed372">https://www.jianshu.com/p/5c34133ed372</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
      </tags>
  </entry>
  <entry>
    <title>How to connect remote redis server</title>
    <url>/How-to-connect-remote-redis-server/</url>
    <content><![CDATA[<h2 id="1-Before-Connect-Remote-Redis-Server"><a href="#1-Before-Connect-Remote-Redis-Server" class="headerlink" title="1 Before Connect Remote Redis Server"></a>1 Before Connect Remote Redis Server</h2><p>You should install redis on your linux machine. Run the following commands and install it.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install epel-release</span><br><span class="line">$ sudo yum install redis</span><br><span class="line">//verify your installtion</span><br><span class="line">$ redis-cli ping</span><br><span class="line">PONG   //If you get this prompt, it means the isntalltion was successful.</span><br></pre></td></tr></table></figure>

<h2 id="2-command"><a href="#2-command" class="headerlink" title="2 command"></a>2 command</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ redis-cli -h &#123;host_ip&#125; -p &#123;port&#125; -a &#123;passowrd&#125;</span><br><span class="line">//example</span><br><span class="line">$ redis-cli -h 127.0.0.1 -p 6379 -a <span class="string">&#x27;123456&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-ERROR-Could-not-connect-to-Redis-at-192-168-1-17-6379-No-route-to-host"><a href="#3-ERROR-Could-not-connect-to-Redis-at-192-168-1-17-6379-No-route-to-host" class="headerlink" title="3 ERROR: Could not connect to Redis at 192.168.1.17:6379: No route to host"></a>3 ERROR: Could not connect to Redis at 192.168.1.17:6379: No route to host</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -N REDIS</span><br><span class="line">iptables -A REDIS -s 192.168.10.1 -j ACCEPT   //ACCEPT YOUR IP_ADDRESS</span><br><span class="line">iptables -A REDIS -s 192.168.10.2 -j ACCEPT   //ACCEPT YOUR IP_ADDRESS</span><br><span class="line">iptables -A REDIS -j LOG --log-prefix <span class="string">&quot;unauth-redis-access&quot;</span></span><br><span class="line">iptables -A REDIS -j REJECT --reject-with icmp-port-unreachable</span><br><span class="line">iptables -I INPUT -p tcp --dport 6379 -j REDIS</span><br><span class="line"></span><br><span class="line">iptables -L   //view routes</span><br></pre></td></tr></table></figure>

<h2 id="4-Could-not-connect-to-Redis-at-10-18-243-168-6379-Connection-refused"><a href="#4-Could-not-connect-to-Redis-at-10-18-243-168-6379-Connection-refused" class="headerlink" title="4 Could not connect to Redis at 10.18.243.168:6379: Connection refused"></a>4 Could not connect to Redis at 10.18.243.168:6379: Connection refused</h2><p>change the <code>conf</code> file：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind 127.0.0.1   ----&gt;    bind 0.0.0.0</span><br></pre></td></tr></table></figure>

<p>and restart redis server.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.itread01.com/content/1550622803.html">Redis 服務端配置——Could not connect to Redis at 127.0.0.1:6379: Connection refused</a></p>
<p><a href="https://www.itread01.com/content/1550474293.html">Redis系列~（十七）Could not connect to Redis No route to host問題解決</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM面试题以及字节码讲解</title>
    <url>/JVM-interview-questions/</url>
    <content><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h2><p>关于<code>java</code>字节码指令的含义，可以参考这篇博客：<a href="https://jums.club/java-byte-code-command/">Java字节码指令含义解释与指令查询</a></p>
<h2 id="1-try-catch-finally"><a href="#1-try-catch-finally" class="headerlink" title="1 try..catch..finally"></a>1 try..catch..finally</h2><h3 id="1-1-catch"><a href="#1-1-catch" class="headerlink" title="1.1 catch"></a>1.1 catch</h3><h4 id="1-1-1-catch单个异常"><a href="#1-1-1-catch单个异常" class="headerlink" title="1.1.1 catch单个异常"></a>1.1.1 catch单个异常</h4><p>查看相应的<code>java</code>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            i = <span class="number">20</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NegativeArraySizeException e)&#123;</span><br><span class="line">            i = <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来通过<code>javap -v xxx.class</code>命令，来查看该段源码的字节码反编译之后的信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123; <span class="comment">//源代码对应的字节码指令</span></span><br><span class="line">  <span class="keyword">public</span> com.basic.FinallyDemo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/FinallyDemo;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span>  <span class="comment">//将10压入栈顶</span></span><br><span class="line">         <span class="number">2</span>: istore_1          <span class="comment">//将10存储到slot 1中，即10 -&gt; i</span></span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">20</span>  <span class="comment">//将20压入栈顶, try-----开始</span></span><br><span class="line">         <span class="number">5</span>: istore_1          <span class="comment">//将20存储到slot 1中，即20 -&gt; i  try------结束</span></span><br><span class="line">         <span class="number">6</span>: goto          <span class="number">13</span>  <span class="comment">//这里没有判断条件，但是有一个goto指令，结合异常表一起执行</span></span><br><span class="line">         <span class="number">9</span>: astore_2     <span class="comment">//存储异常信息到slot 2，即 异常信息 -&gt; e</span></span><br><span class="line">        <span class="number">10</span>: bipush        <span class="number">30</span>  <span class="comment">//将30压入栈顶，</span></span><br><span class="line">        <span class="number">12</span>: istore_1          <span class="comment">//将30存储到slot 1中，即 30 -&gt; i</span></span><br><span class="line">        <span class="number">13</span>: <span class="keyword">return</span>            <span class="comment">//返回栈顶元素</span></span><br><span class="line">      Exception table:  <span class="comment">//被try..catch包裹的代码，会产生一个异常表</span></span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>   Class java/lang/NegativeArraySizeException <span class="comment">//监测try中的代码，如果发生异常，跳转到第9行</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">13</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">           <span class="number">10</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/NegativeArraySizeException;</span><br><span class="line">            <span class="number">0</span>      <span class="number">14</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">11</span>     <span class="number">1</span>     i   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">9</span></span><br><span class="line">          locals = [ <span class="class"><span class="keyword">class</span> &quot;[<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span></span>;<span class="string">&quot;, int ]</span></span><br><span class="line"><span class="string">          stack = [ class java/lang/NegativeArraySizeException ]</span></span><br><span class="line"><span class="string">        frame_type = 3 /* same */</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">SourceFile: &quot;</span>FinallyDemo.java<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>

<p>从反编译之后的字节码信息可以看到，之所以能执行catch中的代码，是因为有一个异常表（exception table）来存放<code>try</code>和<code>catch</code>的执行的起始位置，当检测到<code>try</code>中有异常发生时，跳转到<code>catch</code>中执行。</p>
<h4 id="1-1-2-catch多个异常"><a href="#1-1-2-catch多个异常" class="headerlink" title="1.1.2 catch多个异常"></a>1.1.2 catch多个异常</h4><p>先看<code>java</code>源代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.file.FileSystemAlreadyExistsException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            i = <span class="number">20</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NegativeArraySizeException e)&#123;</span><br><span class="line">            i = <span class="number">30</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            i = <span class="number">40</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (FileSystemAlreadyExistsException e)&#123;</span><br><span class="line">            i = <span class="number">50</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源代码对应的字节码指令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.basic.FinallyDemo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/FinallyDemo;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span>  <span class="comment">//定义变量i，将10压入栈顶</span></span><br><span class="line">         <span class="number">2</span>: istore_1</span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">20</span>  <span class="comment">//try------开始</span></span><br><span class="line">         <span class="number">5</span>: istore_1          <span class="comment">//try------结束</span></span><br><span class="line">         <span class="number">6</span>: goto          <span class="number">27</span></span><br><span class="line">         <span class="number">9</span>: astore_2          <span class="comment">//catch1-----开始</span></span><br><span class="line">        <span class="number">10</span>: bipush        <span class="number">30</span></span><br><span class="line">        <span class="number">12</span>: istore_1          <span class="comment">//catch2----结束</span></span><br><span class="line">        <span class="number">13</span>: goto          <span class="number">27</span></span><br><span class="line">        <span class="number">16</span>: astore_2   <span class="comment">//catch2-----开始</span></span><br><span class="line">        <span class="number">17</span>: bipush        <span class="number">40</span></span><br><span class="line">        <span class="number">19</span>: istore_1   <span class="comment">//catch2-----结束</span></span><br><span class="line">        <span class="number">20</span>: goto          <span class="number">27</span></span><br><span class="line">        <span class="number">23</span>: astore_2    <span class="comment">//catch3-----开始</span></span><br><span class="line">        <span class="number">24</span>: bipush        <span class="number">50</span></span><br><span class="line">        <span class="number">26</span>: istore_1    <span class="comment">//catch3------结束</span></span><br><span class="line">        <span class="number">27</span>: getstatic     #<span class="number">5</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">30</span>: iload_1</span><br><span class="line">        <span class="number">31</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">        <span class="number">34</span>: <span class="keyword">return</span></span><br><span class="line">      Exception table:  <span class="comment">//异常表中有三个异常，都是监测try中的代码</span></span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>   Class java/lang/NegativeArraySizeException</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>    <span class="number">16</span>   Class java/lang/NullPointerException</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>    <span class="number">23</span>   Class java/nio/file/FileSystemAlreadyExistsException</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">17</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">17</span>: <span class="number">13</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">16</span></span><br><span class="line">        line <span class="number">14</span>: <span class="number">17</span></span><br><span class="line">        line <span class="number">17</span>: <span class="number">20</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">23</span></span><br><span class="line">        line <span class="number">16</span>: <span class="number">24</span></span><br><span class="line">        line <span class="number">18</span>: <span class="number">27</span></span><br><span class="line">        line <span class="number">19</span>: <span class="number">34</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">           <span class="number">10</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/NegativeArraySizeException;</span><br><span class="line">           <span class="number">17</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/NullPointerException;</span><br><span class="line">           <span class="number">24</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/nio/file/FileSystemAlreadyExistsException;</span><br><span class="line">            <span class="number">0</span>      <span class="number">35</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">32</span>     <span class="number">1</span>     i   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">4</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">9</span></span><br><span class="line">          locals = [ <span class="class"><span class="keyword">class</span> &quot;[<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span></span>;<span class="string">&quot;, int ]</span></span><br><span class="line"><span class="string">          stack = [ class java/lang/NegativeArraySizeException ]</span></span><br><span class="line"><span class="string">        frame_type = 70 /* same_locals_1_stack_item */</span></span><br><span class="line"><span class="string">          stack = [ class java/lang/NullPointerException ]</span></span><br><span class="line"><span class="string">        frame_type = 70 /* same_locals_1_stack_item */</span></span><br><span class="line"><span class="string">          stack = [ class java/nio/file/FileSystemAlreadyExistsException ]</span></span><br><span class="line"><span class="string">        frame_type = 3 /* same */</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-1-3-catch多个异常的简写"><a href="#1-1-3-catch多个异常的简写" class="headerlink" title="1.1.3 catch多个异常的简写"></a>1.1.3 catch多个异常的简写</h4><p>这是上一小节中的<code>catch</code>多个异常的简写形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.file.FileSystemAlreadyExistsException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            i = <span class="number">20</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NegativeArraySizeException | NullPointerException | FileSystemAlreadyExistsException e)&#123;</span><br><span class="line">            i = <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应的字节码信息和上一节中的相同：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.basic.FinallyDemo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/FinallyDemo;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">2</span>: istore_1</span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">20</span></span><br><span class="line">         <span class="number">5</span>: istore_1</span><br><span class="line">         <span class="number">6</span>: goto          <span class="number">13</span></span><br><span class="line">         <span class="number">9</span>: astore_2</span><br><span class="line">        <span class="number">10</span>: bipush        <span class="number">30</span></span><br><span class="line">        <span class="number">12</span>: istore_1</span><br><span class="line">        <span class="number">13</span>: getstatic     #<span class="number">5</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">16</span>: iload_1</span><br><span class="line">        <span class="number">17</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">        <span class="number">20</span>: <span class="keyword">return</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>   Class java/lang/NegativeArraySizeException</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>   Class java/lang/NullPointerException</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>   Class java/nio/file/FileSystemAlreadyExistsException</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">14</span>: <span class="number">13</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">20</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">           <span class="number">10</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/RuntimeException;</span><br><span class="line">            <span class="number">0</span>      <span class="number">21</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">18</span>     <span class="number">1</span>     i   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">9</span></span><br><span class="line">          locals = [ <span class="class"><span class="keyword">class</span> &quot;[<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span></span>;<span class="string">&quot;, int ]</span></span><br><span class="line"><span class="string">          stack = [ class java/lang/RuntimeException ]</span></span><br><span class="line"><span class="string">        frame_type = 3 /* same */</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-finally"><a href="#1-2-finally" class="headerlink" title="1.2 finally"></a>1.2 finally</h3><h4 id="1-2-1-在finally中return-；"><a href="#1-2-1-在finally中return-；" class="headerlink" title="1.2.1 在finally中return *；"></a>1.2.1 在finally中return *；</h4><p>查看<code>FinallyDemo.java</code>文件的代码，试问最终输出多少？10？ or 20？ or 30？</p>
<p>FinallyDemo.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FinallyDemo finallyDemo = <span class="keyword">new</span> FinallyDemo();</span><br><span class="line">        <span class="keyword">int</span> t = finallyDemo.test();</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：    </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200417211050749.jpg" alt="30"></p>
</blockquote>
<p>通过对其<code>FinallyDemo.class</code>文件进行反编译，可以分析得到为什么最终结果会是30。为了简化代码，这里就直接将源代码对应的字节码信息粘贴过来。</p>
<p>FinallyDemo.class</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.basic.FinallyDemo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/FinallyDemo;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">2</span>   <span class="comment">// class com/basic/FinallyDemo  在堆中创建对象</span></span><br><span class="line">         <span class="number">3</span>: dup</span><br><span class="line">         <span class="number">4</span>: invokespecial #<span class="number">3</span>   <span class="comment">// Method &quot;&lt;init&gt;&quot;:()V 调用FinallyDemo构造方法</span></span><br><span class="line">         <span class="number">7</span>: astore_1    <span class="comment">//  将新创建的对象存储到局部变量slot 1中</span></span><br><span class="line">         <span class="number">8</span>: aload_1   <span class="comment">//加载局部变量slot 1中的对象</span></span><br><span class="line">         <span class="number">9</span>: invokevirtual #<span class="number">4</span>   <span class="comment">// Method test:()I   //执行slot 1中的test()方法 </span></span><br><span class="line">        <span class="number">12</span>: istore_2   <span class="comment">//将test()返回的int类型存储到int类型的局部变量slot 2中</span></span><br><span class="line">        <span class="number">13</span>: getstatic     #<span class="number">5</span> <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream; 获得静态输出方法</span></span><br><span class="line">        <span class="number">16</span>: iload_2  <span class="comment">//将在需要打印的变量 slot 2</span></span><br><span class="line">        <span class="number">17</span>: invokevirtual #<span class="number">6</span>  <span class="comment">// Method java/io/PrintStream.println:(I)V 调用静态对象的println方法，并调用需要打印的变量</span></span><br><span class="line">        <span class="number">20</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">8</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">13</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">20</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">21</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">8</span>      <span class="number">13</span>     <span class="number">1</span> finallyDemo   Lcom/basic/FinallyDemo;</span><br><span class="line">           <span class="number">13</span>       <span class="number">8</span>     <span class="number">2</span>     <span class="function">t   I</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span>  <span class="comment">//将10压入栈顶</span></span><br><span class="line">         <span class="number">2</span>: istore_1          <span class="comment">// 10 -&gt; i  </span></span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">20</span>  <span class="comment">//在try中------，  将20压入栈顶</span></span><br><span class="line">         <span class="number">5</span>: istore_2          <span class="comment">//20 -&gt; slot 2 该局部变量是一个隐藏的局部变量，LocalVariableTable不显示</span></span><br><span class="line">         <span class="number">6</span>: bipush        <span class="number">30</span>  <span class="comment">//将30压入栈顶</span></span><br><span class="line">         <span class="number">8</span>: ireturn        <span class="comment">//----try结束  返回栈顶元素  30</span></span><br><span class="line">         <span class="number">9</span>: astore_3       <span class="comment">//在finally中-------</span></span><br><span class="line">        <span class="number">10</span>: bipush        <span class="number">30</span> <span class="comment">//将30压入栈顶</span></span><br><span class="line">        <span class="number">12</span>: ireturn        <span class="comment">//finally------结束，返回栈顶元素</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>   any</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">11</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">6</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">13</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/FinallyDemo;</span><br><span class="line">            <span class="number">3</span>      <span class="number">10</span>     <span class="number">1</span>     i   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">1</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">9</span></span><br><span class="line">          locals = [ <span class="class"><span class="keyword">class</span> <span class="title">com</span>/<span class="title">basic</span>/<span class="title">FinallyDemo</span>, <span class="title">int</span> ]</span></span><br><span class="line"><span class="class">          <span class="title">stack</span> </span>= [ <span class="class"><span class="keyword">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Throwable</span> ]</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"><span class="title">SourceFile</span>: &quot;<span class="title">FinallyDemo</span>.<span class="title">java</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>分析：</p>
<p>我们从反编译之后的字节码可以看出，之所以<code>finally</code>中的代码最后都会被执行，是因为在字节码中，将<code>finally</code>中的代码复制了一份，所以才会总是执行。</p>
</li>
</ul>
<h4 id="1-2-2-在finally中使用return的弊端"><a href="#1-2-2-在finally中使用return的弊端" class="headerlink" title="1.2.2 在finally中使用return的弊端"></a>1.2.2 在finally中使用return的弊端</h4><p>使用<code>try..catch</code>捕捉程序异常，但是有些时候，<code>catch</code>不能将所有的异常都捕捉到，此时那些没有被<code>catch</code>捕捉到的异常就会在<code>finally</code>中被再次捕捉到，这样就提高了程序运行的安全性。但是当在<code>finally</code>中使用<code>return</code>语句后，那么<code>finally</code>就会将其他的异常”吞掉“，也就是不再捕捉<code>catch</code>中没有被捕捉的异常。</p>
<h5 id="1-2-2-1-finally中没有加return语句："><a href="#1-2-2-1-finally中没有加return语句：" class="headerlink" title="1.2.2.1 finally中没有加return语句："></a>1.2.2.1 <code>finally</code>中没有加<code>return</code>语句：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            i = <span class="number">20</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NegativeArraySizeException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            i = <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了简便，这里主要粘贴源代码对应的字节码信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.basic.FinallyDemo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/FinallyDemo;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span> <span class="comment">//将10压入栈顶，全部变量</span></span><br><span class="line">         <span class="number">2</span>: istore_1         <span class="comment">//将10存储到slot 1中,10 -&gt; i</span></span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">20</span>  <span class="comment">//try-----开始， 将20压入栈顶</span></span><br><span class="line">         <span class="number">5</span>: istore_1          <span class="comment">//将20存储到slot 1中， 20 -&gt; i</span></span><br><span class="line">         <span class="number">6</span>: bipush        <span class="number">30</span>  <span class="comment">//将30压入栈顶，</span></span><br><span class="line">         <span class="number">8</span>: istore_1          <span class="comment">//将30存储到slot 1中，30 -&gt; i  try----结束</span></span><br><span class="line">         <span class="number">9</span>: goto          <span class="number">29</span>  </span><br><span class="line">        <span class="number">12</span>: astore_2        <span class="comment">//catch------开始</span></span><br><span class="line">        <span class="number">13</span>: aload_2</span><br><span class="line">        <span class="number">14</span>: invokevirtual #<span class="number">3</span>                  <span class="comment">// Method java/lang/NegativeArraySizeException.printStackTrace:()V</span></span><br><span class="line">        <span class="number">17</span>: bipush        <span class="number">30</span></span><br><span class="line">        <span class="number">19</span>: istore_1        <span class="comment">//catch------结束</span></span><br><span class="line">        <span class="number">20</span>: goto          <span class="number">29</span></span><br><span class="line">        <span class="number">23</span>: astore_3     <span class="comment">//finally----开始</span></span><br><span class="line">        <span class="number">24</span>: bipush        <span class="number">30</span></span><br><span class="line">        <span class="number">26</span>: istore_1</span><br><span class="line">        <span class="number">27</span>: aload_3</span><br><span class="line">        <span class="number">28</span>: athrow   <span class="comment">//finally------结束，抛出在finally里中捕捉到的异常</span></span><br><span class="line">        <span class="number">29</span>: <span class="keyword">return</span></span><br><span class="line">      Exception table: <span class="comment">//异常表，存放异常的跳转的起始位置，左闭右开区间，以第一个为例，从第3行到第5行</span></span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>    <span class="number">12</span>   Class java/lang/NegativeArraySizeException <span class="comment">//监测try中的代码</span></span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>    <span class="number">23</span>   any   <span class="comment">//finally在try中的跳转</span></span><br><span class="line">            <span class="number">12</span>    <span class="number">17</span>    <span class="number">23</span>   any   <span class="comment">//finally在catch中的跳转</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">12</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">13</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">17</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">20</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">23</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">27</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">29</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">           <span class="number">13</span>       <span class="number">4</span>     <span class="number">2</span>     e   Ljava/lang/NegativeArraySizeException;</span><br><span class="line">            <span class="number">0</span>      <span class="number">30</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">27</span>     <span class="number">1</span>     i   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">3</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">12</span></span><br><span class="line">          locals = [ <span class="class"><span class="keyword">class</span> &quot;[<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span></span>;<span class="string">&quot;, int ]</span></span><br><span class="line"><span class="string">          stack = [ class java/lang/NegativeArraySizeException ]</span></span><br><span class="line"><span class="string">        frame_type = 74 /* same_locals_1_stack_item */</span></span><br><span class="line"><span class="string">          stack = [ class java/lang/Throwable ]</span></span><br><span class="line"><span class="string">        frame_type = 5 /* same */</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="1-2-2-2-finally中加了return语句"><a href="#1-2-2-2-finally中加了return语句" class="headerlink" title="1.2.2.2 finally中加了return语句"></a>1.2.2.2 <code>finally</code>中加了<code>return</code>语句</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = test();</span><br><span class="line">        System.out.println(j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源代码对应的字节码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.basic.FinallyDemo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/FinallyDemo;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: invokestatic  #<span class="number">2</span>                  <span class="comment">// Method test:()I</span></span><br><span class="line">         <span class="number">3</span>: istore_1</span><br><span class="line">         <span class="number">4</span>: getstatic     #<span class="number">3</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="number">7</span>: iload_1</span><br><span class="line">         <span class="number">8</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">        <span class="number">11</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">4</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">11</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">12</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">4</span>       <span class="number">8</span>     <span class="number">1</span>     <span class="function">j   I</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: iconst_0    <span class="comment">//定义变量i</span></span><br><span class="line">         <span class="number">1</span>: istore_0    </span><br><span class="line">         <span class="number">2</span>: bipush        <span class="number">10</span>   <span class="comment">//try-----开始</span></span><br><span class="line">         <span class="number">4</span>: istore_1           </span><br><span class="line">         <span class="number">5</span>: bipush        <span class="number">20</span></span><br><span class="line">         <span class="number">7</span>: ireturn            <span class="comment">//try-----结束</span></span><br><span class="line">         <span class="number">8</span>: astore_2           <span class="comment">//finally---开始</span></span><br><span class="line">         <span class="number">9</span>: bipush        <span class="number">20</span>   <span class="comment">//   finally中并没有捕捉异常，也没有抛出异常</span></span><br><span class="line">        <span class="number">11</span>: ireturn            <span class="comment">//finally---结束</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">2</span>     <span class="number">5</span>     <span class="number">8</span>   any</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">13</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">2</span></span><br><span class="line">        line <span class="number">17</span>: <span class="number">5</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">2</span>      <span class="number">10</span>     <span class="number">0</span>     i   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">1</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">8</span></span><br><span class="line">          locals = [ <span class="keyword">int</span> ]</span><br><span class="line">          stack = [ <span class="class"><span class="keyword">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Throwable</span> ]</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure>

<p>我们从字节码中可以看到，<code>finally</code>中并没有捕捉异常，也没有抛出异常，所以此种写法对于程序而言非常危险。下面看一段错误代码，但是程序并没有抛出异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinallyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = test();</span><br><span class="line">        System.out.println(j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            i = i / <span class="number">0</span>;  <span class="comment">//此处是一个异常代码</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：    </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200417222012554.jpg" alt="程序没有抛出异常"></p>
</blockquote>
<p><strong>所以，在写代码时，一定要主要不要写出这样的代码。</strong></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>关于SSPNet（空间金字塔池化网络），了解一下</title>
    <url>/SSPNet/</url>
    <content><![CDATA[<h3 id="1-SSPNet论文出处"><a href="#1-SSPNet论文出处" class="headerlink" title="1 SSPNet论文出处"></a>1 SSPNet论文出处</h3><p>SSPNet（Spatial Pyramid Pooling Network），中文名字是空间金字塔池化网络<br>SSPNet论文出自《<a href="https://jums.club/pdf/Spatial_Pyramid_Pooling_in_Deep_Convolutional_Networks_for_Visual_Recognition.pdf">Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition</a>》<br><a href="https://blog.csdn.net/tinyzhao/article/details/53717136">一篇较好的解读SSPNet的博客</a></p>
<h4 id="1-1-为什么会提出SSPNet"><a href="#1-1-为什么会提出SSPNet" class="headerlink" title="1.1 为什么会提出SSPNet"></a>1.1 为什么会提出SSPNet</h4><p>SSPNet的中文名称是空间金字塔池化网络，SSPNet的提出，是为了解决R-CNN遇到的一个拼劲问题，也就是R-CNN在候选区提取时，每张图片都需要经过一次CNN，运行速度很慢。如果你有2000张图片的话，那么你需要经过2000次CNN网络，这样的计算速度是非常慢的。 在了解SSPNet之前，让我们先了解一下<a href="https://crazyjums.github.io/2019/11/18/cv-concept-you-must-know/#R-CNN的工作原理">R-CNN的工作原理</a>，才能对其进行改进。  </p>
<p><strong>SSPNet完美解决上述R-CNN遗留的两个问题:</strong>   </p>
<blockquote>
<ul>
<li>R-CNN在生成了候选区域后，需要对每个区域进行统一尺寸的压缩或放大，当候选集的长与宽差别较大时强行压缩至比例为1:1时会使图像产生变形和丢失图像的原始特征</li>
<li>R-CNN生成了多个候选集后需要全部输入到CNN中，当生成了2000个候选集时，就需要对图片进行2000次单模型特征提取，这无疑是效率低下的</li>
</ul>
</blockquote>
<h4 id="1-2-SSPNet的解决方案"><a href="#1-2-SSPNet的解决方案" class="headerlink" title="1.2 SSPNet的解决方案"></a>1.2 SSPNet的解决方案</h4><p>针对R-CNN遗留的两个问题，SSPNet提出了如下的解决方案：   </p>
<blockquote>
<ul>
<li>SPPNet网络结构图如下所示，在输入时直接输入整张图像，只需要对整张图像做一次卷积操作，同时会生成整张图像的候选集特征映射(Feature Map)，这<strong>样候选集对应的特征图可以直接传递到下一层，这样一来对图像进行2000次的计算就变成了1次</strong>，大大增加了网络的效率。</li>
<li>SPPNet中另一关键模块就是金字塔池化层（Spatial Pyramid Pooling Layer），这一层的<strong>设计思路是通过池化操作将任意尺寸的输入都转换成固定大小输出</strong>，<strong>因为在池化层中只要池化的核结构不变，输入的维度就不会变化</strong>。Kaiming He等人正是利用了<strong>池化输出固定的原理</strong>避免了<strong>原始R-CNN模型中需要缩放图片候选集</strong>的操作   </li>
</ul>
</blockquote>
<p><strong>SPPNet在R-CNN拥有的区域提取、卷积层、池化层、全连接层、SVM分类器和Bounding-Box回归网络结构基础上，加入了候选集特征图映射和SPP Pooling层。将R-CNN网络的预测速度提升了数十倍，极大地优化了网络的计算法复杂度</strong><br>SSPNet的结构图如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20150105213522578.png" alt="image"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>解决【TypeError: Input &#39;b&#39; of &#39;MatMul&#39; Op has type int32 that does not match type float32 of argument &#39;a&#39;.】问题</title>
    <url>/TypeError-Input-b-of-MatMul-Op-has-type-int32-that-does-not-match-type-float32-of-argument-a/</url>
    <content><![CDATA[<h3 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1 发现问题"></a>1 发现问题</h3><p>利用TensorFlow框架进行自实现线性回归时，报错：TypeError: Input ‘b’ of ‘MatMul’ Op has type int32 that does not match type float32 of argument ‘a’.<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191127131420.png" alt="error">   </p>
<p><strong>源代码：</strong>    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def liner_regression():</span><br><span class="line">    </span><br><span class="line">    自实现一个线性回归</span><br><span class="line">    y_true = 0.8X + 0.7</span><br><span class="line">    :return:</span><br><span class="line">    </span><br><span class="line">    # 1 准备数据</span><br><span class="line">    X = tf.random_normal(shape=[100, 1],mean=0.0,stddev=1.0,name=&quot;feature&quot;) # 用高斯分布生成随机值，</span><br><span class="line">    y_true =  tf.matmul( X, [[8]]) + 0.7 # 用高斯分布生成随机值， 默认均值是0 方差是1</span><br><span class="line"></span><br><span class="line">    # 2 构造模型</span><br><span class="line">    # 模型构造用TensorFlow中的变量进行定义</span><br><span class="line">    # 2.1 weights</span><br><span class="line">    weights = tf.Variable(initial_value=tf.random_normal(shape=[1,1]),name=&quot;weights&quot;)</span><br><span class="line">    # 2.2 bias</span><br><span class="line">    bias = tf.Variable(initial_value=tf.random_normal(shape=[1, 1]),name=&quot;bias&quot;)</span><br><span class="line">    # 2.3 构建模型</span><br><span class="line">    y_predict = tf.matmul(X,weights) + bias</span><br><span class="line"></span><br><span class="line">    # 3 构造损失函数</span><br><span class="line">    # loss = tf.reduce_mean(tf.square(y_predict - y_true))</span><br><span class="line"></span><br><span class="line">    # 4 优化损失 梯度下降算法</span><br><span class="line">    # optimaizer = tf.train.GradientDescentOptimizer(learning_rate=0.01).minimize(loss)</span><br><span class="line"></span><br><span class="line">    # 显式的初始化变量</span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">    # 开启会话</span><br><span class="line">    with tf.Session() as sess:</span><br><span class="line">        sess.run(init)</span><br><span class="line">        print(X)</span><br><span class="line">        print(weights)</span><br><span class="line">        print(bias)</span><br></pre></td></tr></table></figure>


<h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>问题代码：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X = tf.random_normal(shape=[100, 1],mean=0.0,stddev=1.0,name=&quot;feature&quot;) # 用高斯分布生成随机值，</span><br><span class="line">y_true =  tf.matmul( X, [[8]]) + 0.7 # 用高斯分布生成随机值， 默认均值是0 方差是1</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191127131913.png" alt="error code"><br><strong>修改建议：</strong><br>将<code>y_true =  tf.matmul( X, [[8]]) + 0.7</code>中的<code>[[8]]</code>改成<code>[[8.0]]</code>或者使用<code>tf.cast([[8]],tf.float32)</code>进行数据类型转换</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>TensorFlow</tag>
        <tag>problem solved</tag>
      </tags>
  </entry>
  <entry>
    <title>UnicodeDecodeError: &#39;gb2312&#39; codec can&#39;t decode byte 0x87 in position 16144: illegal multibyte sequence</title>
    <url>/UnicodeDecodeError-gb2312/</url>
    <content><![CDATA[<h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h3><h4 id="UnicodeDecodeError-‘gb2312’-codec-can’t-decode-byte-0x87-in-position-16144-illegal-multibyte-sequence"><a href="#UnicodeDecodeError-‘gb2312’-codec-can’t-decode-byte-0x87-in-position-16144-illegal-multibyte-sequence" class="headerlink" title="UnicodeDecodeError: ‘gb2312’ codec can’t decode byte 0x87 in position 16144: illegal multibyte sequence"></a>UnicodeDecodeError: ‘gb2312’ codec can’t decode byte 0x87 in position 16144: illegal multibyte sequence</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200311213944.png" alt="gb2312 error"></p>
<h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2 分析"></a>2 分析</h3><p>解码错误，我们在用python爬虫爬取网页信息时，通常会遇到编码问题，这是其中的一种，中文编码问题更多。中文编码有如下几种，字符数以次增多：<code>gb2312&lt;gbk&lt;gb18030</code>，如果使用<code>gb2312</code>不能解码，那么可以使用<code>gb18030</code>解码试试</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200311213901.png" alt="gn18030"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐一个免费图床，了解一下</title>
    <url>/a-free-tuchuang-site/</url>
    <content><![CDATA[<h3 id="免费图床"><a href="#免费图床" class="headerlink" title="免费图床"></a>免费图床</h3><p>免费图床可以让我们免去很多上传图片的操作，特别是当我们自己使用<code>GitHub page</code>和<code>hexo</code>来弄自己的个人博客时,那么图床就显得很重要了，当然我们也可以直接将图片放到GitHub上，但是当博客数量多了之后，这样就显得过于臃肿了。</p>
<p>关于优缺点，自己可以衡量一下，使用GitHub作为自己的图床，那么安全性是相对有保障的，GitHub至少不会那么快就倒闭。而其他的图床的话，万一哪天xx，是吧。东西已经放在这里了，怎么选择就看你的了。</p>
<blockquote>
<p>图床推荐：<a href="https://www.tuchuang001.com/">https://www.tuchuang001.com/</a></p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ansible入门快速上手使用教程</title>
    <url>/ansible-tutorials/</url>
    <content><![CDATA[<h2 id="1-安装ansible"><a href="#1-安装ansible" class="headerlink" title="1 安装ansible"></a>1 安装ansible</h2><p>centos安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install epel-release    //更新本地安装库</span></span><br><span class="line"><span class="comment"># yum list all *ansible*   //查看相应的版本</span></span><br><span class="line"><span class="comment"># yum info ansible         //查看ansible的信息</span></span><br><span class="line"><span class="comment"># yum install ansible      //开始安装</span></span><br></pre></td></tr></table></figure>

<h2 id="2-ansible的配置文件"><a href="#2-ansible的配置文件" class="headerlink" title="2 ansible的配置文件"></a>2 ansible的配置文件</h2><ul>
<li><code>/etc/ansible/ansible.cfg</code>       主配置文件</li>
<li><code>/etc/ansible/hosts</code>                    Inventory</li>
<li><code>/usr/bin/ansible-doc</code>                帮助文件</li>
<li><code>/usr/bin/ansible-playbook</code>      指定运行任务文件</li>
</ul>
<h2 id="3-定义一个Linux集群组"><a href="#3-定义一个Linux集群组" class="headerlink" title="3 定义一个Linux集群组"></a>3 定义一个Linux集群组</h2><h3 id="（1）修改-etc-ansible-hosts"><a href="#（1）修改-etc-ansible-hosts" class="headerlink" title="（1）修改/etc/ansible/hosts"></a>（1）修改/etc/ansible/hosts</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /etc/ansible/</span></span><br><span class="line"><span class="comment"># cp hosts&#123;,.bak&#125;</span></span><br><span class="line"><span class="comment"># &gt; hosts</span></span><br><span class="line"><span class="comment"># cat hosts</span></span><br><span class="line">[webserver]</span><br><span class="line">127.0.0.1</span><br><span class="line">192.168.10.149</span><br><span class="line">[dbserver]</span><br><span class="line">192.168.10.113</span><br></pre></td></tr></table></figure>

<h3 id="（2）指定相应的配置文件"><a href="#（2）指定相应的配置文件" class="headerlink" title="（2）指定相应的配置文件"></a>（2）指定相应的配置文件</h3><p>大部分时候，对<code>/etc/ansible/hosts</code> 文件的修改，需要<code>root</code>权限，而往往工作中我们都是使用的普通用户进行登录，所以一般在自己的文件夹中单独创建一个hosts文件，然后在执行命令的时候指定解析自己的hosts文件即可，文件修改语法不变，执行命令如下：</p>
<ul>
<li><p><code>-i &#123;配置文件路径&#125;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ansible webserver -i ~/.ansible/hosts -m command -a &#x27;ls ~&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="4-密钥连接"><a href="#4-密钥连接" class="headerlink" title="4 密钥连接"></a>4 密钥连接</h2><p>在进行批量管理的时候，通常需要密码认证，这个时候有两种方式：</p>
<ul>
<li><p>每次执行命令都输入一次密码（比较麻烦）</p>
<ul>
<li><code>-k</code>，是小写的，然后输入密码即可</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ansible webserver -i ~/.ansible/hosts -m command -a &#x27;ls ~&#x27; -k</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210721193251.png" alt=""></p>
</li>
<li><p>使用ssh方式将密钥传输到指定的主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//首先生成ssh密钥</span><br><span class="line"><span class="comment"># ssh-genkey -t rsa    //连续按enter即可</span></span><br><span class="line">//将同ssh密钥拷贝到远程主机</span><br><span class="line"><span class="comment"># ssh-copy-id -i .ssh/id_rsa.pub zhangsan@192.168.1.10    //-i表示指定的ssh密钥</span></span><br><span class="line"><span class="comment"># ssh-copy-id zhangsan@192.168.1.10    //或者直接在ssh密钥的文件夹</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="5-基础教程用法"><a href="#5-基础教程用法" class="headerlink" title="5 基础教程用法"></a>5 基础教程用法</h2><ul>
<li><p><code>ping</code></p>
<p>enable this config, <code>record_host_keys=Flase</code>. And add the host’s ip address in the file(<code>/etc/ansible/hosts</code>).</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen$ ssh-copy-id [ip_address]</span><br><span class="line">$ ansible -m ping</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ansible-playbook</code>: execute a script.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible-playbook hello.yml</span><br><span class="line">$ cat hello.yml</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629153439.png" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629153459.png" alt=""></p>
</li>
<li><p><code>ansible-vault</code>: encrypt or decrypt a file, to ensure the secrity of the file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible-vault encrypt hello.yml</span><br><span class="line">$ ansible-vault decrypt hello.yml</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ansible-console</code>: A interact command line of ansible.</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629154046.png" alt=""></p>
</li>
</ul>
<p>Ansible Module:</p>
<ul>
<li><p>use module:</p>
<ul>
<li>command: execute only system command</li>
<li>shell: execute the command via shell process</li>
<li>raw: execute the low level command</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible [host group] -m [module name] -a <span class="string">&quot;[command line]&quot;</span></span><br><span class="line">$ ansible webserver -m <span class="built_in">command</span>/shell -a <span class="string">&quot;ls /etc&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629162327.png" alt=""></p>
<p><strong>Change default module:</strong></p>
<p><a href="https://hoxis.github.io/ansible-commands-modules-command-shell-raw.html">A tutorials of ansible module</a></p>
<p>change config file(/etc/ansible/ansible.cfg), enable the line and change it.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module_name = <span class="built_in">command</span>  // change it to shellmodule_name = shell</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>script</code>: Run a script on the remote hosts</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible [host group] -m script -a <span class="string">&quot;test.sh&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>copy</code>: Copy files from current host to remote hosts.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible [host group] -m copy -a <span class="string">&quot;src=/etc/systemfig dest=data/os.txt&quot;</span> owner=[user name] mode=600$ ansible webserver -m copy -a <span class="string">&quot;src=/home/centos/pig/1.txt dest=/home/root123/2.txt owner=root123 mode=600&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629164240.png" alt=""></p>
</li>
<li><p><code>fetch</code>: Fetch a file from remote hosts. This <code>must</code> be a file, not a directory. Like <code>copy</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible all -m fetch -a <span class="string">&quot;src=/etc/os-release dest=/home/centos/pig/tem&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629164945.png" alt=""></p>
</li>
<li><p><code>file</code>: change file’s attributes, create a empty file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible webserver -m file -a <span class="string">&quot;path=/home/root123/new.txt state=touch&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629165604.png" alt=""></p>
</li>
<li><p><code>unarchive</code>: unzip a file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible webserver -m unarchive -a <span class="string">&quot;src=./etc.tar.gz dest=/home/root123/ owner=root123 mode=600&quot;</span>   // push the zip file to the remote hosts and unzip it.</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629170702.png" alt=""></p>
</li>
</ul>
<h2 id="6-ansible转义"><a href="#6-ansible转义" class="headerlink" title="6 ansible转义"></a>6 ansible转义</h2><p><code>ansible</code> 中想执行 <code>lvm vgs | grep ceph | awk &#39;&#123;print $1&#125;&#39; | xargs -I &#123;&#125; lvm vgremove -f &#123;&#125;</code> 命令</p>
<p>排查结果发现 <code>lvm vgs | grep ceph | awk &#39;&#123;print $1&#125;&#39;  中  awk &#39;&#123;print $1&#125;&#39;</code>  失效</p>
<p>最终发现是 <code>$</code> 符出了问题，添加转义字符 <code>\</code> 后，ok</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ansible all -i  inventories/production/infrastructure -m shell -a <span class="string">&quot;lvm vgs | grep ceph | awk &#x27;&#123;print \$1&#125;&#x27;| xargs -I &#123;&#125; lvm vgremove -f &#123;&#125;&quot;</span> --become</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://segmentfault.com/a/1190000038230424">https://segmentfault.com/a/1190000038230424</a></li>
<li><a href="https://ansible-tran.readthedocs.io/en/latest/index.html">Ansible中文权威指南</a></li>
<li><a href="https://github.com/chusiang/automate-with-ansible">automate-with-ansible</a></li>
<li><a href="https://www.w3cschool.cn/automate_with_ansible/">automate-with-ansible in simple chinese</a></li>
<li><a href="https://blog.csdn.net/Man_In_The_Night/article/details/93464540">https://blog.csdn.net/Man_In_The_Night/article/details/93464540</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法中锚点的使用方法</title>
    <url>/archor-for-markdown/</url>
    <content><![CDATA[<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [<span class="string">测试</span>](<span class="link">#测试</span>)</span><br><span class="line"><span class="section">### <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;测试&quot;</span>&gt;</span></span>测试<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="#测试">测试</a><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a><a id="测试">测试</a></h3></li>
</ul>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>basic knowledge</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>一些比较好的爬虫项目汇总</title>
    <url>/awesome-spider-project/</url>
    <content><![CDATA[<p><a href="https://github.com/crazyjums/spider-project-summary/blob/master/REDEME.en.MD">English Version</a>   </p>
<h2 id="1-爬虫入门"><a href="#1-爬虫入门" class="headerlink" title="1 爬虫入门"></a>1 爬虫入门</h2><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目介绍</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/lining0806/PythonSpiderNotes">python爬虫入门教程</a></td>
<td>这里主要介绍了一些爬虫的入门教程，非常适合小白入手</td>
</tr>
</tbody></table>
<h2 id="2-爬虫登录"><a href="#2-爬虫登录" class="headerlink" title="2 爬虫登录"></a>2 爬虫登录</h2><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目介绍</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/crazyjums/awesome-python-login-model">login-model</a></td>
<td>这是爬虫中的登录模块演示</td>
</tr>
</tbody></table>
<h2 id="3-用户代理（User-Agent）"><a href="#3-用户代理（User-Agent）" class="headerlink" title="3 用户代理（User-Agent）"></a>3 用户代理（User-Agent）</h2><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目介绍</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/crazyjums/fake-useragent">fake-useragent</a></td>
<td>这里面有很多的用户代理（浏览器），防止被服务器监测到是机器人</td>
</tr>
</tbody></table>
<h2 id="4-代理池"><a href="#4-代理池" class="headerlink" title="4 代理池"></a>4 代理池</h2><blockquote>
<p>这里主要是一些HTTP Proxy代理项目，可以用于爬虫代理服务</p>
</blockquote>
<table>
<thead>
<tr>
<th>项目名称</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/crazyjums/mitmproxy">mitmproxy</a></td>
</tr>
<tr>
<td><a href="https://github.com/crazyjums/haipproxy">haipproxy</a></td>
</tr>
<tr>
<td><a href="https://github.com/crazyjums/scylla">scylla</a></td>
</tr>
<tr>
<td><a href="https://github.com/crazyjums/getproxy">getproxy</a></td>
</tr>
</tbody></table>
<h2 id="5-爬虫项目"><a href="#5-爬虫项目" class="headerlink" title="5 爬虫项目"></a>5 爬虫项目</h2><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目介绍</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/facert/awesome-spider">awesome-spider</a></td>
<td>这里介绍了很多的爬虫小项目，主要语言用的是<code>python</code></td>
</tr>
<tr>
<td><a href="https://github.com/scrapy/scrapy">Scrapy</a></td>
<td>一个股票数据爬虫，可以通过<code>pip</code>进行安装使用</td>
</tr>
<tr>
<td><a href="https://github.com/crazyjums/ruia">ruia</a></td>
<td>一个异步爬虫框架，可以实现高速爬取</td>
</tr>
<tr>
<td><a href="https://github.com/crazyjums/weixin_crawler">weixin_crawler</a></td>
<td>一个微信公众号爬虫项目，可以爬取一些公众号的文章</td>
</tr>
<tr>
<td><a href="https://github.com/crazyjums/WechatSogou">WechatSogou</a></td>
<td>一个微信搜狗搜索的<code>API</code>接口</td>
</tr>
</tbody></table>
<h2 id="6-爬虫框架"><a href="#6-爬虫框架" class="headerlink" title="6 爬虫框架"></a>6 爬虫框架</h2><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目介绍</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/xianhu/PSpider">PSpider</a></td>
<td>一个简单的web爬虫框架</td>
</tr>
<tr>
<td><a href="https://github.com/scrapy/scrapy">Scrapy</a></td>
<td>Scrapy 是用 Python 实现的一个为了爬取网站数据、提取结构性数据而编写的应用框架</td>
</tr>
</tbody></table>
<h2 id="7-python其他"><a href="#7-python其他" class="headerlink" title="7 python其他"></a>7 python其他</h2><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目介绍</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/crazyjums/wtfpython">wtfpython</a></td>
<td>这里主要介绍了一些比较不常见的python代码，可以帮助我们减少平时写代码的时候进行debug调试</td>
</tr>
<tr>
<td><a href="https://github.com/crazyjums/awesome-python-applications">awesome-python-applications</a></td>
<td>这里介绍了很多的特别棒的用<code>python</code>语言写的一些项目代码</td>
</tr>
</tbody></table>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>summary</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>awk常用案例</title>
    <url>/awk-cases/</url>
    <content><![CDATA[<h2 id="1-插入新字符以及格式化空白"><a href="#1-插入新字符以及格式化空白" class="headerlink" title="1 插入新字符以及格式化空白"></a>1 插入新字符以及格式化空白</h2><ul>
<li><p>将’a b c d’中的b字符，替换成’e f g’</p>
<p>直接进行替换，在awk中，每次替换之后，会对之前的分隔符（OFS）进行重置。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210731151653.png" alt=""></p>
</li>
<li><p>格式化以下数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  aaa     bbbbb   cc</span><br><span class="line">ddd  eee ffff</span><br><span class="line">     hhh   iii jj kk l</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：按空格进行分隔</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210731151623.png" alt=""></p>
</li>
<li><p>方法二：按制表符进行分隔</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210731151547.png" alt=""></p>
</li>
</ul>
</li>
</ul>
<h2 id="2-提取ipv4地址"><a href="#2-提取ipv4地址" class="headerlink" title="2 提取ipv4地址"></a>2 提取ipv4地址</h2><ul>
<li><p>提取ifconfig命令中的除了lo网卡之外的所有的ipv4地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig | awk <span class="string">&#x27;BEGIN&#123;RS=&quot;&quot;&#125; !/^lo/  &#123;print $6&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210731154237.png" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210731154304.png" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210731154333.png" alt=""></p>
<ul>
<li><p>使用正则表达式匹配日志文件中的所有IP地址</p>
<p>在使用awk的正则表达式的时候，需要指定适应该模块，<code>--re-interval</code></p>
<p>后续还可以进行排序与去重</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk --re-interval <span class="string">&#x27;&#123;match($0,/([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;/,a); print a[0]&#125;&#x27;</span> debug.log</span><br><span class="line">awk --re-interval <span class="string">&#x27;&#123;match($0,/([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;/,a); print a[0]&#125;&#x27;</span> debug.log | sort | uniq -c </span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210731170510.png" alt=""></p>
</li>
</ul>
<h2 id="3-使用awk数组做次数统计"><a href="#3-使用awk数组做次数统计" class="headerlink" title="3 使用awk数组做次数统计"></a>3 使用awk数组做次数统计</h2><ul>
<li><p>统计<code>netstat -tnap</code>中建立连接的次数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -tnap | awk <span class="string">&#x27;&#123;arr[$6]++&#125;END &#123;for (i in arr)&#123;print arr[i], i&#125; &#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210731154517.png" alt=""></p>
<p>如果只想统计TCP连接的，可以进行过滤：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -tnap | awk <span class="string">&#x27;/^tcp/ &#123;arr[$6]++&#125;END &#123;for (i in arr)&#123;print arr[i], i&#125; &#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210731154612.png" alt=""></p>
</li>
<li><p>统计日志中的IP地址数量并降序排序</p>
<blockquote>
<p>通过管道，发送到外部程序<code>sort</code>排序，<code>-r</code> 从大到小，<code>-n</code> 按照数字排序，<code>-k2</code> 以第2列排序。通过将数据丢给第3方的<code>sort</code>命令，所有问题变得非常简单。如果以key值排序 <code>–k2</code> 变成 <code>-k1</code>即可。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;arr[$4]++&#125;END&#123;for (i in arr)&#123;print i, arr[i]&#125;&#125;&#x27;</span> log.2021073010-20210730</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210731163555.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;arr[$4]++&#125;END&#123;for (i in arr)&#123;print i, arr[i] | &quot;sort -r -n -k2&quot;&#125;&#125;&#x27;</span> log.2021073010-20210730</span><br><span class="line">awk <span class="string">&#x27;&#123;arr[$4]++&#125;END&#123;for (i in arr)&#123;print i, arr[i] | &quot;sort -r -n -k2&quot;&#125;&#125;&#x27;</span> log.2021073010-20210730 | head -10   <span class="comment">#取数量最多的前10个</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210731163618.png" alt=""></p>
</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><p><a href="https://www.bilibili.com/video/BV1BJ411X7QN">awk 18个经典实战案例精讲</a></p>
</li>
<li><p><a href="https://likegeeks.com/awk-command/">https://likegeeks.com/awk-command/</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/chengmo/archive/2010/10/09/1846696.html">awk 数组排序多种实现方法</a></p>
</li>
<li><p><a href="https://blog.csdn.net/robin912/article/details/44645583">awk中抓取IP地址</a></p>
</li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL中的B树索引和B+树索引的区别？</title>
    <url>/b-tree-and-b-plus/</url>
    <content><![CDATA[<ul>
<li><p>在B树中，你可以将键和值存放在内部节点和叶子节点；但在B+树中，内部节点都是键，没有值，叶子节点同时存放键和值。</p>
</li>
<li><p>B+树的叶子节点有一条链相连，而B树的叶子节点各自独立。</p>
</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212112121.png" alt="在这里插入图片描述"></p>
<h2 id="1-使用B树的好处"><a href="#1-使用B树的好处" class="headerlink" title="1 使用B树的好处"></a>1 使用B树的好处</h2><p>B树可以在内部节点同时存储键和值，因此，把频繁访问的数据放在靠近根节点的地方将会大大提高热点数据的查询效率。这种特性使得B树在特定数据重复多次查询的场景中更加高效。</p>
<h2 id="2-使用B-树的好处"><a href="#2-使用B-树的好处" class="headerlink" title="2 使用B+树的好处"></a>2 使用B+树的好处</h2><p>由于B+树的内部节点只存放键，不存放值，因此，一次读取，可以在内存页中获取更多的键，有利于更快地缩小查找范围。 B+树的叶节点由一条链相连，因此，当需要进行一次全数据遍历的时候，B+树只需要使用O(logN)时间找到最小的一个节点，然后通过链进行O(N)的顺序遍历即可。而B树则需要对树的每一层进行遍历，这会需要更多的内存置换次数，因此也就需要花费更多的时间</p>
<h2 id="3-Hash索引和B-树索引有什么区别或者说优劣呢"><a href="#3-Hash索引和B-树索引有什么区别或者说优劣呢" class="headerlink" title="3 Hash索引和B+树索引有什么区别或者说优劣呢?"></a>3 Hash索引和B+树索引有什么区别或者说优劣呢?</h2><p>首先要知道Hash索引和B+树索引的底层实现原理：</p>
<p>hash索引底层就是hash表，进行查找时，调用一次hash函数就可以获取到相应的键值，之后进行回表查询获得实际数据。B+树底层实现是多路平衡查找树。对于每一次的查询都是从根节点出发，查找到叶子节点方可以获得所查键值，然后根据查询判断是否需要回表查询数据。</p>
<p>那么可以看出他们有以下的不同：</p>
<ul>
<li>hash索引进行等值查询更快(一般情况下)，但是却无法进行范围查询。</li>
</ul>
<p>因为在hash索引中经过hash函数建立索引之后，索引的顺序与原顺序无法保持一致，不能支持范围查询。而B+树的的所有节点皆遵循(左节点小于父节点，右节点大于父节点，多叉树也类似)，天然支持范围。</p>
<ul>
<li>hash索引不支持使用索引进行排序，原理同上。</li>
<li>hash索引不支持模糊查询以及多列索引的最左前缀匹配。原理也是因为hash函数的不可预测。AAAA和AAAAB的索引没有相关性。</li>
<li>hash索引任何时候都避免不了回表查询数据，而B+树在符合某些条件(聚簇索引，覆盖索引等)的时候可以只通过索引完成查询。</li>
<li>hash索引虽然在等值查询上较快，但是不稳定。性能不可预测，当某个键值存在大量重复的时候，发生hash碰撞，此时效率可能极差。而B+树的查询效率比较稳定，对于所有的查询都是从根节点到叶子节点，且树的高度较低。</li>
</ul>
<p>因此，在大多数情况下，直接选择B+树索引可以获得稳定且较好的查询速度。而不需要使用hash索引。</p>
<h2 id="4-数据库为什么使用B-树而不是B树"><a href="#4-数据库为什么使用B-树而不是B树" class="headerlink" title="4 数据库为什么使用B+树而不是B树"></a>4 数据库为什么使用B+树而不是B树</h2><ul>
<li>B树只适合随机检索，而B+树同时支持随机检索和顺序检索；</li>
<li>B+树空间利用率更高，可减少I/O次数，磁盘读写代价更低。一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘I/O消耗。B+树的内部结点并没有指向关键字具体信息的指针，只是作为索引使用，其内部结点比B树小，盘块能容纳的结点中关键字数量更多，一次性读入内存中可以查找的关键字也就越多，相对的，IO读写次数也就降低了。而IO读写次数是影响索引检索效率的最大因素；</li>
<li>B+树的查询效率更加稳定。B树搜索有可能会在非叶子结点结束，越靠近根节点的记录查找时间越短，只要找到关键字即可确定记录的存在，其性能等价于在关键字全集内做一次二分查找。而在B+树中，顺序检索比较明显，随机检索时，任何关键字的查找都必须走一条从根节点到叶节点的路，所有关键字的查找路径长度相同，导致每一个关键字的查询效率相当。</li>
<li>B-树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。B+树的叶子节点使用指针顺序连接在一起，只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作。</li>
<li>增删文件（节点）时，效率更高。因为B+树的叶子节点包含所有关键字，并以有序的链表结构存储，这样可很好提高增删效率。</li>
</ul>
<h2 id="5-B-树在满足聚簇索引和覆盖索引的时候不需要回表查询数据，"><a href="#5-B-树在满足聚簇索引和覆盖索引的时候不需要回表查询数据，" class="headerlink" title="5 B+树在满足聚簇索引和覆盖索引的时候不需要回表查询数据，"></a>5 B+树在满足聚簇索引和覆盖索引的时候不需要回表查询数据，</h2><p>在B+树的索引中，叶子节点可能存储了当前的key值，也可能存储了当前的key值以及整行的数据，这就是聚簇索引和非聚簇索引。 在InnoDB中，只有主键索引是聚簇索引，如果没有主键，则挑选一个唯一键建立聚簇索引。如果没有唯一键，则隐式的生成一个键来建立聚簇索引。</p>
<p>当查询使用聚簇索引时，在对应的叶子节点，可以获取到整行数据，因此不用再次进行回表查询。</p>
<h2 id="6-什么是聚簇索引？何时使用聚簇索引与非聚簇索引"><a href="#6-什么是聚簇索引？何时使用聚簇索引与非聚簇索引" class="headerlink" title="6 什么是聚簇索引？何时使用聚簇索引与非聚簇索引"></a>6 什么是聚簇索引？何时使用聚簇索引与非聚簇索引</h2><ul>
<li>聚簇索引：将数据存储与索引放到了一块，找到索引也就找到了数据</li>
<li>非聚簇索引：将数据存储于索引分开结构，索引结构的叶子节点指向了数据的对应行，myisam通过key_buffer把索引先缓存到内存中，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因</li>
</ul>
<p>澄清一个概念：innodb中，在聚簇索引之上创建的索引称之为辅助索引，辅助索引访问数据总是需要二次查找，非聚簇索引都是辅助索引，像复合索引、前缀索引、唯一索引，辅助索引叶子节点存储的不再是行的物理位置，而是主键值</p>
<p>何时使用聚簇索引与非聚簇索引</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/564554545454.png" alt="在这里插入图片描述"></p>
<h2 id="7-非聚簇索引一定会回表查询吗？"><a href="#7-非聚簇索引一定会回表查询吗？" class="headerlink" title="7 非聚簇索引一定会回表查询吗？"></a>7 非聚簇索引一定会回表查询吗？</h2><p>不一定，这涉及到查询语句所要求的字段是否全部命中了索引，如果全部命中了索引，那么就不必再进行回表查询。</p>
<p>举个简单的例子，假设我们在员工表的年龄上建立了索引，那么当进行<code>select age from employee where age &lt; 20</code>的查询时，在索引的叶子节点上，已经包含了age信息，不会再次进行回表查询。</p>
<h2 id="8-联合索引是什么？为什么需要注意联合索引中的顺序？"><a href="#8-联合索引是什么？为什么需要注意联合索引中的顺序？" class="headerlink" title="8 联合索引是什么？为什么需要注意联合索引中的顺序？"></a>8 联合索引是什么？为什么需要注意联合索引中的顺序？</h2><p>MySQL可以使用多个字段同时建立一个索引，叫做联合索引。在联合索引中，如果想要命中索引，需要按照建立索引时的字段顺序挨个使用，否则无法命中索引。</p>
<p><strong>具体原因为:</strong></p>
<p>MySQL使用索引时需要索引有序，假设现在建立了”name，age，school”的联合索引，那么索引的排序为: 先按照name排序，如果name相同，则按照age排序，如果age的值也相等，则按照school进行排序。</p>
<p>当进行查询时，此时索引仅仅按照name严格有序，因此必须首先使用name字段进行等值查询，之后对于匹配到的列而言，其按照age字段严格有序，此时可以使用age字段用做索引查找，以此类推。因此在建立联合索引的时候应该注意索引列的顺序，一般情况下，将查询需求频繁或者字段选择性高的列放在前面。此外可以根据特例的查询或者表结构进行单独的调整。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>java interview</tag>
        <tag>program language</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>0-1背包问题、完全背包、多重背包问题</title>
    <url>/backpackage-question/</url>
    <content><![CDATA[<h2 id="1-0-1背包"><a href="#1-0-1背包" class="headerlink" title="1 0-1背包"></a>1 0-1背包</h2><blockquote>
<p>题目：有N件物品和一个容量为V的背包。第i建物品的费用是c[i],价值是w[i]。求解将哪些物品装入背包可使价值总和最大（<strong>每件物品只能被使用一次</strong>）</p>
</blockquote>
<p>根据题目，可以确定使用动态规划思路进行求解，定义一个数组$dp$，$dp[i][j]$表示有$i$件物品，背包容量是$j$所能装入的物品的最大价值。</p>
<p>则有状态转移方程如下：$dp[i][j]=max(dp[i-1][j],dp[i-1][j-c[i]]+w[i])$</p>
<p>其中，每次选取都有两种选择：</p>
<ul>
<li>装入背包（背包能放得下该物品）：则问题就转化成前$i-1$件物品装入容量为$j$的背包的最大价值，则表示为$dp[i-1][j-c[i]]$，再加上当前物品$i$的价值$w[i]$，</li>
<li>不装入背包：那么问题就转换成前$i-1$件物品放入容量为$j$的背包的最大价值，则$dp[i-1][j]$</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> n 物体的数量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> w 背包所能放物体的最大重量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> wt 每件物体的重量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> val 每件物体的价值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dpSolution</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> w, <span class="keyword">int</span>[] wt, <span class="keyword">int</span>[] val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][w + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= w; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= wt[i - <span class="number">1</span>])<span class="comment">//背包所能承受的重量大于物体的重量，就放进去</span></span><br><span class="line">            	dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - wt[i - <span class="number">1</span>]] + val[i - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            	dp[i][j] = dp[i -<span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][w];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="0-1背包的空间优化"><a href="#0-1背包的空间优化" class="headerlink" title="0-1背包的空间优化"></a>0-1背包的空间优化</h3><p>回顾 01 背包的基本解法的状态转移方程，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j] 当前物品不选</span><br><span class="line">           dp[i - <span class="number">1</span>][j - v[i]] + w[i] 当前物品选，j - v[i] 要大于等于 <span class="number">0</span></span><br></pre></td></tr></table></figure>


<p>空间复杂度为 $O(NV)O(NV)$，状态转移中 i 这一维只跟 i - 1 有关系，因此 i 这一维用滚动数组至少可以将 N 行优化为 2 行。这本来是动态规划的基本操作，在线性动态规划中很常见。这里特别提空间优化是因为 01 背包的 i 这一维用 1 行就可以解决。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">假设状态只有一行，即 dp[j] := 占用了 j 空间的情况下可以取到的最大价值, 在推第 i 行的时候，dp 数组中存的是第 i - <span class="number">1</span> 行的信息。</span><br></pre></td></tr></table></figure>

<p>看状态的两个转移方向，第一个是 $dp[i - 1][j]$，这刚好就是当前 $dp $数组在 $j $位置保存的数据，因此不用动，比较麻烦的是另一个，就是 $dp[i - 1][j - v[i]] + w[i]$。这里要用到第 $i - 1 $行的 $dp[j - v[i]]$，但是如果按照正常的 $j $从 $0$ 到 $V$ 推的话，计算 $dp[j]$ 的时候，$dp[j - v[i]]$ 保存的已经是第 $i $行信息了。</p>
<p>因此这里需要转换一下，从大往小推，推到 $dp[j]$ 时，$dp[j+1], dp[j+2],…,dp[V]$ 都已经是第$i$行的信息了，但是它们对 $dp[j] $的计算没有影响，有影响的 $dp[j-v[i]]$ 此时还是第 $i - 1$ 行的信息，可以满足转移方程$dp[i - 1][j - v[i]] + w[i] $的需要。因此当空间这一维的状态从大往小推的时候，$i$ 这一维状态可以优化到一维。</p>
<p>这就是 01 背包的终极形态了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[j] = max(dp[j], dp[j - v[i]] + w[i]) <span class="comment">// j 从大往小推</span></span><br></pre></td></tr></table></figure>


<p>完整代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> n 物体的数量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> w 背包所能放物体的最大重量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> wt 每件物体的重量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> val 每件物体的价值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dpSolution2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> w, <span class="keyword">int</span>[] wt, <span class="keyword">int</span>[] val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> [] dp=<span class="keyword">new</span> <span class="keyword">int</span>[w+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n+<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=w;j&gt;<span class="number">0</span>;j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j&gt;=wt[i-<span class="number">1</span>])</span><br><span class="line">            	dp[j] = Math.max(dp[j],dp[j-wt[i-<span class="number">1</span>]]+val[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[w];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="2-完全背包"><a href="#2-完全背包" class="headerlink" title="2 完全背包"></a>2 完全背包</h2><blockquote>
<p>题目：有N件物品和一个容量为V的背包。第i建物品的费用是c[i],价值是w[i]。求解将哪些物品装入背包可使价值总和最大（<strong>每件物品可以被无限次使用</strong>）</p>
</blockquote>
<p>与0-1背包不同的是，完全背包中的每个物品可以被无限次使用。</p>
<p>状态转移方程：$dp[i][j]=max(dp[i-1][j],dp[i][j-c[i]]+w[i])$</p>
<ul>
<li>不装入背包：则问题转化成从前$i-1$个物品所能用的容量是$j$，则有$dp[i-1][j]$</li>
<li>装入背包：在0-1背包中，当取第$i$个物品时，可以知道前$i-1$个物品所能用的最大容量是$j-c[i]$，完全背包中每个物品可以取无限次，所以如果取第$i$个物品，那么前$i$个物品所能用的容量还是$j-c[i]$，$dp[i][j-c[i]]+w[i]$。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> n 物体的数量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> w 背包所能放物体的最大重量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> wt 每件物体的重量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> val 每件物体的价值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dpSolution</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> w, <span class="keyword">int</span>[] wt, <span class="keyword">int</span>[] val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][w + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= w; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= wt[i - <span class="number">1</span>])<span class="comment">//背包所能承受的重量大于物体的重量，就放进去</span></span><br><span class="line">            	dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - wt[i - <span class="number">1</span>]] + val[i - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            	dp[i][j] = dp[i -<span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][w];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="完全背包的空间优化"><a href="#完全背包的空间优化" class="headerlink" title="完全背包的空间优化"></a>完全背包的空间优化</h3><blockquote>
<p>考虑空间优化后的状态转移方程如下：在 01 背包中，由于推第 $i$ 行的 $dp[j]$ 时需要第 $i - 1$ 行的 $dp[j-v[i]] $，因此忌讳在推导 $dp[j]$ 时，$dp[j-v[i]]$ 已经更新过了, 这是 01 背包不希望发生的事，解决的办法就是 $j$ 从大往小推。</p>
<p>而上述 01 背包不希望发生的事正是完全背包希望发生的，即推导第 $i$ 行的 $dp[j]$ 时，用到第 $i$ 行的 $dp[j -v[i]]$ 。而这仅需要把 01 背包中的从大往小推 $j$ 改为从小往大推 $j$ 即可实现。这就是完全背包的优化巧妙的地方。</p>
<p>$dp[j] = max(dp[j], dp[j - v[i]] + w[i]) $</p>
<p>作者：力扣 (LeetCode)<br>链接：<a href="https://leetcode-cn.com/leetbook/read/dynamic-programming-2-plus/5253i5/">https://leetcode-cn.com/leetbook/read/dynamic-programming-2-plus/5253i5/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> n 物体的数量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> w 背包所能放物体的最大重量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> wt 每件物体的重量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> val 每件物体的价值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dpSolution2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> w, <span class="keyword">int</span>[] wt, <span class="keyword">int</span>[] val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> [] dp=<span class="keyword">new</span> <span class="keyword">int</span>[w+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n+<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= w; j++) &#123; <span class="comment">//从小往大推</span></span><br><span class="line">            <span class="keyword">if</span> (j&gt;=wt[i-<span class="number">1</span>])</span><br><span class="line">            	dp[j] = Math.max(dp[j],dp[j-wt[i-<span class="number">1</span>]]+val[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[w];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-多重背包问题"><a href="#3-多重背包问题" class="headerlink" title="3 多重背包问题"></a>3 多重背包问题</h2><blockquote>
<p>有N种物品和一个容量为V的背包。第i种物品最多有n[i]件，每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大</p>
</blockquote>
<h3 id="思路-1-：将物品展开，全拆成-01"><a href="#思路-1-：将物品展开，全拆成-01" class="headerlink" title="思路 1 ：将物品展开，全拆成 01"></a>思路 1 ：将物品展开，全拆成 01</h3><p>这与完全背包的朴素思路一致。与完全背包的情况一样，这种方法是正确的，但是时间复杂度较高。</p>
<p>多重背包的朴素算法与完全背包的朴素算法没有区别，而多重背包的优化相对较难，并且力扣上面没有多重背包的题目。下面仅对多重背包的优化做简单的介绍。</p>
<h3 id="思路-2-：2-进制分解"><a href="#思路-2-：2-进制分解" class="headerlink" title="思路 2 ：2 进制分解"></a>思路 2 ：2 进制分解</h3><p>这是对思路 1 的优化。</p>
<p>有这样一个事实：任意一个数 n，它一定可以用 1,2,4,8,… $2^{k}$ ，以及 $2^{k}$到 $2^{k+1}$之间的某个数表示。例如 13 以内的所有数都可以用 1,2,4,6 表示。所以对于物品 $i$, 数量限制是$c_{i}$, 可以将其分成若干物品，它们的价值和体积为：($w_{i}$ ，$v_{i}$)，($2<em>w_{i}$，$2</em>v_{i}$)，…</p>
<p>然后对这些物品做 01 背包。这样 01 背包的物品数就比思路 1 少很多了。这可以理解为类似于倍增法的思想。倍增法超出了力扣的范围，感兴趣的话可以找相关的资料学习。</p>
<p>以上就是背包动态规划的基本内容。背包动态规划在力扣上题目不多，下一节整理了 8 道背包动态规划的练习题，通过这些题可以大致了解背包问题的一些经典问题和常见的问法。</p>
<p>作者：力扣 (LeetCode)<br>链接：<a href="https://leetcode-cn.com/leetbook/read/dynamic-programming-2-plus/5253i5/">https://leetcode-cn.com/leetbook/read/dynamic-programming-2-plus/5253i5/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础知识介绍</title>
    <url>/basic-python-knowledge/</url>
    <content><![CDATA[<h3 id="1-下载Python"><a href="#1-下载Python" class="headerlink" title="1 下载Python"></a>1 下载Python</h3><ul>
<li>Windows:<a href="https://www.python.org/downloads/windows/">下载</a>    </li>
<li>mac os:<a href="https://www.python.org/downloads/mac-osx/">下载</a>    </li>
</ul>
<h3 id="2-安装Python"><a href="#2-安装Python" class="headerlink" title="2 安装Python"></a>2 安装Python</h3><p>这里就不过多讲述这些，下载完安装包之后，直接点击下一步即可，记得添加到环境变量（Windows）    </p>
<h4 id="2-1-添加环境变量"><a href="#2-1-添加环境变量" class="headerlink" title="2.1 添加环境变量"></a>2.1 添加环境变量</h4><p>【我的电脑】-&gt;【属性】-&gt;【高级系统设置】-&gt;【环境变量】-&gt;【系统变量】-&gt;【path】<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191226145021.png" alt="环境变量">    </p>
<h3 id="3-pip的使用"><a href="#3-pip的使用" class="headerlink" title="3 pip的使用"></a>3 pip的使用</h3><h4 id="3-1-pip-install-xxx"><a href="#3-1-pip-install-xxx" class="headerlink" title="3.1 pip install xxx"></a>3.1 pip install xxx</h4><p>功能：通过<code>pip</code>命令来安装三方包，这里以<code>requests</code>为例:    </p>
<blockquote>
<p>pip install requests    </p>
</blockquote>
<h4 id="3-2-pip-list"><a href="#3-2-pip-list" class="headerlink" title="3.2 pip list"></a>3.2 pip list</h4><p>功能：显示本地已经安装的三方包，如：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191226145436.png" alt="pip list">    </p>
<h4 id="3-3-pip-V-upper-letter"><a href="#3-3-pip-V-upper-letter" class="headerlink" title="3.3 pip -V(upper letter)"></a>3.3 pip -V(upper letter)</h4><p>功能：显示Python的路径以及当前版本号，如：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191226145543.png" alt="pip -V">    </p>
<h4 id="3-4-其他-pip-h"><a href="#3-4-其他-pip-h" class="headerlink" title="3.4 其他 pip -h"></a>3.4 其他 pip -h</h4><p>功能：显示帮助信息，其他的更多的信息可以通过该命令查看，或者参考<a href="https://pypi.org/project/pip/">这里</a><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191226145626.png" alt="pip -h">    </p>
<h3 id="4-Python中的变量"><a href="#4-Python中的变量" class="headerlink" title="4 Python中的变量"></a>4 Python中的变量</h3><p>本章前提：<code>id()</code>，该方法是用来显示变量在内存中的地址的。    </p>
<h4 id="4-1-不可变数据类型"><a href="#4-1-不可变数据类型" class="headerlink" title="4.1 不可变数据类型"></a>4.1 不可变数据类型</h4><p>不可变数据类型表示，如果某变量的值发生了变化，那么必须重新分配一个内存空间来盛放这个新的值。Python中的几种不可变数据类型：<code>number</code>,<code>str</code>,<code>tuple</code>。    </p>
<h5 id="4-1-1-number"><a href="#4-1-1-number" class="headerlink" title="4.1.1 number"></a>4.1.1 number</h5><p>Python中支持4中不同数值型的数据类型（<a href="https://www.runoob.com/python/python-numbers.html">参考</a>）：    </p>
<ul>
<li>int（整型）    </li>
<li>long integters（长整型）    </li>
<li>floating point real values（浮点型）    </li>
<li>complex numbers（复杂数值型）<br>举例：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191226150623.png" alt="number example">    </li>
</ul>
<h5 id="4-1-2-str"><a href="#4-1-2-str" class="headerlink" title="4.1.2 str"></a>4.1.2 str</h5><p>字符串类型也是不可信数据类型。<br>举例：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191226151208.png" alt="str example"><br>字符串的特性：    </p>
<ul>
<li>截取    </li>
<li>连接    </li>
</ul>
<p>（1）截取<br>随便截取：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191226151430.png" alt="截取1"><br>截取到倒数第一位为止：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191226151531.png" alt="截取2"><br>截取所有：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191226151608.png" alt="截取3"><br>这种截取方式相当于：<code>t=s</code>，即直接赋值。    </p>
<p>（2）连接<br>这种方式比较简单，就是直接用<code>+</code>号将前后两个字符串连接成一个。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191226151817.png" alt="连接1">    </p>
<h5 id="4-1-3-tuple"><a href="#4-1-3-tuple" class="headerlink" title="4.1.3 tuple"></a>4.1.3 tuple</h5><p>元组是Python中的一种不可变数据类型，用小括号<code>()</code>包起来。<br>定义元祖：    </p>
<ul>
<li>直接用小括号包起来，如果只有一个变量，那么末尾加一个<code>,</code>，用以区分元组和普通变量    </li>
<li>用<code>tuple</code>关键字定义    </li>
</ul>
<p>举例：<br>（1）直接用<code>()</code>包起来<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191226152201.png" alt="定义1"><br>（2）用<code>tuple</code>关键字定义<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191226152412.png" alt="定义2">    </p>
<h4 id="4-2-可变数据类型"><a href="#4-2-可变数据类型" class="headerlink" title="4.2 可变数据类型"></a>4.2 可变数据类型</h4><h5 id="4-2-1-list"><a href="#4-2-1-list" class="headerlink" title="4.2.1 list"></a>4.2.1 list</h5><p>Python中的<code>list</code>是一种比较灵活的数据结构，也是一种可变数据结构，看下面的例子：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191227161328.png" alt="list example"><br>下面这种情况，和我们以为的可能不太一样：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191227161656.png" alt="特例1"><br>你觉得<code>a</code>和<code>b</code>是同一个对象吗？<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191227161622.png" alt="答案"><br><strong>注意：</strong>    </p>
<blockquote>
<p>当我们使用<code>=</code>进行列表的赋值的时候，我们要注意，默认情况下，<code>=</code>表示的是一种浅拷贝，即直接将<code>=</code>左边的变量的指针指向<code>=</code>右边的变量的内存空间，当右边的变量改变的时候，左边的变量也跟着改变，当我们在写程序的时候，这种方式显然不够安全。别不用着急，可以使用<code>Python</code>中的<strong>深拷贝</strong>进行赋值。    </p>
</blockquote>
<p><strong>深拷贝：</strong><br>深拷贝与浅拷贝的示意图：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/164e6856d76ff161.jpg" alt="deep and shallow copy"><br>浅拷贝和赋值的区别？    </p>
<ul>
<li>当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。    </li>
<li>浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。    </li>
</ul>
<p>（1）浅拷贝和赋值举例：<br><code>Python</code>中有一个自带包<code>copy</code>，该包中的<code>copy</code>代表浅拷贝，<code>deepcopy</code>代表深拷贝。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191227162724.png" alt="浅拷贝和赋值举例"><br>从图中我们可以看到，通过赋值的方式得到的<code>list_3</code>的地址和<code>list_1</code>的地址是一样的，这就印证了上面说的，赋值就是直接将指针指向源数据的内存空间。而浅拷贝则不然，浅拷贝则是赋值了一遍数据，但是复制也不是全盘复制，而是有条件的赋值，即如果该属性是基本类型（基本数据类型也可理解为不可变的数据结构，如<code>int</code>,<code>str</code>,’long int’等）就直接将该基本类型的值拷贝一份到新的内存中，如果该属性是一个内存地址（也就是说是可变的数据结构，通常这种数据类型在内存中是一种引用的方式，即内存地址），那么就将内存地址复制一份到新的内存中，那么如果该内存地址中的源数据改变了，新复制的数据中该内存地址所指向的数据也会改变，因为它们指向的是同一个数据。    </p>
<p>（2）深拷贝举例：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191227163618.png" alt="deepcopy"><br>深拷贝就和其他的编程语言（比如<code>java</code>）的一致了，就是直接一模一样拷贝一份，源数据和新被赋值的数据进水不犯河水。它们的各自改变不会互相影响。<br>看下面的例子：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191227163848.png" alt="深拷贝和浅拷贝举例">    </p>
<blockquote>
<p>关于深拷贝和浅拷贝的具体更深的内容，可以参考这篇博客：<a href="https://juejin.im/post/5b5dcf8351882519790c9a2e">https://juejin.im/post/5b5dcf8351882519790c9a2e</a>    </p>
</blockquote>
<h5 id="4-2-2-dict"><a href="#4-2-2-dict" class="headerlink" title="4.2.2 dict"></a>4.2.2 dict</h5><p>字典是<code>Python</code>中的一种<code>key-value</code>的键值对形式的数据结构，也是一种可变的数据结构，基本原理和上一节讲的<code>list</code>差不多，这里简单介绍一下。    </p>
<p>（1）字典赋值的举例：<br>关于<code>python</code>中的这种数据赋值，我们叫它赋值，不如叫它给真正的数据对象取一个别名，这就好理解了。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191227164942.png" alt="字典赋值的举例"><br>我们可以看到，字典的赋值和列表的赋值其实是一样的，都是简单粗暴的直接指针指过去，<code>dict_1</code>和<code>dict_2</code>是联动的。如我们修改<code>dict_1</code>的<code>name</code>属性，<code>dict_2</code>的<code>name</code>属性也改变了：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191227165149.png" alt="联动性">    </p>
<p>（2）字典的浅拷贝举例：<br><code>dict.copy()</code>和<code>from copy import copy</code>的区别？    </p>
<ul>
<li><code>dict.copy()</code>：这种拷贝只是拷贝第一层，如果字典中还嵌套有可变数据类型，还是一样，只拷贝引用即地址，不会真正拷贝数据。    </li>
<li><code>from copy import copy</code>中导入的<code>copy</code>是浅拷贝的包，但是用在字典上，会拷贝第一层，再往下就不会再拷贝了。    </li>
</ul>
<p>举例：<br><code>dict.copy()</code>举例：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191227171641.png" alt="dict.copy()举例"><br>我们可以看到，基本类型都是已经拷贝了，所以<code>dict_2</code>的<code>age</code>属性并没有改变。接着看修改可变数据类型之后的情况：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191227171839.png" alt="可变类型的改变">    </p>
<p>（3）字典的深拷贝举例：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191227211521.png" alt="字典的深拷贝举例">   </p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>program language</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Before you start work, you should know ...</title>
    <url>/brfore-work/</url>
    <content><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>可以掌握常用工具的日常使用场景：</p>
<ul>
<li><input disabled="" type="checkbox"> <p>awk统计ip</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <p>awk基本内置变量：FS、OFS、RS、ORS、NR、NF（输出最后一个字段，<code>$NF</code>）、BEGIN、END、FILENAME、ARGC、ARGV</p>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>printf：格式化输出</p>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>print：正常输出</p>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>模式匹配：匹配字符使用<code>/[string]/</code>括起来</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 匹配所有行中只要含<code>root</code>的行：<code>awk &#39;/root/ &#123;print $0&#125; 1.txt&#39;</code></li>
<li><input checked="" disabled="" type="checkbox"> <code>^</code>符号表示开头，比如：<code>awk &#39;/^root/ &#123;print $0&#125; 1.txt&#39;</code>，该语句输出<code>1.txt</code>文件中的所有以<code>root</code>开头的行</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>运算符匹配：</p>
<blockquote>
<p><code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>==</code>、<code>!=</code>、<code>~</code>（匹配正则表达式）、<code>!~</code>（不匹配正则表达式）</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 如果需要对某个变量进行匹配，则需要在变量后面加上<code>~</code>符号，表示匹配的意思，比如：<code>awk &#39;$1~/root/ &#123;print $0&#125; 1.txt&#39;</code></li>
</ul>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>布尔运算符：</p>
<blockquote>
<p><code>&amp;&amp;</code>，与符号用于连接多个匹配关系：<code>$3&gt;50 &amp;&amp; $3&lt;100</code>，即第三个变量大于50且小于100</p>
<p><code>||</code>，或符号</p>
<p><code>!</code>，非符号</p>
</blockquote>
<p>计算文件中的所有空白行的总数</p>
</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>grep</p>
<blockquote>
<p><a href="https://man7.org/linux/man-pages/man1/grep.1.html">grep</a>, egrep, fgrep - print lines that match patterns. Search for content in a file.</p>
<p>Basic usage:</p>
<ul>
<li><p>grep “search_content” filename</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> [root@192 pig]<span class="comment"># grep &quot;this&quot; 1.txt </span></span><br><span class="line">1 this is a line</span><br><span class="line">2 this is the no.2 line</span><br></pre></td></tr></table></figure>
</li>
<li><p>grep <code>-c</code> “search_content” filename   //count the [search content] in filename</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@192 pig]<span class="comment"># grep -c &quot;this&quot; 1.txt </span></span><br><span class="line">2</span><br></pre></td></tr></table></figure>
</li>
<li><p>grep <code>-i</code> “search_content” filename   //ignore case</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@192 pig]<span class="comment"># grep -i &quot;this&quot; 1.txt </span></span><br><span class="line">1 this is a line</span><br><span class="line">2 this is the no.2 line</span><br><span class="line">This is me.</span><br></pre></td></tr></table></figure>
</li>
<li><p>grep <code>-n</code>  “search_content” filename   //show line number</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@192 pig]<span class="comment"># grep -n &quot;this&quot; 1.txt </span></span><br><span class="line">1:1 this is a line</span><br><span class="line">2:2 this is the no.2 line</span><br></pre></td></tr></table></figure>
</li>
<li><p>grep <code>-v</code> “search_content” filename   //match all strings in reverse</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@192 pig]<span class="comment"># grep -v &quot;this&quot; 1.txt </span></span><br><span class="line">how are you now.</span><br><span class="line">I am fine, thank you.</span><br><span class="line">This is me.</span><br><span class="line">[root@192 pig]<span class="comment"># cat 1.txt </span></span><br><span class="line">1 this is a line</span><br><span class="line">2 this is the no.2 line</span><br><span class="line">how are you now.</span><br><span class="line">I am fine, thank you.</span><br><span class="line">This is me.</span><br></pre></td></tr></table></figure>
</li>
<li><p>union the parameters together</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@192 pig]<span class="comment"># grep -ic &quot;this&quot; 1.txt </span></span><br><span class="line">3</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>Regular Match:</p>
<ul>
<li><p><code>*</code>: Refers to match one character zero or more times</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210628162948.png" alt=""></p>
</li>
<li><p><code>.</code>: When you use it only, it means match all strings. If you use it with search content, it means any character.</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210628162911.png" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210628163024.png" alt=""></p>
</li>
<li><p><code>&#123;n,m&#125;</code>: Match a character between <code>n</code> and <code>m</code> times.</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210628163822.png" alt=""></p>
</li>
<li><p><code>^</code>: Start character.</p>
</li>
<li><p><code>$</code>: End character.    //Use <code>^</code> and <code>$</code> can match the IP address specifically.</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210628163947.png" alt=""></p>
</li>
<li><p><code>^$</code>: This means match a empty line.</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210628164225.png" alt=""></p>
</li>
<li><p><code>\b</code>: Bountdary match.</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210628165211.png" alt=""></p>
</li>
<li><p><code>-B</code>: None boundary match. </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210628165538.png" alt=""></p>
</li>
<li><p><code>[]</code>: range matge. For example, [0-9] refers to all digits between 0 and 9.    //[a-z]. [A-Z]. [0-9]</p>
</li>
<li><p><code>\w</code>: Refers to <code>[0-9a-zA-Z]</code>.</p>
</li>
<li><p><code>\W</code>: Refers to <code>[^0-9a-zA-Z]</code></p>
</li>
</ul>
<p>WildCard:</p>
<ul>
<li><code>?</code>: Match the previous character zero or one time.</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210628170307.png" alt=""></p>
<ul>
<li><p><code>+</code>: Match the previous character one or more times.</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210628170521.png" alt=""></p>
</li>
<li><p><code>()</code>: It’s a selection, offen use with <code>|</code> together, <code>|</code> means or.</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210628171103.png" alt=""></p>
</li>
</ul>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>find</p>
<blockquote>
<p><a href="https://man7.org/linux/man-pages/man1/find.1.html">find</a> - search for files in a directory hierarchy</p>
<p><a href="https://www.linuxcool.com/find">find tutorials in chinese</a></p>
<p>Common parameters:</p>
<table>
<thead>
<tr>
<th>-name</th>
<th>按名称查找</th>
</tr>
</thead>
<tbody><tr>
<td>-size</td>
<td>按大小查找</td>
</tr>
<tr>
<td>-user</td>
<td>按属性查找</td>
</tr>
<tr>
<td>-type</td>
<td>按类型查找</td>
</tr>
<tr>
<td>-iname</td>
<td>忽略大小写</td>
</tr>
</tbody></table>
<ul>
<li><p>Find all confgure files in <code>/etc</code> directory</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /etc/ -name <span class="string">&quot;*.conf&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Find in current directory</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find . -name <span class="string">&quot;1*&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Find files by type</p>
<table>
<thead>
<tr>
<th>file type</th>
<th>refers to</th>
<th>file type</th>
<th>refers to</th>
</tr>
</thead>
<tbody><tr>
<td>f</td>
<td>a file</td>
<td>b</td>
<td>a block divice</td>
</tr>
<tr>
<td>d</td>
<td>a directory</td>
<td>c</td>
<td>a character divice</td>
</tr>
<tr>
<td>l</td>
<td>a soft link</td>
<td>p</td>
<td>pipeline</td>
</tr>
<tr>
<td>s</td>
<td>a socket</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find -<span class="built_in">type</span> f </span><br></pre></td></tr></table></figure>
</li>
<li><p><code>find -exec</code> or <code>find -ok</code>, execute a command after find. The  template  is <code>-exex &#123;&#125; \;</code>, You should know there is a space between <code>&#123;&#125;</code> and <code>\;</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find -<span class="built_in">type</span> d -empty -<span class="built_in">exec</span> touch /2.txt &#123;&#125; \;   // find a enpty directory, and touch a file named 2.txt</span><br><span class="line">$ $ find -<span class="built_in">type</span> d -empty -ok touch /2.txt &#123;&#125; \;   // when you use <span class="string">&quot;ok&quot;</span> instead of <span class="string">&quot;exec&quot;</span>, it will <span class="built_in">let</span> you confirm and execute.</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629115716.png" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629115748.png" alt=""></p>
</li>
<li><p><code>-size</code>, Find files by size. </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629120948.png" alt=""></p>
</li>
<li><p><code>-user</code>. Find by owner. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /directory -user [uesr name]</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629121218.png" alt=""></p>
</li>
<li><p><code>-group</code>. Find by group.</p>
</li>
<li><p>Mutli-condition find. <code>-a</code> refers to and, <code>-o</code> refers to or.</p>
</li>
</ul>
<p><code>locate</code> command is faster than <code>find</code>, because <code>locate</code> is find from a database, but this database need manual to update.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// install locate</span><br><span class="line">$ sudo yum install mlocate</span><br><span class="line">// update database</span><br><span class="line">$ updatedb</span><br><span class="line">// find a file</span><br><span class="line">$ locate /etc/my</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629123141.png" alt=""></p>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>curl</p>
<blockquote>
<p>curl means client URL tool, curl in short.</p>
<p><a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl tutorials in chinese</a></p>
<ul>
<li><p><strong>get</strong> request: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://www.baidu.com   <span class="comment"># default request is get</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-A</code>: user can specfiy the user-agent of th request</p>
</li>
<li><p><code>-b</code>: send a cookie to server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -b <span class="string">&#x27;foo=bar;foo2=bar2;...&#x27;</span> https://www.baidu.com  <span class="comment"># cookie name is foo, value is bar</span></span><br><span class="line">curl -b cookie.txt https://www.baidu.com  <span class="comment"># send the cookie file to server </span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-c</code>: write the cookie information that server sent to client into a file</p>
</li>
<li><p><code>-d</code>: If you want to use <strong>POST</strong> request to access website, you should send data to server.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -d <span class="string">&#x27;username=admin&amp;passwd=admin&#x27;</span> [X POST] https://www.baidu.com</span><br><span class="line">curl -d <span class="string">&#x27;@data.txt&#x27;</span> https://www.baidu.com  <span class="comment"># post data is in a file</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>--data-urlencode</code>: same as <code>-d</code>, this command can change the data to urlcode.</p>
</li>
</ul>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>了解：logrotate，rsync</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <p>掌握ansible基本用法：主要用于批量查日志，执行命令。</p>
<blockquote>
<p><a href="https://ansible-tran.readthedocs.io/en/latest/index.html">Ansible中文权威指南</a></p>
<p><a href="https://github.com/chusiang/automate-with-ansible">automate-with-ansible</a></p>
<p><a href="https://www.w3cschool.cn/automate_with_ansible/">automate-with-ansible in simple chinese</a></p>
<ul>
<li><p><code>ping</code></p>
<p>enable this config, <code>record_host_keys=Flase</code>. And add the host’s ip address in the file(<code>/etc/ansible/hosts</code>).</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen</span><br><span class="line">$ ssh-copy-id [ip_address]</span><br><span class="line">$ ansible -m ping</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ansible-playbook</code>: execute a script.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible-playbook hello.yml</span><br><span class="line">$ cat hello.yml</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629153439.png" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629153459.png" alt=""></p>
</li>
<li><p><code>ansible-vault</code>: encrypt or decrypt a file, to ensure the secrity of the file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible-vault encrypt hello.yml</span><br><span class="line">$ ansible-vault decrypt hello.yml</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ansible-console</code>: A interact command line of ansible.</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629154046.png" alt=""></p>
</li>
</ul>
<p>Ansible Module:</p>
<ul>
<li><p>use module:</p>
<ul>
<li>command: execute only system command</li>
<li>shell: execute the command via shell process</li>
<li>raw: execute the low level command</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible [host group] -m [module name] -a <span class="string">&quot;[command line]&quot;</span></span><br><span class="line">$ ansible webserver -m <span class="built_in">command</span>/shell -a <span class="string">&quot;ls /etc&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629162327.png" alt=""></p>
<p><strong>Change default module:</strong></p>
<p><a href="https://hoxis.github.io/ansible-commands-modules-command-shell-raw.html">A tutorials of ansible module</a></p>
<p>change config file(/etc/ansible/ansible.cfg), enable the line and change it.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module_name = <span class="built_in">command</span>  // change it to shell</span><br><span class="line">module_name = shell</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>script</code>: Run a script on the remote hosts</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible [host group] -m script -a <span class="string">&quot;test.sh&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>copy</code>: Copy files from current host to remote hosts.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible [host group] -m copy -a <span class="string">&quot;src=/etc/systemfig dest=data/os.txt&quot;</span> owner=[user name] mode=600</span><br><span class="line">$ ansible webserver -m copy -a <span class="string">&quot;src=/home/centos/pig/1.txt dest=/home/root123/2.txt owner=root123 mode=600&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629164240.png" alt=""></p>
</li>
<li><p><code>fetch</code>: Fetch a file from remote hosts. This <code>must</code> be a file, not a directory. Like <code>copy</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible all -m fetch -a <span class="string">&quot;src=/etc/os-release dest=/home/centos/pig/tem&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629164945.png" alt=""></p>
</li>
<li><p><code>file</code>: change file’s attributes, create a empty file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible webserver -m file -a <span class="string">&quot;path=/home/root123/new.txt state=touch&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629165604.png" alt=""></p>
</li>
<li><p><code>unarchive</code>: unzip a file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ansible webserver -m unarchive -a <span class="string">&quot;src=./etc.tar.gz dest=/home/root123/ owner=root123 mode=600&quot;</span>   // push the zip file to the remote hosts and unzip it.</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210629170702.png" alt=""></p>
</li>
</ul>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>rsync</p>
<blockquote>
<p><a href="https://linux.die.net/man/1/rsync">rsync</a> – a fast, versatile, remote (and local) file-copying tool</p>
<p>The <code>rsync</code> can replace the command <code>cp</code> in linux, for example, you can use <code>rsync -r source destination</code> to replace <code>cp -r source destination</code>.</p>
<p><a href="https://www.bilibili.com/video/BV1qZ4y137En?from=search&seid=10542537430323288651">video tutorials</a></p>
<p>sync local file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rsync -a <span class="built_in">source</span> destination</span><br></pre></td></tr></table></figure>

<p>sync remote host file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rsync -av -e <span class="string">&#x27;ssh -p 22&#x27;</span> [<span class="built_in">source</span>] user@remoteHostAddress:[destination] </span><br></pre></td></tr></table></figure>

<p><code>-v</code>   display the details of the information</p>
<p><code>-a</code>   archive mode</p>
<p><code>-e</code>   log in to remote host</p>
</blockquote>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <p>掌握ansible基本用法：主要用于批量查日志，执行命令。</p>
<blockquote>
<p><a href="https://ansible-tran.readthedocs.io/en/latest/index.html">Ansible中文权威指南</a></p>
</blockquote>
</li>
</ul>
<h1 id="Http："><a href="#Http：" class="headerlink" title="Http："></a>Http：</h1><ul>
<li><input checked="" disabled="" type="checkbox"> <p>常用header: Host</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <p>请求：request</p>
<table>
<thead>
<tr>
<th align="left">Header</th>
<th align="left">解释</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Accept</td>
<td align="left">指定客户端能够接收的内容类型</td>
<td align="left">Accept: text/plain, text/html</td>
</tr>
<tr>
<td align="left">Accept-Charset</td>
<td align="left">浏览器可以接受的字符编码集。</td>
<td align="left">Accept-Charset: iso-8859-5</td>
</tr>
<tr>
<td align="left">Accept-Encoding</td>
<td align="left">指定浏览器可以支持的web服务器返回内容压缩编码类型。</td>
<td align="left">Accept-Encoding: compress, gzip</td>
</tr>
<tr>
<td align="left">Accept-Language</td>
<td align="left">浏览器可接受的语言</td>
<td align="left">Accept-Language: en,zh</td>
</tr>
<tr>
<td align="left">Accept-Ranges</td>
<td align="left">可以请求网页实体的一个或者多个子范围字段</td>
<td align="left">Accept-Ranges: bytes</td>
</tr>
<tr>
<td align="left">Authorization</td>
<td align="left">HTTP授权的授权证书</td>
<td align="left">Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>
</tr>
<tr>
<td align="left">Cache-Control</td>
<td align="left">指定请求和响应遵循的缓存机制</td>
<td align="left">Cache-Control: no-cache</td>
</tr>
<tr>
<td align="left">Connection</td>
<td align="left">表示是否需要持久连接。（HTTP 1.1默认进行持久连接）</td>
<td align="left">Connection: close</td>
</tr>
<tr>
<td align="left">Cookie</td>
<td align="left">HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</td>
<td align="left">Cookie: $Version=1; Skin=new;</td>
</tr>
<tr>
<td align="left">Content-Length</td>
<td align="left">请求的内容长度</td>
<td align="left">Content-Length: 348</td>
</tr>
<tr>
<td align="left">Content-Type</td>
<td align="left">请求的与实体(body)对应的MIME信息</td>
<td align="left">Content-Type: application/x-www-form-urlencoded</td>
</tr>
<tr>
<td align="left">Date</td>
<td align="left">请求发送的日期和时间</td>
<td align="left">Date: Tue, 15 Nov 2010 08:12:31 GMT</td>
</tr>
<tr>
<td align="left">Expect</td>
<td align="left">请求的特定的服务器行 为</td>
<td align="left">Expect: 100-continue</td>
</tr>
<tr>
<td align="left">From</td>
<td align="left">发出请求的用户的Email</td>
<td align="left">From: <a href="mailto:user@email.com">user@email.com</a></td>
</tr>
<tr>
<td align="left"><strong>Host</strong></td>
<td align="left"><strong>指定请求的服务器的域名和端口号</strong></td>
<td align="left"><strong>Host: <a href="https://www.baidu.com/">www.baidu.com</a></strong></td>
</tr>
<tr>
<td align="left">If-Match</td>
<td align="left">只有请求内容与实体相匹配才有效</td>
<td align="left">If-Match: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td align="left">If-Modified-Since</td>
<td align="left">如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码</td>
<td align="left">If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>
</tr>
<tr>
<td align="left">If-None-Match</td>
<td align="left">如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变</td>
<td align="left">If-None-Match: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td align="left">If-Range</td>
<td align="left">如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag</td>
<td align="left">If-Range: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td align="left">If-Unmodified-Since</td>
<td align="left">只在实体在指定时间之后未被修改才请求成功</td>
<td align="left">If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>
</tr>
<tr>
<td align="left">Max-Forwards</td>
<td align="left">限制信息通过代理和网关传送的时间</td>
<td align="left">Max-Forwards: 10</td>
</tr>
<tr>
<td align="left">Pragma</td>
<td align="left">用来包含实现特定的指令</td>
<td align="left">Pragma: no-cache</td>
</tr>
<tr>
<td align="left">Proxy-Authorization</td>
<td align="left">连接到代理的授权证书</td>
<td align="left">Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>
</tr>
<tr>
<td align="left">Range</td>
<td align="left">只请求实体的一部分，指定范围</td>
<td align="left">Range: bytes=500-999</td>
</tr>
<tr>
<td align="left">Referer</td>
<td align="left">先前网页的地址，当前请求网页紧随其后,即来路</td>
<td align="left">Referer: <a href="https://www.baidu.com/archives/71.html">http://www.baidu.com/archives/71.html</a></td>
</tr>
<tr>
<td align="left">TE</td>
<td align="left">客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息</td>
<td align="left">TE: trailers,deflate;q=0.5</td>
</tr>
<tr>
<td align="left">Upgrade</td>
<td align="left">向服务器指定某种传输协议以便服务器进行转换（如果支持）</td>
<td align="left">Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</td>
</tr>
<tr>
<td align="left">User-Agent</td>
<td align="left">User-Agent的内容包含发出请求的用户信息</td>
<td align="left">User-Agent: Mozilla/5.0 (Linux; X11)</td>
</tr>
<tr>
<td align="left">Via</td>
<td align="left">通知中间网关或代理服务器地址，通信协议</td>
<td align="left">Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td>
</tr>
<tr>
<td align="left">Warning</td>
<td align="left">关于消息实体的警告信息</td>
<td align="left">Warn: 199 Miscellaneous warning</td>
</tr>
</tbody></table>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>相应：response</p>
<table>
<thead>
<tr>
<th align="left">Header</th>
<th align="left">解释</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Accept-Ranges</td>
<td align="left">表明服务器是否支持指定范围请求及哪种类型的分段请求</td>
<td align="left">Accept-Ranges: bytes</td>
</tr>
<tr>
<td align="left">Age</td>
<td align="left">从原始服务器到代理缓存形成的估算时间（以秒计，非负）</td>
<td align="left">Age: 12</td>
</tr>
<tr>
<td align="left">Allow</td>
<td align="left">对某网络资源的有效的请求行为，不允许则返回405</td>
<td align="left">Allow: GET, HEAD</td>
</tr>
<tr>
<td align="left">Cache-Control</td>
<td align="left">告诉所有的缓存机制是否可以缓存及哪种类型</td>
<td align="left">Cache-Control: no-cache</td>
</tr>
<tr>
<td align="left">Content-Encoding</td>
<td align="left">web服务器支持的返回内容压缩编码类型。</td>
<td align="left">Content-Encoding: gzip</td>
</tr>
<tr>
<td align="left">Content-Language</td>
<td align="left">响应体的语言</td>
<td align="left">Content-Language: en,zh</td>
</tr>
<tr>
<td align="left">Content-Length</td>
<td align="left">响应体的长度</td>
<td align="left">Content-Length: 348</td>
</tr>
<tr>
<td align="left">Content-Location</td>
<td align="left">请求资源可替代的备用的另一地址</td>
<td align="left">Content-Location: /index.htm</td>
</tr>
<tr>
<td align="left">Content-MD5</td>
<td align="left">返回资源的MD5校验值</td>
<td align="left">Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</td>
</tr>
<tr>
<td align="left">Content-Range</td>
<td align="left">在整个返回体中本部分的字节位置</td>
<td align="left">Content-Range: bytes 21010-47021/47022</td>
</tr>
<tr>
<td align="left">Content-Type</td>
<td align="left">返回内容的MIME类型</td>
<td align="left">Content-Type: text/html; charset=utf-8</td>
</tr>
<tr>
<td align="left">Date</td>
<td align="left">原始服务器消息发出的时间</td>
<td align="left">Date: Tue, 15 Nov 2010 08:12:31 GMT</td>
</tr>
<tr>
<td align="left">ETag</td>
<td align="left">请求变量的实体标签的当前值</td>
<td align="left">ETag: “737060cd8c284d8af7ad3082f209582d”</td>
</tr>
<tr>
<td align="left">Expires</td>
<td align="left">响应过期的日期和时间</td>
<td align="left">Expires: Thu, 01 Dec 2010 16:00:00 GMT</td>
</tr>
<tr>
<td align="left">Last-Modified</td>
<td align="left">请求资源的最后修改时间</td>
<td align="left">Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT</td>
</tr>
<tr>
<td align="left">Location</td>
<td align="left">用来重定向接收方到非请求URL的位置来完成请求或标识新的资源</td>
<td align="left">Location: <a href="https://honglu.me/archives/">http://honglu.me/archives/</a></td>
</tr>
<tr>
<td align="left">Pragma</td>
<td align="left">包括实现特定的指令，它可应用到响应链上的任何接收方</td>
<td align="left">Pragma: no-cache</td>
</tr>
<tr>
<td align="left">Proxy-Authenticate</td>
<td align="left">它指出认证方案和可应用到代理的该URL上的参数</td>
<td align="left">Proxy-Authenticate: Basic</td>
</tr>
<tr>
<td align="left">refresh</td>
<td align="left">应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）</td>
<td align="left">Refresh: 5; url=<a href="https://honglu.me/archives/">http://honglu.me/archives/</a></td>
</tr>
<tr>
<td align="left">Retry-After</td>
<td align="left">如果实体暂时不可取，通知客户端在指定时间之后再次尝试</td>
<td align="left">Retry-After: 120</td>
</tr>
<tr>
<td align="left">Server</td>
<td align="left">web服务器软件名称</td>
<td align="left">Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)</td>
</tr>
<tr>
<td align="left">Set-Cookie</td>
<td align="left">设置Http Cookie</td>
<td align="left">Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</td>
</tr>
<tr>
<td align="left">Trailer</td>
<td align="left">指出头域在分块传输编码的尾部存在</td>
<td align="left">Trailer: Max-Forwards</td>
</tr>
<tr>
<td align="left">Transfer-Encoding</td>
<td align="left">文件传输编码</td>
<td align="left">Transfer-Encoding:chunked</td>
</tr>
<tr>
<td align="left">Vary</td>
<td align="left">告诉下游代理是使用缓存响应还是从原始服务器请求</td>
<td align="left">Vary: *</td>
</tr>
<tr>
<td align="left">Via</td>
<td align="left">告知代理客户端响应是通过哪里发送的</td>
<td align="left">Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td>
</tr>
<tr>
<td align="left">Warning</td>
<td align="left">警告实体可能存在的问题</td>
<td align="left">Warning: 199 Miscellaneous warning</td>
</tr>
<tr>
<td align="left">WWW-Authenticate</td>
<td align="left">表明客户端请求实体应该使用的授权方案</td>
<td align="left">WWW-Authenticate: Basic</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>跨域 Cookie</p>
<blockquote>
<p><a href="https://segmentfault.com/a/1190000039227924">COOKIE跨域获取问题</a></p>
<p><a href="https://www.bilibili.com/video/BV1pA411u7Ji?from=search&seid=5785122887893488786">video tutorials in chinese</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS"> What does CORS means</a></p>
<p><a href="https://auth0.com/blog/cors-tutorial-a-guide-to-cross-origin-resource-sharing/">CORS tutorials: A guide to cross-origin resource sharing</a></p>
<p>网址形式如下：<a href="https://www.baidu.com:80/index.html，其中，`https`是协议，`www`是子域名，`baidu.com`是根域名，`80`是端口号，`index.html`是资源文件。">https://www.baidu.com:80/index.html，其中，`https`是协议，`www`是子域名，`baidu.com`是根域名，`80`是端口号，`index.html`是资源文件。</a></p>
<blockquote>
<p><strong>同源策略</strong>是指在<a href="https://zh.wikipedia.org/wiki/排版引擎">Web浏览器</a>中，允许某个网页<a href="https://zh.wikipedia.org/wiki/腳本">脚本</a>访问另一个网页的数据，但前提是这两个网页必须有相同的<a href="https://zh.wikipedia.org/wiki/统一资源标志符">URI</a>、<a href="https://zh.wikipedia.org/wiki/主機名稱">主机名</a>和<a href="https://zh.wikipedia.org/wiki/通訊埠">端口号</a>，一旦两个网站满足上述条件，这两个网站就被认定为具有相同来源。此策略可防止某个网页上的恶意<a href="https://zh.wikipedia.org/wiki/脚本">脚本</a>通过该页面的<a href="https://zh.wikipedia.org/wiki/文档对象模型">文档对象模型</a>访问另一网页上的敏感数据。</p>
<p>同源策略对<a href="https://zh.wikipedia.org/wiki/Web应用程序">Web应用程序</a>具有特殊意义，因为Web应用程序广泛依赖于<a href="https://zh.wikipedia.org/wiki/Cookie">HTTP cookie</a><a href="https://zh.wikipedia.org/wiki/同源策略#cite_note-httpcookierfc-1">[1]</a>来维持用户<a href="https://zh.wikipedia.org/wiki/会话">会话</a>，所以必须将不相关网站严格分隔，以防止丢失数据泄露。</p>
<p>值得注意的是同源策略仅适用于脚本，这意味着某网站可以通过相应的<a href="https://zh.wikipedia.org/wiki/HTML标签">HTML标签</a><a href="https://zh.wikipedia.org/wiki/同源策略#cite_note-2">[2]</a>访问不同来源网站上的<a href="https://zh.wikipedia.org/wiki/图像">图像</a>、<a href="https://zh.wikipedia.org/wiki/CSS">CSS</a>和<a href="https://zh.wikipedia.org/wiki/動態加載">动态加载</a><a href="https://zh.wikipedia.org/wiki/脚本">脚本</a>等资源。而<a href="https://zh.wikipedia.org/wiki/跨站请求伪造">跨站请求伪造</a>就是利用同源策略不适用于<a href="https://zh.wikipedia.org/wiki/HTML标签">HTML标签</a>的缺陷。</p>
</blockquote>
<p>在<code>协议</code>、<code>域名（包括根域名和子域名）</code>、<code>端口号</code>三者其中任何一项不一致的情况下，两个网址就不能进行互相通信，只有这三者都相同的情况下才可以进行通信，否则就叫<strong>跨域</strong>。</p>
<ul>
<li>a different scheme(http or https)</li>
<li>a different domain</li>
<li>a different port</li>
</ul>
<blockquote>
<p><strong>为什么会有跨域限制？</strong></p>
<p>答：浏览器会有跨域限制，二服务器没有这种限制。</p>
</blockquote>
<p>在HTML标签中，其中<code>img</code>、<code>link</code>、<code>script</code>、<code>iframe</code>这几个标签具有跨域性，可以直接访问不同域的资源。</p>
<p><strong>figure it out</strong></p>
<ul>
<li><p>set the header like this: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *  <span class="comment"># if a request can be made from any originAccess-Control-Allow-Origin: https://example.com # the origin that is allowed to make the request</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>Two type of CORS Request</strong></p>
<ul>
<li><p>simple request(<code>GET</code>、<code>POST</code>、<code>HEAD</code>)</p>
</li>
<li><p>preflight request(<code>OPTIONS</code>)</p>
<p>A preflight request example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Requestcurl -i -X OPTIONS localhost:3001/api/ping \-H &#x27;Access-Control-Request-Method: GET&#x27; \-H &#x27;Access-Control-Request-Headers: Content-Type, Accept&#x27; \-H &#x27;Origin: http://localhost:3000&#x27;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>https原理</p>
<p>HTTP协议是一种不安全的传输协议，所有数据在传输过程都是明文传输，很容易被第三方截获，造成数据不安全。</p>
<p>HTTPS使用混合加密协议对数据进行加密，即对称加密和非对称加密：</p>
<p>对称加密和非对称加密的优缺点：</p>
<ul>
<li>对称加密的加密和解密的速度快，效率高；非对称加密算法的加密和解密的速度满，效率低</li>
<li>对称加密算法的加密和解密都是用的同一个密钥，密钥的传输成本较高；非对称加密算法的加密和解密采用的是不同的密钥，一个公钥一个私钥，公钥可以对外公开，密钥传输的成本较低。</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://segmentfault.com/img/bVbClUj" alt="https://segmentfault.com/img/bVbClUj"></p>
<blockquote>
<p><strong>Hypertext Transfer Protocol Secure</strong> (<strong>HTTPS</strong>) is an extension of the <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">Hypertext Transfer Protocol</a> (HTTP). It is used for <a href="https://en.wikipedia.org/wiki/Secure_communications">secure communication</a> over a <a href="https://en.wikipedia.org/wiki/Network_operating_system">computer network</a>, and is widely used on the Internet.<a href="https://en.wikipedia.org/wiki/HTTPS#cite_note-1">[1]</a><a href="https://en.wikipedia.org/wiki/HTTPS#cite_note-2">[2]</a> In HTTPS, the <a href="https://en.wikipedia.org/wiki/Communication_protocol">communication protocol</a> is encrypted using <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">Transport Layer Security</a> (TLS) or, formerly, Secure Sockets Layer (SSL). The protocol is therefore also referred to as <strong>HTTP over TLS</strong>,<a href="https://en.wikipedia.org/wiki/HTTPS#cite_note-3">[3]</a> or <strong>HTTP over SSL</strong>.</p>
<p>The principal motivations for HTTPS are <a href="https://en.wikipedia.org/wiki/Authentication">authentication</a> of the accessed <a href="https://en.wikipedia.org/wiki/Website">website</a>, and protection of the <a href="https://en.wikipedia.org/wiki/Information_privacy">privacy</a> and <a href="https://en.wikipedia.org/wiki/Data_integrity">integrity</a> of the exchanged data while in transit. It protects against <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">man-in-the-middle attacks</a>, and the bidirectional <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation">encryption</a> of communications between a client and server protects the communications against <a href="https://en.wikipedia.org/wiki/Eavesdropping">eavesdropping</a> and <a href="https://en.wikipedia.org/wiki/Tamper-evident#Tampering">tampering</a>.<a href="https://en.wikipedia.org/wiki/HTTPS#cite_note-httpse-4">[4]</a><a href="https://en.wikipedia.org/wiki/HTTPS#cite_note-5">[5]</a> The authentication aspect of HTTPS requires a trusted third party to sign server-side <a href="https://en.wikipedia.org/wiki/Public_key_certificate">digital certificates</a>. This was historically an expensive operation, which meant fully authenticated HTTPS connections were usually found only on secured payment transaction services and other secured corporate information systems on the <a href="https://en.wikipedia.org/wiki/World_Wide_Web">World Wide Web</a>. In 2016, a campaign by the <a href="https://en.wikipedia.org/wiki/Electronic_Frontier_Foundation">Electronic Frontier Foundation</a> with the support of web browser developers led to the protocol becoming more prevalent.<a href="https://en.wikipedia.org/wiki/HTTPS#cite_note-6">[6]</a> HTTPS is now used more often by web users than the original non-secure HTTP, primarily to protect page authenticity on all types of websites; secure accounts; and to keep user communications, identity, and web browsing private.<a href="https://en.wikipedia.org/wiki/HTTPS#cite_note-7">[7]</a></p>
</blockquote>
<p><code>HTTPS=HTTP+TLS/SSL</code></p>
<p><img src= "/img/loading.gif" data-src="https://segmentfault.com/img/bVbClUl" alt=""></p>
<p>数字正式在HTTPS中相当于非对称加密算法的私钥和公钥的分配这么一个工作。</p>
<blockquote>
<p><a href="https://segmentfault.com/a/1190000021494676">HTTPS 详解一：附带最精美详尽的 HTTPS 原理图</a></p>
</blockquote>
</li>
</ul>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><ul>
<li><input disabled="" type="checkbox"> <p>hash,zset,set,string 等数据类型的常用指令和时间复杂度</p>
<blockquote>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>string</strong>: </li>
</ul>
<p>add a key-value type data, use <code>set key value</code> command</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">set</span> name zhangsanOK</span><br></pre></td></tr></table></figure>

<p> read the value of the key given by user</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; get name<span class="string">&quot;zhangsan&quot;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">序号</th>
<th>命令及描述</th>
<th>means</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td><a href="https://www.runoob.com/redis/strings-set.html">SET key value</a> 设置指定 key 的值</td>
<td><strong>add a new key-value type data</strong></td>
</tr>
<tr>
<td align="left">2</td>
<td><a href="https://www.runoob.com/redis/strings-get.html">GET key</a> 获取指定 key 的值。</td>
<td><strong>read key;s value</strong></td>
</tr>
<tr>
<td align="left">3</td>
<td><a href="https://www.runoob.com/redis/strings-getrange.html">GETRANGE key start end</a> 返回 key 中字符串值的子字符</td>
<td><strong>read the substring of the key</strong></td>
</tr>
<tr>
<td align="left">4</td>
<td><a href="https://www.runoob.com/redis/strings-getset.html">GETSET key value</a> 将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td>
<td><strong>change key’s value</strong></td>
</tr>
<tr>
<td align="left">5</td>
<td><a href="https://www.runoob.com/redis/strings-getbit.html">GETBIT key offset</a> 对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td>
<td></td>
</tr>
<tr>
<td align="left">6</td>
<td><a href="https://www.runoob.com/redis/strings-mget.html">MGET key1 [key2..]</a> 获取所有(一个或多个)给定 key 的值。</td>
<td></td>
</tr>
<tr>
<td align="left">7</td>
<td><a href="https://www.runoob.com/redis/strings-setbit.html">SETBIT key offset value</a> 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td>
<td></td>
</tr>
<tr>
<td align="left">8</td>
<td><a href="https://www.runoob.com/redis/strings-setex.html">SETEX key seconds value</a> 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td>
<td></td>
</tr>
<tr>
<td align="left">9</td>
<td><a href="https://www.runoob.com/redis/strings-setnx.html">SETNX key value</a> 只有在 key 不存在时设置 key 的值。</td>
<td></td>
</tr>
<tr>
<td align="left">10</td>
<td><a href="https://www.runoob.com/redis/strings-setrange.html">SETRANGE key offset value</a> 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td>
<td></td>
</tr>
<tr>
<td align="left">11</td>
<td><a href="https://www.runoob.com/redis/strings-strlen.html">STRLEN key</a> 返回 key 所储存的字符串值的长度。</td>
<td></td>
</tr>
<tr>
<td align="left">12</td>
<td><a href="https://www.runoob.com/redis/strings-mset.html">MSET key value [key value …]</a> 同时设置一个或多个 key-value 对。</td>
<td></td>
</tr>
<tr>
<td align="left">13</td>
<td><a href="https://www.runoob.com/redis/strings-msetnx.html">MSETNX key value [key value …]</a> 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td>
<td></td>
</tr>
<tr>
<td align="left">14</td>
<td><a href="https://www.runoob.com/redis/strings-psetex.html">PSETEX key milliseconds value</a> 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td>
<td></td>
</tr>
<tr>
<td align="left">15</td>
<td><a href="https://www.runoob.com/redis/strings-incr.html">INCR key</a> 将 key 中储存的数字值增一。</td>
<td></td>
</tr>
<tr>
<td align="left">16</td>
<td><a href="https://www.runoob.com/redis/strings-incrby.html">INCRBY key increment</a> 将 key 所储存的值加上给定的增量值（increment） 。</td>
<td></td>
</tr>
<tr>
<td align="left">17</td>
<td><a href="https://www.runoob.com/redis/strings-incrbyfloat.html">INCRBYFLOAT key increment</a> 将 key 所储存的值加上给定的浮点增量值（increment） 。</td>
<td></td>
</tr>
<tr>
<td align="left">18</td>
<td><a href="https://www.runoob.com/redis/strings-decr.html">DECR key</a> 将 key 中储存的数字值减一。</td>
<td></td>
</tr>
<tr>
<td align="left">19</td>
<td><a href="https://www.runoob.com/redis/strings-decrby.html">DECRBY key decrement</a> key 所储存的值减去给定的减量值（decrement） 。</td>
<td></td>
</tr>
<tr>
<td align="left">20</td>
<td><a href="https://www.runoob.com/redis/strings-append.html">APPEND key value</a> 如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。</td>
<td></td>
</tr>
</tbody></table>
</blockquote>
</li>
<li><input disabled="" type="checkbox"> <p>掌握正确的redis分布式锁。</p>
</li>
</ul>
<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><ul>
<li><input disabled="" type="checkbox"> <p>了解索引结构</p>
</li>
<li><input disabled="" type="checkbox"> <p>常用索引优化技巧</p>
</li>
</ul>
<h1 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h1><ul>
<li><input checked="" disabled="" type="checkbox"> <p>markdown语法和 typora 使用</p>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>git command</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <p>add files to the remote repository</p>
<blockquote>
<p>4 steps when you <code>git</code> files to the remote repository:</p>
<ol>
<li>git add filename1, filename2, ….  or git add * (add all)</li>
<li>git commit -m “add a hit here”</li>
<li>git remote add origin “repository address”</li>
<li>git push origin branch_name (such as: master)</li>
</ol>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>merge </p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge &lt;branch name&gt;  <span class="comment"># when you are in a branch, this command means merge &lt;branch name&gt; to this branch Jums@Computer MINGW64 ~/OneDrive/learngit (master) # current branch is master, merge &lt;topic&gt; to master$ git merge topicAuto-merging readme.mdCONFLICT (content): Merge conflict in readme.mdAuto-merging 2.pyCONFLICT (content): Merge conflict in 2.pyRemoving 1.pyAutomatic merge failed; fix conflicts and then commit the result.</span></span><br></pre></td></tr></table></figure>

<p><strong>How to fix merge conflict:</strong></p>
<p>When the merge conflict comes: When two files have two different sets of modifications in the same location, git cannot decide which modification to use and needs to be manually specified.</p>
<p>The codes bewteen <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;HEAD</code> and <code>=======</code> is in the current branch, and the codes bewtten <code>=======</code> and <code>&gt;&gt;&gt;&gt;&gt;&gt;[branch name]</code> is in the [branch name]. You shoud manually merged the codes.</p>
<p>After that, you also should <code>add</code> the files to repository, use the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add [file name]$ git commit -m <span class="string">&quot;&quot;</span>  <span class="comment"># you can&#x27;t add the [file name] here, or you will get a error</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>rebase</p>
<blockquote>
<p><a href="https://git-scm.com/docs/git-rebase">git-rebase</a> - Reapply commits on top of another base tip</p>
<p><a href="https://www.bilibili.com/video/BV19B4y1u7vm?from=search&amp;seid=7525997366811669539">https://www.bilibili.com/video/BV19B4y1u7vm?from=search&amp;seid=7525997366811669539</a>    (video tutroials)</p>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>reset </p>
<blockquote>
<p>对提交的版本进行回退，可以根据<code>git  log</code>命令查看已经提交的版本，然后可以根据指定<code>commit id</code>或者<code>HEAD</code>回退到不同的版本，</p>
<p><code>git log</code>信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git logcommit 466755c74ed4fd27059f6b0e4f42d0c3dcb8b663 (HEAD -&gt; master, origin/master)Author: crazyjums &lt;crazyjums@gmail.com&gt;Date:   Mon Jun 21 14:58:11 2021 +0800add a second titlecommit b57119f13a741f116daabfebd27b51a990b7322aAuthor: crazyjums &lt;crazyjums@gmail.com&gt;Date:   Mon Jun 21 14:39:35 2021 +0800modified the file, add a new linecommit 1f7990b84caf752f9e22d1dbcf215d5285066d25Author: crazyjums &lt;crazyjums@gmail.com&gt;Date:   Mon Jun 21 14:27:27 2021 +0800first time to commit</span><br></pre></td></tr></table></figure>

<p><code>HEAD</code>表示当前的版本号，如果需要回退到上一个版本号，则可以使用<code>HEAD^</code>、上上一个版本号则是<code>HEAD^^</code>、往上倒100个可以在<code>HEAD</code>后面写上100个<code>^</code>符号，当然也可以写成<code>HEAD~100</code>。</p>
<p><code>HEAD</code>在<code>git</code>中其实是一个指针，指向不同的版本号，回退也就是将<code>HEAD</code>指针重新指向了不同的版本信息。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210621152126.png" alt=""></p>
<p>除了使用<code>HEAD</code>之外，还可以使用<code>commit id</code>进行回退，每一次版本提交都有一个宇宙唯一的<code>commit id</code>，指定该<code>commit id</code>的前几位就行，<code>git</code>会自行查找。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD~2HEAD is now at 1f7990b first time to commit$ git reset --hard 466755HEAD is now at 466755c add a second title</span><br></pre></td></tr></table></figure>

<p>在使用<code>git log</code>命令时，只会显示当前命令窗口的历史提交记录，如果电脑重启之后，在使用<code>git log</code>命令出现的历史记录会是空，但是在<code>git</code>中，就算是重启电脑之后，还是有办法找到每一次的历史提交记录，可以使用命令：<code>git reflog</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reflog1f7990b (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD~2466755c (origin/master) HEAD@&#123;1&#125;: reset: moving to 4667551f7990b (HEAD -&gt; master) HEAD@&#123;2&#125;: reset: moving to HEAD~2466755c (origin/master) HEAD@&#123;3&#125;: reset: moving to 466755b57119f HEAD@&#123;4&#125;: reset: moving to HEAD^466755c (origin/master) HEAD@&#123;5&#125;: commit: add a second titleb57119f HEAD@&#123;6&#125;: commit: modified the file, add a new line1f7990b (HEAD -&gt; master) HEAD@&#123;7&#125;: commit (initial): first time to commit</span><br></pre></td></tr></table></figure>

<p>在使用<code>reset</code>等命令修改了本地文件之后，也就是当前本地电脑上的文件不是<code>git</code>托管平台的最新版本的时候，需要使用<code>git pull</code>命令将<code>git</code>平台的命令拉过来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull &lt;remote_repository&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull git@github.com:crazyjums/learngit.git masterFrom github.com:crazyjums/learngit * branch            master     -&gt; FETCH_HEADAuto-merging readme.mdCONFLICT (content): Merge conflict <span class="keyword">in</span> readme.mdAutomatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>revert </p>
<blockquote>
<p><a href="https://git-scm.com/docs/git-revert">git-revert</a> - Revert some existing commits</p>
<p>sounds like the <code>git reset</code> command, but this command can remain the trackability information, when you wana go back to the history version in <code>master</code> branch, you should use <code>git revert</code> command instead of <code>git reset</code>.</p>
<p>This command’s usage just like the <code>git reset</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git revert HEAD^  <span class="comment"># go back to last version$ git revert HEAD~[number]  # go back to previous version# you can see the trackability information at `git revert`:commit d567e6e3e14165ffa8febd4c62bac2fa413a1509Author: crazyjums &lt;crazyjums@gmail.com&gt;Date:   Thu Jun 24 11:33:43 2021 +0800 Revert &quot;add a txt file by jums&quot; This reverts commit db298e7bb373711438efdab0e64bbab72b5b5cac.</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>checkout </p>
<blockquote>
<p>git-checkout - Switch branches or restore working tree files</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;branch name&gt;  <span class="comment"># swtich to a new branch</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ASUS@ZHG_ASUS MINGW64 ~/OneDrive/learngit (master)$ git checkout new_branchSwitched to branch <span class="string">&#x27;new_branch&#x27;</span>ASUS@ZHG_ASUS MINGW64 ~/OneDrive/learngit (new_branch)</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>stash </p>
<blockquote>
<p><a href="https://git-scm.com/docs/git-stash">git-stash</a> - Stash the changes in a dirty working directory away</p>
<p>应用场景：<a href="https://www.cnblogs.com/tocy/p/git-stash-reference.html">https://www.cnblogs.com/tocy/p/git-stash-reference.html</a></p>
<ul>
<li>发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑<code>git stash</code>。</li>
<li>使用git的时候，我们往往使用分支（branch）解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的bug，我们往往会把完成一半的代码<code>commit</code>提交到本地仓库，然后切换分支去修改bug，改好之后再切换回来。这样的话往往log上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急Bug，那么使用<code>git stash</code>就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修Bug，等到修完Bug，提交到服务器上后，再使用<code>git stash apply</code>将以前一半的工作应用回来。</li>
<li>经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是<code>git stash</code>命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash list  <span class="comment"># display all stash version$ git stash pop   # get the top of the stash stack version$ git stask apply [version number]# when there is a lot of stash versions, you can use this command to specify the version number$ git stash   # save current working area to the stash version$ git stash save [a stash name]  # the same as the &quot;git stash&quot;, but this version will get a nick name you named it.$ git stash drop  # delete the top of stash stack&#x27;s version$ git stash show [version number]   # use this command to view specific information of the working area</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>cherry-pick</p>
<blockquote>
<p><a href="https://git-scm.com/docs/git-cherry-pick">git-cherry-pick</a> - Apply the changes introduced by some existing commits</p>
<p>应用场景：在多分支的分布式开发过程中，在合并代码时分两种情况，一种是将另一个分支中的所有代码都合并带当前分支中来，此时可以使用<code>git merge &lt;branch name&gt;</code>命令实现；还有一种情况是只需要将另一个分支中的部分代码合并到当前分支中来，这个时候就需要使用<code>git cherry-pick &lt;commitHash&gt;</code>命令来实现了，即将另一个分支的部分<code>commit</code>提交到当前的分支中。</p>
<p><a href="https://www.bilibili.com/video/BV1LK411F7mm?from=search&seid=8010070644096016508">Git进阶教程-5-5-如何再次应用已经存在的提交的修改</a>   (videos tutorials)</p>
<p><a href="http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html">git cherry-pick tutorials</a>  (more commands informations here)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># at master branch$ git add 1.txt &amp;&amp; git commit -m &quot;add a txt file&quot;ASUS@ZHG_ASUS MINGW64 ~/OneDrive/learngit (master)$ git logcommit db298e7bb373711438efdab0e64bbab72b5b5cac (HEAD -&gt; master)Author: crazyjums &lt;crazyjums@gmail.com&gt;Date:   Thu Jun 24 10:28:47 2021 +0800 add a txt file$ git checkout topic$ git cherry-pick db298e7ASUS@ZHG_ASUS MINGW64 ~/OneDrive/learngit (topic)$ git logcommit ed9bd8a0e76044141efdf26547092eae24e38400 (HEAD -&gt; topic)Author: crazyjums &lt;crazyjums@gmail.com&gt;Date:   Thu Jun 24 10:28:47 2021 +0800 add a txt file</span></span><br></pre></td></tr></table></figure>

<p><strong>if use the options [-n], it’s no commits in current branch.</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick [-n]/[--no-commit] [commit-id]</span><br></pre></td></tr></table></figure>

<p><strong>if use the options [-x], you can track the commits</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick -x [commit-id]ASUS@ZHG_ASUS MINGW64 ~/OneDrive/learngit (topic)$ git logcommit 6ba043389d5940b743ab39e37419ebc82685b0af (HEAD -&gt; topic)Author: crazyjums &lt;crazyjums@gmail.com&gt;Date:   Thu Jun 24 10:41:48 2021 +0800 add 2.txt (cherry picked from commit 771858e928c708923e843ffe4c29843f2900125a)  <span class="comment"># this line will display the trackability information</span></span><br></pre></td></tr></table></figure>

<p><strong>if use the options [-e] or [–edit], you can edit the file before you commit</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick -e [commit-id] <span class="comment"># now it will jump to editing interface</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>branch</p>
<blockquote>
<p>branche是git tree中的分支，其中主分支是master</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch &lt;branch name&gt; <span class="comment"># create a new branch $ git push origin &lt;branch name&gt; # push the new branch to remote repository$ git branch -d &lt;branch name&gt; # delete the local branch$ git push origin :&lt;branch name&gt; # delete the remote repository branch$ git chechout &lt;branch name&gt; # swtich to &lt;branch name&gt; branch$ git branch -a # show all branch of your repository</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>delete file from remote repository</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm &lt;file name&gt; or &lt;dic name&gt;$ git commit -m <span class="string">&quot;&quot;</span>$ git push origin &lt;branch name&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>ssh 秘钥登陆原理</p>
<p>在远程连接Linux系统时，通常会采用SSH协议作为底层的安全协议，连接的格式如下：<code>ssh user@hostAddr</code></p>
<p>加密方式同样采用的混合加密技术，即对称加密和非对称加密的混合使用</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://juejin.cn/post/6844903685047189512">SSH 协议基本原理及 wireshark 抓包分析</a></li>
</ul>
<p>远程主机和当前主机如何保证公钥的一致性，即如果防止中间人攻击：主机将自身的公钥公示于网络，即大众可查询的媒体上面，如果需要连接到远程主机，如果是第一次连接的话，远程主机会给出一个警告，并要求客户核对当前远程主机的公钥是否公示的公钥一致，如果一致的话，就可以进行登录了。</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH原理与运用（一）：远程登录</a></li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>了解postman 使用</p>
<blockquote>
<p><a href="https://www.postman.com/">官网地址</a>，<a href="https://www.postman.com/downloads/">postman软件下载地址</a>，<a href="https://learning.postman.com/docs/getting-started/introduction/">documentation</a></p>
</blockquote>
</li>
</ul>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
        <tag>MySQL</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇文看透二叉树，先序遍历、中序遍历、后序遍历、广度优先、深度优先，java实现</title>
    <url>/binaryTree-java-implements/</url>
    <content><![CDATA[<h3 id="1-二叉树的定义"><a href="#1-二叉树的定义" class="headerlink" title="1 二叉树的定义"></a>1 二叉树的定义</h3><blockquote>
<p>在<a href="https://zh.wikipedia.org/wiki/電腦科學">计算机科学</a>中，<strong>二叉树</strong>（英语：Binary tree）是每个节点最多只有两个分支（即不存在分支度大于2的节点）的<a href="https://zh.wikipedia.org/wiki/树结构">树结构</a>。通常分支被称作“左子树”或“右子树”。二叉树的分支具有左右次序，不能随意颠倒。</p>
<p>二叉树的第$i$层至多拥有$2^{i-1}$个节点；深度为$k$的二叉树至多总共有$2^k-1$个节点（定义根节点所在深度$k_0=0$)，而总计拥有节点数符合的，称为“满二叉树”；深度为$k$有$n$个节点的二叉树，当且仅当其中的每一节点，都可以和同样深度的满二叉树，序号为1到$n$的节点一对一对应时，称为<a href="https://zh.wikipedia.org/wiki/完全二叉树">完全二叉树</a>。对任何一棵非空的二叉树$T$，如果其叶片（终端节点）数为$n_0$，分支度为2的节点数为$n_2$，则$n_0=n_2+1$。</p>
<p>与普通树不同，普通树的节点个数至少为1，而二叉树的节点个数可以为0；普通树节点的最大分支度没有限制，而二叉树节点的最大分支度为2；普通树的节点无左、右次序之分，而二叉树的节点有左、右次序之分。</p>
<p>二叉树通常作为数据结构应用，典型用法是对节点定义一个标记函数，将一些值与每个节点相关系。这样标记的二叉树就可以实现<a href="https://zh.wikipedia.org/wiki/二元搜尋樹">二叉搜索树</a>和<a href="https://zh.wikipedia.org/wiki/二元堆積">二叉堆</a>，并应用于高效率的搜索和排序。</p>
</blockquote>
<h3 id="2-完全二叉树和满二叉树"><a href="#2-完全二叉树和满二叉树" class="headerlink" title="2 完全二叉树和满二叉树"></a>2 完全二叉树和满二叉树</h3><p><img src= "/img/loading.gif" data-src="G:%5CcodeFolder%5Chexo-blog%5Cblog%5Csource%5Cimages%5Carticle%5C400px-FullBT_CompleteBT.jpg" alt=""></p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"><a href="https://zh.wikipedia.org/wiki/完全二叉树"> 完全二叉树</a></th>
<th><a href="https://zh.wikipedia.org/wiki/满二叉树">满二叉树</a></th>
</tr>
</thead>
<tbody><tr>
<td align="center">总节点k</td>
<td align="center">$2^{h-1}&lt;=k&lt;=2^h-1$</td>
<td>$k=2^h-1$</td>
</tr>
<tr>
<td align="center">树高h</td>
<td align="center">$h=log_2k+1$</td>
<td>$h=log_2{(k+1)}$</td>
</tr>
</tbody></table>
<h3 id="3-二叉树的遍历"><a href="#3-二叉树的遍历" class="headerlink" title="3 二叉树的遍历"></a>3 二叉树的遍历</h3><h4 id="3-1-先序遍历"><a href="#3-1-先序遍历" class="headerlink" title="3.1 先序遍历"></a>3.1 先序遍历</h4><p>先序遍历的顺序是：先根节点，再左节点，再右节点，即<code>根节点</code>-&gt;<code>左节点</code>-&gt;<code>右节点</code>。</p>
<p>如：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200429210442.png" alt="二叉树示例"></p>
<p>先序遍历的顺序为：<code>0,1,5,2,3,4</code></p>
<ul>
<li>采用递归实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeOrder</span><span class="params">(MyTreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(root.data);</span><br><span class="line">        beforeOrder(root.leftChild);</span><br><span class="line">        beforeOrder(root.rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>非递归实现</p>
<p>实现<code>栈</code>这种数据结构，存储还没有遍历的节点，由于顺序是<code>根-&gt;左-&gt;右</code>，所以先将右节点压入栈中，这样就可以实现先访问左边的节点的目的了。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(MyTreeNode root)</span></span>&#123;</span><br><span class="line">    QueueToStack&lt;MyTreeNode&gt; stack = <span class="keyword">new</span> QueueToStack&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    MyTreeNode node;</span><br><span class="line">    <span class="keyword">while</span> (!stack.empty())&#123;</span><br><span class="line">        node = stack.pop();</span><br><span class="line">        System.out.println(node.data);</span><br><span class="line">        <span class="keyword">if</span> (node.rightChild!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(node.rightChild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.leftChild!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(node.leftChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-中序遍历"><a href="#3-2-中序遍历" class="headerlink" title="3.2 中序遍历"></a>3.2 中序遍历</h4><p>中序遍历的顺序为，先左节点，再根节点，再右节点，即<code>左节点</code>-&gt;<code>根节点</code>-&gt;<code>右节点</code>。</p>
<p>还是以下面的二叉树为例：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200429210442.png" alt=""></p>
<p>中序遍历的顺序为：<code>5,1,0,3,2,4</code></p>
<ul>
<li>递归实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">middleOrder</span><span class="params">(MyTreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        middleOrder(root.leftChild);</span><br><span class="line">        System.out.println(root.data);</span><br><span class="line">        middleOrder(root.rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>非递归实现</p>
<p>由于中序遍历的顺序是：<code>左</code>-&gt;<code>根</code>-&gt;<code>右</code>，所有先将所有左节点压入栈中，如果遇到最后一个叶子节点没有左节点了，那么就将当前节点的数据输出，此时继续遍历当前节点的右节点。第<code>12</code>行代码，为什么不需要判断右节点是否为空，因为如果右节点为空的话，那么就不要继续遍历了，前面的<code>while</code>循环会判断是否为空。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(MyTreeNode root)</span> </span>&#123;</span><br><span class="line">    QueueToStack&lt;MyTreeNode&gt; stack = <span class="keyword">new</span> QueueToStack&lt;&gt;();</span><br><span class="line">    MyTreeNode node = root;</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span> || !stack.empty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(node);</span><br><span class="line">            node = node.leftChild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!stack.empty()) &#123;</span><br><span class="line">            node = stack.pop(); <span class="comment">//叶子节点的父节点</span></span><br><span class="line">            System.out.println(node.data);</span><br><span class="line">            node = node.rightChild; <span class="comment">//父节点的右节点，可能为null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-后序遍历"><a href="#3-3-后序遍历" class="headerlink" title="3.3 后序遍历"></a>3.3 后序遍历</h4><p>后序遍历的顺序是：先左节点，再右节点，再根节点，即<code>左节点</code>-&gt;<code>右节点</code>-&gt;<code>根节点</code>。</p>
<p>还是以上面的二叉树为例：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200429210442.png" alt=""></p>
<p>后序遍历的顺序为：<code>5,1,3,4,2,0</code></p>
<ul>
<li>递归实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">behindOrder</span><span class="params">(MyTreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        behindOrder(root.leftChild);</span><br><span class="line">        behindOrder(root.rightChild);</span><br><span class="line">        System.out.println(root.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>非递归实现1</p>
<p>后续遍历的非递归实现是这三种方式中最难实现的一种，因为根节点是最后才被访问的，所以需要对之前的节点进行<code>记忆</code>。即将上一次访问过的节点记录下来，当遇到没有左、右子节点的<code>叶子节点</code>时，先判断<code>当前叶子节点的父节点的右子节点</code>是否被访问过，如果没有被访问过，则继续遍历右节点（这个右节点是叶子节点的兄弟节点）；如果被访问过，则打印<code>当前的叶子节点</code>。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterOrder</span><span class="params">(MyTreeNode root)</span> </span>&#123;</span><br><span class="line">    QueueToStack&lt;MyTreeNode&gt; stack = <span class="keyword">new</span> QueueToStack&lt;&gt;();</span><br><span class="line">    MyTreeNode node = root;</span><br><span class="line">    MyTreeNode lastVisit = root;<span class="comment">//记录上一次遍历过的节点</span></span><br><span class="line">    <span class="keyword">while</span> (!stack.empty() || node != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(node);</span><br><span class="line">            node = node.leftChild;</span><br><span class="line">        &#125;</span><br><span class="line">        node = stack.top();</span><br><span class="line">        <span class="keyword">if</span> (node.rightChild==<span class="keyword">null</span>||node.rightChild==lastVisit)&#123;</span><br><span class="line">            System.out.println(node.data);</span><br><span class="line">            stack.pop();</span><br><span class="line">            lastVisit = node;</span><br><span class="line">            node=<span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node = node.rightChild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>非递归实现2</p>
<p>我们知道，二叉树的前中后的遍历依次为以下顺序：</p>
<ul>
<li>前序遍历：<code>root</code>-&gt;<code>left</code>-&gt;<code>right</code>。</li>
<li>中序遍历：<code>left</code>-&gt;<code>root</code>-&gt;<code>right</code></li>
<li>后序遍历：<code>left</code>-&gt;<code>right</code>-&gt;<code>root</code></li>
</ul>
<p>我们发现后序遍历和前序遍历有些地方比较相似，我们可以借鉴前序遍历的非递归实现，从而快速实现后续遍历的非递归实现。我们发现后续遍历<strong>相当于</strong>是前序遍历的一个反序，只不过反过来之后将左右孩子的遍历顺序交换了一下，但是没有关系，我们先来回顾一下前序遍历的非递归实现代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    Deque&lt;TreeNode&gt; stk = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    stk.addLast(root);</span><br><span class="line">    <span class="keyword">while</span> (!stk.isEmpty()) &#123;</span><br><span class="line">        TreeNode t = stk.pollLast();</span><br><span class="line">        res.add(t.val);</span><br><span class="line">        <span class="keyword">if</span> (t.right != <span class="keyword">null</span>) stk.addLast(t.right);</span><br><span class="line">        <span class="keyword">if</span> (t.left != <span class="keyword">null</span>) stk.addLast(t.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码中可以看待，因为栈是一种<strong>先进后出</strong>的数据结构，所以如果前序遍历想要先访问左子树，那么就需要先将右子树压入栈中。同理，在后序遍历中，我们将后序遍历的顺序反序遍历，将<code>left</code>-&gt;<code>right</code>-&gt;<code>root</code>的遍历顺序改成<code>root</code>-&gt;<code>right</code>-&gt;<code>left</code>。那么在添加到结果集的时候，也需要对其添加顺序进行反序，所以就有了下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    Deque&lt;TreeNode&gt; stk = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    stk.addLast(root);</span><br><span class="line">    <span class="keyword">while</span> (!stk.isEmpty()) &#123;</span><br><span class="line">        TreeNode t = stk.pollLast();</span><br><span class="line">        res.add(<span class="number">0</span>, t.val); <span class="comment">//每次将结果添加到结果集的最前面</span></span><br><span class="line">        <span class="keyword">if</span> (t.left != <span class="keyword">null</span>) stk.addLast(t.left); <span class="comment">//这里和前序遍历的操作刚好相反</span></span><br><span class="line">        <span class="keyword">if</span> (t.right != <span class="keyword">null</span>) stk.addLast(t.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-4-广度优先遍历"><a href="#3-4-广度优先遍历" class="headerlink" title="3.4 广度优先遍历"></a>3.4 广度优先遍历</h4><p>广度优先遍历的顺序是：从根节点向下，从左到右遍历，下面还是拿上面的二叉树为例：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200429210442.png" alt="广度优先遍历"></p>
<p>广度优先遍历顺序为：<code>0,1,2,5,3,4</code></p>
<ul>
<li>使用队列进行遍历的<code>java</code>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breadthOrder</span><span class="params">(MyTreeNode root)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    StackToQueue&lt;MyTreeNode&gt; queue = <span class="keyword">new</span> StackToQueue();<span class="comment">//这是我自己写的一个队列，可以使用java自带的队列</span></span><br><span class="line">    queue.push(root);</span><br><span class="line">    <span class="keyword">while</span> (queue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        root = queue.pop();</span><br><span class="line">        System.out.println(root.data);</span><br><span class="line">        <span class="keyword">if</span> (root.leftChild != <span class="keyword">null</span>)</span><br><span class="line">            queue.push(root.leftChild);</span><br><span class="line">        <span class="keyword">if</span> (root.rightChild != <span class="keyword">null</span>)</span><br><span class="line">            queue.push(root.rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-5-深度优先遍历"><a href="#3-5-深度优先遍历" class="headerlink" title="3.5 深度优先遍历"></a>3.5 深度优先遍历</h4><p>深度优先遍历的顺序为：先从根节点一直往下直到叶子节点进行遍历，然后叶子节点回到其父节点的右节点进行遍历。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200429210442.png" alt="深度优先遍历"></p>
<p>深度优先遍历顺序：<code>0,1,5,2,3,4</code></p>
<ul>
<li>使用栈进行遍历的<code>java</code>实现</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void deepthOrder(MyTreeNode root) &#123;</span><br><span class="line">        QueueToStack&lt;MyTreeNode&gt; stack = new QueueToStack();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        while (!stack.empty()) &#123;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            System.out.println(root.data);</span><br><span class="line">            if (root.rightChild != null)</span><br><span class="line">                stack.push(root.rightChild);</span><br><span class="line">            if (root.leftChild != null)</span><br><span class="line">                stack.push(root.leftChild);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-二叉树的实现"><a href="#4-二叉树的实现" class="headerlink" title="4 二叉树的实现"></a>4 二叉树的实现</h3><h4 id="4-1-QueueToStack-java"><a href="#4-1-QueueToStack-java" class="headerlink" title="4.1 QueueToStack.java"></a>4.1 <code>QueueToStack.java</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueToStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    Queue&lt;T&gt; queueA = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    Queue&lt;T&gt; queueB = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Push element x onto stack.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queueA.isEmpty() &amp;&amp; !queueB.isEmpty()) &#123;</span><br><span class="line">            queueA.add(x);</span><br><span class="line">            <span class="keyword">while</span> (!queueB.isEmpty())&#123;</span><br><span class="line">                T data = queueB.remove();</span><br><span class="line">                queueA.add(data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!queueA.isEmpty() &amp;&amp; queueB.isEmpty()) &#123;</span><br><span class="line">            queueB.add(x);</span><br><span class="line">            <span class="keyword">while</span> (!queueA.isEmpty())&#123;</span><br><span class="line">                T data = queueA.remove();</span><br><span class="line">                queueB.add(data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (queueA.isEmpty() &amp;&amp; queueB.isEmpty()) &#123;</span><br><span class="line">            queueA.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the element on top of the stack and returns that element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queueA.isEmpty() &amp;&amp; !queueB.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> queueB.remove();</span><br><span class="line">        <span class="keyword">return</span> queueA.remove();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the top element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queueA.isEmpty() &amp;&amp; !queueB.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> queueB.peek();</span><br><span class="line">        <span class="keyword">return</span> queueA.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns whether the stack is empty.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queueA.isEmpty() &amp;&amp; queueB.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-2-StackToQueue-java"><a href="#4-2-StackToQueue-java" class="headerlink" title="4.2 StackToQueue.java"></a>4.2 <code>StackToQueue.java</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">用两个栈实现队列的功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackToQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;T&gt; stackA = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;T&gt; stackB = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//push a data to the stack</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push2</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stackA.empty() &amp;&amp; !stackB.empty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stackB.empty()) &#123;</span><br><span class="line">                stackA.push(stackB.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//A is not empty, so push the data to A</span></span><br><span class="line">        stackA.push(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//remove the top element data</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stackA.empty() &amp;&amp; stackB.empty())<span class="comment">//都为空时</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;null&quot;);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!stackA.empty()) &#123;<span class="comment">//执行pop之前的操作，都是push，此时栈B是空的</span></span><br><span class="line">            <span class="keyword">while</span> (!stackA.empty())</span><br><span class="line">                stackB.push(stackA.pop());</span><br><span class="line">            <span class="keyword">return</span> stackB.pop();</span><br><span class="line">        &#125; <span class="keyword">else</span><span class="comment">// if (stackA.empty() &amp;&amp; !stackB.empty())//上一步执行的pop操作，栈A是空的，</span></span><br><span class="line">            <span class="keyword">return</span> stackB.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//print the top element data</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stackA.empty() &amp;&amp; stackB.empty())<span class="comment">//都为空时</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;null&quot;);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!stackA.empty()) &#123;<span class="comment">//执行pop之前的操作，都是push，此时栈B是空的</span></span><br><span class="line">            <span class="keyword">while</span> (!stackA.empty())</span><br><span class="line">                stackB.push(stackA.pop());</span><br><span class="line">            <span class="keyword">return</span> stackB.peek();</span><br><span class="line"><span class="comment">//            System.out.println(stackB.peek());</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="comment">//if (stackA.empty() &amp;&amp; !stackB.empty())//上一步执行的pop操作，栈A是空的，</span></span><br><span class="line"><span class="comment">//            System.out.println(stackB.peek());</span></span><br><span class="line">            <span class="keyword">return</span> stackB.peek();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stackA.empty()) &#123;</span><br><span class="line">            stackA.push(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stackA.empty())</span><br><span class="line">                stackB.push(stackA.pop());</span><br><span class="line">            stackA.push(x);</span><br><span class="line">            <span class="keyword">while</span> (!stackB.empty())</span><br><span class="line">                stackA.push(stackB.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!stackA.empty())</span><br><span class="line">            <span class="keyword">return</span> stackA.pop();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!stackA.empty())</span><br><span class="line">            System.out.println(stackA.peek());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stackA.size();</span><br><span class="line"><span class="comment">//        System.out.println(stackA.size());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-MyTreeNode-java"><a href="#4-3-MyTreeNode-java" class="headerlink" title="4.3 MyTreeNode.java"></a>4.3 <code>MyTreeNode.java</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTreeNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    T data;</span><br><span class="line">    MyTreeNode leftChild;</span><br><span class="line">    MyTreeNode rightChild;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLeftChild</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">this</span>.leftChild = <span class="keyword">new</span> MyTreeNode(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRightChild</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">this</span>.rightChild = <span class="keyword">new</span> MyTreeNode(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTreeNode</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTreeNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.leftChild = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.rightChild = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTreeNode</span><span class="params">(T data, MyTreeNode leftChild, MyTreeNode rightChild)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.leftChild = leftChild;</span><br><span class="line">        <span class="keyword">this</span>.rightChild = rightChild;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.leftChild == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.rightChild == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归实现</span></span><br><span class="line">    <span class="comment">//前序遍历，先打印根节点数据，在遍历左节点，在遍历右节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeOrder</span><span class="params">(MyTreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(root.data);</span><br><span class="line">            beforeOrder(root.leftChild);</span><br><span class="line">            beforeOrder(root.rightChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非递归的先序遍历 root -&gt; left -&gt; right</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(MyTreeNode root)</span> </span>&#123;</span><br><span class="line">        QueueToStack&lt;MyTreeNode&gt; stack = <span class="keyword">new</span> QueueToStack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        MyTreeNode node;</span><br><span class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">            node = stack.pop();</span><br><span class="line">            System.out.println(node.data);</span><br><span class="line">            <span class="keyword">while</span> (node.rightChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(node.rightChild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (node.leftChild != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(node.leftChild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历，先遍历左节点，然后遍历根节点，再遍历右节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">middleOrder</span><span class="params">(MyTreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            middleOrder(root.leftChild);</span><br><span class="line">            System.out.println(root.data);</span><br><span class="line">            middleOrder(root.rightChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非递归的中序遍历 left -&gt; root -&gt; right</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(MyTreeNode root)</span> </span>&#123;</span><br><span class="line">        QueueToStack&lt;MyTreeNode&gt; stack = <span class="keyword">new</span> QueueToStack&lt;&gt;();</span><br><span class="line">        MyTreeNode node = root;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span> || !stack.empty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(node);</span><br><span class="line">                node = node.leftChild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!stack.empty()) &#123;</span><br><span class="line">                node = stack.pop(); <span class="comment">//叶子节点的父节点</span></span><br><span class="line">                System.out.println(node.data);</span><br><span class="line">                node = node.rightChild; <span class="comment">//父节点的右节点，可能为null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历，先遍历左节点，然后遍历根节点，再遍历右节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">behindOrder</span><span class="params">(MyTreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            behindOrder(root.leftChild);</span><br><span class="line">            behindOrder(root.rightChild);</span><br><span class="line">            System.out.println(root.data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非递归的后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterOrder</span><span class="params">(MyTreeNode root)</span> </span>&#123;</span><br><span class="line">        QueueToStack&lt;MyTreeNode&gt; stack = <span class="keyword">new</span> QueueToStack&lt;&gt;();</span><br><span class="line">        MyTreeNode node = root;</span><br><span class="line">        MyTreeNode lastVisit = root;<span class="comment">//记录上一次遍历过的节点</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.empty() || node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(node);</span><br><span class="line">                node = node.leftChild;</span><br><span class="line">            &#125;</span><br><span class="line">            node = stack.top();</span><br><span class="line">            <span class="keyword">if</span> (node.rightChild==<span class="keyword">null</span>||node.rightChild==lastVisit)&#123;</span><br><span class="line">                System.out.println(node.data);</span><br><span class="line">                stack.pop();</span><br><span class="line">                lastVisit = node;</span><br><span class="line">                node=<span class="keyword">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                node = node.rightChild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breadthOrder</span><span class="params">(MyTreeNode root)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        StackToQueue&lt;MyTreeNode&gt; queue = <span class="keyword">new</span> StackToQueue();</span><br><span class="line">        queue.push(root);</span><br><span class="line">        <span class="keyword">while</span> (queue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            root = queue.pop();</span><br><span class="line">            System.out.println(root.data);</span><br><span class="line">            <span class="keyword">if</span> (root.leftChild != <span class="keyword">null</span>)</span><br><span class="line">                queue.push(root.leftChild);</span><br><span class="line">            <span class="keyword">if</span> (root.rightChild != <span class="keyword">null</span>)</span><br><span class="line">                queue.push(root.rightChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deepthOrder</span><span class="params">(MyTreeNode root)</span> </span>&#123;</span><br><span class="line">        QueueToStack&lt;MyTreeNode&gt; stack = <span class="keyword">new</span> QueueToStack();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            System.out.println(root.data);</span><br><span class="line">            <span class="keyword">if</span> (root.rightChild != <span class="keyword">null</span>)</span><br><span class="line">                stack.push(root.rightChild);</span><br><span class="line">            <span class="keyword">if</span> (root.leftChild != <span class="keyword">null</span>)</span><br><span class="line">                stack.push(root.leftChild);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-4-MyBinaryTree-java"><a href="#4-4-MyBinaryTree-java" class="headerlink" title="4.4 MyBinaryTree.java"></a>4.4 <code>MyBinaryTree.java</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinaryTree</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    MyTreeNode root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBinaryTree</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        MyTreeNode&lt;T&gt; myTreeNode = <span class="keyword">new</span> MyTreeNode&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.root = myTreeNode;</span><br><span class="line">        <span class="keyword">this</span>.root.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBinaryTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyTreeNode&lt;T&gt; myTreeNode = <span class="keyword">new</span> MyTreeNode&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.root = myTreeNode;</span><br><span class="line">        <span class="keyword">this</span>.root.data = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createBinaryTree</span><span class="params">(T[] dataArray, MyTreeNode root)</span> </span>&#123;</span><br><span class="line">        StackToQueue&lt;MyTreeNode&gt; queue = <span class="keyword">new</span> StackToQueue();</span><br><span class="line">        <span class="keyword">this</span>.root.data=dataArray[<span class="number">0</span>];</span><br><span class="line">        MyTreeNode parent;</span><br><span class="line">        queue.push(root);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dataArray.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            parent = queue.pop();</span><br><span class="line">            parent.addLeftChild(dataArray[<span class="number">2</span>*i+<span class="number">1</span>]);</span><br><span class="line">            queue.push(parent.leftChild);</span><br><span class="line">            parent.addRightChild(dataArray[<span class="number">2</span>*i+<span class="number">2</span>]);</span><br><span class="line">            queue.push(parent.rightChild);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root.beforeOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        root.preOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">middleOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root.middleOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        root.inOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">behindOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root.behindOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        root.afterOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breadthOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            root.breadthOrder(root);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deepthOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root.deepthOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序和选择排序过程介绍</title>
    <url>/bubble-select-sort/</url>
    <content><![CDATA[<h3 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h3><p>冒泡排序就是通过对比前一个和后一个数的大小，按照规则进行顺序的调换。每一轮对比之后最大或者最小值都会浮到最上面或者沉到最低下。</p>
<p>如：对这一数组进行冒泡排序：int a[5]{34,12,56,4,7};   假设为从小到大排序</p>
<p>一共需要比较length-1轮：</p>
<p>第一轮：  a.34和12比较，12比34小，那么调换位置，此时为：12,34,56,4,7，然后在对该序列进行排序</p>
<p>　　　　  b.然后就是34和56进行对比，34比56小，不用调换顺序，此时依旧为：12,34,56,4,7，然后在对该序列进行排序</p>
<p>　　　　  c.然后再就是56和4鸡西宁对比，4比56小，所以将56和4调换顺序，此时序列就是：12,34,4,56,7</p>
<p>　　　　  d.再然后就对比56和7，7比56小，所以将二者位置进行调换，此时完成第一轮调换，序列为：12,34,4,7,56</p>
<p>　　　　我们可以看到第一轮排序之后，已经将序列中的最大值沉到最底部了。</p>
<p>第二轮：此时的排序此时交第一轮要减1，</p>
<p>　　　　  a.先是12和34对比，前者比后者小，所以不用调换位置，序列时：12,34,4,7,56</p>
<p>　　　　  b.然后比较34和4的大小，后者比前者小，所以调换位置，此时序列为：12,4,34,7,56</p>
<p>　　　　  c.再然后比较34和7的大小，后者比前者小，所以调换位置，此时序列为：12,4,7,34,56</p>
<p>　　　　  d.此时就不用在往下比较了，因为比较次数已经减1了，也是因为第一轮中已经将最大的数选出来了。</p>
<p>然后就是第三轮和第四轮的比较，方法类似。</p>
<p>最终结果就是4,7,12,34,56</p>
<p>我们可以看到程序截图如下图所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190322102402128-1914857974.png" alt="冒泡排序过程"></p>
<h3 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2.选择排序"></a>2.选择排序</h3><p>选择排序的实现要比冒泡排序简单一些，但是在代码上相对会有些绕。原理就是先假设待排序的序列中的第一个数为最小值或者最大值，这里还是用从小到大的顺序进行排序。首先假设第一个数为最小值（假设该值的索引下标时i），然后从该值的下一个数也就是索引为i+1的数开始进行比较，如果i+1的值要比假设的最小值小，那么就将二者的值进行交换，每一轮将最小值选择出来，并将其与假设的最小值进行调换就行，不需要想冒泡排序那样整个需略都要跟着一起移动。此时还需要一个缓冲变量来存放最小值的索引值。</p>
<p>详细讲解：</p>
<p>在时间复杂度上，这两种排序方法都是一样，O(N^2)，也是需要循环执行length-1轮。还是假设对数组a进行排序。</p>
<p>首先定义数组：int a[5]{34,12,56,4,7}; </p>
<p>第一轮：先假设序列中的第一个数是最小值，记录下它的索引值，定一个新的变量用来存放该索引值，minIndex=0，下表为0也就是第一个数。然后在进行循环。</p>
<p>　　　　  a.内循环中的第一轮是34和12进行比较，后者比前者小，所以将minIndex的索引值进行更改，此时minIndex=1,</p>
<p>　　　　  b.内循环中的第二轮，是利用minIndex 中的数和下一个待比较的数进行比较，应该是12和56比较，后者比前者小，所以不用修改minIndex的值</p>
<p>　　　　  c.内循环中的第三轮，还是利用索引为1的数值和下一个待比较的数进行比较，应该是12和4进行比较，后者较之前者较小，所以记录下当前数的索引值并赋值给minIndex，此时minIndex=3</p>
<p>　　　　  d.内循环中的第四轮，利用minIndex索引值的数值和下一个待比较的数进行比较，应该是4和7进行比较，后者比前者大，所以不用修改minIndex的值</p>
<p>　　　　然后将序列中的第i个数和序列中索引值为minIndex的数进行调换，第一轮已将最小值选择出来了。此时序列为：4,12,56,34,7</p>
<p>　　　　第一轮外循环之后，minIndex=3,下一轮外循环会将这个值直接覆盖</p>
<p>第二轮：此时的minIndex=1，假设的最小值是12</p>
<p>　　　　　此时定义上一轮外循环的下一个数为最小值，也即是索引值为1的值，那么本轮循环将从索引值为2的数开始比较，</p>
<p>　　　　  a.内循环中的第一轮，比较12和56,后者比前者大，所以不用修改minIndex的值，</p>
<p>　　　　  b.内循环中的第二轮，此时比较12和34的大小，还是依旧不用修改索引值</p>
<p>　　　　  c.内循环中的第三轮，此时比较12和7的大小，后者比前者小，索引记录下当前数的索引值并赋值给minIndex记录下来</p>
<p>　　　　内循环结束，判断minIndex的值是否被改变，如果被改变了，那么就将下标为i的数和下标为minIndex的数进行交换。此时序列为：4,7,56,34,12且minIndex=4</p>
<p>第三轮和第四轮外循环的规则类似。。</p>
<p>我们可以看程序运行的效果图如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190322105700101-1010848535.png" alt="选择排序过程"></p>
<p>最后附上可供运行的c++代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bubble sort</span></span><br><span class="line">    <span class="keyword">double</span> a[<span class="number">5</span>]=&#123;<span class="number">34</span>,<span class="number">12</span>,<span class="number">56</span>,<span class="number">4</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in"><span class="keyword">sizeof</span></span>(a) / <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">double</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//output all numbers</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;before sorted by bubbleSort:&quot;</span> &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a[i]&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//start to sort the array</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len -i <span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">double</span> t = <span class="number">0</span>;</span><br><span class="line">                t = a[j];</span><br><span class="line">                a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">                a[j+<span class="number">1</span>] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;This is at NO.&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;time:    &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//output after sorted</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;after sorted by bubbleSort:&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a[i]&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//selectsort</span></span><br><span class="line">    <span class="keyword">double</span> b[<span class="number">5</span>]=&#123;<span class="number">34</span>,<span class="number">12</span>,<span class="number">56</span>,<span class="number">4</span>,<span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;before sorted by selectSort:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; b[i]&lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//start to selectSort</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;<span class="comment">//pretend the first number of the array be the min number.and record the index</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ending-&gt;minIndex=&quot;</span> &lt;&lt; minIndex &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(b[minIndex]&gt;b[j])</span><br><span class="line">            &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(minIndex != i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> t = <span class="number">0</span>;</span><br><span class="line">            t = b[i];</span><br><span class="line">            b[i] = b[minIndex];</span><br><span class="line">            b[minIndex] = t;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//print the detail</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;This is at NO.&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;time:  &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">4</span>)&lt;&lt;b[i] ;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;   &quot;</span>&lt;&lt; <span class="string">&quot;ending-&gt;minIndex=&quot;</span> &lt;&lt; minIndex &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;after sorted by selectSort:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; b[i]&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>java</code>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bubble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] b = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>,<span class="number">89</span>,<span class="number">76</span>,<span class="number">35</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            System.out.print(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">int</span>[] c = bubble(b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">            System.out.print(c[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">int</span>[] d = select(b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d.length; i++) &#123;</span><br><span class="line">            System.out.print(d[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubble(<span class="keyword">int</span>[] a) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j+<span class="number">1</span>] &lt; a[j]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = a[j+<span class="number">1</span>];</span><br><span class="line">                    a[j+<span class="number">1</span>] = a[j];</span><br><span class="line">                    a[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] select(<span class="keyword">int</span>[] a)&#123;</span><br><span class="line">        <span class="keyword">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt; a.length -<span class="number">1</span> ;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (a[maxIndex] &lt; a[j])&#123;</span><br><span class="line">                    maxIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(maxIndex != i)&#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>algorithm</tag>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>bug错误排查手册</title>
    <url>/bug-fix-hits/</url>
    <content><![CDATA[<h1 id="1-前提技术"><a href="#1-前提技术" class="headerlink" title="1 前提技术"></a>1 前提技术</h1><h2 id="（1）工具使用"><a href="#（1）工具使用" class="headerlink" title="（1）工具使用"></a>（1）工具使用</h2><ul>
<li><p>sublime</p>
<ul>
<li><a href="https://jums.club/sublime-tutorials/">sublime教程/正则表达式语法</a></li>
</ul>
</li>
<li><p>Linux</p>
<ul>
<li><p>ansible</p>
<ul>
<li><a href="https://jums.club/ansible-tutorials/">ansible快速上手教程</a></li>
</ul>
</li>
<li><p>vim</p>
<ul>
<li><a href="https://jums.club/vim-tutoraials/">vim入门教程</a></li>
</ul>
</li>
<li><p>命令</p>
<ul>
<li><p><a href="https://explainshell.com/">在线查看命令解释</a></p>
</li>
<li><p><a href="https://www.linuxcool.com/">Linux命令大全</a></p>
</li>
<li><p>grep</p>
<ul>
<li>查看日志：<code>grep &#123;search pattern&#125; &#123;dictory&#125; | grep &#123;search pattern&#125; | grep &#123;search pattern&#125; | ...</code>，可以不断的进行过滤</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep &#x27;search pattern&#x27; /data/nginx/logs/example.com/app/Common.log.2021072616 | grep &#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>find</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>curl（或者使用postman工具）</p>
<ul>
<li>发送请求</li>
</ul>
</li>
<li><p>网络相关</p>
<ul>
<li>Charles（<a href="https://jums.club/charles-https-with-ios/">ios手机https抓包</a>）</li>
<li><a href="https://jums.club/http-error-code/">常见HTTP错误代码</a></li>
</ul>
</li>
<li><p>git</p>
<ul>
<li><a href="https://jums.club/git-tutoraials/">git入门教程</a></li>
</ul>
</li>
<li><p>postman</p>
<ul>
<li>发送请求：get、post等</li>
<li><a href="https://jums.club/postman-caton/">卡顿问题解决方案</a></li>
</ul>
</li>
<li><p>PHP</p>
<ul>
<li><code>var_dump()</code></li>
<li><a href="https://www.php.net/manual/zh/index.php">php中文手册</a></li>
<li><a href="https://www.php.net/manual/en/index.php">php manual</a></li>
</ul>
</li>
<li><p>sql语句</p>
<ul>
<li><p>连接查询</p>
<ul>
<li><code>left join</code>：返回包括<code>左表</code>中的所有记录和右表中联结字段相等的记录 <ul>
<li><a href="https://blog.csdn.net/reggergdsg/article/details/66475187">https://blog.csdn.net/reggergdsg/article/details/66475187</a></li>
</ul>
</li>
<li><code>right join</code>：返回包括<code>右表</code>中的所有记录和左表中联结字段相等的记录</li>
<li><code>inner join</code>：只返回两个表中联结字段相等的行</li>
<li><code>union join</code></li>
</ul>
</li>
<li><p>子查询</p>
<ul>
<li><code>where</code></li>
<li><code>from</code></li>
<li><code>exist</code></li>
</ul>
</li>
<li><p>聚合函数</p>
<ul>
<li>sum</li>
<li>count</li>
<li>avg</li>
<li>max</li>
<li>min</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="（2）基础技术知识点"><a href="#（2）基础技术知识点" class="headerlink" title="（2）基础技术知识点"></a>（2）基础技术知识点</h2><ul>
<li><p>MySQL</p>
<ul>
<li>分页：limit</li>
<li>索引：index</li>
<li>性能优化：select</li>
<li>索引结构</li>
<li>索引优化</li>
</ul>
</li>
<li><p>Redis：</p>
<ul>
<li>php安装redis扩展</li>
<li><a href="https://jums.club/How-to-connect-remote-redis-server/">连接远程主机的redis</a></li>
<li><a href="https://www.redis.com.cn/">redis中文网</a></li>
<li>常用redis命令<ul>
<li>scan</li>
<li>keys</li>
</ul>
</li>
</ul>
</li>
<li><p>计算机网络</p>
<ul>
<li><p>跨域cookie</p>
</li>
<li><p>HTTP</p>
<ul>
<li>HTTP HEADER</li>
<li><a href="https://jums.club/https-theory/">https原理</a></li>
</ul>
</li>
<li><p>ssh密钥登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh &#123;username&#125;@&#123;ip_address&#125;</span><br><span class="line">//比如：</span><br><span class="line">$ ssh root@192.168.10.128</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<h1 id="2-心态"><a href="#2-心态" class="headerlink" title="2 心态"></a>2 心态</h1><p>面对一个突如其来的bug，不应该过分焦灼与恐慌，正确的打开方式应该时沉着冷静，思考一会…，然后应该按照如下步骤进行推理：</p>
<ol>
<li>针对一个bug，首先定位错误原因，大概估算出导致该bug的原因可能有哪几种，最好能够精确到小数点后1位小数</li>
<li>如果能够快速定位出导致bug的原因，那么说明你很厉害，然后你就可以按照梳理出来的几条思路进行查找bug原因</li>
<li>如果你还确定自己列出的导致的bug原因是否完全，那么没关系，大部分情况下的bug都是很难列出所有的原因，那么只能一步一步缩小问题的边界，就是排除一些不确定的因素，然后再进一步缩小问题的边界，如此循环几轮，bug原因应该就可以缩小到一个很小的范围</li>
</ol>
<h1 id="3-常见bug思路"><a href="#3-常见bug思路" class="headerlink" title="3 常见bug思路"></a>3 常见bug思路</h1><p>一些线上发生的bug，很容易让我们头疼，因为某些线上问题很难在线下进行复现，那么就只能靠我们聪明的大脑在脑中进行“复现”了。但是，需要在脑中复现那些bug，其实是很难的，必须对这些代码了如指掌才能做到在脑中一个很清晰的复现，并一步一步通过在大脑中修改“参数”来“模拟”问题出现的原因，并最终解决问题。有以下几点思路可供参考：</p>
<ol>
<li><p>找到一个非常小非常小的可以让你的程序出错的数据。比如空数组，空串，1-5个数的数组，一个字符的字符串。</p>
</li>
<li><p>在程序的若干位置输出一些中间结果。比如排序之后输出一下，看看是不是真的按照你所想的顺序排序的。这样可以定位到程序出错的部分。</p>
<blockquote>
<p>依赖于IDE的断点调试，是十分浪费时间的一种调试方法。而且在面试中，你是基本没有断点调试的机会的（因为很多公司是白板写题，不会提供给你IDE）。事实上在实际的工作中，你也很少能够有机会去进行断点调试，比如你进行的是 Web 开发，你只能想方设法的在代码中打印一些 Log，然后根据 Log 去分析出错的原因。你平时用 IDE 写代码，就十分容易养成这种断点调试的“坏习惯”。一个更好的方式，是使用打印中间结果的方式。</p>
</blockquote>
</li>
<li><p>一行一行改成参考程序</p>
</li>
<li><p>定位了出错的部分之后，查看自己的程序该部分的逻辑是否有错。</p>
</li>
<li><p>给小熊讲程序</p>
<blockquote>
<p>可以放一只 “小熊” 在你的电脑旁边，一旦程序出错了。就对着这只小熊讲你的整个代码是怎么解决问题的。因为是给小熊讲，所以你可以把它当作什么都不懂，于是需要更加仔细的去讲述你代码中每个细节，所以你需要一行一行的讲，甚至连为什么你要用 ArrayList 而不用 int[] 都要讲得清清楚楚。讲着讲着，你就有可能突然发现你的错误所在了。</p>
<p>这个技巧的意义在于，你在写代码的时候，脑子里可能想着一个事情，但是打出来的代码，可能是另外一回事儿。或者你脑子里想着有3个条件需要判断，但是打的时候，漏掉了一个。当你把代码重新讲一遍的时候，事实上是在重新整理你的逻辑，查漏补缺。这样很容易就能够发现你的错误。</p>
</blockquote>
</li>
<li><p><strong>查日志</strong>，很多人会忽略日志的作用，日志是不会说话的史官，忠诚地记录所有问题，通过查看日志就能迅速定位一些bug的所在；</p>
</li>
<li><p><strong>网络抓包</strong>等方法</p>
</li>
</ol>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><p><a href="https://www.bilibili.com/video/BV12b411K7Zu">MySQL 基础+高级篇- 数据库 -sql -mysql教程_mysql视频_mysql 入门尚硅谷</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/23019630">https://www.zhihu.com/question/23019630</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzU2OTUyNzk1NQ==&amp;mid=2247491111&amp;idx=1&amp;sn=d0f9dcb4a601f4147fa025639ce2589f&amp;source=41#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzU2OTUyNzk1NQ==&amp;mid=2247491111&amp;idx=1&amp;sn=d0f9dcb4a601f4147fa025639ce2589f&amp;source=41#wechat_redirect</a></p>
</li>
</ul>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>全栈</tag>
      </tags>
  </entry>
  <entry>
    <title>c++中，为什么有了malloc/free，还要new/delete？</title>
    <url>/c-malloc-new/</url>
    <content><![CDATA[<ol>
<li><code>malloc</code>与<code>free</code>是<code>C++/C</code>语言的标准库函数，<code>new/delete</code>是<code>C++</code>的运算符。它们都可用于申请动态内存和释放内存。</li>
<li>对于非内部数据类型的对象而言，光用<code>maloc/free</code>无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。</li>
<li><strong>由于<code>malloc/free</code>是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于malloc/free。</strong></li>
<li>因此<code>C++</code>语言需要一个能完成动态内存分配和初始化工作的运算符<code>new</code>，以及一个能完成清理与释放内存工作的运算符<code>delete</code>。注意<code>new/delete</code>不是库函数。</li>
<li>不要企图用<code>malloc/free</code>来完成动态对象的内存管理，应该用<code>new/delete</code>。由于内部数据类型的“对象”没有构造与析构的过程，对它们而言<code>malloc/free</code>和<code>new/delete</code>是等价的。</li>
<li>既然<code>new/delete</code>的功能完全覆盖了<code>malloc/free</code>，为什么<code>C++</code>不把<code>malloc/free</code>淘汰出局呢？这是因为<code>C++</code>程序经常要调用<code>C</code>函数，而<code>C</code>程序只能用<code>malloc/free</code>管理动态内存。</li>
<li>如果用<code>free</code>释放“<code>new</code>创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。如果用delete释放“<code>malloc</code>申请的动态内存”，结果也会导致程序出错，但是该程序的可读性很差。所以<code>new/delete</code>必须配对使用，<code>malloc/free</code>也一样。</li>
</ol>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>c++序列化以及反序列化实现</title>
    <url>/c-serialization/</url>
    <content><![CDATA[<h2 id="1-什么是序列化和反序列化"><a href="#1-什么是序列化和反序列化" class="headerlink" title="1 什么是序列化和反序列化"></a>1 什么是序列化和反序列化</h2><blockquote>
<p>当我们在写程序时，比如说我们自定义了一个实体类<code>Person</code>，然后在程序中创建一个该实体类对象，并给对象赋了一些值，但是我们想将这些数据发给我们的其他的程序员朋友，让他们也可以调用我们创建的这个实体类并使用我们的数据，这个时候我们就需要使用到序列化和发序列化。</p>
</blockquote>
<h3 id="1-1-序列化"><a href="#1-1-序列化" class="headerlink" title="1.1 序列化"></a>1.1 序列化</h3><p>序列化就是将内存中运行的程序中的<code>数据结构</code>数据存储到<code>磁盘的文件</code>中，使其能够持久化存在电脑中，就算程序停止，这些数据也能一直存在。、</p>
<h3 id="1-2-反序列化"><a href="#1-2-反序列化" class="headerlink" title="1.2 反序列化"></a>1.2 反序列化</h3><p>顾名思义，也就是序列化的反操作，就是将已经存在磁盘文件中的数据读取到程序中继续使用的这么一个操作。</p>
<h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义了一个实体类 Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Person</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> * <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>] &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制文件 进行写</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WriteBinaryFile</span><span class="params">(Person * ps,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">file</span><span class="params">(<span class="string">&quot;binary.txt&quot;</span>,ios::out | ios::binary )</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="built_in">is_open</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        file.<span class="built_in">write</span>((<span class="keyword">char</span>*)&amp;ps[i],<span class="built_in"><span class="keyword">sizeof</span></span>(Person));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制文件 进行读</span></span><br><span class="line"><span class="function">Person * <span class="title">ReadBinaryFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">file</span><span class="params">(<span class="string">&quot;binary.txt&quot;</span>, ios::in | ios::binary)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="built_in">is_open</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开辟一块空间 存放读取的数据</span></span><br><span class="line">    <span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in"><span class="keyword">sizeof</span></span>(Person)];</span><br><span class="line">    <span class="comment">//或者 Person p;开辟的空间肯定合适</span></span><br><span class="line">    <span class="comment">//Person temp;</span></span><br><span class="line">    Person* ps = <span class="keyword">new</span> Person[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//将数据读入的 temp对应的空间</span></span><br><span class="line">    <span class="keyword">while</span> (file.<span class="built_in">read</span>(temp,<span class="built_in"><span class="keyword">sizeof</span></span>(Person)))</span><br><span class="line">    &#123;</span><br><span class="line">        Person p = *(Person*)temp;</span><br><span class="line">        ps[i] = p;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> ps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//序列化操作  往文件中写数据</span></span><br><span class="line"><span class="comment">//    Person* ps = new Person[5];</span></span><br><span class="line"><span class="comment">//    ps[0] = Person(&quot;Lay1&quot;, 11);</span></span><br><span class="line"><span class="comment">//    ps[1] = Person(&quot;Lay1&quot;, 12);</span></span><br><span class="line"><span class="comment">//    ps[3] = Person(&quot;Lay1&quot;, 13);</span></span><br><span class="line"><span class="comment">//    ps[2] = Person(&quot;Lay1&quot;, 14);</span></span><br><span class="line"><span class="comment">//    ps[4] = Person(&quot;Lay1&quot;, 15);</span></span><br><span class="line"><span class="comment">//    WriteBinaryFile(ps,5);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化操作  程序读取文件中的数据</span></span><br><span class="line">    Person* ps2;</span><br><span class="line">    ps2 = <span class="built_in">ReadBinaryFile</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ps2[i].<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ps2[i].<span class="built_in">getAge</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>存储在文件中的内容的样子：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200531160213.png" alt="样子"></p>
</blockquote>
<blockquote>
<p>运行结果：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200531160418.png" alt="运行结果"></p>
</blockquote>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>利用免费cdn对GitHub资源进行加速访问</title>
    <url>/cdn-speed-up/</url>
    <content><![CDATA[<h3 id="1-cdn网站"><a href="#1-cdn网站" class="headerlink" title="1 cdn网站"></a>1 cdn网站</h3><p><a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/</a>，网站首页如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200209222722.png" alt="home page"></p>
<h3 id="2-举例"><a href="#2-举例" class="headerlink" title="2 举例"></a>2 举例</h3><p>这里以GitHub为例。模板：      </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/github用户名/GitHub的仓库名@branch分支名/具体的文件访问路径</span><br></pre></td></tr></table></figure>
<p>这里以图片为例：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200209223313.png" alt="github example"><br><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/ninePersonality/1.png">https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/ninePersonality/1.png</a></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>用Python扫描文件夹中所有文件，并将部分文件按要求改名字</title>
    <url>/change-file-name-by-python/</url>
    <content><![CDATA[<h3 id="话不多说，直接上代码"><a href="#话不多说，直接上代码" class="headerlink" title="话不多说，直接上代码"></a>话不多说，直接上代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan_files</span>(<span class="params">directory, prefix=<span class="literal">None</span>, postfix=<span class="literal">None</span></span>):</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files[<span class="number">2</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;微信截图_&quot;</span> <span class="keyword">in</span> file:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                newname = re.sub(<span class="string">&quot;微信截图_&quot;</span>,<span class="string">&quot;&quot;</span>,file)</span><br><span class="line">                os.rename(directory+file,directory+newname)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;改名完成,一共改名&#123;&#125;个文件&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">dir</span> = <span class="string">r&quot;xxx/xxx&quot;</span> <span class="comment"># 这里写你的路径，记得加上前面的r，否则容易出错</span></span><br><span class="line">    scan_files(<span class="built_in">dir</span>)</span><br></pre></td></tr></table></figure>


<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>program language</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Charles抓抓包，抓取IOS设备的请求（http/https）</title>
    <url>/charles-https-with-ios/</url>
    <content><![CDATA[<h2 id="1-Charles安装"><a href="#1-Charles安装" class="headerlink" title="1 Charles安装"></a>1 Charles安装</h2><p>下载连接：<a href="https://www.charlesproxy.com/download/">https://www.charlesproxy.com/download/</a></p>
<h2 id="2-HTTP抓包"><a href="#2-HTTP抓包" class="headerlink" title="2 HTTP抓包"></a>2 HTTP抓包</h2><h3 id="（1）查看电脑IP地址"><a href="#（1）查看电脑IP地址" class="headerlink" title="（1）查看电脑IP地址"></a>（1）查看电脑IP地址</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-273b938bf318c5f4.png" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-f4ee408d0afca3d7.png" alt=""></p>
<h3 id="（2）设置手机HTTP代理"><a href="#（2）设置手机HTTP代理" class="headerlink" title="（2）设置手机HTTP代理"></a>（2）设置手机HTTP代理</h3><p>手机连上电脑，点击“设置-&gt;无线局域网-&gt;连接的WiFi”，设置HTTP代理：<br>服务器为电脑IP地址：如192.168.1.169<br>端口：8888</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-ad19fa10a1815cbc.png" alt=""></p>
<p>设置代理后，需要在电脑上打开Charles才能上网。（因为手机的所有请求必须走Charles转发，这也是Charles能抓包的原理，即利用中间人代理）</p>
<h3 id="（3）电脑上打开Charles进行HTTP抓包"><a href="#（3）电脑上打开Charles进行HTTP抓包" class="headerlink" title="（3）电脑上打开Charles进行HTTP抓包"></a>（3）电脑上打开Charles进行HTTP抓包</h3><p>手机上打开某个App或者浏览器什么的，如果不能上网，检查前面步骤是否正确。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-8630cf0087d20187.png" alt=""></p>
<p>点击“Allow”允许，出现手机的HTTP请求列表。抓包案例如下：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-874a256420dcae1f.png" alt=""></p>
<h2 id="3-HTTPS抓包"><a href="#3-HTTPS抓包" class="headerlink" title="3 HTTPS抓包"></a>3 HTTPS抓包</h2><p>HTTPS的抓包需要在HTTP抓包基础上再进行设置。</p>
<p>如果不设置HTTPS代码，那么所有以https协议的网站都是加密的，也就说说不能看到原文，大概是下面这样：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-81c9d7cd686f86eb.png" alt=""></p>
<p>如果你设置了HTTPS代理之后，则所有的请求数据都将以明文显示，这样对于程序员来说，可以更好的调试程序代码，如下所示：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-3b9210f6ea4c6403.png" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-c83e45626a1cb35e.png" alt=""></p>
<blockquote>
<p><strong>以下为在HTTP抓包基础上进行HTTP抓包的进一步设置步骤:</strong></p>
</blockquote>
<h3 id="（1）安装SSL证书到手机设备"><a href="#（1）安装SSL证书到手机设备" class="headerlink" title="（1）安装SSL证书到手机设备"></a>（1）安装SSL证书到手机设备</h3><p>点击 Help -&gt; SSL Proxying -&gt; Install Charles Root Certificate on a Mobile Device：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-8f47a1b1c1540ef7.png" alt=""></p>
<p>出现弹窗得到地址 <a href="https://links.jianshu.com/go?to=chls.pro%2Fssl">chls.pro/ssl</a>。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-c7f6ad4a204b0bd4.png" alt=""></p>
<p>在手机Safari浏览器输入地址 <a href="https://links.jianshu.com/go?to=chls.pro%2Fssl">chls.pro/ssl</a>，出现证书安装页面，点击安装<br>手机设置有密码的输入密码进行安装。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-7ed4a5c8c2a36217.png" alt=""></p>
<blockquote>
<p><strong><em>注意1：</em>Safari浏览器输入这个网址<a href="https://links.jianshu.com/go?to=chls.pro%2Fssl">chls.pro/ssl</a>，安装不了证书的情况,需要注意：</strong></p>
<ul>
<li><p>设置好手机HTTP代理</p>
</li>
<li><p>电脑上Charles要开着</p>
</li>
</ul>
</blockquote>
<h3 id="（2）证书信任设置"><a href="#（2）证书信任设置" class="headerlink" title="（2）证书信任设置"></a>（2）证书信任设置</h3><p>iOS 10.3系统及以上，需要在 <em>设置→通用→关于本机→证书信任设置</em> 里面启用完全信任Charles证书，打开信任正式按钮。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-34036db0a6b76448.png" alt=""></p>
<h3 id="（3）Charles设置Proxy"><a href="#（3）Charles设置Proxy" class="headerlink" title="（3）Charles设置Proxy"></a>（3）Charles设置Proxy</h3><p>Proxy -&gt; SSL Proxying Settings…</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-2c460b4652797ccf.png" alt=""></p>
<p>勾选Enable SSL Proxying,点击Add：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-11eb2be75eae13fb.png" alt=""></p>
<p>Host设置要抓取的https接口，比如想抓这个：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-b39831342a11daca.png" alt=""></p>
<blockquote>
<p>Host填写：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fapi.weibo.cn">https://api.weibo.cn</a><br>Port填写：443</p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-ca37de9cdb920511.png" alt=""></p>
<p>也可以直接设置所有网站：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210715173303.png" alt=""></p>
<h3 id="（4）进行HTTPS抓包"><a href="#（4）进行HTTPS抓包" class="headerlink" title="（4）进行HTTPS抓包"></a>（4）进行HTTPS抓包</h3><p>让手机重新发送https请求，可看到抓包：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2469183-5f1b21912781d466.png" alt=""></p>
<blockquote>
<p><strong>注意：不抓包请关闭手机HTTP代理，否则断开与电脑连接后会连不上网</strong></p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.jianshu.com/p/5539599c7a25">https://www.jianshu.com/p/5539599c7a25</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>clone with ssh和clone with https有什么区别</title>
    <url>/clone-with-ssh-vs-https/</url>
    <content><![CDATA[<h2 id="1-区别"><a href="#1-区别" class="headerlink" title="1 区别"></a>1 区别</h2><p><code>clone with ssh</code>方式的链接形式形式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/project/repo.git</span><br></pre></td></tr></table></figure>

<p><code>clone with https</code>方式的链接形式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:project/repo.git</span><br></pre></td></tr></table></figure>

<p><strong>区别就是所用的协议不同：</strong></p>
<ul>
<li>https用443端口，可以对repo根据权限进行读写，只要有账号密码就可进行操作。</li>
<li>ssh则用的是22端口，也可以对repo根据权限进行读写，但是需要SSH Keys授权，这个key是通过ssh key生成器生成的，然后放在github上，作为授权的证据，这样的话就不需要用户名和密码进行授权了。</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/11041729/why-does-github-recommend-https-over-ssh">https://stackoverflow.com/questions/11041729/why-does-github-recommend-https-over-ssh</a></li>
<li><a href="https://blog.csdn.net/sinat_36246371/article/details/79885261">https://blog.csdn.net/sinat_36246371/article/details/79885261</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>关于卷积神经网络，了解一下</title>
    <url>/cnn/</url>
    <content><![CDATA[<h3 id="1-卷积神经网络"><a href="#1-卷积神经网络" class="headerlink" title="1 卷积神经网络"></a>1 <a href="https://baike.baidu.com/item/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/17541100?fr=aladdin">卷积神经网络</a></h3><blockquote>
<p><a href="https://blog.csdn.net/weixin_42451919/article/details/81381294">一篇很好的关于理解卷积神经网络的博客</a>（博客中的<strong>filter助手</strong>表示的是<strong>卷积核</strong>的意思）<br><a href="https://blog.csdn.net/u013093426/article/details/81086396">一篇关于如何搭建CNN的博客</a><br><a href="https://www.zhihu.com/question/39022858/answer/224446917">知乎回答：能否对卷积神经网络工作原理做一个直观的解释？</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&mid=2650728746&idx=1&sn=61e9cb824501ec7c505eb464e8317915&scene=0#wechat_redirect">机器视角：长文揭秘图像处理和卷积神经网络架构</a>|<a href="https://www.analyticsvidhya.com/blog/2017/06/architecture-of-convolutional-neural-networks-simplified-demystified/"><strong>该文原文</strong></a><br>定义：卷积神经网络（Convolutional Neural Network，CNN）是一种前馈神经网络，它的人工神经元可以响应一部分覆盖范围内的周围单元，对于大型图像处理有出色表现。 它包括卷积层(convolutional layer)和池化层(pooling layer)    </p>
</blockquote>
<h3 id="1-1-卷积神经网络的结构："><a href="#1-1-卷积神经网络的结构：" class="headerlink" title="1.1 卷积神经网络的结构："></a>1.1 <strong>卷积神经网络的结构：</strong></h3><p><strong>卷积神经网络的结构包括：</strong>   </p>
<ul>
<li>输入层（input，输入一张全尺寸的黑白或彩色图像）</li>
<li>卷积层（filter，对ROI(region of interest)进行特征提取，一个CNN可以有很多的卷积核也可以有很多的卷积层）</li>
<li>池化层（pooling，可选，目的是减少上层的输入参数）</li>
<li>输出层（也叫全连接层FC，该层可以用来对图像进行分类和识别操作）</li>
</ul>
<p><strong>下面这张图是CNN的结构图：</strong>   </p>
<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/48540923dd54564e223d3494bdde9c82d0584fc7.jpg" alt="image">   </p>
</blockquote>
<p><strong>人工神经网络和卷积神经网络的对比：</strong>   </p>
<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFreggeAJhflAACFamG9M3o011.png" alt="image"><br>左图：全连接神经网络（平面），组成：输入层、激活函数、全连接层<br>右图：卷积神经网络（立体），组成：输入层、卷积层、激活函数、池化层、全连接层<br><strong>在卷积神经网络中有一个重要的概念：深度，它是指一幅图像的通道数量，如：RGB图像的深度是3，灰度图像的深度是1等</strong><br><strong>在卷积神经网络中，有一个非常重要的特性：权值共享：</strong>  所谓的权值共享就是说，给一张输入图片，用一个filter去扫这张图，filter里面的数就叫权重，这张图每个位置是被同样的filter扫的，所以权重是一样的，也就是共享。</p>
</blockquote>
<p><strong>注意：特征提取之后，一般使用几个filter助手（卷积核）就会得到几个深度为1的feature map</strong></p>
<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFreggiAC8-aAACAg54bzYo475.png" alt="image"><br>卷积不仅限于对原始输入的卷积。蓝色方块是在原始输入上进行卷积操作，使用了6个filter得到了6个提取特征图。绿色方块还能对蓝色方块进行卷积操作，使用了10个filter得到了10个特征图。每一个filter的深度必须与上一层输入的深度相等。</p>
</blockquote>
<p><strong>更加直观理解卷积：</strong>   </p>
<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFreggiATHJ7AAEstloH4_M280.png" alt="image"><br>以上图为例：<br>第一次卷积可以提取出低层次的特征。<br>第二次卷积可以提取出中层次的特征。<br>第三次卷积可以提取出高层次的特征。<br>特征是不断进行提取和压缩的，最终能得到比较高层次特征，简言之就是对原式特征一步又一步的浓缩，最终得到的特征更可靠。利用最后一层特征可以做各种任务：比如分类、回归等。</p>
</blockquote>
<h3 id="1-2-卷积的计算流程："><a href="#1-2-卷积的计算流程：" class="headerlink" title="1.2 卷积的计算流程："></a>1.2 <strong>卷积的计算流程：</strong></h3><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFreggiAVJYtAAEv0s5MlhM898.png" alt="image"><br>左区域的三个大矩阵是原式图像的输入，RGB三个通道用三个矩阵表示，大小为7x7x3。<br>Filter W0表示1个filter助手，尺寸为3*3，深度为3（三个矩阵）；Filter W1也表示1个filter助手。因为卷积中我们用了2个filter，因此该卷积层结果的输出深度为2（绿色矩阵有2个）。<br>Bias b0是Filter W0的偏置项，Bias b1是Filter W1的偏置项。<br>OutPut是卷积后的输出，尺寸为3x3，深度为2。</p>
</blockquote>
<p><strong>计算过程：</strong></p>
<blockquote>
<p>输入是固定的，filter是指定的，因此计算就是如何得到绿色矩阵。<br>第一步，在输入矩阵上有一个和filter相同尺寸的滑窗，然后输入矩阵的在滑窗里的部分与filter矩阵对应位置相乘：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191118163546.png" alt="image"><br>第二步，将3个矩阵产生的结果求和，并加上偏置项，即0+2+0+1=3，因此就得到了输出矩阵的左上角的3：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFreggqAMAUIAAAur4t_qLQ857.png" alt="image"><br>第三步，让每一个filter都执行这样的操作，便可得到第一个元素：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFreggqAbb1DAABnl3M4AWY167.png" alt="image"><br>第四步，滑动窗口2个步长，重复之前步骤进行计算<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFreggqAUl7yAACokZwIXaM214.png" alt="image"><br>第五步，最终可以得到，在2个filter下，卷积后生成的深度为2的输出结果：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFreggqAPt54AAAfaKfUS8U979.png" alt="image"></p>
</blockquote>
<p><strong>思考：</strong></p>
<blockquote>
<ul>
<li>为什么每次滑动是2个格子？   </li>
</ul>
<p><em>滑动的步长叫stride记为S。S越小，提取的特征越多，但是S一般不取1，主要考虑时间效率的问题。S也不能太大，否则会漏掉图像上的信息。</em></p>
<ul>
<li>由于filter的边长大于S，会造成每次移动滑窗后有交集部分，交集部分意味着多次提取特征，尤其表现在图像的中间区域提取次数较多，边缘部分提取次数较少，怎么办？    </li>
</ul>
<p><em>一般方法是在图像外围加一圈0，细心的同学可能已经注意到了，在演示案例中已经加上这一圈0了，即+pad 1。 +pad n表示加n圈0.</em></p>
<ul>
<li>一次卷积后的输出特征图的尺寸是多少呢？<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFregguAJvoGAAATqFaF_Pk601.png" alt="image"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFreggyAVvcCAACg_W9CZgQ877.png" alt="image"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFreggyAWtpLAADAYQTV2bk952.png" alt="image"></li>
</ul>
</blockquote>
<p>==<strong>注意：在一层卷积操作里可以有多个filter，他们是尺寸必须相同。</strong>==</p>
<h3 id="1-3-卷积神经网络的组成："><a href="#1-3-卷积神经网络的组成：" class="headerlink" title="1.3 卷积神经网络的组成："></a>1.3 <strong>卷积神经网络的组成：</strong></h3><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFreggyAFTuVAAEZZ59r0Cs173.png" alt="image"><br>卷积——激活——卷积——激活——池化——……——池化——全连接——分类或回归</p>
</blockquote>
<h3 id="1-4-前向传播与反向传播"><a href="#1-4-前向传播与反向传播" class="headerlink" title="1.4 前向传播与反向传播"></a>1.4 <strong>前向传播与反向传播</strong></h3><h4 id="1-4-1-前向传播"><a href="#1-4-1-前向传播" class="headerlink" title="1.4.1 前向传播"></a>1.4.1 前向传播</h4><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFregg2ATy5SAAEQUsv9WF8019.png" alt="image">   </p>
</blockquote>
<h4 id="1-4-2-反向传播"><a href="#1-4-2-反向传播" class="headerlink" title="1.4.2 反向传播"></a>1.4.2 反向传播</h4><h4 id="1-4-3-训练一个CGGNet需要的内存开销"><a href="#1-4-3-训练一个CGGNet需要的内存开销" class="headerlink" title="1.4.3 训练一个CGGNet需要的内存开销"></a>1.4.3 训练一个CGGNet需要的内存开销</h4><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFregg-AEan1AAMj4rvJat4359.png" alt="image"></p>
</blockquote>
<h3 id="1-2-残差网络-Residual-Network"><a href="#1-2-残差网络-Residual-Network" class="headerlink" title="1.2 残差网络(Residual Network)"></a>1.2 <a id="残差网络"><a href="https://baike.baidu.com/item/%E6%AE%8B%E5%B7%AE%E7%BD%91%E7%BB%9C/22701838?fr=aladdin">残差网络</a></a>(Residual Network)</h3><p>论文出处：<a href="https://jums.club/pdf/Deep_Residual_Learning_for_Image_Recognition.pdf">Deep Residual Learning for Image Recognition.pdf</a></p>
<blockquote>
<p>残差网络是由来自Microsoft Research的4位学者提出的卷积神经网络，在2015年的ImageNet大规模视觉识别竞赛（ImageNet Large Scale Visual Recognition Challenge, ILSVRC）中获得了图像分类和物体识别的优胜。 残差网络的特点是容易优化，并且能够通过增加相当的深度来提高准确率。其内部的残差块使用了跳跃连接，缓解了在深度神经网络中增加深度带来的梯度消失问题</p>
</blockquote>
<blockquote>
<p>我们都知道增加网络的宽度和深度可以很好的提高网络的性能，深的网络一般都比浅的的网络效果好，比如说一个深的网络A和一个浅的网络B，那A的性能至少都能跟B一样，为什么呢？因为就算我们把B的网络参数全部迁移到A的前面几层，而A后面的层只是做一个等价的映射，就达到了B网络的一样的效果。一个比较好的例子就是VGG，该网络就是在AlexNex的基础上通过增加网络深度大幅度提高了网络性能。<br>对于原来的网络，如果简单地增加深度，会导致<a href="#梯度消失">梯度弥散</a>或<a href="#梯度爆炸">梯度爆炸</a>。对于该问题的解决方法是正则化初始化和中间的正则化层（Batch Normalization），这样的话可以训练几十层的网络。<br>虽然通过上述方法能够训练了，但是又会出现另一个问题，就是退化问题，网络层数增加，但是在训练集上的准确率却饱和甚至下降了。这个不能解释为overfitting，因为overfit应该表现为在训练集上表现更好才对。退化问题说明了深度网络不能很简单地被很好地优化。作者通过实验：通过浅层网络等同映射构造深层模型，结果深层模型并没有比浅层网络有等同或更低的错误率，推断退化问题可能是因为深层的网络并不是那么好训练，也就是求解器很难去利用多层网络拟合同等函数。</p>
</blockquote>
<h3 id="1-3-梯度消失"><a href="#1-3-梯度消失" class="headerlink" title="1.3 梯度消失"></a>1.3 <a id="梯度消失">梯度消失</a></h3><p><strong>概念</strong><br>在神经网络中，当前面隐藏层的学习速率低于后面隐藏层的学习速率，即随着隐藏层数目的增加，分类准确率反而下降了。这种现象叫做消失的梯度问题<br><strong>梯度消失产生的原因</strong>   </p>
<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191119094513.png" alt="image"></p>
</blockquote>
<h3 id="1-4-梯度爆炸"><a href="#1-4-梯度爆炸" class="headerlink" title="1.4 梯度爆炸"></a>1.4 <a id="梯度爆炸">梯度爆炸</a></h3><p>梯度爆炸是梯度消失（梯度弥散）的对立面</p>
<h3 id="1-5-梯度消失和梯度爆炸的解决方案"><a href="#1-5-梯度消失和梯度爆炸的解决方案" class="headerlink" title="1.5 梯度消失和梯度爆炸的解决方案"></a>1.5 梯度消失和梯度爆炸的解决方案</h3><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/39a9707f892b4d39811a2d3ad0c67ff2.jpg" alt="image"><br>举个例子，对于一个含有三层隐藏层的简单神经网络来说，当梯度消失发生时，接近于输出层的隐藏层由于其梯度相对正常，所以权值更新时也就相对正常，但是当越靠近输入层时，由于梯度消失现象，会导致靠近输入层的隐藏层权值更新缓慢或者更新停滞。这就导致在训练时，只等价于后面几层的浅层网络的学习。</p>
</blockquote>
<p>==<strong>梯度消失和梯度爆炸本质上是一样的，都是因为网络层数太深而引发的梯度反向传播中的连乘效应。</strong>==<br><strong>解决方案：</strong></p>
<ul>
<li>换用<a href="#ReLU函数">Relu</a>、<a href="#LeakyReLU函数">LeakyRelu</a>、<a href="#ELU函数">Elu</a>等激活函数</li>
<li><a href="#残差网络">ResNet残差结构</a></li>
<li>BatchNormalization BN本质上是解决传播过程中的梯度问题</li>
<li>LSTM结构 LSTM不太容易发生梯度消失，主要原因在于LSTM内部复杂的“门（gates）”，具体看LSTM基本原理解析</li>
<li>预训练加finetunning 此方法来自Hinton在06年发表的论文上，其基本思想是每次训练一层隐藏层节点，将上一层隐藏层的输出作为输入，而本层的输出作为下一层的输入，这就是逐层预训练。 训练完成后，再对整个网络进行“微调（fine-tunning）”。 此方法相当于是找全局最优，然后整合起来寻找全局最优，但是现在基本都是直接拿imagenet的预训练模型直接进行finetunning。</li>
<li>梯度剪切、正则<br>这个方案主要是针对梯度爆炸提出的，其思想是设值一个剪切阈值，如果更新梯度时，梯度超过了这个阈值，那么就将其强制限制在这个范围之内。这样可以防止<a href="#梯度爆炸">梯度爆炸</a>。<br>另一种防止梯度爆炸的手段是采用权重正则化，正则化主要是通过对网络权重做正则来限制过拟合，但是根据正则项在损失函数中的形式可以看出，如果发生梯度爆炸，那么权值的范数就会变的非常大，反过来，通过限制正则化项的大小，也可以在一定程度上限制梯度爆炸的发生。</li>
</ul>
<hr>
<h3 id="2-卷积神经网络的实现"><a href="#2-卷积神经网络的实现" class="headerlink" title="2 卷积神经网络的实现"></a>2 卷积神经网络的实现</h3><p>下面B站上的一个视频：  </p>
<iframe src="//player.bilibili.com/player.html?aid=24673328&cid=41481052&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="700" height="480"> </iframe>       


<p>视频2：   </p>
<iframe src="//player.bilibili.com/player.html?aid=39049499&cid=68618808&page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="700" height="480"> </iframe>


<p>可以参考一下该博客：<a href="https://www.cnblogs.com/further-further-further/p/10430073.html">卷积神经网络(CNN)详解与代码实现</a></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>composer使用教程以及curl error 7 while downloading https://repo.packagist.org/xxx: Failed to connect to 127.0.0.1 port 8888: Connection refused问题解决</title>
    <url>/composer-tutorials/</url>
    <content><![CDATA[<h2 id="1-何为composer"><a href="#1-何为composer" class="headerlink" title="1 何为composer"></a>1 何为composer</h2><p><strong>A Dependency Manager for PHP</strong>这是composer的<a href="https://getcomposer.org/">官网</a>给自己的定义。composer是PHP语言中的一个包管理器，类似Java中的maven。</p>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h2><h3 id="2-1-Windows安装"><a href="#2-1-Windows安装" class="headerlink" title="2.1 Windows安装"></a>2.1 Windows安装</h3><ul>
<li><p>下载安装包自动安装</p>
<blockquote>
<p>点击<a href="https://getcomposer.org/Composer-Setup.exe">Composer-Setup.exe</a>下载windows下的二进制安装包。下载完成之后，直接<strong>下一步</strong>安装即可。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/How-to-Install-Composer-on-Windows-Specify-PHP-File-Location.png" alt=""></p>
</blockquote>
</li>
<li><p>手动安装</p>
<blockquote>
<p>翻页到composer官网的下半部分，选择<strong>manual download</strong>：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210804171124.png" alt=""></p>
<p>下载的是一个文件，文件名为：<strong>composer.phar</strong>，将这个文件放到自己的composer的文件夹中，然后将PHP的二进制可执行文件添加到Windows的环境变量中。</p>
<p>然后手动创建一个文件，文件名为：<strong>composer.bat</strong>，在该文件中写入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">php &quot;%~dp0composer.phar&quot; %*</span><br></pre></td></tr></table></figure>

<p>保存之后，双击这个文件运行，然后就可以在命令行中使用<code>composer</code>命令测试是否安装成功。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210804171528.png" alt=""></p>
</blockquote>
</li>
</ul>
<h2 id="3-composer关闭127-0-0-0-8888代理"><a href="#3-composer关闭127-0-0-0-8888代理" class="headerlink" title="3 composer关闭127.0.0.0:8888代理"></a>3 composer关闭127.0.0.0:8888代理</h2><p>安装composer的时候，默认指定了一个代理，安装完之后，发现总是提示一个错误，错误信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl error 7 <span class="keyword">while</span> downloading https://repo.packagist.org/p2/monolog/monolog.json: Failed to connect to 127.0.0.1 port 8888: Connection refused</span><br></pre></td></tr></table></figure>

<p>原因分析：这个错误提示是composer在进行包下载的时候，走了本地电脑设置的代理，这个代理地址和端口号是<code>127.0.0.1:8888</code>，如果想要修正这个错误，只需要将本地电脑中的代理删除即可，有两个地方需要查看，一个是系统环境变量中的代理和用户变量中的代理：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210804180721.png" alt=""></p>
<p>删除代理之后，重新打开命令行或者<strong>jet brain</strong>软件，然后执行<code>composer update -vvv</code>查看效果：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210804180817.png" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.runoob.com/w3cnote/composer-install-and-usage.html">https://www.runoob.com/w3cnote/composer-install-and-usage.html</a></li>
<li><a href="https://packagist.org/">https://packagist.org/</a></li>
<li><a href="https://docs.phpcomposer.com/01-basic-usage.html">https://docs.phpcomposer.com/01-basic-usage.html</a></li>
<li><a href="https://docs.phpcomposer.com/">https://docs.phpcomposer.com/</a></li>
<li><a href="https://pkg.phpcomposer.com/">中国全量镜像</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>一些计算机相关的电子书推荐与下载</title>
    <url>/computer-around-ebook/</url>
    <content><![CDATA[<h3 id="0-声明"><a href="#0-声明" class="headerlink" title="0 声明"></a>0 声明</h3><blockquote>
<p>这是我从大学以后，下载和学习的一些电子书资料，今天我做了一个整理。我的专业是计算机，所以更多的书籍是计算机相关的，包括编程语言的教程书籍、计算机技术的原理解析、编程框架讲解等，其中还有些书籍会附上代码，代码我放到我的<a href="https://github.com/crazyjums">Github</a>上，大家有需要的话，可以自行下载。</p>
</blockquote>
<h3 id="1-计算机相关电子书"><a href="#1-计算机相关电子书" class="headerlink" title="1 计算机相关电子书"></a>1 计算机相关电子书</h3><h4 id="1-1-Python编程"><a href="#1-1-Python编程" class="headerlink" title="1.1 Python编程:"></a>1.1 Python编程:</h4><ul>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Effective_Python_编写高质量Python代码的59个有效方法_印刷版.pdf">Effective_Python_编写高质量Python代码的59个有效方法_印刷版</a>    </li>
<li><a href="https://crazyjums.coding.net/s/be9aae6b-d22a-4b96-b900-fd1c3fc90630">Flask_Web开发_基于Python的Web应用开发实战_精装版</a>    </li>
<li><a href="https://crazyjums.coding.net/s/253e13d3-3824-4c7c-b5f9-074d775039ad">Head_First_Python_印刷版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python_核心编程_第二版_精装版.pdf">Python_核心编程_第二版_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python3.2.3官方文档_中文版_.pdf">Python3.2.3官方文档<em>中文版</em></a>    </li>
<li><a href="https://crazyjums.coding.net/s/8a438c15-7dc6-45fb-9d40-925e195a470c">Python开发技术详解_印刷版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python核心编程_中文第二版_带目录.pdf">Python核心编程_中文第二版_带目录</a>    </li>
<li><a href="https://crazyjums.coding.net/s/4f705582-6a13-4b62-b062-79657797a7e8">Python核心编程_第3版_精装版</a>    </li>
<li><a href="https://crazyjums.coding.net/s/a5289c73-d6d8-445a-af67-a6140fe1e703">Python源码剖析-深度探索动态语言核心技术_印刷版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python源码剖析_精装版.pdf">Python源码剖析_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python练习100例_无目录.pdf">Python练习100例_无目录</a>    </li>
<li><a href="https://crazyjums.coding.net/s/56983ad7-8465-46eb-a24e-f612241c2241">Python编程实战_运用设计模式_并发和程序库创建高质量程序_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python自动化运维_精装版.pdf">Python自动化运维_精装版</a>    </li>
<li><a href="https://crazyjums.coding.net/s/4acb37a4-9298-4310-ac1b-6548d26213aa">Python进阶<em>目录有一定的指导作用_内容不建议阅读</em></a>    </li>
<li><a href="https://crazyjums.coding.net/s/220c2529-0530-4a2c-968d-ce06e16fc09f">Python高级编程_印刷版</a>    </li>
<li><a href="https://crazyjums.coding.net/s/d6ef0bd4-1749-49e2-8250-1592178201a8">Raspberry_Pi_Python_编程入门_印刷版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/可爱的Python_精装版.pdf">可爱的Python_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/流畅的Python_精装版.pdf">流畅的Python_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/深入_Python_3_精装版.pdf">深入_Python_3_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/深入理解Python_精装版.pdf">深入理解Python_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/用Python写网络爬虫_印刷版.pdf">用Python写网络爬虫_印刷版</a>    </li>
<li><a href="https://crazyjums.coding.net/s/3af9bd91-e0e5-492c-afc7-30027f18d2b9">编写高质量代码_改善Python程序的91个建议_印刷版</a>    </li>
<li><a href="https://crazyjums.coding.net/s/99984ba7-956e-4926-9483-f5abd83f7b75">Python.Cookbook_第2版__印刷版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python_Cookbook第三版_精装版.pdf">Python_Cookbook第三版_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Python极客项目编程__Mahesh_Venkitachalam_精装版.pdf">Python极客项目编程__Mahesh_Venkitachalam_精装版</a> | <a href="https://github.com/crazyjums/python_geke">Github Code</a> </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/python标准库.pdf">python标准库</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/python_cookbook_第3版__精装版.pdf">python_cookbook_第3版__精装版</a> | <a href="https://github.com/crazyjums/python_cookbook_code">Github Code</a></li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/python绝技_运用python成为顶级黑客_无目录.pdf">python绝技_运用python成为顶级黑客_无目录</a>  </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/thinkpython_english.pdf">thinkpython_english</a>    </li>
<li><a href="https://crazyjums.coding.net/s/99e528dc-9a7f-4a01-93b8-d19dfe008817">智慧编程_python算法应用_印刷版</a>    </li>
<li>Django<ul>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/精通_Django_精装版.pdf">精通_Django_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/django_book_精装版.pdf">django_book_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Django_Web开发指南_印刷版.pdf">Django_Web开发指南_印刷版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/django1.9官方文档.pdf">django1.9官方文档</a>    </li>
</ul>
</li>
</ul>
<h4 id="1-2-SQL"><a href="#1-2-SQL" class="headerlink" title="1.2 SQL:"></a>1.2 SQL:</h4><ul>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/SQL注入天书.pdf">SQL注入天书</a>    </li>
<li><a href="https://crazyjums.coding.net/s/edb108c9-c53d-43c6-b19f-eed5a9bd7dda">SQL注入攻击与防御_印刷版</a>    </li>
</ul>
<h4 id="1-3-Linux"><a href="#1-3-Linux" class="headerlink" title="1.3 Linux"></a>1.3 Linux</h4><ul>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/深入理解Linux内核_精装版.pdf">深入理解Linux内核_精装版</a>    </li>
<li><a href="https://crazyjums.coding.net/s/50d37e48-9c9f-42b3-abf8-a9b3bee7f1d0">Kali_Linux渗透测试技术详解_精装版</a>    </li>
<li>Kali_Linux无线网络渗透测试:   <ul>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Kali_Linux无线网络渗透测试教程1章_精装版.pdf">Kali_Linux无线网络渗透测试教程1章_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Kali_Linux无线网络渗透测试教程2章_精装版.pdf">Kali_Linux无线网络渗透测试教程2章_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/Kali_Linux无线网络渗透测试教程3章_精装版.pdf">Kali_Linux无线网络渗透测试教程3章_精装版</a>  </li>
</ul>
</li>
<li>Shell<ul>
<li><a href="https://crazyjums.coding.net/s/010fd9e6-67d1-468d-885a-577c36bb6131">Shell脚本学习指南_精装版</a>    </li>
</ul>
</li>
</ul>
<h4 id="1-4-Web技术："><a href="#1-4-Web技术：" class="headerlink" title="1.4 Web技术："></a>1.4 Web技术：</h4><ul>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/BurpSuite使用说明_精装版.pdf">BurpSuite使用说明_精装版</a></li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/TCPIP协议及网络编程技术_印刷版.pdf">TCPIP协议及网络编程技术_印刷版</a></li>
<li><a href="https://crazyjums.coding.net/s/d146183a-c2cc-4824-b47b-f242821231a5">CSS权威指南_第三版_印刷版</a>     </li>
<li>TCP-IP详解:  <ul>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/TCP-IP详解卷一_协议_精装版.pdf">TCP-IP详解卷一_协议_精装版</a>    </li>
<li><a href="https://crazyjums.coding.net/s/c52218ec-6d98-4d85-af28-742ffd1c8c2c">TCP-IP详解卷二_实现_精装版</a> </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/TCP-IP详解卷三_TCP事务协议_HTTP_NNTP和UNIX域协议_精装版.pdf">TCP-IP详解卷三_TCP事务协议_HTTP_NNTP和UNIX域协议_精装版</a>    </li>
</ul>
</li>
<li><a href="https://crazyjums.coding.net/s/91d5e469-d568-4e15-90d6-2db7e4378a9f">HTTPS权威指南_在服务器和Web应用上部署SSL&amp;TLS和PKI_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/HTTP协议详解.pdf">HTTP协议详解</a>    </li>
<li><a href="https://crazyjums.coding.net/s/4c87a0db-e68d-46af-b2fe-92c61e608bc7">HTTP权威指南_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/图解HTTP__精装版.pdf">图解HTTP__精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/TCP-IP详解卷三_TCP事务协议_HTTP_NNTP和UNIX域协议_精装版.pdf">TCP-IP详解卷三_TCP事务协议_HTTP_NNTP和UNIX域协议_精装版</a>    </li>
</ul>
<h4 id="1-5-分布式："><a href="#1-5-分布式：" class="headerlink" title="1.5 分布式："></a>1.5 分布式：</h4><ul>
<li><a href="https://crazyjums.coding.net/s/4f318cb5-9268-4082-abc5-2160adfacc73">第一本Docker书_精装版</a>    </li>
</ul>
<h4 id="1-6-软件设计："><a href="#1-6-软件设计：" class="headerlink" title="1.6 软件设计："></a>1.6 软件设计：</h4><ul>
<li><a href="https://crazyjums.coding.net/s/75908464-88df-4608-a8fb-70e40f7445ff">重构_改善既有代码的设计_印刷版</a>    </li>
<li><a href="https://crazyjums.coding.net/s/097095c2-85e4-422e-aff9-ca2ed000090e">大话设计模式_带目录完整版__印刷版</a>    </li>
</ul>
<h4 id="1-7-爬虫技术："><a href="#1-7-爬虫技术：" class="headerlink" title="1.7 爬虫技术："></a>1.7 爬虫技术：</h4><ul>
<li><a href="https://crazyjums.coding.net/s/6cfd5baa-71f1-4619-a03a-230ca18ffceb">自己动手写网络爬虫-Java_印刷版</a>     </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/用Python写网络爬虫_印刷版.pdf">用Python写网络爬虫_印刷版</a>    </li>
<li>抓包分析工具书：<ul>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/BurpSuite使用说明_精装版.pdf">BurpSuite使用说明_精装版</a>    </li>
<li><a href="https://crazyjums.coding.net/s/9d0a4333-1bf1-40fe-9864-912728481af1">Fiddler调试权威指南_精装版</a>     </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/超级网络分析工具Sniffer_Pro详解_图文__精装版.pdf">超级网络分析工具Sniffer_Pro详解_图文__精装版</a>    </li>
</ul>
</li>
</ul>
<h4 id="1-8-Java编程"><a href="#1-8-Java编程" class="headerlink" title="1.8 Java编程"></a>1.8 Java编程</h4><ul>
<li><a href="https://crazyjums.coding.net/s/9b2efb54-6c14-46b8-b3a8-43c30835c0e8">Effective_Java中文版_第2版_精装版</a>    </li>
<li><a href="https://crazyjums.coding.net/s/6cfd5baa-71f1-4619-a03a-230ca18ffceb">自己动手写网络爬虫-Java_印刷版</a></li>
</ul>
<h3 id="2-文学电子书"><a href="#2-文学电子书" class="headerlink" title="2 文学电子书"></a>2 文学电子书</h3><h4 id="2-1-国内文学"><a href="#2-1-国内文学" class="headerlink" title="2.1 国内文学"></a>2.1 国内文学</h4><ul>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/我不_无目录.pdf">我不_无目录</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/代码之美+浪潮之巅+数学之美_完整版__精装版.pdf">代码之美+浪潮之巅+数学之美_完整版__精装版</a>   </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/他们最幸福_大冰_精装版.pdf">他们最幸福_大冰_精装版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/红太阳是怎样升起的_延安整风运动的来龙去脉_无目录版.pdf">红太阳是怎样升起的_延安整风运动的来龙去脉_无目录版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/杨继绳_中国改革年代的政治斗争_精装版.pdf">杨继绳_中国改革年代的政治斗争_精装版</a>    <h4 id="2-2-国外文学"><a href="#2-2-国外文学" class="headerlink" title="2.2 国外文学"></a>2.2 国外文学</h4></li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/毛姆作品_月亮与六便士_精装版.pdf">毛姆作品_月亮与六便士_精装版</a>    </li>
<li><a href="https://crazyjums.coding.net/s/b2a92d7d-69a0-4a55-a9bf-507e5746769b">施瓦辛格健身全书_无目录版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/爱的艺术_印刷版.pdf">爱的艺术_印刷版</a>    </li>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/路西法效应_精装版.pdf">路西法效应_精装版</a>    </li>
</ul>
<h3 id="3-其他"><a href="#3-其他" class="headerlink" title="3 其他"></a>3 其他</h3><ul>
<li><a href="https://cdn.jsdelivr.net/gh/crazyjums/MarkdownPic@master/pdf/北京员工宿舍入住须知.pdf">北京员工宿舍入住须知</a>    </li>
</ul>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>share</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你玩转hexo个人博客，自定义主题，博客发布，GitHub部署</title>
    <url>/conclusion-hexo-1/</url>
    <content><![CDATA[<h3 id="1-总结"><a href="#1-总结" class="headerlink" title="1.总结"></a>1.总结</h3><p>最近几天一直在玩<a href="https://hexo.io/">hexo</a>个人博客，因为一直就想弄一个这样的博客平台，一个是为了兴趣，还有一个就是为了找工作的时候能够让面试官觉得自己很牛逼（这里涉及到社会学知识点，下次有机会我们再谈），所以就花了一点时间，弄了一下，也发现了一些坑，这里和大家一起分享一下。</p>
<h3 id="2-开始搭建hexo平台"><a href="#2-开始搭建hexo平台" class="headerlink" title="2.开始搭建hexo平台"></a>2.开始搭建hexo平台</h3><h4 id="2-1-前提"><a href="#2-1-前提" class="headerlink" title="2.1 前提"></a>2.1 前提</h4><p>因为hexo是一个基于node.js开发的一个博客平台，可以将Markdown文件也就是以.md为扩展名的文件生成为静态文件，然后在自动将其部署到整个系统的其他固定页面（比如：tags,archives等）中。我们还可以将其部署到GitHub上，这样就实现了可以通过互联网访问的目的了，我们最终的目的也就是通过互联网访问。</p>
<ul>
<li>安装<a href="https://git-scm.com/downloads">git</a> 建议大家的所有操作都在git控制台进行操作，git控制台的类似Linux的命令，但不是所有Linux命令都支持，基本命令都已使用，真的很好用。<strong>力荐</strong></li>
<li>安装<a href="https://nodejs.org/en/">node.js</a><br>大家安装提示进行安装就可以，安装完成之后，我们才可以进行下面的操作</li>
</ul>
<h4 id="2-2-通过npm-node-package-manager-安装hexo"><a href="#2-2-通过npm-node-package-manager-安装hexo" class="headerlink" title="2.2 通过npm(node package manager)安装hexo"></a>2.2 通过npm(node package manager)安装hexo</h4><blockquote>
<p>npm install -g hexo-cli或者npm i -g hexo-cli或者npm<br>hexo可以支持代码简写：<br>hexo generate = hexo g  编译网页文件<br>hexo deploy = hexo d 部署到GitHub等平台<br>hexo server/start = hexo s 开启本地预览服务，访问地址：<a href="http://localhost:4000">http://localhost:4000</a><br>这里是几个hexo主要用到的命令，其他的可以通过命令hexo –help查看</p>
</blockquote>
<h4 id="2-3-生成自己的hexo博客"><a href="#2-3-生成自己的hexo博客" class="headerlink" title="2.3 生成自己的hexo博客"></a>2.3 生成自己的hexo博客</h4><p>随便找一个目录，存放我们的个人博客所有的源代码，为了后期维护，大家尽量找一个空间大一些的盘进行文件存放<br>第一步：</p>
<blockquote>
<p>hexo init <folder> or hexo i <folder>  </p>
</blockquote>
<p><folder>是你的存放个人博客文件的文件夹的名字<br>比如：hexo i hexo-blog  那么系统会自动生成一个名为hexo-blog的文件夹，并且会配有相应的文件目录结构，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article//20191118102100.png" alt="">     </p>
<p>第二步：</p>
<blockquote>
<p>hexo generate or hexo g  生成编译之后的静态网页文件</p>
</blockquote>
<p>第三步：</p>
<blockquote>
<p>hexo start/server or hexo s    </p>
</blockquote>
<p>第二步和第三步可以通过下面的一条语句执行：</p>
<blockquote>
<p>hexo s -g //但是这样做的话，是不会生成public/文件夹的，该文件夹是存放编译完之后的所有静态网页的文件夹</p>
</blockquote>
<p>第四步：<br>在浏览器中输入<a href="http://localhost:4000地址进行访问，访问效果如下：">http://localhost:4000地址进行访问，访问效果如下：</a><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article//20191118102814.png" alt="image">   </p>
<h4 id="2-4-修改hexo主题"><a href="#2-4-修改hexo主题" class="headerlink" title="2.4 修改hexo主题"></a>2.4 修改hexo主题</h4><p>通过git控制台，cd到我们的博客目录下，然后在<a href="https://hexo.io/themes/">hexo themes</a>网站上找到自己喜欢的主题，使用git clone命令将其克隆到自己的博客目录下即可。这里以我的主题为例，我用的是基于<a href="https://github.com/Molunerfinn/hexo-theme-melody">melody</a>的<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a><br>通过下面的命令克隆主题，该主题需要一个渲染插件，还得安装一下下面的插件，否则不会生效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/Molunerfinn/hexo-theme-melody.git themes/melody</span><br><span class="line">$ npm install hexo-renderer-jade hexo-renderer-stylus</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果想修改该主题的参数，进行自定义的话，可以参开这个<a href="https://github.com/jerryc127/hexo-theme-butterfly">文档</a></p>
<h4 id="2-5-发布博客"><a href="#2-5-发布博客" class="headerlink" title="2.5 发布博客"></a>2.5 发布博客</h4><p>发布post博客，有如下命令：</p>
<blockquote>
<p>hexo new “title” 如：hexo new “my first post”</p>
</blockquote>
<p>创建完的post博客文件格式如下：<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191118104655.png" alt="image"></p>
<p>下面这条命令是发布一个网页，不会在主页或者archives中显示的，类似于【主页】这么一个静态网页</p>
<blockquote>
<p>hexo new page “my first page” 如：hexo new page “tags”</p>
</blockquote>
<p>hexo中只有主页和archives是已经创建好的，其他的都是需要我们手动创建的，用的就是这条命令，创建完的文件如下：<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191118104450.png" alt="image"></p>
<p>创建完post博客之后，我们通过Markdown编辑器编辑好，我们就可以发布到GitHub上，发布命令：</p>
<blockquote>
<p>hexo deploy or hexo d</p>
</blockquote>
<h5 id="2-5-1-如何写博客"><a href="#2-5-1-如何写博客" class="headerlink" title="2.5.1 如何写博客"></a>2.5.1 如何写博客</h5><p>博客的front master也就是上面的固定格式，我们可以通过一些参数进行修改，这里附上<a href="https://hexo.io/zh-cn/docs/writing">官网</a>的一些修改意见。   </p>
<ul>
<li>tags: 标签修改</li>
<li>top_img: 置顶图片</li>
<li>cover: 博客封面</li>
<li>categories: 分类，我这里一直显现不了，所以大家看看你们的情况吧，书写规范类似tags</li>
</ul>
<h4 id="2-6-部署到GitHub"><a href="#2-6-部署到GitHub" class="headerlink" title="2.6 部署到GitHub"></a>2.6 部署到GitHub</h4><p>修改博客根目录下的_config.yml文件（<strong>注意：这里不是themes目录下的_config.yml文件</strong>）<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191118105240.png" alt="image"><br>安装上面的形式配置完自己的GitHub参数即可</p>
<ul>
<li>type: 这里写git 因为是通过GitHub部署</li>
<li>repo: 仓库的意思，写自己存放博客的仓库，必须是page版的</li>
<li>branch: 分支，一般是master，如果有变动的话，写自己的博客文件分支</li>
</ul>
<h3 id="3-hexo博客美化"><a href="#3-hexo博客美化" class="headerlink" title="3.hexo博客美化"></a>3.hexo博客美化</h3><h4 id="3-1-为hexo博客添加本地搜索引擎"><a href="#3-1-为hexo博客添加本地搜索引擎" class="headerlink" title="3.1 为hexo博客添加本地搜索引擎"></a>3.1 <a href="https://crazyjums.github.io/2019/11/16/hexo-search-function/">为hexo博客添加本地搜索引擎</a></h4><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>summary</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo绑定个人域名之后，不能访问，已经解决</title>
    <url>/config-ssh-for-github/</url>
    <content><![CDATA[<h3 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1 发现问题"></a>1 发现问题</h3><p>昨天为了优化SEO，我给我的GitHub page 加了一个三方包，如下：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>但是，当我再次hexo d的时候，发现本地的hexo可用，但是GitHub page就用不了了，因为我用了域名解析，用的腾讯云的域名解析系统，可以参考我的这篇博客，<a href="https://jums.club/personal-domain-for-github-page/">如何用一元开通自己的个性域名</a><br>当我使用<a href="https://jums.club/">https://jums.club/</a>进行访问时，发现出现了下面的界面：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124093619.png" alt="error page">   </p>
<h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>发现了问题，当然得解决问题，否则发现问题就没有什么意义了。<br>首先我百度了一下，看了一篇<a href="https://blog.csdn.net/tr1912/article/details/80673610">博客</a>，看了一下，然后我的问题解决，虽然是百度的，但是问题能解决就行。<br>我发现我的GitHub page 的域名绑定突然好像失效了，所以我又从新绑定了一下，我是用的是IP地址和GitHub page 的域名同时绑定到我的个人域名上，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124095621.png" alt="domain photo"><br><strong>如何获取GitHub page的IP地址：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124095730.png" alt="github page ip">   </p>
<p><strong>最后：</strong>   </p>
<blockquote>
<p>最后，问题终于解决，就是域名没有绑定，绑定完之后，渠道GitHub page 的setting界面，可以看到如下配置，即为配置成功。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124100230.png" alt="success config"></p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>c++中指针和引用的区别？</title>
    <url>/cpp-point-reference/</url>
    <content><![CDATA[<h2 id="1-引用基础教程"><a href="#1-引用基础教程" class="headerlink" title="1 引用基础教程"></a>1 引用基础教程</h2><p>我们知道，参数的传递本质上是一次赋值的过程，赋值就是对内存进行拷贝。所谓内存拷贝，是指将一块内存上的数据复制到另一块内存上。</p>
<p>对于像 char、bool、int、float 等基本类型的数据，它们占用的内存往往只有几个字节，对它们进行内存拷贝非常快速。而数组、结构体、对象是一系列数据的集合，数据的数量没有限制，可能很少，也可能成千上万，对它们进行频繁的内存拷贝可能会消耗很多时间，拖慢程序的执行效率。</p>
<p>C/<a href="http://c.biancheng.net/cplus/">C++</a> 禁止在函数调用时直接传递数组的内容，而是强制传递数组<a href="http://c.biancheng.net/c/80/">指针</a>，这点已在《<a href="http://c.biancheng.net/view/2014.html">C语言指针变量作为函数参数</a>》中进行了讲解。而对于结构体和对象没有这种限制，调用函数时既可以传递指针，也可以直接传递内容；为了提高效率，我曾建议传递指针，这样做在大部分情况下并没有什么不妥，读者可以点击《<a href="http://c.biancheng.net/view/2033.html">C语言结构体指针</a>》进行回顾。</p>
<p>但是在 C++ 中，我们有了一种比指针更加便捷的传递聚合类型数据的方式，那就是<strong>引用（Reference）</strong>。</p>
<blockquote>
<p>在 C/C++ 中，我们将 char、int、float 等由语言本身支持的类型称为基本类型，将数组、结构体、类（对象）等由基本类型组合而成的类型称为聚合类型（在讲解结构体时也曾使用复杂类型、构造类型这两种说法）。</p>
</blockquote>
<p>引用（Reference）是 C++ 相对于C语言的又一个扩充。引用可以看做是数据的一个别名，通过这个别名和原来的名字都能够找到这份数据。引用类似于 Windows 中的快捷方式，一个可执行程序可以有多个快捷方式，通过这些快捷方式和可执行程序本身都能够运行程序；引用还类似于人的绰号（笔名），使用绰号（笔名）和本名都能表示一个人。</p>
<p>引用的定义方式类似于指针，只是用<code>&amp;</code>取代了<code>*</code>，语法格式为：</p>
<p>type &amp;name = data;</p>
<p>type 是被引用的数据的类型，name 是引用的名称，data 是被引用的数据。<strong>引用必须在定义的同时初始化，并且以后也要从一而终，不能再引用其它数据，这有点类似于常量（const 变量）</strong>。</p>
<p>下面是一个演示引用的实例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">int</span> &amp;r = a;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; r &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &amp;a &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; &amp;r &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>99, 99<br>0x28ff44, 0x28ff44</p>
</blockquote>
<p>本例中，变量 r 就是变量 a 的引用，它们用来指代同一份数据；也可以说变量 r 是变量 a 的另一个名字。从输出结果可以看出，a 和 r 的地址一样，都是<code>0x28ff44</code>；或者说地址为<code>0x28ff44</code>的内存有两个名字，a 和 r，想要访问该内存上的数据时，使用哪个名字都行。</p>
<p>注意，引用在定义时需要添加<code>&amp;</code>，在使用时不能添加<code>&amp;</code>，使用时添加<code>&amp;</code>表示取地址。如上面代码所示，第5行中的<code>&amp;</code>表示引用，第 7 行中的<code>&amp;</code>表示取地址。除了这两种用法，<code>&amp;</code>还可以表示位运算中的与运算。</p>
<p>由于引用 r 和原始变量 a 都是指向同一地址，所以通过引用也可以修改原始变量中所存储的数据，请看下面的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">int</span> &amp;r = a;</span><br><span class="line">    r = <span class="number">47</span>;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; r &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>47, 47</p>
</blockquote>
<p>最终程序输出两个 47，可见原始变量 a 的值已经被引用变量 r 所修改。</p>
<p>如果读者不希望通过引用来修改原始的数据，那么可以在定义时添加 const 限制，形式为：</p>
<p>const type &amp;name = value;</p>
<p>也可以是：</p>
<p>type const &amp;name = value;</p>
<p>这种引用方式为常引用</p>
<h3 id="1-1-C-引用作为函数参数"><a href="#1-1-C-引用作为函数参数" class="headerlink" title="1.1 C++引用作为函数参数"></a>1.1 C++引用作为函数参数</h3><p>在定义或声明函数时，我们可以将函数的形参指定为引用的形式，这样在调用函数时就会将实参和形参绑定在一起，让它们都指代同一份数据。如此一来，如果在函数体中修改了形参的数据，那么实参的数据也会被修改，从而拥有“在函数内部影响函数外部数据”的效果。</p>
<p>至于实参和形参是如何绑定的，我们将在下节《<a href="http://c.biancheng.net/view/vip_2252.html">C++引用在本质上是什么，它和指针到底有什么区别？</a>》中讲解，届时我们会一针见血地阐明引用的本质。</p>
<p>一个能够展现按引用传参的优势的例子就是交换两个数的值，请看下面的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span> *p1, <span class="keyword">int</span> *p2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap3</span><span class="params">(<span class="keyword">int</span> &amp;r1, <span class="keyword">int</span> &amp;r2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1, num2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Input two integers: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line">    <span class="built_in">swap1</span>(num1, num2);</span><br><span class="line">    cout &lt;&lt; num1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Input two integers: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line">    <span class="built_in">swap2</span>(&amp;num1, &amp;num2);</span><br><span class="line">    cout &lt;&lt; num1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Input two integers: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line">    <span class="built_in">swap3</span>(num1, num2);</span><br><span class="line">    cout &lt;&lt; num1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接传递参数内容</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传递指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span> *p1, <span class="keyword">int</span> *p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *p1;</span><br><span class="line">    *p1 = *p2;</span><br><span class="line">    *p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按引用传参</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap3</span><span class="params">(<span class="keyword">int</span> &amp;r1, <span class="keyword">int</span> &amp;r2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = r1;</span><br><span class="line">    r1 = r2;</span><br><span class="line">    r2 = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>Input two integers: 12 34↙<br>12 34<br>Input two integers: 88 99↙<br>99 88<br>Input two integers: 100 200↙<br>200 100</p>
</blockquote>
<p>本例演示了三种交换变量的值的方法：</p>
<p>1) swap1() 直接传递参数的内容，不能达到交换两个数的值的目的。对于 swap1() 来说，a、b 是形参，是作用范围仅限于函数内部的局部变量，它们有自己独立的内存，和 num1、num2 指代的数据不一样。调用函数时分别将 num1、num2 的值传递给 a、b，此后 num1、num2 和 a、b 再无任何关系，在 swap1() 内部修改 a、b 的值不会影响函数外部的 num1、num2，更不会改变 num1、num2 的值。</p>
<p>2) swap2() 传递的是指针，能够达到交换两个数的值的目的。调用函数时，分别将 num1、num2 的指针传递给 p1、p2，此后 p1、p2 指向 a、b 所代表的数据，在函数内部可以通过指针间接地修改 a、b 的值。我们在《<a href="http://c.biancheng.net/view/2014.html">C语言指针变量作为函数参数</a>》中也对比过第 1)、2) 中方式的区别。</p>
<p>2) swap3() 是按引用传递，能够达到交换两个数的值的目的。调用函数时，分别将 r1、r2 绑定到 num1、num2 所指代的数据，此后 r1 和 num1、r2 和 num2 就都代表同一份数据了，通过 r1 修改数据后会影响 num1，通过 r2 修改数据后也会影响 num2。</p>
<p>从以上代码的编写中可以发现，按引用传参在使用形式上比指针更加直观。在以后的 C++ 编程中，我鼓励读者大量使用引用，它一般可以代替指针（当然指针在C++中也不可或缺），C++ 标准库也是这样做的。</p>
<h3 id="1-2-C-引用作为函数返回值"><a href="#1-2-C-引用作为函数返回值" class="headerlink" title="1.2 C++引用作为函数返回值"></a>1.2 C++引用作为函数返回值</h3><p>引用除了可以作为函数形参，还可以作为函数返回值，请看下面的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp;<span class="title">plus10</span><span class="params">(<span class="keyword">int</span> &amp;r)</span> </span>&#123;</span><br><span class="line">    r += <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="built_in">plus10</span>(num1);</span><br><span class="line">    cout &lt;&lt; num1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>20 20</p>
</blockquote>
<p>在将引用作为函数返回值时应该注意一个小问题，就是不能返回局部数据（例如局部变量、局部对象、局部数组等）的引用，因为当函数调用完成后局部数据就会被销毁，有可能在下次使用时数据就不存在了，C++ 编译器检测到该行为时也会给出警告。</p>
<p>更改上面的例子，让 plus10() 返回一个局部数据的引用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp;<span class="title">plus10</span><span class="params">(<span class="keyword">int</span> &amp;r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = r + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> m;  <span class="comment">//返回局部数据的引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="built_in">plus10</span>(num1);</span><br><span class="line">    cout &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">int</span> &amp;num3 = <span class="built_in">plus10</span>(num1);</span><br><span class="line">    <span class="keyword">int</span> &amp;num4 = <span class="built_in">plus10</span>(num3);</span><br><span class="line">    cout &lt;&lt; num3 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num4 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Visual Studio 下的运行结果：</p>
<blockquote>
<p>20<br>-858993450 -858993450</p>
</blockquote>
<p>在 <a href="http://c.biancheng.net/gcc/">GCC</a> 下的运行结果：</p>
<blockquote>
<p>20<br>30 30</p>
</blockquote>
<p>在 C-Free 下的运行结果：</p>
<blockquote>
<p>20<br>30 0</p>
</blockquote>
<p>而我们期望的运行结果是：</p>
<blockquote>
<p>20<br>20 30</p>
</blockquote>
<p>plus10() 返回一个对局部变量 m 的引用，这是导致运行结果非常怪异的根源，因为函数是在栈上运行的，并且运行结束后会放弃对所有局部数据的管理权，后面的函数调用会覆盖前面函数的局部数据。本例中，第二次调用 plus10() 会覆盖第一次调用 plus10() 所产生的局部数据，第三次调用 plus10() 会覆盖第二次调用 plus10() 所产生的局部数据。</p>
<p>关于函数调用的内部实现，我已在《<a href="http://c.biancheng.net/c/140/">C语言内存精讲</a>》专题中讲到。</p>
<h2 id="2-C-中指针和引用的区别"><a href="#2-C-中指针和引用的区别" class="headerlink" title="2 C++中指针和引用的区别"></a>2 C++中指针和引用的区别</h2><p>指针和引用在C++中很常用，但是对于它们之间的区别很多初学者都不是太熟悉，下面来谈谈他们2者之间的区别和用法。</p>
<h3 id="2-1-指针和引用的定义和性质区别："><a href="#2-1-指针和引用的定义和性质区别：" class="headerlink" title="2.1 指针和引用的定义和性质区别："></a>2.1 指针和引用的定义和性质区别：</h3><p>(1)指针：指针是一个变量，只不过这个变量存储的是一个地址，指向内存的一个存储单元；而引用跟原来的变量实质上是同一个东西，只不过是原变量的一个别名而已。如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;<span class="keyword">int</span> *p=&amp;a;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;<span class="keyword">int</span> &amp;b=a;</span><br></pre></td></tr></table></figure>

<p>上面定义了一个整形变量和一个指针变量p，该指针变量指向a的存储单元，即p的值是a存储单元的地址。</p>
<p>而下面2句定义了一个整形变量a和这个整形a的引用b，事实上a和b是同一个东西，在内存占有同一个存储单元。</p>
<p>(2)可以有const指针，但是没有const引用；</p>
<p>(3)指针可以有多级，但是引用只能是一级（int **p；合法 而 int &amp;&amp;a是不合法的）</p>
<p>(4)指针的值可以为空，但是引用的值不能为NULL，并且引用在定义的时候必须初始化；</p>
<p>(5)指针的值在初始化后可以改变，即指向其它的存储单元，而引用在进行初始化后就不会再改变了。</p>
<p>(6)”sizeof引用”得到的是所指向的变量(对象)的大小，而”sizeof指针”得到的是指针本身的大小；</p>
<p>(7)指针和引用的自增(++)运算意义不一样；</p>
<h3 id="2-2-指针和引用作为函数参数进行传递时的区别。"><a href="#2-2-指针和引用作为函数参数进行传递时的区别。" class="headerlink" title="2.2 指针和引用作为函数参数进行传递时的区别。"></a>2.2 指针和引用作为函数参数进行传递时的区别。</h3><p>(1)指针作为参数进行传递：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">　　<span class="keyword">int</span> temp=*a;</span><br><span class="line">　　*a=*b;</span><br><span class="line">　　*b=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">　　<span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">　　<span class="built_in">swap</span>(&amp;a,&amp;b);</span><br><span class="line">　　cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">　　<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">　　<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果为2 1；</p>
</blockquote>
<p>用指针传递参数，可以实现对实参进行改变的目的，是因为传递过来的是实参的地址，因此使用*a实际上是取存储实参的内存单元里的数据，即是对实参进行改变，因此可以达到目的。</p>
<p>再看一个程序;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">　　<span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">　　p=&amp;a;</span><br><span class="line">　　cout&lt;&lt;p&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">test</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;指针p为NULL&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果为：</p>
<p>0x22ff44 1</p>
<p>指针p为NULL</p>
</blockquote>
<p>大家可能会感到奇怪，怎么回事，不是传递的是地址么，怎么p会是NULL？事实上，在main函数中声明了一个指针p，并赋值为NULL，当调用test函数时，事实上传递的也是地址，只不过传递的是指针地址。也就是说将指针作为参数进行传递时，事实上也是值传递，只不过传递的是地址。当把指针作为参数进行传递时，也是将实参的一个拷贝传递给形参，即上面程序main函数中的p为何与test函数中使用的p不是同一个变量，存储2个变量p的单元也不相同（只是2个p指向同一个存储单元），那么在test函数中对p进行修改，并不会影响到main函数中的p的值。</p>
<p>如果要想达到也同时修改的目的的话，就得使用引用了。</p>
<h3 id="2-3-将引用作为函数的参数进行传递。"><a href="#2-3-将引用作为函数的参数进行传递。" class="headerlink" title="2.3 将引用作为函数的参数进行传递。"></a>2.3 将引用作为函数的参数进行传递。</h3><p>在讲引用作为函数参数进行传递时，实质上传递的是实参本身，即传递进来的不是实参的一个拷贝，因此对形参的修改其实是对实参的修改，所以在用引用进行参数传递时，不仅节约时间，而且可以节约空间。</p>
<p>看下面这个程序：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">　　cout&lt;&lt;&amp;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;&amp;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">test</span>(a);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出结果为： 0x22ff44 1<br>0x22ff44 1</p>
</blockquote>
<p>再看下这个程序：</p>
<p>这足以说明用引用进行参数传递时，事实上传递的是实参本身，而不是拷贝。</p>
<p>所以在上述要达到同时修改指针的目的的话，就得使用引用了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> *&amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">　　<span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">　　p=&amp;a;</span><br><span class="line">　　cout&lt;&lt;p&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">test</span>(p);</span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;指针p不为NULL&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出结果为：0x22ff44 1</p>
<p>  指针p不为NULL</p>
</blockquote>
<h2 id="3-C-引用在本质上是什么，它和指针到底有什么区别？"><a href="#3-C-引用在本质上是什么，它和指针到底有什么区别？" class="headerlink" title="3 C++引用在本质上是什么，它和指针到底有什么区别？"></a>3 C++引用在本质上是什么，它和指针到底有什么区别？</h2><p>从概念上讲。指针从本质上讲就是存放变量地址的一个变量，在逻辑上是独立的，它可以被改变，包括其所指向的地址的改变和其指向的地址中所存放的数据的改变。</p>
<p>而引用是一个别名，它在逻辑上不是独立的，它的存在具有依附性，所以引用必须在一开始就被初始化，而且其引用的对象在其整个生命周期中是不能被改变的（自始至终只能依附于同一个变量）。</p>
<p>在C++中，指针和引用经常用于函数的参数传递，然而，指针传递参数和引用传递参数是有本质上的不同的：</p>
<p>指针传递参数本质上是值传递的方式，它所传递的是一个地址值。值传递过程中，被调函数的形式参数作为被调函数的局部变量处理，即在栈中开辟了内存空间以存放由主调函数放进来的实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。</p>
<p>而在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。</p>
<p>引用传递和指针传递是不同的，虽然它们都是在被调函数栈空间上的一个局部变量，但是任何对于引用参数的处理都会通过一个间接寻址的方式操作到主调函数中的相关变量。而对于指针传递的参数，如果改变被调函数中的指针地址，它将影响不到主调函数的相关变量。如果想通过指针参数传递来改变主调函数中的相关变量，那就得使用指向指针的指针，或者指针引用。</p>
<p>为了进一步加深大家对指针和引用的区别，下面我从编译的角度来阐述它们之间的区别：</p>
<p>程序在编译时分别将指针和引用添加到符号表上，符号表上记录的是变量名及变量所对应地址。指针变量在符号表上对应的地址值为指针变量的地址值，而引用在符号表上对应的地址值为引用对象的地址值。符号表生成后就不会再改，因此指针可以改变其指向的对象（指针变量中的值可以改），而引用对象则不能修改。</p>
<p>最后，总结一下指针和引用的相同点和不同点：</p>
<p>★相同点：</p>
<p>●都是地址的概念；</p>
<p>指针指向一块内存，它的内容是所指内存的地址；而引用则是某块内存的别名。</p>
<p>★不同点：</p>
<p>●指针是一个实体，而引用仅是个别名；</p>
<p>●引用只能在定义时被初始化一次，之后不可变；指针可变；引用“从一而终”，指针可以“见异思迁”；</p>
<p>●引用没有const，指针有const，const的指针不可变；</p>
<p>●引用不能为空，指针可以为空；</p>
<p>●“sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身的大小；</p>
<p>●指针和引用的自增(++)运算意义不一样；</p>
<p>●引用是类型安全的，而指针不是 (引用比指针多了类型检查</p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="http://www.ryxxff.com/20171.html">http://www.ryxxff.com/20171.html</a><br><a href="http://c.biancheng.net/view/vip_2252.html">http://c.biancheng.net/view/vip_2252.html</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ class和struct到底有什么区别</title>
    <url>/cpp-struct-class/</url>
    <content><![CDATA[<p><a href="http://c.biancheng.net/cplus/">C++</a> 中保留了C语言的 struct 关键字，并且加以扩充。在C语言中，struct 只能包含成员变量，不能包含成员函数。而在C++中，struct 类似于 class，既可以包含成员变量，又可以包含成员函数。</p>
<p>C++中的 struct 和 class 基本是通用的，唯有几个细节不同：</p>
<ul>
<li>使用 class 时，类中的成员默认都是 private 属性的；而使用 struct 时，结构体中的成员默认都是 public 属性的。</li>
<li>class 继承默认是 private 继承，而 struct 继承默认是 public 继承（《<a href="http://c.biancheng.net/cpp/biancheng/cpp/rumen_11/">C++继承与派生</a>》一章会讲解继承）。</li>
<li>class 可以使用模板，而 struct 不能（《<a href="http://c.biancheng.net/cpp/biancheng/cpp/rumen_14/">模板、字符串和异常</a>》一章会讲解模板）。</li>
</ul>
<p>C++ 没有抛弃C语言中的 struct 关键字，其意义就在于给C语言程序开发人员有一个归属感，并且能让C++编译器兼容以前用C语言开发出来的项目。</p>
<p>在编写C++代码时，我强烈建议使用 class 来定义类，而使用 struct 来定义结构体，这样做语义更加明确。</p>
<p>使用 struct 来定义类的一个反面教材：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">float</span> score);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">char</span> *m_name;</span><br><span class="line">    <span class="keyword">int</span> m_age;</span><br><span class="line">    <span class="keyword">float</span> m_score;</span><br><span class="line">&#125;;</span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">float</span> score): <span class="built_in">m_name</span>(name), <span class="built_in">m_age</span>(age), <span class="built_in">m_score</span>(score)&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;m_name&lt;&lt;<span class="string">&quot;的年龄是&quot;</span>&lt;&lt;m_age&lt;&lt;<span class="string">&quot;，成绩是&quot;</span>&lt;&lt;m_score&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">stu</span><span class="params">(<span class="string">&quot;小明&quot;</span>, <span class="number">15</span>, <span class="number">92.5f</span>)</span></span>;</span><br><span class="line">    stu.<span class="built_in">show</span>();</span><br><span class="line">    Student *pstu = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="string">&quot;李华&quot;</span>, <span class="number">16</span>, <span class="number">96</span>);</span><br><span class="line">    pstu -&gt; <span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>小明的年龄是15，成绩是92.5<br>李华的年龄是16，成绩是96</p>
</blockquote>
<p>这段代码可以通过编译，说明 struct 默认的成员都是 public 属性的，否则不能通过对象访问成员函数。如果将 struct 关键字替换为 class，那么就会编译报错。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>对c++中虚函数和纯虚函数的理解</title>
    <url>/cpp-virtual-function/</url>
    <content><![CDATA[<h2 id="1-虚函数和纯虚函数的作用"><a href="#1-虚函数和纯虚函数的作用" class="headerlink" title="1 虚函数和纯虚函数的作用"></a>1 虚函数和纯虚函数的作用</h2><blockquote>
<p>定义一个函数为虚函数，不代表函数为不被实现的函数。<br>定义他为虚函数是为了允许用基类的指针来调用子类的这个函数。<br>定义一个函数为纯虚函数，才代表函数没有被实现。<br>定义纯虚函数是为了实现一个接口，起到一个规范的作用，规范继承这个类的程序员必须实现这个函数。</p>
<p><a href="https://blog.csdn.net/Hackbuteer1/article/details/7558868">https://blog.csdn.net/Hackbuteer1/article/details/7558868</a></p>
</blockquote>
<p><code>c++</code>中的虚函数是为了实现多态而诞生的，纯虚函数是为了实现抽象类的概念，这两个函数的作用都是为了增强<code>c++</code>语言的面向对象编程能力。话不多说，直接上代码案例。</p>
<h2 id="2-虚函数"><a href="#2-虚函数" class="headerlink" title="2 虚函数"></a>2 虚函数</h2><p><strong>虚函数</strong>为了实现多态，也就是同一个函数有多种不同的形态。在程序应用中，可以这么理解，就是用父类的指针去调用子类中的方法，这样就大大较少了程序中的代码量，可以用一个指针调用其所有派生类中的方法，使得编程的代码量又大大减少。</p>
<h3 id="2-1-虚函数的定义"><a href="#2-1-虚函数的定义" class="headerlink" title="2.1 虚函数的定义"></a>2.1 虚函数的定义</h3><p>虚函数的定义很简单，就是在该函数前面加一个<code>virtual</code>关键字，告诉编译器，这是一个虚函数。形式如下：</p>
<p>父类中的写法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;cout &lt;&lt; <span class="string">&quot; this is saying... &quot;</span> &lt;&lt; endl;&#125;</span><br></pre></td></tr></table></figure>

<p>子类中的写法：</p>
<p>子类中可以带有<code>virtual</code>关键字，也可以不带。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写法1</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;cout &lt;&lt; <span class="string">&quot; this is saying... &quot;</span> &lt;&lt; endl;&#125;</span><br><span class="line"><span class="comment">//写法2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;cout &lt;&lt; <span class="string">&quot; this is saying... &quot;</span> &lt;&lt; endl;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-2-代码案例"><a href="#2-2-代码案例" class="headerlink" title="2.2 代码案例"></a>2.2 代码案例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Base</span>(<span class="keyword">int</span> m) :<span class="built_in">a</span>(m) &#123;&#125;</span><br><span class="line">	<span class="built_in">Base</span>() &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">funcA</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;in void Base::funcA&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">funcB</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;in virtual void Base::funcB&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child</span> :</span><span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">child</span>(<span class="keyword">int</span> m, <span class="keyword">int</span> n) :<span class="built_in">Base</span>(m), <span class="built_in">b</span>(n) &#123;&#125;</span><br><span class="line">	<span class="built_in">child</span>() &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">funcA</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;in void child::funcA&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">funcB</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;in virtual void child::funcB&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">funcC</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;in child func C&quot;</span>&lt;&lt;endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Base* c = <span class="keyword">new</span> child;</span><br><span class="line">	child* cc = <span class="keyword">new</span> child;</span><br><span class="line"></span><br><span class="line">	c-&gt;<span class="built_in">funcA</span>();<span class="comment">//调用的父类中的方法</span></span><br><span class="line">	c-&gt;<span class="built_in">funcB</span>();<span class="comment">//调用的子类的方法</span></span><br><span class="line">    <span class="comment">//c-&gt;funcC(); //编译失败</span></span><br><span class="line">	<span class="comment">//无法通过父类指针c调用只有子类中才有的方法funcC();</span></span><br><span class="line">	<span class="comment">//只能通过子类的指针进行调用</span></span><br><span class="line"></span><br><span class="line">	cc-&gt;<span class="built_in">funcA</span>();</span><br><span class="line">	cc-&gt;<span class="built_in">funcB</span>();</span><br><span class="line">	<span class="comment">//cc-&gt;funcC(); //可以调用</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码中看，指针<code>c</code>其实是父类<code>Base</code>的指针，但是对于声明了虚函数的方法，却可以调用其派生类中的方法，没有声明虚函数，则只能调用父类的方法。因为指针<code>c</code>是父类类型的指针。结果如下：</p>
<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200624104602.png" alt="运行结果"></p>
</blockquote>
<h2 id="3-纯虚函数"><a href="#3-纯虚函数" class="headerlink" title="3 纯虚函数"></a>3 纯虚函数</h2><p>纯虚函数的作用是为了实现抽象类，也就是定义接口规范，这样就为编程省下了很多的沟通成本，因为程序员不能违反这个规范进行自定义接口，所有的接口都由抽象类定义好之后才由程序员去实现其具体的功能。该抽象类不能被实例化，只有其派生类实现了抽象类中的<strong><code>所有的</code></strong>纯虚函数才能被实例化，如果其中有一个纯虚函数没有被重写，那么该派生类还是不能被实例化，如下图所示：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200624105059.png" alt=""></p>
<h3 id="3-1-纯虚函数的定义"><a href="#3-1-纯虚函数的定义" class="headerlink" title="3.1 纯虚函数的定义"></a>3.1 纯虚函数的定义</h3><p>纯虚函数的定义和虚函数的定义类似，不同之处就是该类不需要被实现，且需要以<code>=0</code>结尾，以告诉编译器，这是一个纯虚函数。如下：</p>
<p>父类写法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>=<span class="number">0</span>; <span class="comment">//记得;和=不能省</span></span><br></pre></td></tr></table></figure>

<p>子类写法：</p>
<p>虚函数在子类中可以带<code>virtual</code>关键字，也可以不带。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写法1</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;cout &lt;&lt;<span class="string">&quot;say&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line"><span class="comment">//写法2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;cout &lt;&lt;<span class="string">&quot;say&quot;</span>&lt;&lt;endl;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-代码案例"><a href="#3-2-代码案例" class="headerlink" title="3.2 代码案例"></a>3.2 代码案例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> string <span class="title">getName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span> :</span><span class="keyword">public</span> animal &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_age;</span><br><span class="line">	string m_name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">dog</span>() &#123; m_age = <span class="number">0</span>; m_name = <span class="string">&quot;wangwang&quot;</span>; &#125;</span><br><span class="line">	<span class="built_in">dog</span>(<span class="keyword">int</span> age, string name) :<span class="built_in">m_age</span>(age), <span class="built_in">m_name</span>(name) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;this is dog saying...&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;,age=&quot;</span> &lt;&lt; m_age &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function">string <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_name; &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span> :</span><span class="keyword">public</span> animal &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_age;</span><br><span class="line">	string m_name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">cat</span>() &#123; m_age = <span class="number">10</span>; m_name = <span class="string">&quot;miumiu~~&quot;</span>; &#125;</span><br><span class="line">	<span class="built_in">cat</span>(<span class="keyword">int</span> age, string name) :<span class="built_in">m_age</span>(age), <span class="built_in">m_name</span>(name) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;this is cat saying...&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;,age=&quot;</span> &lt;&lt; m_age &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function">string <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_name; &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	animal *d = <span class="keyword">new</span> <span class="built_in">dog</span>(<span class="number">100</span>,<span class="string">&quot;我是狗&quot;</span>);<span class="comment">//用父类指针调用子类函数</span></span><br><span class="line">	d-&gt;<span class="built_in">info</span>();</span><br><span class="line">	d-&gt;<span class="built_in">say</span>();</span><br><span class="line">	cout &lt;&lt; d-&gt;<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;----&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">	d = <span class="keyword">new</span> <span class="built_in">cat</span>(<span class="number">120</span>,<span class="string">&quot;我是猫&quot;</span>);<span class="comment">//直接覆盖父类指针地址</span></span><br><span class="line">	d-&gt;<span class="built_in">say</span>();</span><br><span class="line">	d-&gt;<span class="built_in">info</span>();</span><br><span class="line">	cout &lt;&lt; d-&gt;<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码中可以看到，虚函数，<code>animal</code>类定义了一个规范，就是动物类的规范，所有该类的派生类都必须实现其中的所有的纯虚函数，才能被实例化。运行结果如下：</p>
<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200624105907.png" alt="运行结果"></p>
</blockquote>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>破解intellij ideal 专业版</title>
    <url>/crack-idel-perfessional/</url>
    <content><![CDATA[<blockquote>
<p>破解IDEAL的步骤和<a href="https://jums.club/crack-pycharm-perfessional">破解pycharm</a>的步骤差不太多。主要还是一个jar的存放路径有点不一样。</p>
</blockquote>
<p>注意：本教程转载自<a href="https://zhile.io，如有侵权请联系作者删除！">https://zhile.io，如有侵权请联系作者删除！</a></p>
<p>本项目只做学习研究之用，不得用于商业用途！</p>
<p><a href="https://shimo.im/docs/gqQDrjPkwwctk3VJ/read">原文</a></p>
<p>2019.12.02 jetbrains公司发布了Python的最强编辑器PyCharm 2019.3版本。本次大版本主要对Jupyter notebooks 、MongoDB、Python3.8功能做了一些增加，而这其中有很多功能都只能在专业版中使用。</p>
<p>本教程适用于PyCharm所有版本</p>
<h2 id="一、使用前注意事项"><a href="#一、使用前注意事项" class="headerlink" title="一、使用前注意事项"></a>一、使用前注意事项</h2><p>PyCharm一定要是在官网下载：<a href="https://www.jetbrains.com/pycharm/download/">https://www.jetbrains.com/pycharm/download/</a><br>本教程适用于PyCharm所有版本<br>本教程适用于jetbrains全系列产品（Pycharm、Idea、GoLand、WebStorm、phpstorm、CLion、RubyMine、AppCode、DataGrid）目录<br>如果按照此教程还无法使用，加猪哥微信拉你进软件群（已经加过猪哥微信的请勿重复添加）</p>
<h2 id="二、使用教程"><a href="#二、使用教程" class="headerlink" title="二、使用教程"></a>二、使用教程</h2><h3 id="1-下载补丁"><a href="#1-下载补丁" class="headerlink" title="1.下载补丁"></a>1.下载补丁</h3><p>链接: <a href="https://pan.baidu.com/s/10cWE3gr5i0Qewamb6e-Jow">https://pan.baidu.com/s/10cWE3gr5i0Qewamb6e-Jow</a> 提取码: q974 下载补丁文件 jetbrains-agent.jar （如果链接失效可关注微信公众号「麦田里的守望者zhg」回复pycharm破解（因为流程差不多，所以这里就还是使用的pycharm的破解思路），补丁来源于<a href="https://zhile.io）">https://zhile.io）</a><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/12651581337729_pic.jpg__thumbnail.jpg" alt=""></p>
<p>新补丁文件大小为2M，如果小于2M的都是老补丁，需要从新下载哦！</p>
<h3 id="2-将补丁放在-lib目录"><a href="#2-将补丁放在-lib目录" class="headerlink" title="2.将补丁放在\lib目录"></a>2.将补丁放在\lib目录</h3><p>将刚才下载的补丁文件 jetbrains-agent.jar 放置在Pycharm安装目录里面的\lib目录里面，不是\bin目录，不是\bin目录，不是\bin目录。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/12591581333249_pic_hd.jpg__thumbnail.jpg" alt=""></p>
<h3 id="3-修改文件"><a href="#3-修改文件" class="headerlink" title="3.修改文件"></a>3.修改文件</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/4108889784-5decbbed883ae_articlex.png" alt=""><br>如果提示需要创建文件，点击<code>yes</code>即可。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2545636583-5decbbf0bf724_articlex.png" alt=""><br>在打开的vmoptions编辑窗口末行添加：<code>-javaagent:你pycharm的安装目录\jetbrains-agent.jar</code>，请仔细检查补丁路径是否正确，如果错误则会出现pycharm打不开的情况。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/638135301-5decbbf40522f_articlex.png" alt="">   </p>
<p>然后重启软件，即可。</p>
<h3 id="4-查看有效期"><a href="#4-查看有效期" class="headerlink" title="4.查看有效期"></a>4.查看有效期</h3><p>查看有效期的步骤为点击：Help-&gt;About这里可以看到你的pycharm的版本号、许可来源、有效期、以及一些环境</p>
<p>显示你电脑的用户名即表示成功，如果是 to PyCharm Evaluator 则表示没有成功，按照教程再多试几次！<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200331160722.png" alt="破解成功"></p>
<h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5 注意事项"></a>5 注意事项</h3><p>如果发现，重启软件之后，软件带不开或是提示<code>JDK</code>找不到，可以删除<strong>用户目录</strong>下的intellij iead文件夹，这是一个隐藏文件夹，文件名前有一个<code>.</code>，所以别删错了。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200404101849.png" alt=".intellij idea"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>software cracking</tag>
      </tags>
  </entry>
  <entry>
    <title>破解pycharm 专业版</title>
    <url>/crack-pycharm-perfessional/</url>
    <content><![CDATA[<p>注意：本教程转载自<a href="https://zhile.io，如有侵权请联系作者删除！">https://zhile.io，如有侵权请联系作者删除！</a></p>
<p>本项目只做学习研究之用，不得用于商业用途！</p>
<p><a href="https://shimo.im/docs/DJ3h3tJv98ppTYyH/read">原文</a></p>
<h3 id="关注我的公众号，恢复【破解pycharm】即可。"><a href="#关注我的公众号，恢复【破解pycharm】即可。" class="headerlink" title="关注我的公众号，恢复【破解pycharm】即可。"></a>关注我的公众号，恢复【破解pycharm】即可。</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
<p>2019.12.02 jetbrains公司发布了Python的最强编辑器PyCharm 2019.3版本。本次大版本主要对Jupyter notebooks 、MongoDB、Python3.8功能做了一些增加，而这其中有很多功能都只能在专业版中使用。</p>
<p>本教程适用于PyCharm所有版本</p>
<h2 id="一、使用前注意事项"><a href="#一、使用前注意事项" class="headerlink" title="一、使用前注意事项"></a>一、使用前注意事项</h2><p>PyCharm一定要是在官网下载：<a href="https://www.jetbrains.com/pycharm/download/">https://www.jetbrains.com/pycharm/download/</a><br>本教程适用于PyCharm所有版本<br>本教程适用于jetbrains全系列产品（Pycharm、Idea、GoLand、WebStorm、phpstorm、CLion、RubyMine、AppCode、DataGrid）目录<br>如果按照此教程还无法使用，加猪哥微信拉你进软件群（已经加过猪哥微信的请勿重复添加）</p>
<h2 id="二、使用教程"><a href="#二、使用教程" class="headerlink" title="二、使用教程"></a>二、使用教程</h2><h3 id="1-下载补丁"><a href="#1-下载补丁" class="headerlink" title="1.下载补丁"></a>1.下载补丁</h3><p>链接: <a href="https://pan.baidu.com/s/10cWE3gr5i0Qewamb6e-Jow">https://pan.baidu.com/s/10cWE3gr5i0Qewamb6e-Jow</a> 提取码: q974 下载补丁文件 jetbrains-agent.jar （如果链接失效可关注微信公众号「麦田里的守望者zhg」回复pycharm破解，补丁来源于<a href="https://zhile.io）">https://zhile.io）</a><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/12651581337729_pic.jpg__thumbnail.jpg" alt=""></p>
<p>新补丁文件大小为2M，如果小于2M的都是老补丁，需要从新下载哦！</p>
<h3 id="2-将补丁放在-lib目录"><a href="#2-将补丁放在-lib目录" class="headerlink" title="2.将补丁放在\lib目录"></a>2.将补丁放在\lib目录</h3><p>将刚才下载的补丁文件 jetbrains-agent.jar 放置在Pycharm安装目录里面的\lib目录里面，不是\bin目录，不是\bin目录，不是\bin目录。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/12591581333249_pic_hd.jpg__thumbnail.jpg" alt=""></p>
<h3 id="3-修改文件"><a href="#3-修改文件" class="headerlink" title="3.修改文件"></a>3.修改文件</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/4108889784-5decbbed883ae_articlex.png" alt=""><br>如果提示需要创建文件，点击<code>yes</code>即可。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2545636583-5decbbf0bf724_articlex.png" alt=""><br>在打开的vmoptions编辑窗口末行添加：<code>-javaagent:你pycharm的安装目录\jetbrains-agent.jar</code>，请仔细检查补丁路径是否正确，如果错误则会出现pycharm打不开的情况。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/638135301-5decbbf40522f_articlex.png" alt="">   </p>
<p>然后重启软件，即可。</p>
<h3 id="4-查看有效期"><a href="#4-查看有效期" class="headerlink" title="4.查看有效期"></a>4.查看有效期</h3><p>查看有效期的步骤为点击：Help-&gt;About这里可以看到你的pycharm的版本号、许可来源、有效期、以及一些环境</p>
<p>显示你电脑的用户名即表示成功，如果是 to PyCharm Evaluator 则表示没有成功，按照教程再多试几次！<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200407114028.png" alt="破解成功"></p>
<h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5 注意事项"></a>5 注意事项</h3><p>如果发现，重启软件之后，软件带不开或是提示<code>JDK</code>找不到，可以删除<strong>用户目录</strong>下的pycharm文件夹，这是一个隐藏文件夹，文件名前有一个<code>.</code>，所以别删错了。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200404101711.png" alt=".pycharm"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>software cracking</tag>
      </tags>
  </entry>
  <entry>
    <title>VmWare 12 pro下载链接和破解秘钥</title>
    <url>/crack-vmware-pro/</url>
    <content><![CDATA[<h3 id="1-软件下载"><a href="#1-软件下载" class="headerlink" title="1 软件下载"></a>1 软件下载</h3><p><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-12.0.0-2985596.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-12.0.0-2985596.exe</a></p>
<h3 id="2-秘钥"><a href="#2-秘钥" class="headerlink" title="2 秘钥"></a>2 秘钥</h3><ul>
<li>VY1DU-2VXDH-08DVQ-PXZQZ-P2KV8</li>
<li>VF58R-28D9P-0882Z-5GX7G-NPUTF</li>
<li>YG7XR-4GYEJ-4894Y-VFMNZ-YA296</li>
</ul>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>software cracking</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫如何下载存储图片</title>
    <url>/crawl-photo/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_photo</span>():</span></span><br><span class="line">    root = <span class="string">&quot;g:/emojis/&quot;</span></span><br><span class="line">    url = <span class="string">&quot;https://jums.club/images/avatar.jpg&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(root + <span class="string">&quot;name.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        r = requests.get(url).content  <span class="comment">## This is the main code </span></span><br><span class="line">        file.write(r)  <span class="comment">## the main code too</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    download_photo()</span><br></pre></td></tr></table></figure>

<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>windows环境下curl报错：Protocol &quot;http&quot; not supported or disabled in libcurl</title>
    <url>/curl-error/</url>
    <content><![CDATA[<h2 id="windows环境下curl报错：Protocol-“‘http”-not-supported-or-disabled-in-libcurl"><a href="#windows环境下curl报错：Protocol-“‘http”-not-supported-or-disabled-in-libcurl" class="headerlink" title="windows环境下curl报错：Protocol “‘http” not supported or disabled in libcurl"></a>windows环境下curl报错：Protocol “‘http” not supported or disabled in libcurl</h2><p>原因：window命令行不支持单括号引用<br>解决方案：将单括号删除</p>
<p>例如：curl ‘<a href="http://localhost:9200/?pretty’">http://localhost:9200/?pretty’</a><br>在window命令行应改为：curl <a href="http://localhost:9200/?pretty">http://localhost:9200/?pretty</a></p>
<p>原始解决方案来源:<a href="https://stackoverflow.com/questions/6684235/perl-curl-1-protocol-http-not-supported-or-disabled-in-libcurl">https://stackoverflow.com/questions/6684235/perl-curl-1-protocol-http-not-supported-or-disabled-in-libcurl</a></p>
<p>curl在windows上使用的注意事项：<br>curl -XPOST <a href="http://localhost:9200/video/md/1">http://localhost:9200/video/md/1</a> -d “{<br>“tvId\”:\”1001\”,\”name\”:\”test\”,\”order\”:1}” -d 内的参数需要用双引号包起来，数据中的双引号需要转义</p>
<p>在学习操作elasticSearch时在windows用curl，参考：<a href="http://www.cnblogs.com/Fred1987/p/6020145.html">http://www.cnblogs.com/Fred1987/p/6020145.html</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/zwqlxx/article/details/77684612">https://blog.csdn.net/zwqlxx/article/details/77684612</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>解决问题</tag>
      </tags>
  </entry>
  <entry>
    <title>分解质因数</title>
    <url>/de-quality-factor/</url>
    <content><![CDATA[<h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h2><p>分解质因数，输入一个正整数，将其分解质因数。</p>
<p>比如：输入45，输出3*3*5；输入90，输出2*3*3*5。</p>
<h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2 代码"></a>2 代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">de_quality_factor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       <span class="keyword">int</span> N = scanner.nextInt();</span><br><span class="line">       <span class="keyword">int</span> n = N;</span><br><span class="line">       <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">       System.out.print(n + <span class="string">&quot;=&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt; n; i++) &#123;</span><br><span class="line">           <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">               System.out.print(i);</span><br><span class="line">               n = n / i;</span><br><span class="line">               <span class="keyword">if</span> (n != <span class="number">1</span>) System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (n != <span class="number">1</span> &amp;&amp; n != N) System.out.print(n);</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (n == N) System.out.println(<span class="string">&quot;1*&quot;</span> + n);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210526171620.png" alt=""></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>学习计算机视觉，你必须了解的基础概念</title>
    <url>/cv-concept-you-must-know/</url>
    <content><![CDATA[<h4 id="1-图像的高频和低频成分"><a href="#1-图像的高频和低频成分" class="headerlink" title="1 图像的高频和低频成分"></a>1 图像的高频和低频成分</h4><blockquote>
<p>形象一点说：亮度或灰度变化激烈的地方对应高频成分，如边缘；变化不大的地方对于低频成分，如大片色块区画个直方图，大块区域是低频，小块或离散的是高频把图像看成二维函数，变化剧烈的地方就对应高频，反之低频。<br>举个通俗易懂的例子：<br>一幅图象，你戴上眼镜，盯紧了一个地方看到的是高频分量<br>摘掉眼镜，眯起眼睛，模模糊糊看到的就是低频分量。<br>图像的高低频是对图像各个位置之间强度变化的一种度量方法.<br>低频分量:主要对整副图像的强度的综合度量.<br>高频分量:主要是对图像边缘和轮廓的度量.<br>如果一副图像的各个位置的强度大小相等,则图像只存在低频分量,从图像的频谱图上看,只有一个主峰,且位于频率为零的位置.<br>如果一副图像的各个位置的强度变化剧烈,则图像不仅存在低频分量,同时也存在多种高频分量,从图像的频谱上看,不仅有一个主峰,同时也存在多个旁峰.<br>以上的现象可以通过对傅里叶变换的公式分析得出.<br>以下所说的积分是对x进行的.<br>exp(-jwx)的数值变化是均匀的,如果对exp(-jwx)进行积分,则积分值为零.如果对exp(-jwx)乘以一个加权函数f(x),则在对f(x)exp(-jwx)进行积分,积分值不一定为零.如果exp(-jwx)的取值为1时,则对f(x)exp(-jwx)积分,既为对f(x)积分,此时f(x)exp(-jwx)最大,既频谱中的主峰.如果f(x) 是常数则, 除w=0处f(x)exp(-jwx)的积分不为零外,在w不为零的其它处,f(x)exp(-jwx)的积分都为零.</p>
</blockquote>
<hr>
<h4 id="2-低通滤波"><a href="#2-低通滤波" class="headerlink" title="2 低通滤波"></a>2 <a href="https://baike.baidu.com/item/%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2/3506429?fr=aladdin">低通滤波</a></h4><blockquote>
<p>低通滤波(Low-pass filter) 是一种过滤方式，规则为低频信号能正常通过，而超过设定临界值的高频信号则被阻隔、减弱。但是阻隔、减弱的幅度则会依据不同的频率以及不同的滤波程序（目的）而改变。它有的时候也被叫做高频去除过滤（high-cut filter）或者最高去除过滤（treble-cut filter)。低通过滤是高通过滤的对立。</p>
</blockquote>
<hr>
<h4 id="3-bounding-box"><a href="#3-bounding-box" class="headerlink" title="3 bounding-box"></a>3 <a href="https://blog.csdn.net/love1055259415/article/details/80041936">bounding-box</a></h4><blockquote>
<p>如图所示，绿色的框为飞机的Ground Truth，红色的框是提取的Region Proposal。那么即便红色的框被分类器识别为飞机，但是由于红色的框定位不准(IoU&lt;0.5)，那么这张图相当于没有正确的检测出飞机。如果我们能对红色的框进行微调，使得经过微调后的窗口跟Ground Truth更接近，这样岂不是定位会更准确。确实，Bounding-box regression 就是用来微调这个窗口的。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20161020131820060.png" alt="image"></p>
</blockquote>
<hr>
<h4 id="4-R-CNN"><a href="#4-R-CNN" class="headerlink" title="4 R-CNN"></a>4 <a href="https://blog.csdn.net/ture_dream/article/details/52896452">R-CNN</a></h4><p>R-CNN的论文原文是《<a href="https://jums.club/pdf/Rich_feature_hierarchies_for_accurate_object_detection_and_semantic_segmentation.pdf">Rich feature hierarchies for accurate object detection and semantic segmentation</a>》全是英文，有兴趣的可以读一读<br>R-CNN是计算机视觉中目标检测算法的鼻祖，很多的目标检测算法都是基于R-CNN的改进，这里有一篇<a href="https://blog.csdn.net/ture_dream/article/details/52896452">很好的博客</a>，介绍了R-CNN,Fast R-CNN,Faster R-CNN的一个工作原理<br><a href="https://space.bilibili.com/209599371?from=search&seid=7888318736309109130">B站目标检测大牛</a><br><strong>关于R-CNN的一个入门视频</strong></p>
<iframe src="//player.bilibili.com/player.html?aid=24795835&cid=41764245&page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="720" height="480"> </iframe>

<p><a id="R-CNN的工作原理"><strong>R-CNN的工作原理：</strong></a>   </p>
<blockquote>
<p>R-CNN利用<strong>网络</strong>将特征提取和特征分类合并到一起，大大提升了特征的提取效率。但是无论是<em>传统方式</em>还是R-CNN，<strong>目标检测和目标识别的最大区别就是需要提取候选区域</strong>（region proposals） R-CNN采用<strong>选择性搜索（selective search）</strong>算法，又称区域合并算法，selective search会将对图片暴力生成多个候选区域   </p>
</blockquote>
<p>R-CNN算法的计算过程：   </p>
<blockquote>
<ul>
<li>首先输入图像会被分为R个初始候选集，</li>
<li>然后通过贪心策略去计算相邻候选集之前的相似度，通过相似度的大小去合并候选集，直到产生目标个数的候选集,</li>
<li>候选集的相似度计算有多种方式，有颜色、纹理、而枳和吻合相似度计算。</li>
<li><strong>最后生成的L个Region Proposal与CNN相结合，这就是R-CNN名字的由来</strong>,    </li>
</ul>
</blockquote>
<p><em>R-CNN作者证明了在当前任务下SVM的分类效果要比神经网络分类器好。最后每个SNM分类器都会得到图像对于该类别的得分和置信度，置信度最高的类别为改图像区域对应的预测类别</em></p>
<p><a id="总结一下R-CNN存在的两个问题"><strong>总结一下R-CNN存在的两个问题：</strong></a></p>
<ul>
<li>R-CNN在生成了候选区域后，需要对每个区域进行统一尺寸的压缩或放大，当候选集的长与宽差别较大时强行压缩至比例为1:1时会使图像产生变形和丢失图像的原始特征</li>
<li>R-CNN生成了多个候选集后需要全部输入到CNN中，当生成了2000个候选集时，就需要对图片进行2000次单模型特征提取，这无疑是效率低下的</li>
</ul>
<p>针对上述的两个问题，Kaiming He等人提出了SSPNet（空间金字塔池化网络）来解决。<a href="https://crazyjums.github.io/2019/11/21/SSPNet/">详细了解什么是SSPNet</a></p>
<hr>
<h4 id="5-IoU"><a href="#5-IoU" class="headerlink" title="5 IoU"></a>5 <a href="https://blog.csdn.net/u014061630/article/details/82818112">IoU</a></h4><blockquote>
<p>IoU 的全称为交并比（Intersection over Union），通过这个名称我们大概可以猜到 IoU 的计算方法。IoU 计算的是 “预测的边框” 和 “真实的边框” 的交集和并集的比值。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20180922220708895.png" alt="IoU计算公式"></p>
</blockquote>
<hr>
<h4 id="6-卷积"><a href="#6-卷积" class="headerlink" title="6 卷积"></a>6 卷积</h4><p>卷积在图像识别中的概念是提取一幅图像的特征，通常对一幅图像进行卷积会有一个卷积核，该卷积核是一个正方形矩阵。一般是奇数矩阵，这样做的目的是为了卷积核总是有一个中心。大部分情况使用的3x3或者5x5等</p>
<p><a href="https://crazyjums.github.io/2019/11/21/cnn/">详细了解什么是卷积神经网络</a></p>
<hr>
<h4 id="7-池化-下采样（pooling）"><a href="#7-池化-下采样（pooling）" class="headerlink" title="7 池化/下采样（pooling）"></a>7 池化/下采样（pooling）</h4><p>上面介绍了卷积操作，卷积的目的是提取一幅图像的特征，也就是边缘部分。但是一幅图像往往很大，有的甚至几百万的像素，每一个像素对应一个参数，那就意味着会有几百万个参数，这对于计算机的内存处理来讲是一个很大的问题。那么为了减少参数，提升计算机的运行效率，这里提出一个pooling的概念，也就是较少一部分对图像影响较小的参数，从而使得计算机的运行效率能够提升。池化操作一般在卷积之后。  </p>
<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pIYBAFreggyACO9FAABorvOb-GE402.png" alt="池化操作"><br>如上图所示，池化就是对特征图进行特征压缩，池化也叫做下采样。选择原来某个区域的max或mean代替那个区域，整体就浓缩了</p>
</blockquote>
<p>pooling有很多种，这里<a href="https://blog.csdn.net/danieljianfeng/article/details/42433475">介绍几种</a>：   </p>
<ul>
<li>一般池化（general pooling）</li>
<li>重叠池化（OverlappingPooling）</li>
<li>空金字塔池化（Spatial Pyramid Pooling）<br>还有一些池化，这篇<a href="https://blog.csdn.net/nwu_NBL/article/details/80901427">博客</a>有介绍</li>
</ul>
<p><strong>pooling layer视频介绍</strong></p>
<iframe src="//player.bilibili.com/player.html?aid=16022575&cid=26141211&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="720" height="480"> </iframe>

<h5 id="7-1-General-pooling"><a href="#7-1-General-pooling" class="headerlink" title="7.1 General pooling"></a>7.1 General pooling</h5><blockquote>
<p>池化作用于图像中不重合的区域（这与卷积操作不同），过程如下图<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/Pooling_schematic.gif" alt="一般池化"><br>我们定义池化窗口的大小为sizeX，即下图中红色正方形的边长，定义两个相邻池化窗口的水平位移/竖直位移为stride。一般池化由于每一池化窗口都是不重复的，所以sizeX=stride。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20150105213214237.png" alt="步长等于尺寸">   </p>
</blockquote>
<blockquote>
<p>最常见的池化操作为平均池化mean pooling和最大池化max pooling：   </p>
<ul>
<li>平均池化：计算图像区域的平均值作为该区域池化后的值。   </li>
<li>最大池化：选图像区域的最大值作为该区域池化后的值。</li>
</ul>
</blockquote>
<h5 id="7-2-Overlapping-pooling"><a href="#7-2-Overlapping-pooling" class="headerlink" title="7.2 Overlapping pooling"></a>7.2 Overlapping pooling</h5><blockquote>
<p>重叠池化正如其名字所说的，相邻池化窗口之间会有重叠区域，此时sizeX&gt;stride</p>
</blockquote>
<h5 id="7-3-Spatial-Pyramid-Pooling"><a href="#7-3-Spatial-Pyramid-Pooling" class="headerlink" title="7.3 Spatial Pyramid Pooling"></a>7.3 Spatial Pyramid Pooling</h5><blockquote>
<p>空间金字塔池化可以把任何尺度的图像的卷积特征转化成相同维度，这不仅可以让CNN处理任意尺度的图像，还能避免cropping和warping操作，导致一些信息的丢失，具有非常重要的意义</p>
</blockquote>
<blockquote>
<p>一般的CNN都需要输入图像的大小是固定的，这是因为全连接层的输入需要固定输入维度，但在卷积操作是没有对图像尺度有限制，所有作者提出了空间金字塔池化，先让图像进行卷积操作，然后转化成维度相同的特征输入到全连接层，这个可以把CNN扩展到任意大小的图像。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20150105213450046.png" alt=""><br>空间金字塔池化的思想来自于Spatial Pyramid Model，它一个pooling变成了多个scale的pooling。用不同大小池化窗口作用于卷积特征，我们可以得到1X1,2X2,4X4的池化结果，由于conv5中共有256个过滤器，所以得到1个256维的特征，4个256个特征，以及16个256维的特征，然后把这21个256维特征链接起来输入全连接层，通过这种方式把不同大小的图像转化成相同维度的特征。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20150105213522578.png" alt="">   </p>
</blockquote>
<h5 id="7-4-Rol-pooling"><a href="#7-4-Rol-pooling" class="headerlink" title="7.4 Rol pooling"></a>7.4 <a href="https://blog.csdn.net/auto1993/article/details/78514071">Rol pooling</a></h5><p>Rol(Region of Interest)是图像中我们感兴趣的区域的意思，也可以理解为region proposal（候选区域）。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191118150551.png" alt=""><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191118150631.png" alt=""><br>ROI pooling总结：<br>（1）用于目标检测任务；<br>（2）允许我们对CNN中的feature map进行reuse；<br>（3）可以显著加速training和testing速度；<br>（4）允许end-to-end的形式训练目标检测系统。   </p>
<hr>
<h4 id="8-RPN（Region-Proposal-Network）"><a href="#8-RPN（Region-Proposal-Network）" class="headerlink" title="8 RPN（Region Proposal Network）"></a>8 <a href="https://blog.csdn.net/ture_dream/article/details/52896452">RPN</a>（Region Proposal Network）</h4><blockquote>
<p>目前最先进的目标检测网络需要先用区域建议(region proposal)算法推测目标位置，像SPPnet[7]和Fast R-CNN[5]这些网络已经减少了检测网络的运行时间，这时计算区域建议(region proposal)就成了瓶颈问题。本文中，我们介绍一种区域建议网络（Region Proposal Network, RPN），<strong>它和检测网络共享全图的卷积特征(共享卷积核)</strong>，使得区域建议几乎不花时间。<strong>RPN是一个全卷积网络</strong>，在每个位置同时预测目标边界和objectness得分。RPN是端到端训练的，生成高质量区域建议框，用于Fast R-CNN来检测。通过一种简单的交替运行优化方法，RPN和Fast R-CNN可以在训练时共享卷积特征。对于非常深的VGG-16模型[19]，我们的检测系统在GPU上的帧率为5fps（包含所有步骤），在PASCAL VOC 2007和PASCAL VOC 2012上实现了最高的目标检测准确率（2007是73.2%mAP，2012是70.4%mAP），每个图像用了300个建议框。<a href="https://github.com/ShaoqingRen/faster_rcnn">代码</a>已公开</p>
</blockquote>
<hr>
<h4 id="9-梯度下降"><a href="#9-梯度下降" class="headerlink" title="9 梯度下降"></a>9 <a id="梯度下降"><a href="https://www.jianshu.com/p/c7e642877b0e">梯度下降</a></a></h4><blockquote>
<p>百度百科解释：梯度下降是迭代法的一种,可以用于求解最小二乘问题(线性和非线性都可以)。在求解机器学习算法的模型参数，即无约束优化问题时，梯度下降（Gradient Descent）是最常采用的方法之一，另一种常用的方法是最小二乘法。在求解损失函数的最小值时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数和模型参数值。反过来，如果我们需要求解损失函数的最大值，这时就需要用梯度上升法来迭代了。在机器学习中，基于基本的梯度下降法发展了两种梯度下降方法，分别为随机梯度下降法和批量梯度下降法</p>
</blockquote>
<p><a href="https://crazyjums.github.io/2019/11/21/gradient-descent">详细了解什么是梯度下降</a></p>
<hr>
<h4 id="10-损失函数"><a href="#10-损失函数" class="headerlink" title="10 损失函数"></a>10 <a href="https://blog.csdn.net/qq_24753293/article/details/78788844">损失函数</a></h4><blockquote>
<p>损失函数（loss function）或代价函数（cost function）是将随机事件或其有关随机变量的取值映射为非负实数以表示该随机事件的“风险”或“损失”的函数。在应用中，损失函数通常作为学习准则与优化问题相联系，即通过最小化损失函数求解和评估模型。</p>
</blockquote>
<p><strong>损失函数的作用：衡量模型模型预测的好坏</strong></p>
<blockquote>
<p>比如你做一个线性回归，实际值和你的 预测值肯定会有误差，那么我们找到一个函数表达这个误差就是损失函数  </p>
</blockquote>
<p>损失函数与鲁棒性的关系：   </p>
<blockquote>
<p>损失函数（loss function）是用来估量你模型的预测值f(x)与真实值Y的不一致程度，它是一个非负实值函数,通常使用L(Y, f(x))来表示，损失函数越小，模型的鲁棒性就越好。</p>
</blockquote>
<p>常用的损失函数：<br>(1) 0-1损失函数(0-1 lossfunction):<br>L(Y,f(X))={1,0,Y≠f(X)Y=f(X)<br>(2)平方损失函数(quadraticloss function)<br>L(Y,f(X))=(Y−f(X))2<br>(3)绝对损失函数(absoluteloss function)<br>L(Y,f(X))=|Y−f(X)|<br>(4)对数损失函数(logarithmicloss function)或对数似然损失函数(log-likelihood loss function)<br>L(Y,P(Y|X))=−logP(Y|X)</p>
<hr>
<h4 id="11-激活函数"><a href="#11-激活函数" class="headerlink" title="11 激活函数"></a>11 <a href="https://baike.baidu.com/item/激活函数/2520792?fr=aladdin">激活函数</a></h4><blockquote>
<p>实际上．激活函数也是在模拟神经元的特点。人体的祌经元不是接收到输入就会全部输出的，是当输入达到一定的阈值后，线性或非线性的将输入转化成输出，这也就是激活函数的原理,在人工神经网络中，<a href="https://blog.csdn.net/edogawachia/article/details/80043673">激活函数</a>就在神经元的连接形式中，以非线性的映射关系而存在，是神经网络能表达复杂非线性关系的关键所在。</p>
</blockquote>
<h5 id="11-1-sigmoid函数"><a href="#11-1-sigmoid函数" class="headerlink" title="11.1 sigmoid函数"></a>11.1 <a href="https://www.jianshu.com/p/506595ec4b58">sigmoid函数</a></h5><blockquote>
<p>Sigmoid函数是一个在生物学中常见的S型函数，也称为S型生长曲线。 在信息科学中，由于其单增以及反函数单增等性质，Sigmoid函数常被用作神经网络的激活函数，将变量映射到0,1之间<br>sigmoid公式如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/o_191114110431111.png" alt="image"><br>sigmoid函数图像如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/c9fcc3cec3fdfc03f23fbf16d73f8794a5c226dc.jpg" alt="image"></p>
</blockquote>
<p><strong>sigmoid函数的缺点：</strong>   </p>
<ul>
<li>计算量很大</li>
<li>会带来梯度（函数图像中某一点的斜率，即导数）消失的问题</li>
<li>输入的范围基本在[-6,6]之间，当输入的数的绝对值大于6时，效果和6差不多</li>
</ul>
<p>sigmoid函数的Python实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span>/(<span class="number">1</span>+np.exp(-x))</span><br><span class="line"> </span><br><span class="line">sigmoid_inputs = np.arange(-<span class="number">10</span>,<span class="number">10</span>,<span class="number">0.1</span>)</span><br><span class="line">sigmoid_outputs = sigmoid(sigmoid_inputs)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Sigmoid Function Input :: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(sigmoid_inputs))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Sigmoid Function Output :: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(sigmoid_outputs))</span><br><span class="line"> </span><br><span class="line">plt.plot(sigmoid_inputs,sigmoid_outputs)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Sigmoid Inputs&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Sigmoid Outputs&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h5 id="11-2-ReLU函数"><a href="#11-2-ReLU函数" class="headerlink" title="11.2 ReLU函数"></a>11.2 <a id="ReLU函数"><a href="https://www.cnblogs.com/adong7639/p/9213038.html">ReLU函数</a></a></h5><blockquote>
<p>ReLU函数：为了避免sigmoid函数梯度趋于０产生的梯度饱和问题，线性整流函数（Rectified Linear Unit, ReLU),被提出并在卷积神经网络中取得了不错的效果。<br>当输入取值小于0时ReLU不会被激活，特别是在后向传播计算中梯度很容易变为0，这是ReLU函数本身存在的硬饱和，又会带来梯度消失的问题。而且ReLU函数的输出值是不存在负数的，这代表了ReLU也不是以0为均值的函数<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/d788d43f8794a4c25b5e4dd902f41bd5ac6e39c6.jpg" alt="image"><br>CNN中常用。对正数原样输出，负数直接置零。在正数不饱和，在负数硬饱和。<strong>ReLU计算上比sigmoid或者tanh更省计算量</strong>，因为不用exp，因而收敛较快。但是还是非zero-centered。<br>ReLU在负数区域被kill的现象叫做dead ReLU，这样的情况下，有人通过初始化的时候用一个稍微大于零的数比如0.01来初始化神经元，从而使得ReLU更偏向于激活而不是死掉，但是这个方法是否有效有争议。</p>
</blockquote>
<p><strong>ReLU的好处：</strong>   </p>
<ul>
<li>计算量很小，吗，速度很快   </li>
<li>图像本身就没有负的像素值   </li>
<li>解决了梯度消失的问题    </li>
</ul>
<h5 id="11-3-LeakyReLU函数"><a href="#11-3-LeakyReLU函数" class="headerlink" title="11.3 LeakyReLU函数"></a>11.3 <a id="LeakyReLU函数">LeakyReLU函数</a></h5><blockquote>
<p>为了解决上述的dead ReLU现象。这里选择一个数，让负数区域不在饱和死掉。这里的斜率都是确定的。<img src= "/img/loading.gif" data-src="https://jums.club/images/article/dfbsdfgsdfg.png" alt="image"></p>
</blockquote>
<h5 id="11-4-PReLU函数"><a href="#11-4-PReLU函数" class="headerlink" title="11.4 PReLU函数"></a>11.4 <a id="PReLU函数">PReLU函数</a></h5><blockquote>
<p>PReLU(Parametric Rectified Linear Unit)顾名思义：带参数的ReLU,<a href="https://blog.csdn.net/shuzfan/article/details/51345832#prelu%E6%BF%80%E6%B4%BB">PReLU函数</a>是为了解决ReLU的硬饱和问题产生的激活函数，在LeakyReLU函数中，斜率是固定的，这里的PRelu函数的斜率a是不固定的一个值，这个值可以在运算过程中不算学习改变原来的值。<strong>计算量不是很大，因为不用计算exp</strong><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20160508143448263.png" alt="image"></p>
</blockquote>
<h5 id="11-5-ELU函数"><a href="#11-5-ELU函数" class="headerlink" title="11.5 ELU函数"></a>11.5 <a id="ELU函数">ELU函数</a></h5><blockquote>
<p>ELU函数是Sigmoid函数和ReLU函数的结合体，它的提出主要是为了解决ReLUＵ函数输入负值时陷入卡死的问题<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20180422215147575.png" alt="image"><br>具有ReLU的优势，且输出均值接近零，实际上PReLU和LeakyReLU都有这一优点。有负数饱和区域，从而对噪声有一些鲁棒性。可以看做是介于ReLU和LeakyReLU之间的一个东西。当然，这个函数也需要计算exp，从而<strong>计算量上更大一些</strong>。<br>ELU的优点：<br>和PReLU一样，ELU也引入了可学习的斜率a，使得激活函数在负半段是存在输出值的。但是和PReLU不一样的是，当输入值小于０时ELU的结构为非线性单元，这使得ELU具有良好的鲁棒性和抗干扰能力，但是还是具有一定程度的软饱和性</p>
</blockquote>
<h5 id="11-6-tan-h-函数"><a href="#11-6-tan-h-函数" class="headerlink" title="11.6 tan(h)函数"></a>11.6 tan(h)函数</h5><blockquote>
<p>tanh是双曲函数中的一个，tanh()为双曲正切。在数学中，双曲正切“tanh”是由双曲正弦和双曲余弦这两种基本双曲函数推导而来。<br>tan(h)函数的公式为：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/5366d0160924ab188eed6a943dfae6cd7a890b9d.png" alt="image"><br>tan(h)函数的图像为：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/29381f30e924b8994bb77cac64061d950b7bf69f.png" alt="image"></p>
</blockquote>
<h5 id="11-7-softmax函数"><a href="#11-7-softmax函数" class="headerlink" title="11.7 softmax函数"></a>11.7 softmax函数</h5><blockquote>
<p>softmax逻辑回归模型是logistic回归模型在多分类问题上的推广，在多分类问题中，类标签y可以取两个以上的值。 Softmax回归模型对于诸如MNIST手写数字分类等问题是很有用的，该问题的目的是辨识10个不同的单个数字。Softmax回归是有监督的，不过后面也会介绍它与深度学习无监督学习方法的结合。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/asdfsdaffasdf.jpg" alt="softmax function"><br>公式：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191128170755.png" alt="softmax 公式"></p>
</blockquote>
<h4 id="12-残差（Residual）"><a href="#12-残差（Residual）" class="headerlink" title="12 残差（Residual）"></a>12 残差（Residual）</h4><blockquote>
<p>残差在数理统计中是指实际观察值与估计值（拟合值）之间的差。“残差”蕴含了有关模型基本假设的重要信息。如果回归模型正确的话， 我们可以将残差看作误差的观测值。</p>
</blockquote>
<p>比如：<br>y_true=10,y^=9.8,residual=y_true-y^=0.2</p>
<h4 id="13-残差-Residual-和损失-loss-函数的区别"><a href="#13-残差-Residual-和损失-loss-函数的区别" class="headerlink" title="13 残差(Residual)和损失(loss)函数的区别"></a>13 残差(Residual)和损失(loss)函数的区别</h4><p><strong>什么是残差：</strong>   </p>
<blockquote>
<p>残差在数理统计中是指实际观察值与估计值（拟合值）之间的差。“残差”蕴含了有关模型基本假设的重要信息。如果回归模型正确的话， 我们可以将残差看作误差的观测值。</p>
</blockquote>
<blockquote>
<p>比如：<br>y_true=10,y^=9.8,re</p>
<p>sidual=y_true-y^=0.2</p>
</blockquote>
<p><strong>什么是损失：</strong>   </p>
<blockquote>
<p>损失函数（loss function）或代价函数（cost function）是将随机事件或其有关随机变量的取值映射为非负实数以表示该随机事件的“风险”或“损失”的函数。在应用中，损失函数通常作为学习准则与优化问题相联系，即通过最小化损失函数求解和评估模型。</p>
</blockquote>
<h4 id="14-生成对抗网络（GAN）"><a href="#14-生成对抗网络（GAN）" class="headerlink" title="14 生成对抗网络（GAN）"></a>14 生成对抗网络（GAN）</h4><blockquote>
<p>生成式对抗网络（GAN, Generative Adversarial Networks ）是一种深度学习模型，是近年来复杂分布上无监督学习最具前景的方法之一。模型通过框架中（至少）两个模块：生成模型（Generative Model）和判别模型（Discriminative Model）的互相博弈学习产生相当好的输出。原始 GAN 理论中，并不要求 G 和 D 都是神经网络，只需要是能拟合相应生成和判别的函数即可。但实用中一般均使用深度神经网络作为 G 和 D 。一个优秀的GAN应用需要有良好的训练方法，否则可能由于神经网络模型的自由性而导致输出不理想。</p>
</blockquote>
<p><a href="https://www.cnblogs.com/bonelee/p/9166084.html">详细了解生成对抗网络</a></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>basic knowledge</tag>
        <tag>cv</tag>
        <tag>glossary</tag>
      </tags>
  </entry>
  <entry>
    <title>select、poll和epoll区别</title>
    <url>/diff-in-select-poll-epoll/</url>
    <content><![CDATA[<h2 id="一、名词解释"><a href="#一、名词解释" class="headerlink" title="一、名词解释"></a>一、名词解释</h2><h3 id="1-1-用户空间与内核空间"><a href="#1-1-用户空间与内核空间" class="headerlink" title="1.1 用户空间与内核空间"></a>1.1 用户空间与内核空间</h3><p>现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（<code>kernel</code>），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。针对linux操作系统而言，将最高的1G字节（从虚拟地址<code>0xC0000000</code>到<code>0xFFFFFFFF</code>），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址<code>0x00000000</code>到<code>0xBFFFFFFF</code>），供各个进程使用，称为用户空间。</p>
<h3 id="1-2-进程切换"><a href="#1-2-进程切换" class="headerlink" title="1.2 进程切换"></a>1.2 进程切换</h3><p>为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。</p>
<p>从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：</p>
<ol>
<li>保存处理机上下文，包括程序计数器和其他寄存器。</li>
<li>更新PCB信息。</li>
<li>把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列</li>
<li>选择另一个进程执行，并更新其PCB。</li>
<li>更新内存管理的数据结构。</li>
<li>恢复处理机上下文。</li>
</ol>
<p>注：<strong>总而言之就是很耗资源</strong>，具体的可以参考这篇文章：<a href="http://guojing.me/linux-kernel-architecture/posts/process-switch/">进程切换</a></p>
<h3 id="1-3-进程的阻塞"><a href="#1-3-进程的阻塞" class="headerlink" title="1.3 进程的阻塞"></a>1.3 进程的阻塞</h3><p>正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行阻塞原语(<code>Block</code>)，使自己由运行状态变为阻塞状态。可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程（获得<code>CPU</code>），才可能将其转为阻塞状态。<code>当进程进入阻塞状态，是不占用CPU资源的</code>。</p>
<h3 id="1-4-文件描述符fd"><a href="#1-4-文件描述符fd" class="headerlink" title="1.4 文件描述符fd"></a>1.4 文件描述符fd</h3><p>文件描述符（<code>File descriptor</code>）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。</p>
<p>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于<code>UNIX</code>、<code>Linux</code>这样的操作系统。</p>
<h3 id="1-5-缓存-I-O"><a href="#1-5-缓存-I-O" class="headerlink" title="1.5 缓存 I/O"></a>1.5 缓存 I/O</h3><p>缓存 <code>I/O</code> 又被称作标准 <code>I/O</code>，大多数文件系统的默认 <code>I/O</code> 操作都是缓存 <code>I/O</code>。在 <code>Linux</code> 的缓存 <code>I/O</code> 机制中，操作系统会将 <code>I/O</code> 的数据缓存在文件系统的页缓存（ <code>page cache</code> ）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。</p>
<p><strong>缓存 I/O 的缺点：</strong><br>数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，这些数据拷贝操作所带来的 <code>CPU</code> 以及内存开销是非常大的。</p>
<h2 id="epoll和select的区别"><a href="#epoll和select的区别" class="headerlink" title="epoll和select的区别"></a>epoll和select的区别</h2><blockquote>
<p>假设你在大学读书，住的宿舍楼有很多间房间，你的朋友要来找你。 select版宿管大妈就会带着你的朋友挨个房间去找，直到找到你为止。 而epoll版宿管大妈会先记下每位同学的房间号， 你的朋友来时，只需告诉你的朋友你住在哪个房间即可，不用亲自带着你的朋友满大楼找人。 如果来了10000个人，都要找自己住这栋楼的同学时，select版和epoll版宿管大妈，谁的效率更高，不言自明。 同理，在高并发服务器中，轮询I/O是最耗时间的操作之一，select和epoll的性能谁的性能更高，同样十分明了。<br>select的调用复杂度是线性的，即O(n)。举个例子，一个保姆照看一群孩子，如果把孩子是否需要尿尿比作网络IO事件，select的作用就好比这个保姆挨个询问每个孩子：你要尿尿吗？如果孩子回答是，保姆则把孩子拎出来放到另外一个地方。当所有孩子询问完之后，保姆领着这些要尿尿的孩子去上厕所（处理网络IO事件）。 还是以保姆照看一群孩子为例，在epoll机制下，保姆不再需要挨个的询问每个孩子是否需要尿尿。取而代之的是，每个孩子如果自己需要尿尿的时候，自己主动的站到事先约定好的地方，而保姆的职责就是查看事先约定好的地方是否有孩子。如果有小孩，则领着孩子去上厕所（网络事件处理）。因此，epoll的这种机制，能够高效的处理成千上万的并发连接，而且性能不会随着连接数增加而下降。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/v2-3c486898d786b26259c6abd6854794f5_720w.jpg" alt="img"></p>
<p>select单个进程可监视的fd数量受到限制 epoll和select都可以实现同时监听多个I/O事件的状态。</p>
<ul>
<li>select 基于轮训机制</li>
<li>epoll基于操作系统支持的I/O通知机制 epoll支持水平触发和边沿触发两种模式。</li>
</ul>
<h2 id="1-select"><a href="#1-select" class="headerlink" title="1 select"></a>1 select</h2><p>select本质上是通过设置或检查存放fd标志位的数据结构进行下一步处理。 这带来缺点： - 单个进程可监视的fd数量被限制，即能监听端口的数量有限 单个进程所能打开的最大连接数有<code>FD_SETSIZE</code>宏定义，其大小是32个整数的大小（在32位的机器上，大小就是3232，同理64位机器上FD_SETSIZE为3264），当然我们可以对进行修改，然后重新编译内核，但是性能可能会受到影响，这需要进一步的测试 一般该数和系统内存关系很大，具体数目可以<code>cat /proc/sys/fs/file-max</code>察看。32位机默认1024个，64位默认2048。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/v2-62bedee13b5fa6c4022ade31c942316c_720w.png" alt="img"></p>
<ul>
<li>对socket是线性扫描，即轮询，效率较低： 仅知道有I/O事件发生，却不知是哪几个流，只会无差异轮询所有流，找出能读数据或写数据的流进行操作。同时处理的流越多，无差别轮询时间越长 - O(n)。</li>
</ul>
<p>当socket较多时，每次select都要通过遍历<code>FD_SETSIZE</code>个socket，不管是否活跃，这会浪费很多CPU时间。如果能给 socket 注册某个回调函数，当他们活跃时，自动完成相关操作，即可避免轮询，这就是<strong>epoll</strong>与<strong>kqueue</strong>。</p>
<h3 id="1-1-调用过程"><a href="#1-1-调用过程" class="headerlink" title="1.1 调用过程"></a>1.1 调用过程</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/v2-c6f11f735069b37a920907c14e3c5331_720w.jpg" alt="img"></p>
<p>（1）使用copy_from_user从用户空间拷贝fd_set到内核空间</p>
<p>（2）注册回调函数__pollwait</p>
<p>（3）遍历所有fd，调用其对应的poll方法（对于socket，这个poll方法是sock_poll，sock_poll根据情况会调用到tcp_poll,udp_poll或者datagram_poll）</p>
<p>（4）以tcp_poll为例，其核心实现就是__pollwait，也就是上面注册的回调函数。</p>
<p>（5）__pollwait的主要工作就是把current（当前进程）挂到设备的等待队列中，不同的设备有不同的等待队列，对于tcp_poll来说，其等待队列是sk-&gt;sk_sleep（注意把进程挂到等待队列中并不代表进程已经睡眠了）。在设备收到一条消息（网络设备）或填写完文件数据（磁盘设备）后，会唤醒设备等待队列上睡眠的进程，这时current便被唤醒了。</p>
<p>（6）poll方法返回时会返回一个描述读写操作是否就绪的mask掩码，根据这个mask掩码给fd_set赋值。</p>
<p>（7）如果遍历完所有的fd，还没有返回一个可读写的mask掩码，则会调用schedule_timeout是调用select的进程（也就是current）进入睡眠。当设备驱动发生自身资源可读写后，会唤醒其等待队列上睡眠的进程。如果超过一定的超时时间（schedule_timeout指定），还是没人唤醒，则调用select的进程会重新被唤醒获得CPU，进而重新遍历fd，判断有没有就绪的fd。</p>
<p>（8）把fd_set从内核空间拷贝到用户空间。</p>
<h3 id="1-2-缺点"><a href="#1-2-缺点" class="headerlink" title="1.2 缺点"></a>1.2 缺点</h3><p>内核需要将消息传递到用户空间，都需要内核拷贝动作。需要维护一个用来存放大量fd的数据结构，使得用户空间和内核空间在传递该结构时复制开销大。</p>
<ul>
<li><p>每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大</p>
</li>
<li><p>同时每次调用select都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大</p>
</li>
<li><ul>
<li>select支持的文件描述符数量太小了，默认是1024</li>
</ul>
</li>
</ul>
<h2 id="2-poll"><a href="#2-poll" class="headerlink" title="2 poll"></a>2 poll</h2><p>poll的实现和select非常相似，只是描述fd集合的方式不同，poll使用pollfd结构而不是select的fd_set结构，其他的都差不多,管理多个描述符也是进行轮询，根据描述符的状态进行处理，但是poll没有最大文件描述符数量的限制。poll和select同样存在一个缺点就是，包含大量文件描述符的数组被整体复制于用户态和内核的地址空间之间，而不论这些文件描述符是否就绪，它的开销随着文件描述符数量的增加而线性增大。</p>
<ul>
<li><p>它将用户传入的数组拷贝到内核空间</p>
</li>
<li><p>然后查询每个fd对应的设备状态：</p>
</li>
<li><ul>
<li>如果设备就绪 在设备等待队列中加入一项继续遍历</li>
<li>若遍历完所有fd后，都没发现就绪的设备 挂起当前进程，直到设备就绪或主动超时，被唤醒后它又再次遍历fd。这个过程经历多次无意义的遍历。</li>
</ul>
</li>
</ul>
<p>没有最大连接数限制，因其基于链表存储，其缺点： - 大量fd数组被整体复制于用户态和内核地址空间间，而不管是否有意义 - 如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd</p>
<h2 id="3-epoll"><a href="#3-epoll" class="headerlink" title="3 epoll"></a>3 epoll</h2><p>可理解为<strong>event poll</strong>，epoll会把哪个流发生哪种I/O事件通知我们。所以epoll是事件驱动（每个事件关联fd）的，此时我们对这些流的操作都是有意义的。复杂度也降低到了O(1)。</p>
<h3 id="3-1-触发模式"><a href="#3-1-触发模式" class="headerlink" title="3.1 触发模式"></a>3.1 触发模式</h3><p><strong>EPOLLLT</strong>和<strong>EPOLLET</strong>两种：</p>
<ul>
<li>LT，默认的模式（水平触发） 只要该fd还有数据可读，每次 <code>epoll_wait</code> 都会返回它的事件，提醒用户程序去操作，</li>
<li>ET是“高速”模式（边缘触发）</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/v2-310cc7857eabd42e324c109b5ca85b1d_720w.png" alt="img"></p>
<p>只会提示一次，直到下次再有数据流入之前都不会再提示，无论fd中是否还有数据可读。所以在ET模式下，read一个fd的时候一定要把它的buffer读完，即读到read返回值小于请求值或遇到EAGAIN错误</p>
<p>epoll使用“事件”的就绪通知方式，通过<code>epoll_ctl</code>注册fd，一旦该fd就绪，内核就会采用类似回调机制激活该fd，<code>epoll_wait</code>便可收到通知。</p>
<h4 id="1-EPOLLET触发模式的意义"><a href="#1-EPOLLET触发模式的意义" class="headerlink" title="(1) EPOLLET触发模式的意义"></a>(1) EPOLLET触发模式的意义</h4><p>若用<code>EPOLLLT</code>，系统中一旦有大量无需读写的就绪文件描述符，它们每次调用<code>epoll_wait</code>都会返回，这大大降低处理程序检索自己关心的就绪文件描述符的效率。 而采用<code>EPOLLET</code>，当被监控的文件描述符上有可读写事件发生时，<code>epoll_wait</code>会通知处理程序去读写。如果这次没有把数据全部读写完(如读写缓冲区太小)，那么下次调用<code>epoll_wait</code>时，它不会通知你，即只会通知你一次，直到该文件描述符上出现第二次可读写事件才会通知你。这比水平触发效率高，系统不会充斥大量你不关心的就绪文件描述符。</p>
<h3 id="3-2-优点"><a href="#3-2-优点" class="headerlink" title="3.2 优点"></a>3.2 优点</h3><ul>
<li>没有最大并发连接的限制，能打开的FD的上限远大于1024（1G的内存上能监听约10万个端口）</li>
<li>效率提升，不是轮询，不会随着FD数目的增加效率下降。只有活跃可用的FD才会调用callback函数 即Epoll最大的优点就在于它只关心“活跃”的连接，而跟连接总数无关，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll</li>
<li>内存拷贝，利用mmap()文件映射内存加速与内核空间的消息传递；即epoll使用mmap减少复制开销。</li>
<li>epoll通过内核和用户空间共享一块内存来实现的</li>
</ul>
<p>表面上看epoll的性能最好，但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。</p>
<p>epoll跟select都能提供多路I/O复用的解决方案。在现在的Linux内核里有都能够支持，其中epoll是Linux所特有，而select则应该是POSIX所规定，一般操作系统均有实现。</p>
<p>select和poll都只提供了一个函数——select或者poll函数。而epoll提供了三个函数，epoll_create,epoll_ctl和epoll_wait，epoll_create是创建一个epoll句柄；epoll_ctl是注册要监听的事件类型；epoll_wait则是等待事件的产生。 - 对于第一个缺点，epoll的解决方案在epoll_ctl函数中。每次注册新的事件到epoll句柄中时（在epoll_ctl中指定EPOLL_CTL_ADD），会把所有的fd拷贝进内核，而不是在epoll_wait的时候重复拷贝。epoll保证了每个fd在整个过程中只会拷贝一次。 - 对于第二个缺点，epoll的解决方案不像select或poll一样每次都把current轮流加入fd对应的设备等待队列中，而只在epoll_ctl时把current挂一遍（这一遍必不可少）并为每个fd指定一个回调函数，当设备就绪，唤醒等待队列上的等待者时，就会调用这个回调函数，而这个回调函数会把就绪的fd加入一个就绪链表）。epoll_wait的工作实际上就是在这个就绪链表中查看有没有就绪的fd（利用schedule_timeout()实现睡一会，判断一会的效果，和select实现中的第7步是类似的）。 - 对于第三个缺点，epoll没有这个限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左右，具体数目可以cat /proc/sys/fs/file-max察看,一般来说这个数目和系统内存关系很大。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>select，poll，epoll都是IO多路复用机制，即可以监视多个描述符，一旦某个描述符就绪（读或写就绪），能够通知程序进行相应读写操作。 但select，poll，epoll本质上都是<strong>同步I/O</strong>，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</p>
<ul>
<li>select，poll实现需要自己不断轮询所有fd集合，直到设备就绪，期间可能要睡眠和唤醒多次交替。而epoll其实也需要调用epoll_wait不断轮询就绪链表，期间也可能多次睡眠和唤醒交替，但是它是设备就绪时，调用回调函数，把就绪fd放入就绪链表中，并唤醒在epoll_wait中进入睡眠的进程。虽然都要睡眠和交替，但是select和poll在“醒着”的时候要遍历整个fd集合，而epoll在“醒着”的时候只要判断一下就绪链表是否为空就行了，这节省了大量的CPU时间。这就是回调机制带来的性能提升。</li>
<li>select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，并且要把current往设备等待队列中挂一次，而epoll只要一次拷贝，而且把current往等待队列上挂也只挂一次（在epoll_wait的开始，注意这里的等待队列并不是设备等待队列，只是一个epoll内部定义的等待队列）。这也能节省不少的开销。</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/272891398">https://zhuanlan.zhihu.com/p/272891398</a></li>
<li><a href="https://segmentfault.com/a/1190000003063859">https://segmentfault.com/a/1190000003063859</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>@classmethod和@staticmethod的区别，python中静态方法和类方法以及普通方法的区别</title>
    <url>/distiction-of-classmethod-staticmethod/</url>
    <content><![CDATA[<h3 id="1-区别"><a href="#1-区别" class="headerlink" title="1 区别"></a>1 区别</h3><ul>
<li>普通方法：由实例化类之后的对象调用，不能有类直接调用，在类中，至少有一个参数，就是<code>self</code></li>
<li>静态方法：可以由类直接调用，也可以有实例化类之后的对象调用，没有默认参数<code>self</code>，可以由其他参数</li>
<li>类方法：可以直接由类调用，有一个默认参数，<code>cls</code>，即当前类。</li>
</ul>
<blockquote>
<p>异同点：   </p>
<ul>
<li>三种方法都可以有实例化类之后的对象调用，因为实例化后的类，也具有类的属性</li>
<li>除了普通方法外，其余两个方法，都可以直接使用为初始化（即未实例化）的类直接调用</li>
</ul>
</blockquote>
<h3 id="2-代码介绍"><a href="#2-代码介绍" class="headerlink" title="2 代码介绍"></a>2 代码介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">normal_class</span>(<span class="params">self, pa</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is a normal class , param is [&#123;&#125;]&quot;</span>.<span class="built_in">format</span>(pa))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_class</span>(<span class="params">pa</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is static method, there is no default param. &#123;&#125;&quot;</span>.<span class="built_in">format</span>(pa))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_method</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is a class method, param is [&#123;&#125;]&quot;</span>.<span class="built_in">format</span>(cls))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 普通方法调用方法</span></span><br><span class="line">    test = Test()</span><br><span class="line">    test.normal_class(<span class="string">&quot;普通方法&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 静态方法调用方法</span></span><br><span class="line">    Test.static_class(<span class="string">&quot;静态方法&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 类方法调用方法</span></span><br><span class="line">    Test.class_method()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>this is a normal class , param is [普通方法]<br>this is static method, there is no default param. 静态方法<br>this is a class method, param is [&lt;class ‘<strong>main</strong>.Test’&gt;]   </p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>数字图像处理（dip）</title>
    <url>/dip/</url>
    <content><![CDATA[<h2 id="学科：数字图像处理（Digital-Image-Processing-video）"><a href="#学科：数字图像处理（Digital-Image-Processing-video）" class="headerlink" title="学科：数字图像处理（Digital Image Processing -video）"></a>学科：<a href="[https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/5199259?fr=aladdin](https://baike.baidu.com/item/数字图像处理/5199259?fr=aladdin)">数字图像处理</a>（<a href="https://www.bilibili.com/video/av61178093/">Digital Image Processing -video</a>）</h2><h2 id="作者：zhuhonggen"><a href="#作者：zhuhonggen" class="headerlink" title="作者：zhuhonggen"></a>作者：zhuhonggen</h2><hr>
<h1 id="计算机视觉入门基础"><a href="#计算机视觉入门基础" class="headerlink" title="计算机视觉入门基础"></a>计算机视觉入门基础</h1><h2 id="0概念介绍"><a href="#0概念介绍" class="headerlink" title="0概念介绍"></a>0概念介绍</h2><h3 id="0-1数字图像处理概念"><a href="#0-1数字图像处理概念" class="headerlink" title="0.1数字图像处理概念"></a>0.1数字图像处理概念</h3><h4 id="0-1-1图像的高频分量和低频分量"><a href="#0-1-1图像的高频分量和低频分量" class="headerlink" title="0.1.1图像的高频分量和低频分量"></a>0.1.1<a href="https://blog.csdn.net/Chaolei3/article/details/79443520">图像的高频分量和低频分量</a></h4><blockquote>
<p>总得来说，低频分量（低频信号）代表着图像中亮度或者灰度值变化缓慢的区域，也就是图像中大片平坦的区域，描述了图像的主要部分。高频分量（高频信号）对应着图像变化剧烈的部分，也就是图像的边缘（轮廓）或者噪声以及细节部分。<br>之所以说噪声也对应着高频分量，是因为图像噪声在大部分情况下都是高频的。<br>低频分量：主要对整幅图像强度的综合度量。高频分量：主要是对图像边缘和轮廓的度量。而人眼对高频分量比较敏感。<br>我们试着用傅立叶变换站在另外一个角度观察图像，将图像从灰度分布转化到频率分布（频谱图）上去观察图像的特征。需要了解的是，图像进行二维傅立叶变换之后得到的频谱图，就是图像梯度的分布图。具体的，傅立叶频谱图上我们能看到明暗不一的亮点，实际是图像上某一点与邻域点差异的强弱，即梯度的大小。<br>所以说，如果一幅图像的各个位置的强度大小相等，则图像只存在低频分量。从图像的频谱图上看，只有一个主峰,且位于频率为零的位置.。需要提一句的是，图像的频谱图可以由傅里叶变换得到。<br>如果一幅图像的各个位置的强度变化剧烈，则图像不仅存在低频分量，同时也存在多种高频分量。从图像的频谱上看，不仅有一个主峰,同时也存在多个旁峰。可以这样理解：图像中的低频分量就是图像中梯度较小的部分，高频分量则相反。<br>从直方图上看，低频分量对应直方图内大块区域，而小块或者离散的区域就是高频分量。这说明低频分量占据了图像的主要部分。<br>从二维函数上理解，变化剧烈的地方就是高频分量，变化少的地方就是低频分量。</p>
</blockquote>
<h4 id="0-1-2采样定理"><a href="#0-1-2采样定理" class="headerlink" title="0.1.2采样定理"></a>0.1.2<a href="https://baike.baidu.com/item/%E9%87%87%E6%A0%B7%E5%AE%9A%E7%90%86/8599843?fr=aladdin">采样定理</a></h4><blockquote>
<p>样定理是美国电信工程师H.奈奎斯特在1928年提出的，在数字信号处理领域中，采样定理是连续时间信号（通常称为“模拟信号”）和离散时间信号（通常称为“数字信号”）之间的基本桥梁。该定理说明采样频率与信号频谱之间的关系，是连续信号离散化的基本依据。 它为采样率建立了一个足够的条件，该采样率允许离散采样序列从有限带宽的连续时间信号中捕获所有信息。</p>
</blockquote>
<h5 id="0-1-2-1定理说明"><a href="#0-1-2-1定理说明" class="headerlink" title="0.1.2.1定理说明"></a>0.1.2.1定理说明</h5><blockquote>
<p>采样过程所应遵循的规律，又称取样定理、抽样定理。采样定理说明采样频率与信号频谱之间的关系，是连续信号离散化的基本依据。<br>在进行模拟/数字信号的转换过程中，当采样频率fs.max大于信号中最高频率fmax的2倍时(fs.max&gt;2fmax)，采样之后的数字信号完整地保留了原始信号中的信息，一般实际应用中保证采样频率为信号最高频率的2.56～4倍；采样定理又称奈奎斯特定理。<br>如果对信号的其它约束是已知的，则当不满足采样率标准时，完美重建仍然是可能的。 在某些情况下（当不满足采样率标准时），利用附加的约束允许近似重建。 这些重建的保真度可以使用Bochner定理来验证和量化。</p>
</blockquote>
<h4 id="0-1-3PCM编码"><a href="#0-1-3PCM编码" class="headerlink" title="0.1.3PCM编码"></a>0.1.3<a href="https://baike.baidu.com/item/pcm%E7%BC%96%E7%A0%81/10865033?fr=aladdin">PCM编码</a></h4><blockquote>
<p>PCM（Pulse Code Modulation）脉冲编码调制是数字通信的编码方式之一。主要过程是将话音、图像等模拟信号每隔一定时间进行取样，使其离散化，同时将抽样值按分层单位四舍五入取整量化，同时将抽样值按一组二进制码来表示抽样脉冲的幅值。</p>
</blockquote>
<h4 id="0-1-4图像分辨率"><a href="#0-1-4图像分辨率" class="headerlink" title="0.1.4图像分辨率"></a>0.1.4<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%83%8F%E5%88%86%E8%BE%A8%E7%8E%87/872374?fr=aladdin">图像分辨率</a></h4><blockquote>
<p>图像分辨率指图像中存储的信息量，是每英寸图像内有多少个像素点，分辨率的单位为PPI(Pixels Per Inch)，通常叫做像素每英寸。图像分辨率一般被用于ps中，用来改变图像的清晰度。</p>
</blockquote>
<h5 id="0-1-4-1图像分辨率原理"><a href="#0-1-4-1图像分辨率原理" class="headerlink" title="0.1.4.1图像分辨率原理"></a>0.1.4.1图像分辨率原理</h5><blockquote>
<p>数码图像有两大类，一类是矢量图，也叫向量图；另一类是点阵图，也叫位图。矢量图比较简单，它是由大量数学方程式创建的，其图形是由线条和填充颜色的块面构成的，而不是由像素组成的，对这种图形进行放大和缩小，不会引起图形失真。<br>点阵图很复杂，是通过摄像机、数码相机和扫描仪等设备，利用扫描的方法获得，由像素组成的，是以每英寸的像素数（PPI）来衡量。点阵图具有精细的图像结构、丰富的灰度层次和广阔的颜色阶调。当然，矢量图经过图像软件的处理，也可以转换成点阵图。家庭影院所使用的图像，动画片的原图属于矢量图一类，但经过制作中的转化，已经和其他电影片一样，也属于点阵图一类了。</p>
</blockquote>
<h4 id="0-1-5显示分辨率"><a href="#0-1-5显示分辨率" class="headerlink" title="0.1.5显示分辨率"></a>0.1.5<a href="https://baike.baidu.com/item/%E6%98%BE%E7%A4%BA%E5%88%86%E8%BE%A8%E7%8E%87/3431933?fr=aladdin">显示分辨率</a></h4><blockquote>
<p>显示分辨率是显示器在显示图像时的分辨率，分辨率是用点来衡量的，显示器上这个“点”就是指像素(pixel)。显示分辨率的数值是指整个显示器所有可视面积上水平像素和垂直像素的数量。例如800×600的分辨率，是指在整个屏幕上水平显示800个像素，垂直显示600个像素。</p>
</blockquote>
<h5 id="0-1-5-1清晰度和眼睛辨识度的关系"><a href="#0-1-5-1清晰度和眼睛辨识度的关系" class="headerlink" title="0.1.5.1清晰度和眼睛辨识度的关系"></a>0.1.5.1清晰度和眼睛辨识度的关系</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/01111wx_fmt.png" alt="视觉效果和绝对清晰度"></p>
</blockquote>
<h4 id="0-1-6像素深度"><a href="#0-1-6像素深度" class="headerlink" title="0.1.6像素深度"></a>0.1.6像素深度</h4><blockquote>
<p>像素深度是指存储每个像素所用的位数，也用它来度量图像的分辨率。像素深度决定彩色图像的每个像素可能有的颜色数，或者确定灰度图像的每个像素可能有的灰度级数。<br>例如，一幅彩色图像的每个像素用R，G，B三个分量表示，若每个分量用8位，那么一个像素共用24位表示，就说像素的深度为24，每个像素可以是16 777 216（2的24次方）种颜色中的一种。在这个意义上，往往把像素深度说成是图像深度。表示一个像素的位数越多，它能表达的颜色数目就越多，而它的深度就越深。</p>
</blockquote>
<h4 id="0-1-7位面数量"><a href="#0-1-7位面数量" class="headerlink" title="0.1.7位面数量"></a>0.1.7位面数量</h4><blockquote>
<p>一幅图像的位面数量相当于组成图像的像素矩阵维数。<br>灰度图像一个位面<br>彩色图像三个位面：红色分量、蓝色分量、绿色分量<br>假定图像尺寸、，每个像素所具有的离散灰度级数为，,那么存储这幅图像所需的位数以及所需的字节数如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/112123123123.png" alt="enter description here"></p>
</blockquote>
<h4 id="0-1-8邻域与邻接"><a href="#0-1-8邻域与邻接" class="headerlink" title="0.1.8邻域与邻接"></a>0.1.8邻域与邻接</h4><h5 id="0-1-8-1领域"><a href="#0-1-8-1领域" class="headerlink" title="0.1.8.1领域"></a>0.1.8.1领域</h5><blockquote>
<p>邻域：数字图像中，邻域分为4邻域和8邻域，4邻域就是某个（x,y）点的上下左右四个点，8邻域再加上左上右上左下右下四个点。如果p在q周围的8个点内，就是p在q的8邻域内。</p>
</blockquote>
<h6 id="0-1-8-1-1四邻域"><a href="#0-1-8-1-1四邻域" class="headerlink" title="0.1.8.1.1四邻域"></a>0.1.8.1.1四邻域</h6><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/sdafasdf.png" alt="4邻域"></p>
</blockquote>
<h6 id="0-1-8-1-2对角邻域"><a href="#0-1-8-1-2对角邻域" class="headerlink" title="0.1.8.1.2对角邻域"></a>0.1.8.1.2对角邻域</h6><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/adsfasdfasdfasdg.png" alt="对角邻域"></p>
</blockquote>
<h6 id="0-1-8-1-3八邻域"><a href="#0-1-8-1-3八邻域" class="headerlink" title="0.1.8.1.3八邻域"></a>0.1.8.1.3八邻域</h6><blockquote>
<p>4邻域和对角邻域的并集就是8邻域</p>
</blockquote>
<h5 id="0-1-8-2邻接"><a href="#0-1-8-2邻接" class="headerlink" title="0.1.8.2邻接"></a>0.1.8.2邻接</h5><blockquote>
<p>邻接：邻接算是包含了邻域，如果说p和q是邻接，那么p和q必须互在邻域内，而且这两个的像素还要都在同一个集合V1内。（什么叫都在集合V1内：假如集合V1包含{012345}，这五个数代表的是像素值，而p值为2，q值为6，那它们两个就不在同一个集合V1内，当然如果有个集合V2，它俩可能也在另一个集合V2内）数字图像中常见的邻接有三种，4邻接、8邻接和m邻接。如果p在q的4邻域内，且q和p的值都在V中，那么p和q是4邻接的，8邻接概念一样。m邻接（mixed，混合邻接）不太一样，如果q和p互在8邻域内，p和q都在V内，且q的4邻域和p的4邻域的共同覆盖的点不在V内，则p和q是m邻接的。m邻接是为了消除8邻接的二义性而引进的。比如有个3*3矩阵{0,1，1；0,1,0；0,0,1}，假设对于V={1}的集合而言，如果两个点能构成邻接，就算有一条路可以通过，那么右上角的1走到右下角的1，如果按照8邻接有两条路，而按照m邻接，只有一条路，这就是m邻接提出的意义。</p>
</blockquote>
<h6 id="0-1-8-2-1四-邻接"><a href="#0-1-8-2-1四-邻接" class="headerlink" title="0.1.8.2.1四-邻接"></a>0.1.8.2.1四-邻接</h6><blockquote>
<ul>
<li>2个像素p和q在V中取值；</li>
<li>且q在中p的4邻域中<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/asdfasdfasdf.png" alt="4-邻接"></li>
</ul>
</blockquote>
<h6 id="0-1-8-2-2八-邻域"><a href="#0-1-8-2-2八-邻域" class="headerlink" title="0.1.8.2.2八-邻域"></a>0.1.8.2.2八-邻域</h6><blockquote>
<ul>
<li>2个像素p和q在V中取值；</li>
<li>且q在中p的8邻域中<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/45454352.png" alt="8-邻域"></li>
</ul>
</blockquote>
<h6 id="0-1-8-2-3四-邻接和八-邻接的关系"><a href="#0-1-8-2-3四-邻接和八-邻接的关系" class="headerlink" title="0.1.8.2.3四-邻接和八-邻接的关系"></a>0.1.8.2.3四-邻接和八-邻接的关系</h6><blockquote>
<p>2个像素p和q在V中取值且满足下列条件之一<br>   1.q在中p的4-邻域中<br>   2.q在中p的对角邻域中且集合N(4)(p)和N(4)(q)是空集<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/454afasdf.png" alt="4和8邻接的关系"><br> <strong>实质：</strong><br> 当像素间同时存在4-邻接和8-邻接时，优先采用4-邻接，屏蔽两个和统一像素间存在4-邻接的像素之间的8-邻接。</p>
</blockquote>
<h6 id="0-1-8-2-2-3m-邻接（混合邻接）"><a href="#0-1-8-2-2-3m-邻接（混合邻接）" class="headerlink" title="0.1.8.2.2.3m-邻接（混合邻接）"></a>0.1.8.2.2.3m-邻接（混合邻接）</h6><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/asdfasdfasasdfas.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/fasdfasdfas.png" alt="enter description here"><br>实质：当像素间同时存在4-邻接和8-邻接时，优先采用4-邻接，屏蔽两个和统一像素间存在4-邻接的像素之间的8-邻接。</p>
</blockquote>
<h4 id="0-1-9连通性"><a href="#0-1-9连通性" class="headerlink" title="0.1.9连通性"></a>0.1.9连通性</h4><h5 id="0-1-9-1通路"><a href="#0-1-9-1通路" class="headerlink" title="0.1.9.1通路"></a>0.1.9.1通路</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/fdfererafa.png" alt="enter description here"></p>
</blockquote>
<h5 id="0-1-9-2连通"><a href="#0-1-9-2连通" class="headerlink" title="0.1.9.2连通"></a>0.1.9.2连通</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/34324234.png" alt="enter description here"><img src= "/img/loading.gif" data-src="https://jums.club/images/article/sdafdsf.png" alt="enter description here"><br>实例：像素s和t间（上图）<br>4-连通：不存在<br>8-连通：2条<br>m-连通：1条</p>
</blockquote>
<h4 id="0-1-10距离度量"><a href="#0-1-10距离度量" class="headerlink" title="0.1.10距离度量"></a>0.1.10距离度量</h4><h5 id="0-1-10-1距离"><a href="#0-1-10-1距离" class="headerlink" title="0.1.10.1距离"></a>0.1.10.1距离</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/55454.png" alt="enter description here"></p>
</blockquote>
<h5 id="0-1-10-2欧氏距离"><a href="#0-1-10-2欧氏距离" class="headerlink" title="0.1.10.2欧氏距离"></a>0.1.10.2欧氏距离</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/545423432.png" alt="enter description here"></p>
</blockquote>
<h5 id="0-1-10-3城市距离"><a href="#0-1-10-3城市距离" class="headerlink" title="0.1.10.3城市距离"></a>0.1.10.3城市距离</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/6565654.png" alt="enter description here"></p>
</blockquote>
<h4 id="0-1-11数字图像格式"><a href="#0-1-11数字图像格式" class="headerlink" title="0.1.11数字图像格式"></a>0.1.11数字图像格式</h4><h5 id="0-1-11-1矢量图"><a href="#0-1-11-1矢量图" class="headerlink" title="0.1.11.1矢量图"></a>0.1.11.1矢量图</h5><blockquote>
<p>用数学公式描述的图像，用一系列绘图指令表示图像；图像中每个形状都用一个完整的公式描述，称为一个对象。<br>优点：<br>A．文件数据量很小；<br>B．图像质量与分辨率无关；<br>无论图像放大或缩小多少倍，总是以显示设备允许的最大清晰度显示。计算机计算与显示图像时，往往能看到画图的过程。<br>缺点：<br>A．不易制作色调丰富或色彩变化太多的图像；<br>B．绘出来的图像不是很逼真；<br>C．不易在不同的软件间交换文件。</p>
</blockquote>
<h5 id="0-1-11-2位图"><a href="#0-1-11-2位图" class="headerlink" title="0.1.11.2位图"></a>0.1.11.2位图</h5><blockquote>
<p>通过像素点表示图像，每个像素具有颜色属性和位置属性。<br>优点：<br>A．显示速度快；<br>B．真实世界的图像可以通过扫描仪、数码相机、摄像机等设备方便的转化为点位图<br>缺点：<br>A．存储和传输时数据量比较大；<br>B．缩放、旋转时算法复杂且容易失真</p>
</blockquote>
<h6 id="0-1-11-2-1线画稿-Line-Art"><a href="#0-1-11-2-1线画稿-Line-Art" class="headerlink" title="0.1.11.2.1线画稿(Line Art)"></a>0.1.11.2.1线画稿(Line Art)</h6><blockquote>
<p>只有黑白两种颜色。适合于由黑白两色构成而没有灰度阴影的图像。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/5645454.png" alt="enter description here"></p>
</blockquote>
<h6 id="0-1-11-2灰度图像-GrayScale"><a href="#0-1-11-2灰度图像-GrayScale" class="headerlink" title="0.1.11.2灰度图像(GrayScale)"></a>0.1.11.2灰度图像(GrayScale)</h6><blockquote>
<p>从技术上说，就是具有从黑到白的若干种灰度的单色图像。<br>若灰度图像像素的灰度级用8bit表示，则每个像素都是介于黑色和白色之间的256(28=256)种灰度种的一种.<br>通常所说的黑白图片，其实包含了黑白之间的所有灰度色调。</p>
</blockquote>
<h6 id="0-1-11-3索引颜色图像-Index-Color"><a href="#0-1-11-3索引颜色图像-Index-Color" class="headerlink" title="0.1.11.3索引颜色图像(Index Color)"></a>0.1.11.3索引颜色图像(Index Color)</h6><blockquote>
<p>索引颜色通常也称为映射颜色。在这种模式下，颜色是一组预先定义的、有限的颜色。<br>索引颜色的图像最多只能显示256中颜色。<br>索引颜色图像在图像文件里定义索引颜色。打开该文件时，构成该图像具有颜色的索引值就被读入程序里，然后根据索引值找到最终的颜色。</p>
</blockquote>
<h6 id="0-1-11-4真彩色图像-True-Color-24位图"><a href="#0-1-11-4真彩色图像-True-Color-24位图" class="headerlink" title="0.1.11.4真彩色图像(True Color)-24位图"></a>0.1.11.4真彩色图像(True Color)-24位图</h6><blockquote>
<p>自然界中几乎所有颜色都可以有红、绿、蓝（R、G、B）组合而成。<br>真彩色图像中，每一个像素由红、绿和蓝三个字节组成，每个字节为8bit，表示0到255之间的不同的亮度值。<br>256×256×256，能表示约1670万种颜色。<br>颜色深度为每个像素24位的数字图像是目前所能获取、浏览和保存的颜色信息最丰富的彩色图像，由于它所表达的颜色远远超出了人眼所能辨别的范围，故将其称为“真彩色”。<br>真彩色图并不是说一幅图包含了所有的颜色，而是说它具有所有颜色的能力，即最多可以包含所有的颜色。<br><strong>常见RGB颜色：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/adfsdfasd.png" alt="enter description here"></p>
</blockquote>
<h4 id="0-1-12图像文件格式"><a href="#0-1-12图像文件格式" class="headerlink" title="0.1.12图像文件格式"></a>0.1.12图像文件格式</h4><blockquote>
<p>图像文件的格式，即图像文件的数据构成。<br>一般每种图像文件均有一个文件头，在文件头之后是图像数据。<br>文件头：一般包含文件类型、文件制作者、制作时间、版本号、文件大小等内容。内容由制作该图像文件的公司决定<br>图像数据：各种图像文件的制作还涉及到图像文件的压缩方式和存储效率等。<br>数字图像有多种存储格式，每种格式一般由不同的开发商支持。随着信息技术的发展和图像应用领域的不断拓宽，还会出现新的图像格式。<br>图像文件格式体系<br>1.互联网用：GIF、JPG、PNG<br>2.印刷用：TIF、JPG、TAG、PCX<br>3.国际标准：TIF、JPG</p>
</blockquote>
<h5 id="0-1-12-1BMP格式"><a href="#0-1-12-1BMP格式" class="headerlink" title="0.1.12.1BMP格式"></a>0.1.12.1<strong>BMP</strong>格式</h5><h6 id="0-1-12-1-1位图文件头"><a href="#0-1-12-1-1位图文件头" class="headerlink" title="0.1.12.1.1位图文件头"></a>0.1.12.1.1位图文件头</h6><blockquote>
<p>位图文件图是一个结构，其定义如下：<img src= "/img/loading.gif" data-src="https://jums.club/images/article/454554.png" alt="enter description here">结构长度固定，为14个字节（WORD为无符号16位整数，DWORD为无符号32位整数）</p>
</blockquote>
<h6 id="0-1-12-1-2位图信息头"><a href="#0-1-12-1-2位图信息头" class="headerlink" title="0.1.12.1.2位图信息头"></a>0.1.12.1.2位图信息头</h6><blockquote>
<p>位图信息头是一个结构，其定义如下：<img src= "/img/loading.gif" data-src="https://jums.club/images/article/aasdfasdfa.png" alt="enter description here">结构长度为40个字节（LONG为32位整数）</p>
</blockquote>
<h6 id="0-1-12-1-3调色板"><a href="#0-1-12-1-3调色板" class="headerlink" title="0.1.12.1.3调色板"></a>0.1.12.1.3调色板</h6><blockquote>
<p>实际上是一个数组，共有biClrUsed个元素。数组中每个元素的类型是是一个RGBQUAD结构，占4个字节。<img src= "/img/loading.gif" data-src="https://jums.club/images/article/87978946.png" alt="enter description here">真彩色图像不需要调色板，BITMAPINFOHEADER后直接是位图数据。</p>
</blockquote>
<h6 id="0-1-12-1-4实际的位图数据"><a href="#0-1-12-1-4实际的位图数据" class="headerlink" title="0.1.12.1.4实际的位图数据"></a>0.1.12.1.4实际的位图数据</h6><blockquote>
<p>真彩色图像，图像数据就是实际的R、G、B值，三个字节表示1个像素。<br>对于用到调色板的位图，图像数据就是该像素颜色在调色板中的索引值。<br>2色位图，用1位就可以表示该像素的颜色（一般0表示黑，1表示百=白），所以一个字节可以表示8个像素。<br>16色位图，用4位可以表示一个像素的颜色，所以一个字节可以表示2个像素。<br>256色位图，一个字节刚好可以表示1个像素。<br>下面两点需注意：<br>(1)每一行的字节数必须是4的整数倍，如果不是，则需要补齐。<br>(2)BMP文件的数据存放是从下到上，从左到右的。<br>从文件中最先读到的是图像最下面一行的左边第一个像素，然后是左边第二个像素，接下来是倒数第二行左边第一个像素，左边第二个像素。以此类推，最后得到的是最上面一行的最右边的一个像素。</p>
</blockquote>
<h6 id="0-1-12-1-5例子"><a href="#0-1-12-1-5例子" class="headerlink" title="0.1.12.1.5例子"></a>0.1.12.1.5例子</h6><p>例1：</p>
<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/7875151.png" alt="enter description here"><br>200×200×3×8bit,每个像素需要用3个字节 120k字节<br>图像中最多只有16中颜色。用一个表：表中的每一行记录一种颜色RGB值。当表示一个像素的颜色时，只需要指出该颜色是在第几行，即该颜色在表中的索引值。<br>表占用的字节为3(RGB) ×8(bit) ×16(颜色)=48字节<br>16种颜色可以用4bit表示，一个像素要用半个字节。整个图像要用200×200×0.5，约20k字节，约为前面的1/6。<br>RGB表，即调色板。</p>
</blockquote>
<p>例2：</p>
<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/4545120.png" alt="enter description here">反色（invert）:就是形成底片效果。<br>反色的实际含义是将R、G、B值反转。<br>若颜色的量化级别是256，则新图的R、G、B值为255减去原图的R、G、B值。包括真彩图、带调色板的彩色图（伪彩色图）和灰度图。<br>真彩图：把反转后的R、G、B值写入新图即可。<br>带调色板彩色图：只需要将调色板中的颜色反转，形成新调色板，位图数据不动。<br>灰度图：直接反转。</p>
</blockquote>
<h3 id="0-2数学概念"><a href="#0-2数学概念" class="headerlink" title="0.2数学概念"></a>0.2数学概念</h3><h4 id="0-2-1算子"><a href="#0-2-1算子" class="headerlink" title="0.2.1算子"></a>0.2.1<a href="https://baike.baidu.com/item/%E7%AE%97%E5%AD%90/970194?fr=aladdin">算子</a></h4><blockquote>
<p>算子是一个函数空间到函数空间上的映射O：X→X。广义上的算子可以推广到任何空间，如内积空间等。<br>广义的讲，对任何函数进行某一项操作都可以认为是一个算子，甚至包括求幂次，开方都可以认为是一个算子，只是有的算子我们用了一个符号来代替他所要进行的运算罢了，所以大家看到算子就不要纠结，他和 的 没区别，它甚至和加减乘除的基本运算符号都没有区别，只是他可以对单对象操作罢了(有的符号比如大于、小于号要对多对象操作)。又比如取概率P{X&lt;x}，概率是集合{X&lt;x}(他是属于实数集的子集)对[0,1]区间的一个映射，我们知道实数域和[0,1]区间是可以一一映射的(这个后面再说)，所以取概率符号P，我们认为也是一个算子，和微分，积分算子算子没区别。总而言之，算子就是映射，就是关系，就是变换。</p>
</blockquote>
<h4 id="0-2-2卷积"><a href="#0-2-2卷积" class="headerlink" title="0.2.2卷积"></a>0.2.2<a href="https://baike.baidu.com/item/%E5%8D%B7%E7%A7%AF/9411006?fr=aladdin">卷积</a></h4><blockquote>
<p>在泛函分析中，卷积、旋积或摺积(英语：Convolution)是通过两个函数f 和g 生成第三个函数的一种数学算子，表征函数f 与g经过翻转和平移的重叠部分函数值乘积对重叠长度的积分。<br>如果将参加卷积的一个函数看作区间的指示函数，卷积还可以被看作是“滑动平均”的推广。</p>
</blockquote>
<h5 id="0-2-2-1定义"><a href="#0-2-2-1定义" class="headerlink" title="0.2.2.1定义"></a>0.2.2.1定义</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/4541202.png" alt="卷积定义"></p>
</blockquote>
<h4 id="0-2-3平滑算子"><a href="#0-2-3平滑算子" class="headerlink" title="0.2.3平滑算子"></a>0.2.3平滑算子</h4><h4 id="0-2-4梯度算法（梯度下降）"><a href="#0-2-4梯度算法（梯度下降）" class="headerlink" title="0.2.4梯度算法（梯度下降）"></a>0.2.4梯度算法（<a href="https://baike.baidu.com/item/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/4864937?fr=aladdin">梯度下降</a>）</h4><h5 id="0-2-4-1定义"><a href="#0-2-4-1定义" class="headerlink" title="0.2.4.1定义"></a>0.2.4.1定义</h5><blockquote>
<p>梯度下降是迭代法的一种,可以用于求解最小二乘问题(线性和非线性都可以)。在求解机器学习算法的模型参数，即无约束优化问题时，梯度下降（Gradient Descent）是最常采用的方法之一，另一种常用的方法是最小二乘法。在求解损失函数的最小值时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数和模型参数值。反过来，如果我们需要求解损失函数的最大值，这时就需要用梯度上升法来迭代了。在机器学习中，基于基本的梯度下降法发展了两种梯度下降方法，分别为随机梯度下降法和批量梯度下降法。</p>
</blockquote>
<h5 id="0-2-4-2简介"><a href="#0-2-4-2简介" class="headerlink" title="0.2.4.2简介"></a>0.2.4.2简介</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/47841231.png" alt=""></p>
</blockquote>
<h5 id="0-2-4-3缺点"><a href="#0-2-4-3缺点" class="headerlink" title="0.2.4.3缺点"></a>0.2.4.3缺点</h5><blockquote>
<ul>
<li>靠近极小值时收敛速度减慢。</li>
<li>直线搜索时可能会产生一些问题。</li>
<li>可能会“之字形”地下降。</li>
</ul>
</blockquote>
<h5 id="0-2-4-4求解过程"><a href="#0-2-4-4求解过程" class="headerlink" title="0.2.4.4求解过程"></a>0.2.4.4求解过程</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/451233.png" alt=""></p>
</blockquote>
<h4 id="0-2-5概率密度"><a href="#0-2-5概率密度" class="headerlink" title="0.2.5概率密度"></a>0.2.5<a href="https://blog.csdn.net/sigai_csdn/article/details/83586458">概率密度</a></h4><blockquote>
<p>概率指事件随机发生的机率，对于均匀分布函数，概率密度等于一段区间(事件的取值范围)的概率除以该段区间的长度，它的值是非负的，可以很大也可以很小。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/5202.png" alt="enter description here"></p>
</blockquote>
<h4 id="0-2-6分布函数"><a href="#0-2-6分布函数" class="headerlink" title="0.2.6分布函数"></a>0.2.6<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0/2439796?fr=aladdin">分布函数</a></h4><blockquote>
<p>分布函数（英文Cumulative Distribution Function, 简称CDF），是概率统计中重要的函数，正是通过它，可用数学分析的方法来研究随机变量。分布函数是随机变量最重要的概率特征，分布函数可以完整地描述随机变量的统计规律，并且决定随机变量的一切其他概率特征。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/3662.png" alt="enter description here"></p>
</blockquote>
<h2 id="1数字图像处理基础"><a href="#1数字图像处理基础" class="headerlink" title="1数字图像处理基础"></a>1数字图像处理基础</h2><h3 id="1-1直方图变化"><a href="#1-1直方图变化" class="headerlink" title="1.1直方图变化"></a>1.1直方图变化</h3><h4 id="1-1-1灰度直方图"><a href="#1-1-1灰度直方图" class="headerlink" title="1.1.1灰度直方图"></a>1.1.1灰度直方图</h4><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/55562.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/22005.png" alt="enter description here"><br>直方图性质<br>1.无空间信息；<br>2.直方图与图像一对多关系；<br>3.可叠加性（全图与子图像）<br><strong>直方图的作用：</strong><br>直方图反映了图像清晰程度。直方图均匀分布时，图像最清晰。<br>判断一幅图像是否清晰，查看是否合理的利用了全部被允许的灰度级。<br>一幅图像应该尽可能利用全部可能的灰度级。</p>
</blockquote>
<blockquote>
<p>中间灰度级像素多，动态范围小，图像对比度低。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/525252.png" alt="enter description here"></p>
</blockquote>
<blockquote>
<p>高灰度的像素占了绝大部分，图像偏亮。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/225633.png" alt="enter description here"></p>
</blockquote>
<blockquote>
<p>过低、过高灰度级的像素占了绝大部分，对比度过大。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/202020.png" alt="enter description here"></p>
</blockquote>
<h4 id="1-1-2直方图均衡化"><a href="#1-1-2直方图均衡化" class="headerlink" title="1.1.2直方图均衡化"></a>1.1.2直方图均衡化</h4><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/5556322.png" alt="enter description here"></p>
</blockquote>
<h5 id="1-1-2-1直方图均衡化灰度映射函数"><a href="#1-1-2-1直方图均衡化灰度映射函数" class="headerlink" title="1.1.2.1直方图均衡化灰度映射函数"></a>1.1.2.1直方图均衡化灰度映射函数</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/205555.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/666355.png" alt="enter description here"><br><strong>步骤：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/888563.png" alt="enter description here"></p>
</blockquote>
<blockquote>
<p><strong>例题：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/55566333.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/3321.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/3325.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/012121.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/4545120000.png" alt="enter description here"><br>经过直方图处理后，出现了伪轮廓：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/8978hhkb.png" alt="enter description here"><br>直方图处理图像不适用的情况：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/858585.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/52525252525.png" alt="enter description here"></p>
</blockquote>
<h4 id="1-1-3直方图规定化"><a href="#1-1-3直方图规定化" class="headerlink" title="1.1.3直方图规定化"></a>1.1.3直方图规定化</h4><blockquote>
<p>修改一幅图像的直方图，使得它与另一幅图像的直方图匹配或具有一种预先规定的函数形状。<br><strong>目标：</strong> <strong>突出感兴趣的灰度范围，使图像质量改善。</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/8888.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/146.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/88.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/888.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/333.png" alt="enter description here"></p>
</blockquote>
<h3 id="1-2灰度变换"><a href="#1-2灰度变换" class="headerlink" title="1.2灰度变换"></a>1.2灰度变换</h3><blockquote>
<p><strong>定义：</strong><img src= "/img/loading.gif" data-src="https://jums.club/images/article/555.png" alt="enter description here"></p>
</blockquote>
<h4 id="1-2-1线性灰度变换"><a href="#1-2-1线性灰度变换" class="headerlink" title="1.2.1线性灰度变换"></a>1.2.1线性灰度变换</h4><blockquote>
<p><strong>定义：</strong><img src= "/img/loading.gif" data-src="https://jums.club/images/article/12.png" alt="enter description here"></p>
</blockquote>
<h5 id="1-2-1-1加常数"><a href="#1-2-1-1加常数" class="headerlink" title="1.2.1.1加常数"></a>1.2.1.1加常数</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/145.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/56.png" alt="enter description here"><br>图像亮度增加：<img src= "/img/loading.gif" data-src="https://jums.club/images/article/23.png" alt="enter description here"><br>图像亮度降低：<img src= "/img/loading.gif" data-src="https://jums.club/images/article/24.png" alt="enter description here"><br>对比度降低：<img src= "/img/loading.gif" data-src="https://jums.club/images/article/25.png" alt="enter description here"><br>图像的反转公式：<img src= "/img/loading.gif" data-src="https://jums.club/images/article/143.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/26.png" alt="enter description here"><br>反转例子：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/27.png" alt="enter description here"></p>
</blockquote>
<h5 id="1-2-1-2乘常数"><a href="#1-2-1-2乘常数" class="headerlink" title="1.2.1.2乘常数"></a>1.2.1.2乘常数</h5><blockquote>
<p>公式：g(x,y)=C*f(x,y)<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/137.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/28.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/29.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/30.png" alt="enter description here"><br>线性灰度一般表达式：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/31.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/136.png" alt="enter description here"></p>
</blockquote>
<h4 id="1-2-2-分段线性灰度变换"><a href="#1-2-2-分段线性灰度变换" class="headerlink" title="1.2.2 分段线性灰度变换"></a>1.2.2 分段线性灰度变换</h4><blockquote>
<p><strong>目的：将感兴趣的灰度范围线性拓展，相对抑制不感兴趣的灰度区域。</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/32.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/138.png" alt="enter description here"><br>分段线性灰度变换例子：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/33.png" alt="enter description here"></p>
</blockquote>
<h5 id="1-2-2-1削波"><a href="#1-2-2-1削波" class="headerlink" title="1.2.2.1削波"></a>1.2.2.1削波</h5><blockquote>
<p><strong>削波(cliping)</strong> 可以看做是<strong>对比度拓展</strong>的一个特例。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/34.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/35.png" alt="enter description here"><br>削波例子：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/36.png" alt="enter description here"></p>
</blockquote>
<h5 id="1-2-2-2阈值化"><a href="#1-2-2-2阈值化" class="headerlink" title="1.2.2.2阈值化"></a>1.2.2.2阈值化</h5><blockquote>
<p><strong>阈值化（thresholding）</strong> 可以看作是<strong>削波</strong>的一个特例。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/37.png" alt="enter description here"><br>阈值化后的图像是<strong>黑白二值图</strong>。阈值化是<strong>灰度图像</strong>转<strong>二值图像</strong>的一种常用方法。<br><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7Arz2qUQp7S3Ysdc5CsF7r0n5RK0WPZBRtMiahVjCkslGwpkicobGzibHgKsVdZam3o13CD9lIE4Peg/0?wx_fmt=png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/38.png" alt="enter description here"><br>阈值化处理后的结果，是一幅<strong>二值图像图</strong>。</p>
</blockquote>
<h5 id="1-2-2-3灰度窗口变换"><a href="#1-2-2-3灰度窗口变换" class="headerlink" title="1.2.2.3灰度窗口变换"></a>1.2.2.3灰度窗口变换</h5><blockquote>
<p>灰度窗口变换是将某一区间的<strong>灰度级</strong>和<strong>其它部分（背景）</strong> 分开。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/387.png" alt="enter description here"><br>灰度窗口变换可以<strong>检测出在某一灰度窗口范围内的所有像素</strong>，是图像灰度分析中的一个有力工具。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/39.png" alt="enter description here"></p>
</blockquote>
<h4 id="1-2-3非线性灰度变换"><a href="#1-2-3非线性灰度变换" class="headerlink" title="1.2.3非线性灰度变换"></a>1.2.3非线性灰度变换</h4><h5 id="1-2-3-1对数变换"><a href="#1-2-3-1对数变换" class="headerlink" title="1.2.3.1对数变换"></a>1.2.3.1对数变换</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/40.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/41.png" alt="enter description here"><br>a,b,c是按需可以调整的参数。<br>低灰度区拓展，高灰度区压缩<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/42.png" alt="enter description here"></p>
</blockquote>
<h5 id="1-2-3-2指数变换"><a href="#1-2-3-2指数变换" class="headerlink" title="1.2.3.2指数变换"></a>1.2.3.2指数变换</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/43.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/45.png" alt="enter description here"><br>a,b,c是按需可以调整的参数。<br>低灰度区压缩，高灰度区拓展<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/44.png" alt="enter description here"></p>
</blockquote>
<h5 id="1-2-3-3幂函数"><a href="#1-2-3-3幂函数" class="headerlink" title="1.2.3.3幂函数"></a>1.2.3.3幂函数</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/46.png" alt="enter description here"></p>
</blockquote>
<h5 id="1-2-3-4LUT-Look-Up-Table"><a href="#1-2-3-4LUT-Look-Up-Table" class="headerlink" title="1.2.3.4LUT(Look-Up-Table)"></a>1.2.3.4LUT(Look-Up-Table)</h5><blockquote>
<p>灰度级变换定义了输入像素值与输出像素之间的映射关系，通常通过<strong>查表</strong>实现。可用户自定义。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/48.png" alt="enter description here"><br>组合使用：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/47.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/49.png" alt="enter description here"></p>
</blockquote>
<h3 id="1-3图像运算"><a href="#1-3图像运算" class="headerlink" title="1.3图像运算"></a>1.3图像运算</h3><h4 id="1-3-1算术运算"><a href="#1-3-1算术运算" class="headerlink" title="1.3.1算术运算"></a>1.3.1算术运算</h4><blockquote>
<ul>
<li>加法、减法</li>
<li>乘法、除法</li>
</ul>
</blockquote>
<h5 id="1-3-1-1加法"><a href="#1-3-1-1加法" class="headerlink" title="1.3.1.1加法"></a>1.3.1.1加法</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/50.png" alt="enter description here"><br>主要应用举例：<br>(1)去除“叠加性”噪声（多幅图像平均）<br>(2)生成图像叠加效果<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/51.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/52.png" alt="enter description here"></p>
</blockquote>
<h5 id="1-3-1-2减法"><a href="#1-3-1-2减法" class="headerlink" title="1.3.1.2减法"></a>1.3.1.2减法</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/53.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/55.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/139.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/54.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/57.png" alt="enter description here"></p>
</blockquote>
<h5 id="1-3-1-3乘法"><a href="#1-3-1-3乘法" class="headerlink" title="1.3.1.3乘法"></a>1.3.1.3乘法</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/58.png" alt="enter description here"><br>主要应用举例：<br>(1)图像的<strong>局部显示</strong><br>(2)用<strong>二值蒙板图像</strong>与<strong>原图像</strong>做乘法<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/59.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/60.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://mmbiz.qpic.cn/mmbiz_png/vAot1Iqrer7ubZW0Rpse3HEOYL6VkUxA0f95iaCw7cQLejibZCZiaxOcBCVu57UoQ26tN5Yciafzp6YARKW9OykW4w/0?wx_fmt=png" alt="![enter description here](https://jums.club/images/article/142.png)"></p>
</blockquote>
<h4 id="1-3-2逻辑运算"><a href="#1-3-2逻辑运算" class="headerlink" title="1.3.2逻辑运算"></a>1.3.2逻辑运算</h4><blockquote>
<ul>
<li>与</li>
<li>或、异或</li>
</ul>
</blockquote>
<h5 id="1-3-2-1异或运算"><a href="#1-3-2-1异或运算" class="headerlink" title="1.3.2.1异或运算"></a>1.3.2.1异或运算</h5><blockquote>
<p>公式：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/62.png" alt="enter description here"><br><strong>只有同时为0时才为0，否则都为1</strong><br>主要应用举例：<br>(1)获得相交子图像<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/63.png" alt="enter description here"></p>
</blockquote>
<h5 id="1-3-2-2或运算"><a href="#1-3-2-2或运算" class="headerlink" title="1.3.2.2或运算"></a>1.3.2.2或运算</h5><blockquote>
<p>公式：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/64.png" alt="enter description here">主要应用举例：<br>(1)合并子图像<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/65.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/66.png" alt="enter description here"></p>
</blockquote>
<h5 id="1-3-2-3与运算"><a href="#1-3-2-3与运算" class="headerlink" title="1.3.2.3与运算"></a>1.3.2.3与运算</h5><blockquote>
<p>公式：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/67.png" alt="enter description here"><br>主要应用举例：<br>(1)求两个子图像的相交子图<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/68.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/69.png" alt="enter description here"><br>比较运算：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/71.png" alt="enter description here"><br>上图从左到右执行平均、最大值、最小值、Clear if &gt;、Clear if =、Clear if &lt;操作。</p>
</blockquote>
<h3 id="1-4几何运算"><a href="#1-4几何运算" class="headerlink" title="1.4几何运算"></a>1.4几何运算</h3><blockquote>
<p>图像生成过程中，由于系统本身具有非线性或拍摄角度不同，会使生成的图像产生几何失真。几何失真一般分为系统失真和非系统失真，系统失真是有规律的、能预测的；非系统失真则是随机的。<br>例如：<br>(1)镜头畸变；<br>(2)遥感图像校正；<br>(3)图像配准（配准：同一目标两幅图像间的空间对准。）<br>几何变换不改变像素值，仅改变像素所在位置！<br>几何变换可以改变图像中物体之间的空间关系。这种运算可以看成是图像内的各物体在图像内移动的过程。例如，物体的转动、扭曲、倾斜、拉伸等，都是几何运算的结果。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/72.png" alt="enter description here"></p>
</blockquote>
<h4 id="1-4-1基本几何变换定义"><a href="#1-4-1基本几何变换定义" class="headerlink" title="1.4.1基本几何变换定义"></a>1.4.1基本几何变换定义</h4><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/73.png" alt="enter description here"></p>
</blockquote>
<h4 id="1-4-2常用的基本几何变换"><a href="#1-4-2常用的基本几何变换" class="headerlink" title="1.4.2常用的基本几何变换"></a>1.4.2常用的基本几何变换</h4><h5 id="1-4-2-1平移变换"><a href="#1-4-2-1平移变换" class="headerlink" title="1.4.2.1平移变换"></a>1.4.2.1平移变换</h5><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/74.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/75.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/76.png" alt="enter description here"><br>移出的部分被截断，文件大小不会改变，新点的值统一设成(0)或(255)<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/77.png" alt="enter description here"><br>拓展画布，文件大小改变</p>
</blockquote>
<h5 id="1-4-2-2镜像变换"><a href="#1-4-2-2镜像变换" class="headerlink" title="1.4.2.2镜像变换"></a>1.4.2.2镜像变换</h5><blockquote>
<p>包括水平镜像和垂直镜像两种。<br><strong>a、水平镜像</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/78.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/80.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/141.png" alt="enter description here"><br><strong>b、垂直图像</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/81.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/82.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/83.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/84.png" alt="enter description here"></p>
</blockquote>
<h5 id="1-4-2-3旋转变换"><a href="#1-4-2-3旋转变换" class="headerlink" title="1.4.2.3旋转变换"></a>1.4.2.3旋转变换</h5><blockquote>
<p>绕原点旋转-α度<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/85.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/86.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/87.png" alt="enter description here"><br>通常的做法是以图像的中心为圆心旋转<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/89.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/90.png" alt="enter description here"><br><strong>旋转出现的问题：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/91.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/92.png" alt="enter description here"><br><strong>原因：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/93.png" alt="enter description here"><br>图像旋转后，出现了两个问题：<br>1)像素的排列不是完全按照原有的相邻关系。相邻像素之间只有8个方向。<br>2)会出现许多的空洞点。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/95.png" alt="enter description here"><br>图像旋转出现的两个问题，本质都是因为像素值的填充不连续的。<br>采用插值填充的方法解决</p>
</blockquote>
<h5 id="1-4-2-4放缩变换"><a href="#1-4-2-4放缩变换" class="headerlink" title="1.4.2.4放缩变换"></a>1.4.2.4放缩变换</h5><blockquote>
<p>公式：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/96.png" alt="enter description here"><br>a.缩小<br>图像缩小实际上就是对原有的多个数据进行抽取，获得期望缩小尺寸的数据，并且尽量保持原有的特征不丢失。<br>最简单的方法就是等间隔地选取数据。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/97.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/98.png" alt="enter description here"><br>图像缩小后承载的信息量减小，所以画布可相应缩小。<br>b.放大<br>图像放大从字面上看，是图像缩小的逆操作，但是，从信息处理的角度来看，则难易程度完全不一样。<br>图像缩小是从多个信息中选出所需要的信息，而图像放大则是需要对多出的空位填入适当的新值，是信息的统计。<br>放大最简单的思想是，如果需要将原图像方法k倍，则将原图像中的每个像素值，填在新图像中对应的k*k大小字块中。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/99.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/100.png" alt="enter description here"><br>放大倍数太大，会出现马赛克效应。</p>
</blockquote>
<h5 id="1-4-2-5拉伸变换"><a href="#1-4-2-5拉伸变换" class="headerlink" title="1.4.2.5拉伸变换"></a>1.4.2.5拉伸变换</h5><blockquote>
<p>公式：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/101.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/102.png" alt="enter description here"></p>
</blockquote>
<h4 id="1-4-3灰度级插值"><a href="#1-4-3灰度级插值" class="headerlink" title="1.4.3灰度级插值"></a>1.4.3灰度级插值</h4><blockquote>
<p>旋转与放大图像时，产生了新的像素（漏点）。采用插值法，即利用邻域的像素来估计新的像素值。</p>
</blockquote>
<h5 id="1-4-3-1最近邻插值法"><a href="#1-4-3-1最近邻插值法" class="headerlink" title="1.4.3.1最近邻插值法"></a>1.4.3.1最近邻插值法</h5><blockquote>
<p>重复最临近点<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/103.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/104.png" alt="enter description here"><br>方法倍数太大，出现马赛克效应。</p>
</blockquote>
<h5 id="1-4-3-2双线性插值"><a href="#1-4-3-2双线性插值" class="headerlink" title="1.4.3.2双线性插值"></a>1.4.3.2双线性插值</h5><blockquote>
<p>双线性插值是对最近邻的一种改进，即用线性内插方法，根据点的四个相邻点的灰度值，分别在x和y方向上进行两次插值，计算新值。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/105.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/106.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/107.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/108.png" alt="enter description here"></p>
</blockquote>
<h5 id="1-4-3-3高阶插值"><a href="#1-4-3-3高阶插值" class="headerlink" title="1.4.3.3高阶插值"></a>1.4.3.3高阶插值</h5><blockquote>
<p>三次立方插值<br>利用三次多项式s(x)来逼近理论上的最佳插值函数sin(x)/x，进行插值.<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/109.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/110.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/111.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/112.png" alt="enter description here"></p>
</blockquote>
<h2 id="2数字图像处理数学基础"><a href="#2数字图像处理数学基础" class="headerlink" title="2数字图像处理数学基础"></a>2数字图像处理数学基础</h2><h3 id="2-1线性系统理论"><a href="#2-1线性系统理论" class="headerlink" title="2.1线性系统理论"></a>2.1线性系统理论</h3><h4 id="2-1-1线性系统"><a href="#2-1-1线性系统" class="headerlink" title="2.1.1线性系统"></a>2.1.1线性系统</h4><blockquote>
<p>许多图像处理系统都可以用一个线性系统作为模型：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/113.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/114.png" alt="enter description here"></p>
</blockquote>
<h4 id="2-1-2线性空间不变系统-Linear-Space-Invariant-LSI"><a href="#2-1-2线性空间不变系统-Linear-Space-Invariant-LSI" class="headerlink" title="2.1.2线性空间不变系统(Linear Space Invariant, LSI)"></a>2.1.2线性空间不变系统(Linear Space Invariant, LSI)</h4><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/115.png" alt="enter description here"><br>如果系统响应与输入脉冲的中心位置无关，则该系统称为空间不变系统。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/116.png" alt="enter description here"></p>
</blockquote>
<h4 id="2-1-3卷积"><a href="#2-1-3卷积" class="headerlink" title="2.1.3卷积"></a>2.1.3卷积</h4><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/117.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/118.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/119.png" alt="enter description here"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/120.png" alt="enter description here"></p>
</blockquote>
<h2 id="1-正交变换"><a href="#1-正交变换" class="headerlink" title="1.正交变换"></a>1.正交变换</h2><h3 id="1-1正交变换"><a href="#1-1正交变换" class="headerlink" title="1.1正交变换"></a>1.1正交变换</h3><h4 id="1-1-1定义"><a href="#1-1-1定义" class="headerlink" title="1.1.1定义"></a>1.1.1定义</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/121.png" alt=""></p>
<h4 id="1-1-2正交矩阵"><a href="#1-1-2正交矩阵" class="headerlink" title="1.1.2正交矩阵"></a>1.1.2正交矩阵</h4><blockquote>
<p>定义：n级实矩阵A称为正交矩阵，如果A<em>A=E。(A</em>表示A的共轭转置，E是单位矩阵)  </p>
</blockquote>
<h4 id="1-1-3正交变换的性质"><a href="#1-1-3正交变换的性质" class="headerlink" title="1.1.3正交变换的性质"></a>1.1.3正交变换的性质</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/122.png" alt=""></p>
<h4 id="1-1-4等价刻画"><a href="#1-1-4等价刻画" class="headerlink" title="1.1.4等价刻画"></a>1.1.4等价刻画</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/124.png" alt=""></p>
<h4 id="1-1-5正交变换分类"><a href="#1-1-5正交变换分类" class="headerlink" title="1.1.5正交变换分类"></a>1.1.5正交变换分类</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/123.png" alt=""></p>
<h3 id="1-2傅立叶变换"><a href="#1-2傅立叶变换" class="headerlink" title="1.2傅立叶变换"></a>1.2<a href="https://baike.baidu.com/item/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/7119029?fromtitle=%E5%82%85%E7%AB%8B%E5%8F%B6%E5%8F%98%E6%8D%A2&fromid=3472079">傅立叶变换</a></h3><h4 id="1-2-1概念"><a href="#1-2-1概念" class="headerlink" title="1.2.1概念"></a>1.2.1概念</h4><blockquote>
<p>傅立叶变换，表示能将满足一定条件的某个函数表示成三角函数（正弦和/或余弦函数）或者它们的积分的线性组合。在不同的研究领域，傅立叶变换具有多种不同的变体形式，如连续傅立叶变换和离散傅立叶变换。最初傅立叶分析是作为热过程的解析分析的工具被提出的。</p>
</blockquote>
<h4 id="1-2-2定义"><a href="#1-2-2定义" class="headerlink" title="1.2.2定义"></a>1.2.2定义</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/135.png" alt=""></p>
<h4 id="1-2-3快速傅立叶变换（FFT）"><a href="#1-2-3快速傅立叶变换（FFT）" class="headerlink" title="1.2.3快速傅立叶变换（FFT）"></a>1.2.3<a href="https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/214957?fr=aladdin">快速傅立叶变换</a>（FFT）</h4><h5 id="1-2-3-1概念"><a href="#1-2-3-1概念" class="headerlink" title="1.2.3.1概念"></a>1.2.3.1概念</h5><blockquote>
<p>快速傅里叶变换 (fast Fourier transform), 即利用计算机计算离散傅里叶变换（DFT)的高效、快速计算方法的统称，简称FFT。快速傅里叶变换是1965年由J.W.库利和T.W.图基提出的。采用这种算法能使计算机计算离散傅里叶变换所需要的乘法次数大为减少，特别是被变换的抽样点数N越多，FFT算法计算量的节省就越显著。</p>
</blockquote>
<h5 id="1-2-3-2基本思想"><a href="#1-2-3-2基本思想" class="headerlink" title="1.2.3.2基本思想"></a>1.2.3.2基本思想</h5><blockquote>
<p>FFT的基本思想是把原始的N点序列，依次分解成一系列的短序列。充分利用DFT计算式中指数因子 所具有的对称性质和周期性质，进而求出这些短序列相应的DFT并进行适当组合，达到删除重复计算，减少乘法运算和简化结构的目的。此后，在这思想基础上又开发了高基和分裂基等快速算法，随着数字技术的高速发展，1976年出现建立在数论和多项式理论基础上的维诺格勒傅里叶变换算法(WFTA）和素因子傅里叶变换算法。它们的共同特点是，当N是素数时，可以将DFT算转化为求循环卷积，从而更进一步减少乘法次数，提高速度。</p>
</blockquote>
<h3 id="1-3离散余弦变换-DCT"><a href="#1-3离散余弦变换-DCT" class="headerlink" title="1.3离散余弦变换(DCT)"></a>1.3<a href="https://www.jianshu.com/p/b923cd47ac4a">离散余弦变换</a>(DCT)</h3><blockquote>
<p>离散余弦变换(DCT for Discrete Cosine Transform)是与傅里叶变换相关的一种变换，它类似于离散傅里叶变换(DFT for Discrete Fourier Transform),但是只使用实数。离散余弦变换相当于一个长度大概是它两倍的离散傅里叶变换，这个离散傅里叶变换是对一个实偶函数进行的（因为一个实偶函数的傅里叶变换仍然是一个实偶函数），在有些变形里面需要将输入或者输出的位置移动半个单位(DCT有8种标准类型，其中4种是常见的)。</p>
</blockquote>
<h4 id="1-3-1离散余弦变换应用"><a href="#1-3-1离散余弦变换应用" class="headerlink" title="1.3.1离散余弦变换应用"></a>1.3.1离散余弦变换应用</h4><blockquote>
<p>离散余弦变换，尤其是它的第二种类型，经常被信号处理和图像处理使用，用于对信号和图像(包括静止图像和运动图像)进行有损数据压缩。这是由于离散余弦变换具有很强的”能量集中”特性:大多数的自然信号(包括声音和图像)的能量都集中在离散余弦变换后的低频部分，而且当信号具有接近马尔科夫过程(Markov processes)的统计特性时，离散余弦变换的去相关性接近于K-L变换(Karhunen-Loève 变换–它具有最优的去相关性)的性能。<br>例如，在静止图像编码标准JPEG中，在运动图像编码标准MJPEG和MPEG的各个标准中都使用了离散余弦变换。在这些标准制中都使用了二维的第二种类型离散余弦变换，并将结果进行量化之后进行熵编码。这时对应第二种类型离散余弦变换中的n通常是8，并用该公式对每个8x8块的每行进行变换，然后每列进行变换。得到的是一个8x8的变换系数矩阵。其中(0,0)位置的元素就是直流分量，矩阵中的其他元素根据其位置表示不同频率的交流分量。<br>一个类似的变换, 改进的离散余弦变换被用在高级音频编码(AAC for Advanced Audio Coding)，Vorbis 和 MP3 音频压缩当中。<br>离散余弦变换也经常被用来使用谱方法来解偏微分方程，这时候离散余弦变换的不同的变量对应着数组两端不同的奇/偶边界条件。 </p>
</blockquote>
<h4 id="1-3-2matlab应用"><a href="#1-3-2matlab应用" class="headerlink" title="1.3.2matlab应用"></a>1.3.2matlab应用</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/125.png" alt="image"></p>
<h4 id="1-3-3DCT性质"><a href="#1-3-3DCT性质" class="headerlink" title="1.3.3DCT性质"></a>1.3.3DCT性质</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/126.png" alt="image"></p>
<h3 id="1-4沃尔什变换"><a href="#1-4沃尔什变换" class="headerlink" title="1.4沃尔什变换"></a>1.4<a href="https://blog.csdn.net/grllery/article/details/89056484">沃尔什变换</a></h3><blockquote>
<p>沃尔什变换（Walsh transform) 以沃尔什函数为基本函数的一种非正弦正交变换</p>
</blockquote>
<h4 id="1-4-1一维沃尔什变换"><a href="#1-4-1一维沃尔什变换" class="headerlink" title="1.4.1一维沃尔什变换"></a>1.4.1一维沃尔什变换</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/127.png" alt="image"></p>
<h5 id="1-4-1-1离散沃尔什变换"><a href="#1-4-1-1离散沃尔什变换" class="headerlink" title="1.4.1.1离散沃尔什变换"></a>1.4.1.1离散沃尔什变换</h5><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/128.png" alt="image"></p>
<h5 id="1-4-1-2应用"><a href="#1-4-1-2应用" class="headerlink" title="1.4.1.2应用"></a>1.4.1.2应用</h5><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/129.png" alt="image"></p>
<h4 id="1-4-2一维沃尔什反变换"><a href="#1-4-2一维沃尔什反变换" class="headerlink" title="1.4.2一维沃尔什反变换"></a>1.4.2一维沃尔什反变换</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/130.png" alt="image"></p>
<h3 id="1-5哈达玛变换"><a href="#1-5哈达玛变换" class="headerlink" title="1.5哈达玛变换"></a>1.5<a href="https://baike.baidu.com/item/%E5%93%88%E8%BE%BE%E7%8E%9B%E5%8F%98%E6%8D%A2/14679032?fr=aladdin">哈达玛变换</a></h3><blockquote>
<p>哈达玛变换是遥感图像自动分类中一种常用的特征变换，是利用哈达玛矩阵作为变换矩阵新实施的遥感多光谱域变换<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/131.png" alt="image"></p>
</blockquote>
<h4 id="1-5-1反变换"><a href="#1-5-1反变换" class="headerlink" title="1.5.1反变换"></a>1.5.1反变换</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/132.png" alt="image"></p>
<h2 id="2-灰度变换"><a href="#2-灰度变换" class="headerlink" title="2.灰度变换"></a>2.<a href="https://baike.baidu.com/item/%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2/20868243?fr=aladdin">灰度变换</a></h2><p>一篇较好的关于灰度变换的博客<a href="https://www.cnblogs.com/laumians-notes/p/8629396.html">more details</a></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker教程</title>
    <url>/docker-tutorials/</url>
    <content><![CDATA[<h2 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1 安装docker"></a>1 安装docker</h2><p><code>Windows</code>用户一般通过安装<a href="https://www.docker.com/products/docker-desktop">docker-desktop(点击下载)</a>，下载完成以后按照提示安装<code>wsl2</code>,然后才可以正常启用<code>Docker</code>，但是使用本镜像会导致出现<code>container exit(139)</code>的错误。<br>在<code>C:\Users\(用户名)中创建.wslconfig</code><br>以我为例,创建<code>C:\Users\zhangsan\.wslconfig</code><br>文件中写入下面内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">kernelCommandLine = vsyscall=emulate</span><br></pre></td></tr></table></figure>

<h3 id="1-1-Windows10启动docker失败解决办法"><a href="#1-1-Windows10启动docker失败解决办法" class="headerlink" title="1.1 Windows10启动docker失败解决办法"></a>1.1 Windows10启动docker失败解决办法</h3><p>提示信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker.ApiServices.WSL2.WslKernelUpdateNotInstalledException: 引发类型为“Docker.ApiServices.WSL2.WslKernelUpdateNotInstalledException”的异常。</span><br><span class="line">   在 Docker.ApiServices.WSL2.WslShortLivedCommandResult.LogAndThrowIfUnexpectedExitCode(String prefix, ILogger log, Int32 expectedExitCode) 位置 C:\workspaces\PR-16070\src\github.com\docker\pinata\win\src\Docker.ApiServices\WSL2\WslCommand.cs:行号 140</span><br><span class="line">   在 Docker.Engines.WSL2.WSL2Provisioning.&lt;DeployDistroAsync&gt;d__17.MoveNext() 位置 C:\workspaces\PR-16070\src\github.com\docker\pinata\win\src\Docker.Desktop\Engines\WSL2\WSL2Provisioning.cs:行号 169</span><br><span class="line">--- 引发异常的上一位置中堆栈跟踪的末尾 ---</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<blockquote>
<p>打开网站 <a href="https://czf-net.xyz/res/">https://czf-net.xyz/res/</a><br>下载wsl.msi<br>一路Next<br>重启Docker解决！</p>
</blockquote>
<p>然后在命令中执行<code>docker -v</code>命令查看是否安装成功：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210904154712.png" alt=""></p>
<h3 id="1-2-启动docker镜像"><a href="#1-2-启动docker镜像" class="headerlink" title="1.2 启动docker镜像"></a>1.2 启动docker镜像</h3><p>启动一个<code>docker</code>镜像，使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li>
<li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li>
<li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li>
<li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</li>
<li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li>
<li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>
<li><strong>–name=”nginx-lb”:</strong> 为容器指定一个名称；</li>
<li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li>
<li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li>
<li><strong>-h “mars”:</strong> 指定容器的hostname；</li>
<li><strong>-e username=”ritchie”:</strong> 设置环境变量；</li>
<li><strong>–env-file=[]:</strong> 从指定文件读入环境变量；</li>
<li><strong>–cpuset=”0-2” or –cpuset=”0,1,2”:</strong> 绑定容器到指定CPU运行；</li>
<li><strong>-m :</strong>设置容器使用内存最大值；</li>
<li><strong>–net=”bridge”:</strong> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li>
<li><strong>–link=[]:</strong> 添加链接到另一个容器；</li>
<li><strong>–expose=[]:</strong> 开放一个端口或一组端口；</li>
<li><strong>–volume , -v:</strong> 绑定一个卷</li>
</ul>
<p><strong>举例：</strong></p>
<p>以界面的形式运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it ubuntu /bin/bash   <span class="comment">## 以界面bash界面的形式运行名称为ubuntu的镜像</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210904173649.png" alt=""></p>
<p>或者你也可以在后台运行，使用<code>-d</code>参数，运行成功则会返回一个<code>CONTAINER_ID</code>：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210904174031.png" alt=""></p>
<h2 id="2-快速拉取docker镜像"><a href="#2-快速拉取docker镜像" class="headerlink" title="2 快速拉取docker镜像"></a>2 快速拉取docker镜像</h2><h3 id="2-1-helloworld镜像"><a href="#2-1-helloworld镜像" class="headerlink" title="2.1 helloworld镜像"></a>2.1 helloworld镜像</h3><p>在命令行中执行如下命令，快速搭建一个docker镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 docker/getting-started</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210904154843.png" alt=""></p>
<p>然后在浏览器输入<a href="http://127.0.0.1">http://127.0.0.1</a>，如果出现了如下的界面，则表示安装成功：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210904154943.png" alt=""></p>
<h3 id="2-2-PHP镜像"><a href="#2-2-PHP镜像" class="headerlink" title="2.2 PHP镜像"></a>2.2 PHP镜像</h3><p>创建一个新的目录，结构如下：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210904155108.png" alt=""></p>
<p>每个文件的内容如下：</p>
<ul>
<li><p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">phpinfo();</span><br></pre></td></tr></table></figure>
</li>
<li><p>docker-composr-dev.yml   //开发环境的配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span>    <span class="comment">## 版本号，必须是一个string类型的</span></span><br><span class="line"><span class="attr">services:</span>       <span class="comment">## 对应的服务</span></span><br><span class="line">    <span class="attr">app-dev:</span>    <span class="comment">## 容器名，可可定义</span></span><br><span class="line">        <span class="attr">build:</span>  <span class="comment">## 做的事情：在当前文件夹执行文件名为Dockerfile-dev的Dockerfile</span></span><br><span class="line">            <span class="attr">context:</span> <span class="string">.</span>    </span><br><span class="line">            <span class="attr">dockerfile:</span> <span class="string">Dockerfile-dev</span></span><br><span class="line">        <span class="attr">volumes:</span>   <span class="comment">## 文件夹映射 格式：宿主机目录:容器目录（注意中间的冒号是固定格式）</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./src:/var/www/html</span></span><br><span class="line">        <span class="attr">ports:</span>    <span class="comment">## 端口映射</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span> <span class="comment"># 宿主机端口:容器端口</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Dockerfile-dev  //开发环境的dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:apache</span><br></pre></td></tr></table></figure>
</li>
<li><p>Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:apache</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./src /var/www/html</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Docker-compose.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">app:</span></span><br><span class="line">        <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">gcslaoli/docker-php</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">81</span><span class="string">:80</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>然后进入当前文件夹，执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose -f .\docker-compose-dev.yml up -d --build   <span class="comment">## 启动开发环境</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210904155637.png" alt=""></p>
<p>然后在浏览器中输入对应的网址即可：<a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a>，如果出现了如下界面，则表示成功：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210904155840.png" alt=""></p>
<p>如何关闭开发环境容器呢，执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose -f .\docker-compose-dev.yml down            <span class="comment">## 关闭开发环境</span></span><br></pre></td></tr></table></figure>

<p>然后再通过<code>docker ps -a</code>查看当前容器是否关闭：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210904161518.png" alt=""></p>
<p>也可以直接使用容器ID直接关闭，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop [CONTAINER_ID] <span class="comment">## 或者</span></span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li><p><code>-t</code>：关闭容器的限时，如果超时未能关闭则用kill强制关闭，默认值10s，这个时间用于容器的自己保存状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop -t=60 容器ID或容器名</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>查看容器ID命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a   <span class="comment">## 查看所有运行的容器，可以查看对应的容器ID</span></span><br></pre></td></tr></table></figure>

<p>或者直接使用下面的命令，直接关闭：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> [CONTAINER_ID]</span><br></pre></td></tr></table></figure>

<h2 id="3-发布镜像到dockerHub"><a href="#3-发布镜像到dockerHub" class="headerlink" title="3 发布镜像到dockerHub"></a>3 发布镜像到dockerHub</h2><h3 id="3-1-注册账号"><a href="#3-1-注册账号" class="headerlink" title="3.1 注册账号"></a>3.1 注册账号</h3><p>发布<code>docker</code>镜像到<code>dockerHub</code>需要到<a href="https://hub.docker.com/">docker官网</a>注册一个账号，这就类似我们将代码<code>push</code>到<code>GitHub</code>上的动作类似。</p>
<p>注册完成之后，首先需要登录，如果你已经再<code>docker Desktop</code>中登录了，那么在命令使用<code>docker login</code>测试以下：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210904170655.png" alt=""></p>
<h3 id="3-2-规范化命名"><a href="#3-2-规范化命名" class="headerlink" title="3.2 规范化命名"></a>3.2 规范化命名</h3><p>然后使用<code>docker tag</code>命令，将需要push到<code>dockerHub</code>的镜像进行规范化命名，规范如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push 注册用户名/镜像名</span><br><span class="line">docker tag [OLD_NAME] [NEW_NAME]  <span class="comment"># 改名</span></span><br><span class="line"><span class="comment"># 以我为例</span></span><br><span class="line">docker tag ubuntu-git crazyjums/ubuntu-git</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210904170835.png" alt=""></p>
<h3 id="3-3-保存当前镜像"><a href="#3-3-保存当前镜像" class="headerlink" title="3.3 保存当前镜像"></a>3.3 保存当前镜像</h3><p>我们将镜像<code>push</code>到<code>dockerHub</code>中，首先需要对其中的配置进行修改，否则<code>push</code>就没有意义了，默认情况下，如果<code>docker</code>镜像是不会保存当前的更改的，所以，如果需要保存一下自己对当前镜像的更改，之后再<code>push</code>。</p>
<p>退出当前镜像之后，执行如下命令保存对当前镜像的更改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit [CONTAINER_ID] [NEW_NAME]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@49079ee590cc sbin]# exit</span><br><span class="line">exit</span><br><span class="line">PS C:\Users\user_name&gt; docker commit 49079ee590cc centos3</span><br><span class="line">sha256:5423bf497d8ec85d267726991e1655ade066939f898db7db3d8a4124d72fc241</span><br></pre></td></tr></table></figure>

<h3 id="3-4-push"><a href="#3-4-push" class="headerlink" title="3.4 push"></a>3.4 push</h3><p>使用如下命令将自己的镜像<code>push</code>到<code>dockerHub</code>中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push crazyjums/ubuntu-git:latest  <span class="comment"># 后面的latest指的是版本号</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210904171443.png" alt=""></p>
<p>这个push的动作根据你的网速的不同，时间也不一定，如果中途中断了，那么就继续，docker会保存已经上传的部分，如果继续会再上次断开的地方继续，不会重新上传，命令还是一样。如果上传完成，可以根据这个地址取网上找一下是否自己的镜像，地址规范：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker.io/[注册用户名/镜像名]</span><br></pre></td></tr></table></figure>

<p>push完成之后，可以登录自己的账号，既可以看到自己的镜像：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210904172141.png" alt=""></p>
<h2 id="4-相关概念"><a href="#4-相关概念" class="headerlink" title="4 相关概念"></a>4 相关概念</h2><p>在使用docker之前你要明白两个概念,两个学docker过程中一定会一直强调的概念</p>
<ul>
<li>image</li>
<li>container (这种术语直接使用英文,不做翻译)</li>
</ul>
<p>这两个是整个docker的基础概念,这里本着不负责任的侥幸心理大概的说一下这两个的区别.</p>
<blockquote>
<ul>
<li>image是静态的,类比为面向对象就是一个类</li>
<li>container是动态运行的,类比为面向对象就是一个实例化的对象.</li>
</ul>
</blockquote>
<p>一般,container是可运行的,我们启动一个container之后,这个container里面就是我们的linux环境.</p>
<p>懂得了上面的意思,你就明白了我们要做的事情很简单:找一个合适的image,这个image里面应该包含一切开发时候所需要的东西, 然后启动它,我们就可以在这个container环境上工作了.当然这个时候container应该可以跟宿主共享文件.并且可以在本局域网内可以被访问到.</p>
<p>在继续搭建我们的开发环境之前,我们还是要先学一点docker的命令和概念的.</p>
<h3 id="4-1-相关命令"><a href="#4-1-相关命令" class="headerlink" title="4.1 相关命令"></a>4.1 相关命令</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1570094-20200315124943861-1581172050.jpg" alt=""></p>
<h4 id="id-amp-amp-name"><a href="#id-amp-amp-name" class="headerlink" title="id&amp;&amp;name"></a>id&amp;&amp;name</h4><p>每个image都有一个唯一的id来标识，同样container也有。这个唯一的id一般很长，比如:<code>c59dc2dfad95</code>，但是一般我们输入的时候只要输入若干位能标识当前系统内唯一标识某一个image就可以了。比如只要输入<code>c59d</code>可能就可以标识这个image。除了id，还可以给一个image起名字，这样子也可以通过name来操作一个image。</p>
<h4 id="docker-inspect"><a href="#docker-inspect" class="headerlink" title="docker inspect"></a>docker inspect</h4><p>查看容器的详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect [CONTAINER_ID]</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210905155638.png" alt=""></p>
<h4 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h4><p>通过<code>docker run image_name</code>可以直接启动本地的一个image。这个命令后面可以加很多子参数来开启其他功能。如果本地不存在这个image，那么docker会去官方的仓库去下载，这个仓库你可以理解为github一样的网站，上面存放了许多别人push上去的image。</p>
<p>OPTIONS说明：</p>
<ul>
<li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li>
<li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li>
<li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li>
<li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</li>
<li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li>
<li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>
<li><strong>–name=”nginx-lb”:</strong> 为容器指定一个名称；</li>
<li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li>
<li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li>
<li><strong>-h “mars”:</strong> 指定容器的hostname；</li>
<li><strong>-e username=”ritchie”:</strong> 设置环境变量；</li>
<li><strong>–env-file=[]:</strong> 从指定文件读入环境变量；</li>
<li><strong>–cpuset=”0-2” or –cpuset=”0,1,2”:</strong> 绑定容器到指定CPU运行；</li>
<li><strong>-m :</strong>设置容器使用内存最大值；</li>
<li><strong>–net=”bridge”:</strong> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li>
<li><strong>–link=[]:</strong> 添加链接到另一个容器；</li>
<li><strong>–expose=[]:</strong> 开放一个端口或一组端口；</li>
<li><strong>–volume , -v:</strong> 绑定一个卷</li>
</ul>
<blockquote>
<p><strong>注意：</strong></p>
<p>当使用<code>docker run -d [image_name]</code>后台运行容器的时候，然后再使用<code>dokcer ps</code>查看正在运行的容器时发现刚才启动的后台容器没有运行：</p>
<p>这是因为容器使用后台运行的模式，就必须要有一个前台进程，如果docker发现没有应用，就会停止这个后台进程，所有使用<code>docker ps</code>命令就看不到对应的容器了。</p>
</blockquote>
<h4 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> [OPTIONS] [CONTAINER_ID]</span><br></pre></td></tr></table></figure>

<p>这个命令和<code>docker run</code>命令类似，都是启动要给容器，但是这个命令和<code>docker run</code>有些不一样，这个命令是进入一个正在运行的容器，如果这个容器不在运行，那么使用这个命令就会报错，提示没有当前容器。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210905155909.png" alt=""></p>
<h4 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker attach [CONTAINER_ID]  <span class="comment"># 中间不能有参数</span></span><br></pre></td></tr></table></figure>

<p>这个命令也是打开一个正在执行的容器，但是这个命令和<code>docker exec</code>也有一定的区别，<code>docker exec</code>命令是重新打开终端，然后这个终端连接到那个正在执行的容器，而<code>docker attach</code>命令则是不打开一个新的终端，直接进入到那个运行的终端</p>
<h4 id="docker-cp"><a href="#docker-cp" class="headerlink" title="docker cp"></a>docker cp</h4><p>将容器中的文件拷贝到宿主机中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp [CONTAINER_ID]:[FILE_PATH] [REAL_HOST]</span><br><span class="line"><span class="comment"># 举例，拷贝文件的容器必须可以使用docker ps -a查询到，否则不能执行该命令</span></span><br><span class="line">docker cp 787dfdaa9877:/home/test.php /home   <span class="comment"># 将容器787dfdaa9877中的/home/test.php文件拷贝到宿主机在的/home目录中</span></span><br></pre></td></tr></table></figure>

<h4 id="docker-tag"><a href="#docker-tag" class="headerlink" title="docker tag"></a>docker tag</h4><p>给镜像起一个名字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag [OLD_IMAGE_NAME] [NEW_IMAGE_NAME]</span><br></pre></td></tr></table></figure>

<p>每个image都有一个名称。除了名称之外还有一个叫做tag的东西，这个称之为标签的东西可以用来标识同一个image的不同版本。如果你没有给一个image指定一个tag，那么docker会默认为这个iamge添加一个名为:latest的tag。如果你使用<code>docker run ubuntu</code>，那么就会默认运行<code>ubuntu:latest</code>。如果本地没有这个image，那么就会去从仓库下载<code>ubuntu:latest</code>的iamge。很多时候你会看到<code>ubuntu:14.04</code>的image。这个14。04就是代表这个image的tag。只是很多时候image制作者把tag用来标记version了而已。</p>
<h4 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h4><p>这个命令会列出本地所有的images。每个image都会有一个独一无二的id。如下面 <code>IMAGE ID</code>字段。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">PS</span> C:\Windows\system<span class="number">32</span>\WindowsPowerShell\v<span class="number">1</span>.<span class="number">0</span>&gt; docker images</span><br><span class="line"><span class="attribute">REPOSITORY</span>          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line"><span class="attribute">ubuntu</span>-ok           latest              <span class="number">5</span>f<span class="number">93</span>b<span class="number">91</span>bc<span class="number">208</span>        <span class="number">26</span> hours ago        <span class="number">423</span>.<span class="number">7</span> MB</span><br><span class="line"><span class="attribute">ubuntu</span>              latest              a<span class="number">421</span>b<span class="number">4</span>d<span class="number">8494</span>d        <span class="number">27</span> hours ago        <span class="number">423</span>.<span class="number">1</span> MB</span><br><span class="line"><span class="attribute">ubuntu</span>              <span class="number">14</span>.<span class="number">04</span>               <span class="number">3</span>f<span class="number">755</span>ca<span class="number">42730</span>        <span class="number">2</span> days ago          <span class="number">188</span> MB</span><br></pre></td></tr></table></figure>

<h4 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h4><p>这个命令会列出所有在运行的container。当运行<code>docker ps -a</code>就会列出所有的container。包括已经退出的container。</p>
<h4 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h4><p>这个命令可以把一个container制作成一个image。</p>
<h4 id="docker-rm-amp-amp-docker-rmi"><a href="#docker-rm-amp-amp-docker-rmi" class="headerlink" title="docker rm &amp;&amp; docker rmi"></a>docker rm &amp;&amp; docker rmi</h4><p><code>docker rm container_id</code>可以用来删除一个container。<code>docker rmi image_id/image_name</code>可以用来删除一个image。</p>
<h3 id="4-2-AUFS"><a href="#4-2-AUFS" class="headerlink" title="4.2 AUFS"></a>4.2 AUFS</h3><p>很多文章讲docker都会把这个放到后面一点讲.反正不会在类似”使用docker做开发环境”的文章里面讲. 但是我觉得这个东西是理解docker的关键.所以一定要讲.</p>
<p>AUFS比不是docker独有的,很多Linux的发行版中都用到了这个特性.说起AUFS,这个东西是UFS的升级版,前面的A就是代表advanced的意思.那AUFS/UFS到底是个什么东西?</p>
<p>所谓AUFS,Advanced Union File System 就是把不同物理位置的目录合并mount到同一个目录中.这种技术有一点典型的应用:有些linux发行版只要插入一个光盘就可以直接运行.不用进行安装.你对系统文件进行的增删改只是反映在电脑的硬盘上面,不会影响到光盘的内容.即对光盘只读不写.那么docker是如何使把这个技术应用到docker上?</p>
<p>docker把一个镜像分成了很多层layer.这些层合并在一起才成为了一个完整的image.这样子有什么好处?最直观的一点就是,ubuntu15.04跟ubuntu16.04的image可能只有一点点差别.这点差别体现在第四层layer上.那么ubuntu15.04跟16.04就可以共享前三层layer.这样子如果你本地有了ubuntu15.04的image.那么再pull ubuntu16.06的时候只要把第四层的pull下来就可以了.</p>
<p>而且,image的所有层都是<strong>只读</strong>的,当你启动一个image当做container运行的时候,docker会在image的只读层上加一层薄薄的可写层.你在container里面做的所有操作都是反映在可写层.当你退出container之后,下次启动同一个image,之前操作的所有东西都会没有掉.一个重新做人的image.</p>
<p>这个时候有一个问题就来了,我们pull一个image,启动了container.好不容易把该安装的软件都安装好了,然后退出了container.之前安装的软件就都没有了!这个时候我们就要使用commit命令了.<strong>commit命令可以把当前的可写层合并到image的只读层里面</strong>.这样子这个image又多了一层.下次我们启动这个image的时候安装的软件就都还在了.</p>
<p>一个image由好几层layer构成.每个layer都是一个只读层</p>
<p>当启动一个container之后,就会在iamge的只读层基础上添加一个可写层.所有对container执行的操作都反映在container上</p>
<p>这里提一点,当使用<code>docker images</code>命令查看iamge信息的时候,后面的SIZE是表示当前iamge所占用的大小,但是不意味着所有SIZE相加起来就是占用磁盘空间的总大小.一定要注意,可能有image共享若干层layer.这些layer在相加的时候被计算了好几遍.</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">PS</span> C:\Windows\system<span class="number">32</span>\WindowsPowerShell\v<span class="number">1</span>.<span class="number">0</span>&gt; docker images</span><br><span class="line"><span class="attribute">REPOSITORY</span>          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line"><span class="section">&lt;none&gt;</span>              <span class="section">&lt;none&gt;</span>              <span class="attribute">12e32b701daa</span>        <span class="number">25</span> minutes ago      <span class="number">188</span> MB</span><br><span class="line"><span class="attribute">ubuntu</span>              <span class="number">14</span>.<span class="number">04</span>               <span class="number">3</span>f<span class="number">755</span>ca<span class="number">42730</span>        <span class="number">3</span> days ago          <span class="number">188</span> MB</span><br><span class="line"><span class="attribute">centos</span>              <span class="number">6</span>                   <span class="number">8315978</span>ceaaa        <span class="number">6</span> weeks ago         <span class="number">194</span>.<span class="number">6</span> MB</span><br></pre></td></tr></table></figure>

<h3 id="4-3-删除"><a href="#4-3-删除" class="headerlink" title="4.3 删除"></a>4.3 删除</h3><h4 id="（1）删除容器"><a href="#（1）删除容器" class="headerlink" title="（1）删除容器"></a>（1）删除容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm [CONTAINER_ID]</span><br><span class="line">docker rm -f [CONTAINER_ID]   <span class="comment">#默认情况下不能删除正在运行中的容器，可以使用强制删除</span></span><br><span class="line">docker rm -f $(docker ps -aq)  <span class="comment"># 删除所有容器</span></span><br><span class="line">docker ps -aq | xargs docker rm <span class="comment"># 删除所有容器 </span></span><br></pre></td></tr></table></figure>

<h4 id="（2）删除镜像"><a href="#（2）删除镜像" class="headerlink" title="（2）删除镜像"></a>（2）删除镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi [IMAGE_ID]</span><br></pre></td></tr></table></figure>

<p>上面的命令提到删除有rm跟rmi两个，rm是用来删除一个已经退出的container。rmi是用来删除一个image的。有了上面AUFS的概念之后，要明白的是我们使用<code>docker rm container_id</code>的时候，其实只是删除掉了一层可写层的数据。因为只读层是container跟image共享的。只要iamge没有被删掉，那么只读层的数据一定也不会被删除掉。</p>
<p>同样，当多个image共享若干层只读层的时候，删除掉一个image。只是删除掉了这个image独有的一层只读层数据。其他共享的数据并没有被删除掉，只有当删除掉所有的image之后，共享的layer层才会被删掉。</p>
<p>执行删除命令的时候会看到如下的信息，这里每一次deleted都是代表删除掉了一层layer。</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">PS C:\Windows\system32\WindowsPowerShell\v1<span class="number">.0</span>&gt; docker rmi ubuntu-fin</span><br><span class="line"><span class="symbol">Untagged:</span> ubuntu-fin:latest</span><br><span class="line"><span class="symbol">Deleted:</span> sha256:<span class="number">9e0728</span>e8edbaf72846c43c629590fba5f46b1d705111d3fb1d79b9cf03a6c50c</span><br><span class="line"><span class="symbol">Deleted:</span> sha256:d53e457ca7161cd6f2d1b6678ecaafd19043dcaeb1363471867e1047819268fa</span><br><span class="line"><span class="symbol">Deleted:</span> sha256:<span class="number">496</span>ef4fa137e03d80cf821745f875860d3d3120447326b8609938aa70f2edbd9</span><br><span class="line"><span class="symbol">Deleted:</span> sha256:<span class="number">12e32</span>b701daa90c435176a273b2b41b4bfb219523c1ae396dc2f7068bbb6c088</span><br><span class="line"><span class="symbol">Deleted:</span> sha256:e8f29656cf54ad60a17d4b38362d9207b52a846cce3cc13e245fc3b799ff53e9</span><br><span class="line"><span class="symbol">Deleted:</span> sha256:<span class="number">48</span>f6b521c809e40468886b0a159040503d00a0abb1eabf310451edfea562b459</span><br><span class="line"><span class="symbol">Deleted:</span> sha256:e94abc94ab1aff00280016eaf0649a75270886a2b60c8fe862ca549a0601949f</span><br><span class="line"><span class="symbol">Deleted:</span> sha256:<span class="number">3</span>f755ca4273009a8b9d08aa156fbb5e601ed69dc698860938f36b2109c19cc39</span><br><span class="line"><span class="symbol">Deleted:</span> sha256:<span class="number">565903</span>b66233d5576592815ca4d499bd6fe09a9b4baf83f345aaf64544f1cd78</span><br><span class="line"><span class="symbol">Deleted:</span> sha256:b653e4373a4b35aa760ff67cfa3de2c9fe3c089823b63ec797eb04de256f86ba</span><br><span class="line"><span class="symbol">Deleted:</span> sha256:<span class="number">362e536</span>c4e530b94ce4204461e4f8c998705bcb98c91be54dd40b22f50531f3a</span><br><span class="line"><span class="symbol">Deleted:</span> sha256:b69ad682d83af6a6962b4a60a0b5f033c8d39efcd20dbdf320b6dd8136e50aae</span><br><span class="line"><span class="symbol">Deleted:</span> sha256:bc224b1b676d12be2a49f99778dda08b90d22747244d0a0afcdf4cfeb7db5d89</span><br></pre></td></tr></table></figure>

<p>我们再删除iamge的时候有时候不能成功删除。大概原因有一下几点:</p>
<ul>
<li>container正在运行，你删除这个container会失败。应该使用<code>docker stop container_id</code>退出当前container再尝试删除。</li>
<li>container退出了，删除当前image也会失败。因为container虽然退出，当前container保存着运行环境等数据。container是在iamge的基础上添加了一层可写层。所以他们是共享只读层的。</li>
<li>删除一个iamge会有<code>Untagged: ubuntu:14.04</code>.这个不是没有删除成功.这个是因为有其他image跟这个ubuntu:14.04共享layer层。所以删除时候并没有真正删除掉layer层的数据。</li>
</ul>
<p>ok，有了上面的预备知识，我们现在可以开始准备我们的环境了。刚刚说过，我们退出一个container之后在container所安装的软件，添加的文件等等数据都会丢失掉，所以正确的办法应该是:在一个container环境中配置好所有开发要用到的东西之后，使用<code>docker commit</code>命令来把当前这个container制作成一个image。然后下次我们启动这个image的时候环境就是我们所需要的了。但是这样子会存在三个问题:</p>
<ul>
<li>当别人给你一个image之后，你知道这个image里面安装了哪些文件，修改了哪些数据么?</li>
<li>每次commit都会形成一个新的只读层。commit次数多了会使得image变得越来越臃肿。</li>
<li>再着，一个image动辄2、3G。带着这么大个文件跑也不优雅。</li>
</ul>
<p>要解决上面的这些问题，就要使用Dockerfile了。所以我们开始之前还要做点功课。</p>
<h3 id="4-4-Dockerfile"><a href="#4-4-Dockerfile" class="headerlink" title="4.4 Dockerfile"></a>4.4 Dockerfile</h3><p>Dockerfile是用来描述如何构建一个image的,Dockerfile由一些指令构成,全部指令大概有20个左右,这里不全部讲解.只讲一些我们下面会用到的.具体Dockerfile的全部用法参考<a href="https://link.segmentfault.com/?url=https%3A%2F%2Fdocs.docker.com%2Fengine%2Fuserguide%2Feng-image%2Fdockerfile_best-practices%2F">Docker官方出的最佳实践</a>.</p>
<h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>我们要制作的image必然是基于某个现有image的基础,from命令就是用来指定使用哪个基础iamge的.像很多ubuntu官方在<a href="https://link.segmentfault.com/?url=https%3A%2F%2Fhub.docker.com%2F">Docker Hub</a>上维护由官方的image.我们下面开发环境的搭建就是基于ubuntu:14.04的环境下完成的.</p>
<h4 id="COPY-amp-amp-ADD"><a href="#COPY-amp-amp-ADD" class="headerlink" title="COPY &amp;&amp; ADD"></a>COPY &amp;&amp; ADD</h4><p>copy命令是把宿主机上的文件拷贝到image中.add可以是copy的高级版.</p>
<ul>
<li>copy要求拷贝的文件在宿主机上存在</li>
<li>add可以指定一个url座位源文件,docker会自动去下载这个url的文件, 然后拷贝到image中.</li>
</ul>
<p>我们待会儿就会用到add指令,因为我们需要使用<a href="https://link.segmentfault.com/?url=http%3A%2F%2Fmirrors.163.com%2F.help%2Fubuntu.html">163的ubuntu源</a>来替换ubuntu原生的<code>apt-get</code>源.所以我们的Dockerfile会有类似的指令 : <code>ADD http://mirrors.163.com/.help/sources.list.trusty /etc/apt/sources.list</code>.</p>
<h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>这个是指定启动一个container之后,默认执行的命令.我们执行<code>docker run ubuntu:14.04</code>启动一个container之后,默认就进入了bash界面.这就说明这个ubuntu:14.04的CMD就是bash.</p>
<p>这里要澄清一个概念.使用<code>docker run</code>之后默认进入了bash会让很多人以为启动container跟启动一个虚拟机没什么区别.其实不是的.<strong>docker的container就是为了某个进程而存在的,这个进程就是CMD所指定的程序.比如:<code>CMD /bin/bash</code>就是启动了bash.当我们退出了bash之后,整个container也就退出了.如果你的CMD写成:<code>CMD service nginx start</code>.你会发现container执行之后就马上结束了.这是因为整个container只是为了<code>service nginx start</code>这条命令而存在的,它不会管你这条命令启动了什么.默认启动的bash正好是一直在前台运行,只有你使用exit命令退出bash的时候才结束bash进程.这个时候container才结束.才会让人有container跟虚拟机差不多的错觉.</strong></p>
<p>上面的这个概念很重要,一定要理解透彻.如果没有搞清楚这点.你会一直觉得docker跟虚拟机没有什么区别.</p>
<h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p>这个命令指定了在构建image时候image中要执行的命令.这么说可能有点蹩脚.举个例子,我们希望我们的镜像构建好的时候就安装好了git.那么我们就可以在Dockerfile里面写<code>RUN apt-get -y install git</code>.这样子在构建镜像的时候就会去安装git了.待会儿我们要安装的软件都是通过这个命令指定的.也是有了RUN指令,我们就可以知道一个image构建过程中做了一些什么操作.</p>
<h3 id="4-5-退出容器"><a href="#4-5-退出容器" class="headerlink" title="4.5 退出容器"></a>4.5 退出容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit   # 直接关闭当前容器并退出</span><br><span class="line">crtl + p + q   # 在后台运行，退出交互界面</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://segmentfault.com/a/1190000007875949">使用docker搭建开发环境</a></li>
<li><a href="https://yeasy.gitbook.io/docker_practice/">docker–从入门到实践</a></li>
<li><a href="https://www.cnblogs.com/cuijunfeng/p/15011540.html">https://www.cnblogs.com/cuijunfeng/p/15011540.html</a></li>
<li><a href="https://www.bilibili.com/video/BV1964y127ti">三分钟学不会的docker教程014-php开发环境搭建及打包-上</a></li>
<li><a href="https://www.bilibili.com/video/BV1zN411o7Tn">三分钟学不会的docker教程015-php开发环境搭建及打包-下</a></li>
<li><a href="https://blog.csdn.net/boonya/article/details/74906927">https://blog.csdn.net/boonya/article/details/74906927</a></li>
<li><a href="https://docs.docker.com/">docker官方文档</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>使用echarts时，通过setOption多次修改数据，发现切换时会有数据遗留问题，解决方法</title>
    <url>/echarts-change-data/</url>
    <content><![CDATA[<h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h2><p>在使用echarts时发现，一个echarts实例对象，我想显示多组数据，通过<code>JS</code>修改<code>option</code>中的<code>series</code>属性，并通过<code>setOption</code>重新渲染echarts图表，但是，在使用过程中发现，当我从一组数据切换到另一组数据时，这一组数据同时会显示上一组数据中的数据，看下如：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/5435435.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/45451313545.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/787545454521.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/6563454548.png" alt="在这里插入图片描述"></p>
<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2 解决方法"></a>2 解决方法</h2><p>在echarts官网的API中，有一个<code>clear</code>方法，该方法的主要功能是：清空当前实例，会移除实例中所有的组件和图表。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/451245454.png" alt="在这里插入图片描述"><br>在重新渲染图表信息之前，加上下面的代码即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myChart.clear(); <span class="comment">//在setOption之前加上该语句即可</span></span><br><span class="line">myChart.setOption(option);</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/5457542121.png" alt="在这里插入图片描述"></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>解决问题</tag>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>使用echarts插件时，发现y值相同，但不是同一条直线，解决方法</title>
    <url>/echarts-one-line/</url>
    <content><![CDATA[<h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h2><p>在使用Echart插件进行画图时，发现X轴的值固定，Y轴的也是相同，当鼠标悬停时显示的值也是相同的，但是显示效果确实好像两条不一样的线，效果如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/787845421.png" alt="在这里插入图片描述"><br>具体JS代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 1.对echarts对象进行初始化</span></span><br><span class="line"><span class="comment">// &lt;!--        var myChart = echarts.init(document.querySelector(&quot;.box&quot;));--&gt;</span></span><br><span class="line">        <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&quot;char1&quot;</span>));</span><br><span class="line">        <span class="comment">// 2.指定配置项和数据</span></span><br><span class="line">        option = &#123;</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">                <span class="attr">text</span>: <span class="string">&#x27;预测&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">tooltip</span>: &#123;</span><br><span class="line">                <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">legend</span>: &#123;</span><br><span class="line">                <span class="attr">data</span>: [<span class="string">&quot;y-true&quot;</span>, <span class="string">&quot;LSTM-2&quot;</span>, <span class="string">&quot;LSTM&quot;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">grid</span>: &#123;</span><br><span class="line">                <span class="attr">left</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">                <span class="attr">right</span>: <span class="string">&#x27;4%&#x27;</span>,</span><br><span class="line">                <span class="attr">bottom</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">                <span class="attr">containLabel</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">toolbox</span>: &#123;</span><br><span class="line">                <span class="attr">feature</span>: &#123;</span><br><span class="line">                    <span class="attr">saveAsImage</span>: &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">xAxis</span>: &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">                <span class="attr">boundaryGap</span>: [<span class="number">0</span>, <span class="string">&quot;100%&quot;</span>],</span><br><span class="line">                <span class="attr">data</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">174</span>, <span class="number">175</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">178</span>, <span class="number">179</span>, <span class="number">180</span>, <span class="number">181</span>, <span class="number">182</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">185</span>, <span class="number">186</span>, <span class="number">187</span>, <span class="number">188</span>, <span class="number">189</span>, <span class="number">190</span>, <span class="number">191</span>, <span class="number">192</span>, <span class="number">193</span>, <span class="number">194</span>, <span class="number">195</span>, <span class="number">196</span>, <span class="number">197</span>, <span class="number">198</span>, <span class="number">199</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">205</span>, <span class="number">206</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">209</span>, <span class="number">210</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">217</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">221</span>, <span class="number">222</span>, <span class="number">223</span>, <span class="number">224</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">229</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">236</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">239</span>, <span class="number">240</span>, <span class="number">241</span>, <span class="number">242</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">249</span>, <span class="number">250</span>, <span class="number">251</span>, <span class="number">252</span>, <span class="number">253</span>, <span class="number">254</span>, <span class="number">255</span>, <span class="number">256</span>, <span class="number">257</span>, <span class="number">258</span>, <span class="number">259</span>, <span class="number">260</span>, <span class="number">261</span>, <span class="number">262</span>, <span class="number">263</span>, <span class="number">264</span>, <span class="number">265</span>, <span class="number">266</span>, <span class="number">267</span>, <span class="number">268</span>, <span class="number">269</span>, <span class="number">270</span>, <span class="number">271</span>, <span class="number">272</span>, <span class="number">273</span>, <span class="number">274</span>, <span class="number">275</span>, <span class="number">276</span>, <span class="number">277</span>, <span class="number">278</span>, <span class="number">279</span>, <span class="number">280</span>, <span class="number">281</span>, <span class="number">282</span>, <span class="number">283</span>, <span class="number">284</span>, <span class="number">285</span>, <span class="number">286</span>, <span class="number">287</span>, <span class="number">288</span>, <span class="number">289</span>, <span class="number">290</span>, <span class="number">291</span>, <span class="number">292</span>, <span class="number">293</span>, <span class="number">294</span>, <span class="number">295</span>, <span class="number">296</span>, <span class="number">297</span>, <span class="number">298</span>, <span class="number">299</span>, <span class="number">300</span>, <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>, <span class="number">304</span>, <span class="number">305</span>, <span class="number">306</span>, <span class="number">307</span>, <span class="number">308</span>, <span class="number">309</span>, <span class="number">310</span>, <span class="number">311</span>, <span class="number">312</span>, <span class="number">313</span>, <span class="number">314</span>, <span class="number">315</span>, <span class="number">316</span>, <span class="number">317</span>, <span class="number">318</span>, <span class="number">319</span>, <span class="number">320</span>, <span class="number">321</span>, <span class="number">322</span>, <span class="number">323</span>, <span class="number">324</span>, <span class="number">325</span>, <span class="number">326</span>, <span class="number">327</span>, <span class="number">328</span>, <span class="number">329</span>, <span class="number">330</span>, <span class="number">331</span>, <span class="number">332</span>, <span class="number">333</span>, <span class="number">334</span>, <span class="number">335</span>, <span class="number">336</span>, <span class="number">337</span>, <span class="number">338</span>, <span class="number">339</span>, <span class="number">340</span>, <span class="number">341</span>, <span class="number">342</span>, <span class="number">343</span>, <span class="number">344</span>, <span class="number">345</span>, <span class="number">346</span>, <span class="number">347</span>, <span class="number">348</span>, <span class="number">349</span>, <span class="number">350</span>, <span class="number">351</span>, <span class="number">352</span>, <span class="number">353</span>, <span class="number">354</span>, <span class="number">355</span>, <span class="number">356</span>, <span class="number">357</span>, <span class="number">358</span>, <span class="number">359</span>, <span class="number">360</span>, <span class="number">361</span>, <span class="number">362</span>, <span class="number">363</span>, <span class="number">364</span>, <span class="number">365</span>, <span class="number">366</span>, <span class="number">367</span>, <span class="number">368</span>, <span class="number">369</span>, <span class="number">370</span>, <span class="number">371</span>, <span class="number">372</span>, <span class="number">373</span>, <span class="number">374</span>, <span class="number">375</span>, <span class="number">376</span>, <span class="number">377</span>, <span class="number">378</span>, <span class="number">379</span>, <span class="number">380</span>, <span class="number">381</span>, <span class="number">382</span>, <span class="number">383</span>, <span class="number">384</span>, <span class="number">385</span>, <span class="number">386</span>, <span class="number">387</span>, <span class="number">388</span>, <span class="number">389</span>, <span class="number">390</span>, <span class="number">391</span>, <span class="number">392</span>, <span class="number">393</span>, <span class="number">394</span>, <span class="number">395</span>, <span class="number">396</span>, <span class="number">397</span>, <span class="number">398</span>, <span class="number">399</span>, <span class="number">400</span>, <span class="number">401</span>, <span class="number">402</span>, <span class="number">403</span>, <span class="number">404</span>, <span class="number">405</span>, <span class="number">406</span>, <span class="number">407</span>, <span class="number">408</span>, <span class="number">409</span>, <span class="number">410</span>, <span class="number">411</span>, <span class="number">412</span>, <span class="number">413</span>, <span class="number">414</span>, <span class="number">415</span>, <span class="number">416</span>, <span class="number">417</span>, <span class="number">418</span>, <span class="number">419</span>, <span class="number">420</span>, <span class="number">421</span>, <span class="number">422</span>, <span class="number">423</span>, <span class="number">424</span>, <span class="number">425</span>, <span class="number">426</span>, <span class="number">427</span>, <span class="number">428</span>, <span class="number">429</span>, <span class="number">430</span>, <span class="number">431</span>, <span class="number">432</span>, <span class="number">433</span>, <span class="number">434</span>, <span class="number">435</span>, <span class="number">436</span>, <span class="number">437</span>, <span class="number">438</span>, <span class="number">439</span>, <span class="number">440</span>, <span class="number">441</span>, <span class="number">442</span>, <span class="number">443</span>, <span class="number">444</span>, <span class="number">445</span>, <span class="number">446</span>, <span class="number">447</span>, <span class="number">448</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">yAxis</span>: &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">series</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;y-true&#x27;</span>,</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">                    <span class="attr">stack</span>: <span class="string">&quot;总量&quot;</span>,</span><br><span class="line">                    <span class="attr">data</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">174</span>, <span class="number">175</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">178</span>, <span class="number">179</span>, <span class="number">180</span>, <span class="number">181</span>, <span class="number">182</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">185</span>, <span class="number">186</span>, <span class="number">187</span>, <span class="number">188</span>, <span class="number">189</span>, <span class="number">190</span>, <span class="number">191</span>, <span class="number">192</span>, <span class="number">193</span>, <span class="number">194</span>, <span class="number">195</span>, <span class="number">196</span>, <span class="number">197</span>, <span class="number">198</span>, <span class="number">199</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">205</span>, <span class="number">206</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">209</span>, <span class="number">210</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">217</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">221</span>, <span class="number">222</span>, <span class="number">223</span>, <span class="number">224</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">229</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">236</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">239</span>, <span class="number">240</span>, <span class="number">241</span>, <span class="number">242</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">249</span>, <span class="number">250</span>, <span class="number">251</span>, <span class="number">252</span>, <span class="number">253</span>, <span class="number">254</span>, <span class="number">255</span>, <span class="number">256</span>, <span class="number">257</span>, <span class="number">258</span>, <span class="number">259</span>, <span class="number">260</span>, <span class="number">261</span>, <span class="number">262</span>, <span class="number">263</span>, <span class="number">264</span>, <span class="number">265</span>, <span class="number">266</span>, <span class="number">267</span>, <span class="number">268</span>, <span class="number">269</span>, <span class="number">270</span>, <span class="number">271</span>, <span class="number">272</span>, <span class="number">273</span>, <span class="number">274</span>, <span class="number">275</span>, <span class="number">276</span>, <span class="number">277</span>, <span class="number">278</span>, <span class="number">279</span>, <span class="number">280</span>, <span class="number">281</span>, <span class="number">282</span>, <span class="number">283</span>, <span class="number">284</span>, <span class="number">285</span>, <span class="number">286</span>, <span class="number">287</span>, <span class="number">288</span>, <span class="number">289</span>, <span class="number">290</span>, <span class="number">291</span>, <span class="number">292</span>, <span class="number">293</span>, <span class="number">294</span>, <span class="number">295</span>, <span class="number">296</span>, <span class="number">297</span>, <span class="number">298</span>, <span class="number">299</span>, <span class="number">300</span>, <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>, <span class="number">304</span>, <span class="number">305</span>, <span class="number">306</span>, <span class="number">307</span>, <span class="number">308</span>, <span class="number">309</span>, <span class="number">310</span>, <span class="number">311</span>, <span class="number">312</span>, <span class="number">313</span>, <span class="number">314</span>, <span class="number">315</span>, <span class="number">316</span>, <span class="number">317</span>, <span class="number">318</span>, <span class="number">319</span>, <span class="number">320</span>, <span class="number">321</span>, <span class="number">322</span>, <span class="number">323</span>, <span class="number">324</span>, <span class="number">325</span>, <span class="number">326</span>, <span class="number">327</span>, <span class="number">328</span>, <span class="number">329</span>, <span class="number">330</span>, <span class="number">331</span>, <span class="number">332</span>, <span class="number">333</span>, <span class="number">334</span>, <span class="number">335</span>, <span class="number">336</span>, <span class="number">337</span>, <span class="number">338</span>, <span class="number">339</span>, <span class="number">340</span>, <span class="number">341</span>, <span class="number">342</span>, <span class="number">343</span>, <span class="number">344</span>, <span class="number">345</span>, <span class="number">346</span>, <span class="number">347</span>, <span class="number">348</span>, <span class="number">349</span>, <span class="number">350</span>, <span class="number">351</span>, <span class="number">352</span>, <span class="number">353</span>, <span class="number">354</span>, <span class="number">355</span>, <span class="number">356</span>, <span class="number">357</span>, <span class="number">358</span>, <span class="number">359</span>, <span class="number">360</span>, <span class="number">361</span>, <span class="number">362</span>, <span class="number">363</span>, <span class="number">364</span>, <span class="number">365</span>, <span class="number">366</span>, <span class="number">367</span>, <span class="number">368</span>, <span class="number">369</span>, <span class="number">370</span>, <span class="number">371</span>, <span class="number">372</span>, <span class="number">373</span>, <span class="number">374</span>, <span class="number">375</span>, <span class="number">376</span>, <span class="number">377</span>, <span class="number">378</span>, <span class="number">379</span>, <span class="number">380</span>, <span class="number">381</span>, <span class="number">382</span>, <span class="number">383</span>, <span class="number">384</span>, <span class="number">385</span>, <span class="number">386</span>, <span class="number">387</span>, <span class="number">388</span>, <span class="number">389</span>, <span class="number">390</span>, <span class="number">391</span>, <span class="number">392</span>, <span class="number">393</span>, <span class="number">394</span>, <span class="number">395</span>, <span class="number">396</span>, <span class="number">397</span>, <span class="number">398</span>, <span class="number">399</span>, <span class="number">400</span>, <span class="number">401</span>, <span class="number">402</span>, <span class="number">403</span>, <span class="number">404</span>, <span class="number">405</span>, <span class="number">406</span>, <span class="number">407</span>, <span class="number">408</span>, <span class="number">409</span>, <span class="number">410</span>, <span class="number">411</span>, <span class="number">412</span>, <span class="number">413</span>, <span class="number">414</span>, <span class="number">415</span>, <span class="number">416</span>, <span class="number">417</span>, <span class="number">418</span>, <span class="number">419</span>, <span class="number">420</span>, <span class="number">421</span>, <span class="number">422</span>, <span class="number">423</span>, <span class="number">424</span>, <span class="number">425</span>, <span class="number">426</span>, <span class="number">427</span>, <span class="number">428</span>, <span class="number">429</span>, <span class="number">430</span>, <span class="number">431</span>, <span class="number">432</span>, <span class="number">433</span>, <span class="number">434</span>, <span class="number">435</span>, <span class="number">436</span>, <span class="number">437</span>, <span class="number">438</span>, <span class="number">439</span>, <span class="number">440</span>, <span class="number">441</span>, <span class="number">442</span>, <span class="number">443</span>, <span class="number">444</span>, <span class="number">445</span>, <span class="number">446</span>, <span class="number">447</span>, <span class="number">448</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;LSTM-2&#x27;</span>,</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">                    <span class="attr">stack</span>: <span class="string">&quot;总量&quot;</span>,</span><br><span class="line">                    <span class="attr">data</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">174</span>, <span class="number">175</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">178</span>, <span class="number">179</span>, <span class="number">180</span>, <span class="number">181</span>, <span class="number">182</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">185</span>, <span class="number">186</span>, <span class="number">187</span>, <span class="number">188</span>, <span class="number">189</span>, <span class="number">190</span>, <span class="number">191</span>, <span class="number">192</span>, <span class="number">193</span>, <span class="number">194</span>, <span class="number">195</span>, <span class="number">196</span>, <span class="number">197</span>, <span class="number">198</span>, <span class="number">199</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">205</span>, <span class="number">206</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">209</span>, <span class="number">210</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">217</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">221</span>, <span class="number">222</span>, <span class="number">223</span>, <span class="number">224</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">229</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">236</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">239</span>, <span class="number">240</span>, <span class="number">241</span>, <span class="number">242</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">249</span>, <span class="number">250</span>, <span class="number">251</span>, <span class="number">252</span>, <span class="number">253</span>, <span class="number">254</span>, <span class="number">255</span>, <span class="number">256</span>, <span class="number">257</span>, <span class="number">258</span>, <span class="number">259</span>, <span class="number">260</span>, <span class="number">261</span>, <span class="number">262</span>, <span class="number">263</span>, <span class="number">264</span>, <span class="number">265</span>, <span class="number">266</span>, <span class="number">267</span>, <span class="number">268</span>, <span class="number">269</span>, <span class="number">270</span>, <span class="number">271</span>, <span class="number">272</span>, <span class="number">273</span>, <span class="number">274</span>, <span class="number">275</span>, <span class="number">276</span>, <span class="number">277</span>, <span class="number">278</span>, <span class="number">279</span>, <span class="number">280</span>, <span class="number">281</span>, <span class="number">282</span>, <span class="number">283</span>, <span class="number">284</span>, <span class="number">285</span>, <span class="number">286</span>, <span class="number">287</span>, <span class="number">288</span>, <span class="number">289</span>, <span class="number">290</span>, <span class="number">291</span>, <span class="number">292</span>, <span class="number">293</span>, <span class="number">294</span>, <span class="number">295</span>, <span class="number">296</span>, <span class="number">297</span>, <span class="number">298</span>, <span class="number">299</span>, <span class="number">300</span>, <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>, <span class="number">304</span>, <span class="number">305</span>, <span class="number">306</span>, <span class="number">307</span>, <span class="number">308</span>, <span class="number">309</span>, <span class="number">310</span>, <span class="number">311</span>, <span class="number">312</span>, <span class="number">313</span>, <span class="number">314</span>, <span class="number">315</span>, <span class="number">316</span>, <span class="number">317</span>, <span class="number">318</span>, <span class="number">319</span>, <span class="number">320</span>, <span class="number">321</span>, <span class="number">322</span>, <span class="number">323</span>, <span class="number">324</span>, <span class="number">325</span>, <span class="number">326</span>, <span class="number">327</span>, <span class="number">328</span>, <span class="number">329</span>, <span class="number">330</span>, <span class="number">331</span>, <span class="number">332</span>, <span class="number">333</span>, <span class="number">334</span>, <span class="number">335</span>, <span class="number">336</span>, <span class="number">337</span>, <span class="number">338</span>, <span class="number">339</span>, <span class="number">340</span>, <span class="number">341</span>, <span class="number">342</span>, <span class="number">343</span>, <span class="number">344</span>, <span class="number">345</span>, <span class="number">346</span>, <span class="number">347</span>, <span class="number">348</span>, <span class="number">349</span>, <span class="number">350</span>, <span class="number">351</span>, <span class="number">352</span>, <span class="number">353</span>, <span class="number">354</span>, <span class="number">355</span>, <span class="number">356</span>, <span class="number">357</span>, <span class="number">358</span>, <span class="number">359</span>, <span class="number">360</span>, <span class="number">361</span>, <span class="number">362</span>, <span class="number">363</span>, <span class="number">364</span>, <span class="number">365</span>, <span class="number">366</span>, <span class="number">367</span>, <span class="number">368</span>, <span class="number">369</span>, <span class="number">370</span>, <span class="number">371</span>, <span class="number">372</span>, <span class="number">373</span>, <span class="number">374</span>, <span class="number">375</span>, <span class="number">376</span>, <span class="number">377</span>, <span class="number">378</span>, <span class="number">379</span>, <span class="number">380</span>, <span class="number">381</span>, <span class="number">382</span>, <span class="number">383</span>, <span class="number">384</span>, <span class="number">385</span>, <span class="number">386</span>, <span class="number">387</span>, <span class="number">388</span>, <span class="number">389</span>, <span class="number">390</span>, <span class="number">391</span>, <span class="number">392</span>, <span class="number">393</span>, <span class="number">394</span>, <span class="number">395</span>, <span class="number">396</span>, <span class="number">397</span>, <span class="number">398</span>, <span class="number">399</span>, <span class="number">400</span>, <span class="number">401</span>, <span class="number">402</span>, <span class="number">403</span>, <span class="number">404</span>, <span class="number">405</span>, <span class="number">406</span>, <span class="number">407</span>, <span class="number">408</span>, <span class="number">409</span>, <span class="number">410</span>, <span class="number">411</span>, <span class="number">412</span>, <span class="number">413</span>, <span class="number">414</span>, <span class="number">415</span>, <span class="number">416</span>, <span class="number">417</span>, <span class="number">418</span>, <span class="number">419</span>, <span class="number">420</span>, <span class="number">421</span>, <span class="number">422</span>, <span class="number">423</span>, <span class="number">424</span>, <span class="number">425</span>, <span class="number">426</span>, <span class="number">427</span>, <span class="number">428</span>, <span class="number">429</span>, <span class="number">430</span>, <span class="number">431</span>, <span class="number">432</span>, <span class="number">433</span>, <span class="number">434</span>, <span class="number">435</span>, <span class="number">436</span>, <span class="number">437</span>, <span class="number">438</span>, <span class="number">439</span>, <span class="number">440</span>, <span class="number">441</span>, <span class="number">442</span>, <span class="number">443</span>, <span class="number">444</span>, <span class="number">445</span>, <span class="number">446</span>, <span class="number">447</span>, <span class="number">448</span>]</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;LSTM&#x27;</span>,</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">                    <span class="attr">stack</span>: <span class="string">&quot;总量&quot;</span>,</span><br><span class="line">                    <span class="attr">data</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">174</span>, <span class="number">175</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">178</span>, <span class="number">179</span>, <span class="number">180</span>, <span class="number">181</span>, <span class="number">182</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">185</span>, <span class="number">186</span>, <span class="number">187</span>, <span class="number">188</span>, <span class="number">189</span>, <span class="number">190</span>, <span class="number">191</span>, <span class="number">192</span>, <span class="number">193</span>, <span class="number">194</span>, <span class="number">195</span>, <span class="number">196</span>, <span class="number">197</span>, <span class="number">198</span>, <span class="number">199</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">205</span>, <span class="number">206</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">209</span>, <span class="number">210</span>, <span class="number">211</span>, <span class="number">212</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">215</span>, <span class="number">216</span>, <span class="number">217</span>, <span class="number">218</span>, <span class="number">219</span>, <span class="number">220</span>, <span class="number">221</span>, <span class="number">222</span>, <span class="number">223</span>, <span class="number">224</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">227</span>, <span class="number">228</span>, <span class="number">229</span>, <span class="number">230</span>, <span class="number">231</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">236</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">239</span>, <span class="number">240</span>, <span class="number">241</span>, <span class="number">242</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">249</span>, <span class="number">250</span>, <span class="number">251</span>, <span class="number">252</span>, <span class="number">253</span>, <span class="number">254</span>, <span class="number">255</span>, <span class="number">256</span>, <span class="number">257</span>, <span class="number">258</span>, <span class="number">259</span>, <span class="number">260</span>, <span class="number">261</span>, <span class="number">262</span>, <span class="number">263</span>, <span class="number">264</span>, <span class="number">265</span>, <span class="number">266</span>, <span class="number">267</span>, <span class="number">268</span>, <span class="number">269</span>, <span class="number">270</span>, <span class="number">271</span>, <span class="number">272</span>, <span class="number">273</span>, <span class="number">274</span>, <span class="number">275</span>, <span class="number">276</span>, <span class="number">277</span>, <span class="number">278</span>, <span class="number">279</span>, <span class="number">280</span>, <span class="number">281</span>, <span class="number">282</span>, <span class="number">283</span>, <span class="number">284</span>, <span class="number">285</span>, <span class="number">286</span>, <span class="number">287</span>, <span class="number">288</span>, <span class="number">289</span>, <span class="number">290</span>, <span class="number">291</span>, <span class="number">292</span>, <span class="number">293</span>, <span class="number">294</span>, <span class="number">295</span>, <span class="number">296</span>, <span class="number">297</span>, <span class="number">298</span>, <span class="number">299</span>, <span class="number">300</span>, <span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>, <span class="number">304</span>, <span class="number">305</span>, <span class="number">306</span>, <span class="number">307</span>, <span class="number">308</span>, <span class="number">309</span>, <span class="number">310</span>, <span class="number">311</span>, <span class="number">312</span>, <span class="number">313</span>, <span class="number">314</span>, <span class="number">315</span>, <span class="number">316</span>, <span class="number">317</span>, <span class="number">318</span>, <span class="number">319</span>, <span class="number">320</span>, <span class="number">321</span>, <span class="number">322</span>, <span class="number">323</span>, <span class="number">324</span>, <span class="number">325</span>, <span class="number">326</span>, <span class="number">327</span>, <span class="number">328</span>, <span class="number">329</span>, <span class="number">330</span>, <span class="number">331</span>, <span class="number">332</span>, <span class="number">333</span>, <span class="number">334</span>, <span class="number">335</span>, <span class="number">336</span>, <span class="number">337</span>, <span class="number">338</span>, <span class="number">339</span>, <span class="number">340</span>, <span class="number">341</span>, <span class="number">342</span>, <span class="number">343</span>, <span class="number">344</span>, <span class="number">345</span>, <span class="number">346</span>, <span class="number">347</span>, <span class="number">348</span>, <span class="number">349</span>, <span class="number">350</span>, <span class="number">351</span>, <span class="number">352</span>, <span class="number">353</span>, <span class="number">354</span>, <span class="number">355</span>, <span class="number">356</span>, <span class="number">357</span>, <span class="number">358</span>, <span class="number">359</span>, <span class="number">360</span>, <span class="number">361</span>, <span class="number">362</span>, <span class="number">363</span>, <span class="number">364</span>, <span class="number">365</span>, <span class="number">366</span>, <span class="number">367</span>, <span class="number">368</span>, <span class="number">369</span>, <span class="number">370</span>, <span class="number">371</span>, <span class="number">372</span>, <span class="number">373</span>, <span class="number">374</span>, <span class="number">375</span>, <span class="number">376</span>, <span class="number">377</span>, <span class="number">378</span>, <span class="number">379</span>, <span class="number">380</span>, <span class="number">381</span>, <span class="number">382</span>, <span class="number">383</span>, <span class="number">384</span>, <span class="number">385</span>, <span class="number">386</span>, <span class="number">387</span>, <span class="number">388</span>, <span class="number">389</span>, <span class="number">390</span>, <span class="number">391</span>, <span class="number">392</span>, <span class="number">393</span>, <span class="number">394</span>, <span class="number">395</span>, <span class="number">396</span>, <span class="number">397</span>, <span class="number">398</span>, <span class="number">399</span>, <span class="number">400</span>, <span class="number">401</span>, <span class="number">402</span>, <span class="number">403</span>, <span class="number">404</span>, <span class="number">405</span>, <span class="number">406</span>, <span class="number">407</span>, <span class="number">408</span>, <span class="number">409</span>, <span class="number">410</span>, <span class="number">411</span>, <span class="number">412</span>, <span class="number">413</span>, <span class="number">414</span>, <span class="number">415</span>, <span class="number">416</span>, <span class="number">417</span>, <span class="number">418</span>, <span class="number">419</span>, <span class="number">420</span>, <span class="number">421</span>, <span class="number">422</span>, <span class="number">423</span>, <span class="number">424</span>, <span class="number">425</span>, <span class="number">426</span>, <span class="number">427</span>, <span class="number">428</span>, <span class="number">429</span>, <span class="number">430</span>, <span class="number">431</span>, <span class="number">432</span>, <span class="number">433</span>, <span class="number">434</span>, <span class="number">435</span>, <span class="number">436</span>, <span class="number">437</span>, <span class="number">438</span>, <span class="number">439</span>, <span class="number">440</span>, <span class="number">441</span>, <span class="number">442</span>, <span class="number">443</span>, <span class="number">444</span>, <span class="number">445</span>, <span class="number">446</span>, <span class="number">447</span>, <span class="number">448</span>]</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 3.把配置项给实例对象</span></span><br><span class="line">        myChart.setOption(option);</span><br></pre></td></tr></table></figure>
<h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2 解决方案"></a>2 解决方案</h2><p>主要是因为使用<code>stack</code>这个属性，该属性为堆叠的意思，使用了该属性之后，即使Y数据值相同，也会显示成两条不一样的线。只要将该属性删除即可，如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/3654654545.png" alt="在这里插入图片描述"></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>解决问题</tag>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>使用枚举创建单例对象</title>
    <url>/enum-singleton/</url>
    <content><![CDATA[<h2 id="1-枚举的基本用法"><a href="#1-枚举的基本用法" class="headerlink" title="1 枚举的基本用法"></a>1 枚举的基本用法</h2><p>枚举可以有<strong>成员方法</strong>、<strong>成员属性</strong>和<strong>构造方法</strong>。定义一个枚举：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">eType</span></span>&#123;</span><br><span class="line">    A,B,C,D;<span class="comment">//成员属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建枚举时，$JVM$会自动创建一个继承自<code>java.lang.Enum</code>的类，上面的<code>enum</code>可以看做如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">eType</span> <span class="keyword">extends</span> <span class="title">Enum</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> eType A;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于上面的枚举，可以看做是一个类，类名是<code>eType</code>，其中A、B、C、D可以看做<code>eType</code>的四个实例。但是该实例不需要手动创建，且枚举的构造方法时私有的，所有我们也不能够调用，只能有$JVM$进行调用。</p>
<p>由于A、B、C、D可以看做<code>eType</code>的四个实例，所以可以在<code>enum</code>中定义实例的变量和方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">eType</span></span>&#123;</span><br><span class="line">    A,B,C,D; <span class="comment">//成员属性</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> value; <span class="comment">//静态变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123; <span class="comment">//静态方法</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    String type; <span class="comment">//非静态变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123; <span class="comment">//非静态方法</span></span><br><span class="line">    	<span class="keyword">return</span> type; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在原有的基础上，由于<code>enum</code>可以看做一个类，所以调用也是和普通的类一样，比如：</p>
<ul>
<li>调用静态属性：<code>eType.value</code>，调用静态方法：<code>eType.getValue()</code></li>
<li>调用非静态资源：<code>eType.A.getType()</code>。</li>
</ul>
<p>对于枚举当中的某个实例，同样也可以为其编写自己的实例方法，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">eType</span></span>&#123;</span><br><span class="line">    A&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;我是枚举类的实例A的实例方法&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,B,C,D; <span class="comment">//成员属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A后面的大括号里面的代码便是实例A的实例方法，可以通过覆盖原有的方法进行重写。同样也可以在枚举声明抽象方法，强制所有枚举中的实例实现该方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">eType</span></span>&#123;</span><br><span class="line">    A &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Type A&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,B &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Type B&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-枚举单例实现"><a href="#2-枚举单例实现" class="headerlink" title="2 枚举单例实现"></a>2 枚举单例实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span></span>&#123;</span><br><span class="line">    <span class="comment">//这是资源类，也就是需要实现单例模式的资源类，一般需要实现单例模式比如数据库连接，网络连接等</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">    INSTANCE; <span class="comment">//单例实例</span></span><br><span class="line">    <span class="keyword">private</span> Resource instance;</span><br><span class="line">    Something() &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Resource();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resource <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果想得到单例实例可以直接使用代码<code>Something.INSTACE.getInstance()</code>进行调用。解释：枚举中确保<strong>构造方法是私有</strong>的，在访问枚举实例时会执行构造方法，且每个枚举的实例都是<code>static final</code>类型，也就是说该实例在$JVM$中只会被创建一次，在调用构造方法时，我们需要的单例被实例化，<strong>在枚举中的实例被保证只会被创建一次，所以我们的单例也会被保证只会创建一次。</strong></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
      </tags>
  </entry>
  <entry>
    <title>解决【hexo博客绑定个人域名之后，每次hexo d之后，页面总是失效，需要重新配置】</title>
    <url>/error-by-hexo-d-person-domain/</url>
    <content><![CDATA[<h3 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1 发现问题"></a>1 发现问题</h3><p>我<a href="https://jums.club/personal-domain-for-github-page/">绑定个人域名</a>之后,每次写完博客，将本地博客使用<code>hexo d</code>提交到GitHub时，然后再在浏览器中查看返现页面成了404，然后通过百度，终于把问题解决。</p>
<blockquote>
<p>参考博客：<a href="https://blog.csdn.net/fake_hydra/article/details/82414965">https://blog.csdn.net/fake_hydra/article/details/82414965</a></p>
</blockquote>
<h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>我们在<code>hexo</code>博客的本目录下的<code>source</code>目录下新建一个文件，该文件名为<code>CNAME</code>，必须是大写，且没有后缀，<a href="https://jums.club/personal-domain-for-github-page/#3-%E5%88%9B%E5%BB%BACNAME%E6%96%87%E4%BB%B6">参考博客</a><br>在CNAME文件里面加上我们的个人域名。如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191123130306.png" alt="CNAME content"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>! [rejected] master -&gt; master (non-fast-forward)</title>
    <url>/error-git-pull/</url>
    <content><![CDATA[<h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h2><p>在使用<code>git</code>管理代码时，有时候需要用到<code>reset</code>命令回退到不同的版本号，当回退到历史版本之后，又需要重新提交，此时可能会遇到如下的错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! [rejected] master -&gt; master (non-fast-forward)</span><br></pre></td></tr></table></figure>

<h2 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h2><p>此时可以使用如下的命令进行解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先从github将之前的版本pull下来，然后在提交</span></span><br><span class="line">$ git pull &lt;remote repository&gt; &lt;branch&gt;</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法二，如果觉得代码没有问题，可以强制push上去</span></span><br><span class="line">$ git push --force &lt;remote repository&gt;</span><br></pre></td></tr></table></figure>



<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>解决【hexo博客绑定个人域名之后，每次hexo d之后，页面总是失效，需要重新配置】</title>
    <url>/fatal-remote-origin-already-exists/</url>
    <content><![CDATA[<h3 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1 发现问题"></a>1 发现问题</h3><p>我<a href="https://jums.club/personal-domain-for-github-page/">绑定个人域名</a>之后,每次写完博客，将本地博客使用<code>hexo d</code>提交到GitHub时，然后再在浏览器中查看返现页面成了404，然后通过百度，终于把问题解决。</p>
<blockquote>
<p>参考博客：<a href="https://blog.csdn.net/fake_hydra/article/details/82414965">https://blog.csdn.net/fake_hydra/article/details/82414965</a></p>
</blockquote>
<h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>我们在<code>hexo</code>博客的本目录下的<code>source</code>目录下新建一个文件，该文件名为<code>CNAME</code>，必须是大写，且没有后缀，<a href="https://jums.club/personal-domain-for-github-page/#3-%E5%88%9B%E5%BB%BACNAME%E6%96%87%E4%BB%B6">参考博客</a><br>在CNAME文件里面加上我们的个人域名。如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191123130306.png" alt="CNAME content"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>一款超级简洁的时钟APP，可以用作电脑屏保</title>
    <url>/fliplo-clock-app/</url>
    <content><![CDATA[<h2 id="1-Fliplo简介"><a href="#1-Fliplo简介" class="headerlink" title="1 Fliplo简介"></a>1 Fliplo简介</h2><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/main_fliplo.png" alt=""></p>
<p>该款APP（<a href="https://fliqlo.com/">官网</a>）有MAC版、Windows版、iPhone/iPad版。对应下载地址如下：</p>
<ul>
<li><a href="https://fliqlo.com/download/FliqloScr.zip">windows</a></li>
<li><a href="https://fliqlo.com/download/Fliqlo%201.8.3.dmg">mac</a></li>
<li><a href="https://apps.apple.com/app/id900833042">iphone/iPad</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>小幸运</tag>
      </tags>
  </entry>
  <entry>
    <title>如何通过git连接到GitHub</title>
    <url>/git-connect-to-github/</url>
    <content><![CDATA[<h3 id="1-生产自己的公钥和私钥"><a href="#1-生产自己的公钥和私钥" class="headerlink" title="1 生产自己的公钥和私钥"></a>1 生产自己的公钥和私钥</h3><p>首先生成一个rsa的私钥和公钥<br>ssh-keygen -t rsa -C “<a href="mailto:15950093214@163.com">15950093214@163.com</a>“  //你的github邮箱帐号，如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190330101656413-693026470.png" alt="gen key">   </p>
<p>执行完该语句之后，会在默认的目录中产生连个文件，我这里的默认目录是（/Users/jums/.ssh），产生的两个文件如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190330101839703-1841460597.png" alt="see what it is"></p>
<p>我们将公钥中的内容提取出来，公钥文件是id_rsa.pub，将公钥放到github网站中:<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190330101954804-1835035642.png" alt="the public key">   </p>
<h3 id="2-配置GitHub"><a href="#2-配置GitHub" class="headerlink" title="2 配置GitHub"></a>2 配置GitHub</h3><p>我们进入到我们的github账号中，进入settings设置中：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190330102235916-125105233.png" alt="settings">   </p>
<p>找到SSH AND GPG KEYS选项:<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190330102303458-1606971343.png" alt="ssh keys">   </p>
<p>进入到该界面选择NEW SSH KEY那个绿色的按钮:<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190330102320633-775203946.png" alt="create ssh keys">   </p>
<p>点击之后，进入到该界面，我们随便去一个名字，我们将刚才的公钥拷贝到下面的key那一栏中，可以不用把最后自己的邮箱帐号拷贝进来：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190330102354411-507958863.png" alt="copy your public key"></p>
<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3 测试"></a>3 测试</h3><p>这些设置完毕之后，我们可以在git bash命令行工具中测试一下，使用ssh -T <a href="mailto:git@github.com">git@github.com</a>命令进行测试:   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190330102704798-1744561875.png" alt="">   </p>
<blockquote>
<p>警告来可以不用看，如果显示成这样，那就算是连接成功了。</p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号">   </p>
]]></content>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用git删除GitHub上的文件或文件夹</title>
    <url>/git-delete-file-s/</url>
    <content><![CDATA[<h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h3><p>当我们需要从github上删除一些我们不需要的文件或者文件夹时，如果通过github来操作的话，将会很麻烦，因为github只允许删除一个仓库，而不允许只删除一个单一的文件或者文件夹，使用git 工具可以快速删除。</p>
<h3 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm --cached filename  //删除文件</span><br><span class="line"></span><br><span class="line">git rm --cached -r dictory //删除目录</span><br></pre></td></tr></table></figure>

<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;注释&quot;</span><br></pre></td></tr></table></figure>

<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin master  </span><br></pre></td></tr></table></figure>


<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>解决：Hi crazyjums! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</title>
    <url>/git-error-1/</url>
    <content><![CDATA[<p><strong>问题：Hi crazyjums! You’ve successfully authenticated, but GitHub does not provide shell access.</strong>   </p>
<p>使用<code>git</code>命令验证是否和<code>GitHub</code>连接成功，出现上述错误：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20191230153509480.png" alt="error"></p>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>这种方式比较简单粗暴，直接将<code>GitHub</code>的<code>ssh key</code>删除掉，然后重新生成一份新的。<br>具体可参考<a href="https://blog.csdn.net/qq_33521184/article/details/89347390">这篇博客</a>。</p>
<p>然后问题解决：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20191230153835772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNTIxMTg0,size_16,color_FFFFFF,t_70" alt="result"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>解决：Connection reset by 192.30.255.112 port 22 fatal: Could not read from remote repository.</title>
    <url>/git-error-2/</url>
    <content><![CDATA[<p><strong>问题：Connection reset by 192.30.255.112 port 22 fatal: Could not read from remote repository.</strong><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20191230154340954.png" alt="error"></p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>先检查能否<code>ping</code>通该地址<code>github.com</code>：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2019123015451024.png" alt="ping 失败"><br>有我的<code>git bash</code>没有支持中文，所以就出现了乱码，我们可以看到这是ping不通的结果，如何解决呢？将该地址加入<code>hosts</code>文件：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20191230154631703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNTIxMTg0,size_16,color_FFFFFF,t_70" alt="地址路径"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20191230154657302.png" alt="修改的内容"><br>然后在<code>ping</code>一次看看，我们就可以看到如下的结果：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20191230154738775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNTIxMTg0,size_16,color_FFFFFF,t_70" alt="成功之后"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>解决error: failed to push some refs to &#39;https://github.com/https://jums.club/images/article//https://jums.club/images/article/.git&#39;</title>
    <url>/git-push-error/</url>
    <content><![CDATA[<h3 id="1-错误"><a href="#1-错误" class="headerlink" title="1 错误"></a>1 错误</h3><p><strong>error: failed to push some refs to ‘<a href="https://github.com/bluepen/python.git&#39;">https://github.com/bluepen/python.git&#39;</a></strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190327215644805-894884421.png" alt="error"></p>
<h3 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h3><p>在遇到错误之后，输入下面的命令，如果看到下面的结果，那再次执行<code>git push origin master</code>命令即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190327215737829-1783813782.png" alt="success">   </p>
<blockquote>
<p><strong>注意：如果出现了上图中最后一行的<code>Applying:https://jums.club/images/article/</code>语句，那表示执行成功，如果还出现了其他的结果，那表示失败了。</strong></p>
</blockquote>
<p>执行成功之后，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190327215822325-1581204905.png" alt="success result"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>如何同时将hexo代码部署到GitHub以及coding上</title>
    <url>/git-to-github-and-coding/</url>
    <content><![CDATA[<h3 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1 安装插件"></a>1 安装插件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2 修改配置文件"></a>2 修改配置文件</h3><p><strong>修改hexo根目录下的<code>_config.yml</code>文件，代码如下：</strong>   </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:crazyjums/crazyjums.github.io.git</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="string">git@git.dev.tencent.com:dtid_f0ed6967903b604b/hexo_blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure>

<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub如何开通多个静态page服务</title>
    <url>/github-how-to-create-two-more-page/</url>
    <content><![CDATA[<h3 id="0-需求"><a href="#0-需求" class="headerlink" title="0 需求"></a>0 需求</h3><p>之前我已经用<code>GitHub Page</code>开通了自己的<a href="https://jums.club">博客</a>服务，但是今天我想再弄一个博客，用于放图片，但是发现GitHub只能申请一个<strong>个人主页</strong>（访问路径：<code>&lt;username&gt;.github.io</code>），如果想要弄两个或两个以上，那就是另外一种page了，GitHub叫项目主页，所以这种项目主页的访问格式是：<code>&lt;username&gt;.github.io/&lt;projectname&gt;</code>，和个人主页的访问路径不一样。想这种项目主页，我们可以创建很多，但是个人主页，只能创建一个，且仓库名也是有限制的。</p>
<h3 id="1-开通"><a href="#1-开通" class="headerlink" title="1 开通"></a>1 开通</h3><p>用GitHub创建一个仓库之后，点击<code>settings</code>进入到设置界面，拉到最下面，有一个GitHub Page服务的设置栏，我们将访问分支（<code>branch</code>）设置成<code>gh-pages</code>，一般项目主页的网页文件，都是放在这个分支里面，而个人主页的网页文件，都是放在<code>master</code>分支里面。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200220203633.png" alt="设置分支"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>git教程</title>
    <url>/git-tutoraials/</url>
    <content><![CDATA[<h2 id="1-基本步骤"><a href="#1-基本步骤" class="headerlink" title="1 基本步骤"></a>1 基本步骤</h2><ul>
<li><p>add files to the remote repository</p>
<blockquote>
<p>4 steps when you <code>git</code> files to the remote repository:</p>
<ol>
<li>git add filename1, filename2, ….  or git add * (add all)</li>
<li>git commit -m “add a hit here”</li>
<li>git remote add origin “repository address”</li>
<li>git push origin branch_name (such as: master)</li>
</ol>
</blockquote>
</li>
</ul>
<h2 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2 常用命令"></a>2 常用命令</h2><ul>
<li><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge &lt;branch name&gt;  <span class="comment"># when you are in a branch, this command means merge &lt;branch name&gt; to this branch </span></span><br><span class="line"></span><br><span class="line">Jums@Computer MINGW64 ~/OneDrive/learngit (master) <span class="comment"># current branch is master, merge &lt;topic&gt; to master</span></span><br><span class="line">$ git merge topic</span><br><span class="line">Auto-merging readme.md</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> readme.md</span><br><span class="line">Auto-merging 2.py</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> 2.py</span><br><span class="line">Removing 1.py</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure>

<p><strong>How to fix merge conflict:</strong></p>
<p>When the merge conflict comes: When two files have two different sets of modifications in the same location, git cannot decide which modification to use and needs to be manually specified.</p>
<p>The codes bewteen <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;HEAD</code> and <code>=======</code> is in the current branch, and the codes bewtten <code>=======</code> and <code>&gt;&gt;&gt;&gt;&gt;&gt;[branch name]</code> is in the [branch name]. You shoud manually merged the codes.</p>
<p>After that, you also should <code>add</code> the files to repository, use the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add [file name]</span><br><span class="line">$ git commit -m <span class="string">&quot;&quot;</span>  <span class="comment"># you can&#x27;t add the [file name] here, or you will get a error</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><blockquote>
<p><a href="https://git-scm.com/docs/git-rebase">git-rebase</a> - Reapply commits on top of another base tip</p>
<p><a href="https://www.bilibili.com/video/BV19B4y1u7vm?from=search&amp;seid=7525997366811669539">https://www.bilibili.com/video/BV19B4y1u7vm?from=search&amp;seid=7525997366811669539</a>    (video tutroials)</p>
</blockquote>
</li>
<li><h3 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h3><blockquote>
<p>对提交的版本进行回退，可以根据<code>git  log</code>命令查看已经提交的版本，然后可以根据指定<code>commit id</code>或者<code>HEAD</code>回退到不同的版本，</p>
<p><code>git log</code>信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 466755c74ed4fd27059f6b0e4f42d0c3dcb8b663 (HEAD -&gt; master, origin/master)</span><br><span class="line">Author: crazyjums &lt;crazyjums@gmail.com&gt;</span><br><span class="line">Date:   Mon Jun 21 14:58:11 2021 +0800</span><br><span class="line"></span><br><span class="line">add a second title</span><br><span class="line"></span><br><span class="line">commit b57119f13a741f116daabfebd27b51a990b7322a</span><br><span class="line">Author: crazyjums &lt;crazyjums@gmail.com&gt;</span><br><span class="line">Date:   Mon Jun 21 14:39:35 2021 +0800</span><br><span class="line"></span><br><span class="line">modified the file, add a new line</span><br><span class="line"></span><br><span class="line">commit 1f7990b84caf752f9e22d1dbcf215d5285066d25</span><br><span class="line">Author: crazyjums &lt;crazyjums@gmail.com&gt;</span><br><span class="line">Date:   Mon Jun 21 14:27:27 2021 +0800</span><br><span class="line"></span><br><span class="line">first time to commit</span><br></pre></td></tr></table></figure>

<p><code>HEAD</code>表示当前的版本号，如果需要回退到上一个版本号，则可以使用<code>HEAD^</code>、上上一个版本号则是<code>HEAD^^</code>、往上倒100个可以在<code>HEAD</code>后面写上100个<code>^</code>符号，当然也可以写成<code>HEAD~100</code>。</p>
<p><code>HEAD</code>在<code>git</code>中其实是一个指针，指向不同的版本号，回退也就是将<code>HEAD</code>指针重新指向了不同的版本信息。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210621152126.png" alt=""></p>
<p>除了使用<code>HEAD</code>之外，还可以使用<code>commit id</code>进行回退，每一次版本提交都有一个宇宙唯一的<code>commit id</code>，指定该<code>commit id</code>的前几位就行，<code>git</code>会自行查找。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD~2</span><br><span class="line">HEAD is now at 1f7990b first time to commit</span><br><span class="line"></span><br><span class="line">$ git reset --hard 466755</span><br><span class="line">HEAD is now at 466755c add a second title</span><br></pre></td></tr></table></figure>

<p>在使用<code>git log</code>命令时，只会显示当前命令窗口的历史提交记录，如果电脑重启之后，在使用<code>git log</code>命令出现的历史记录会是空，但是在<code>git</code>中，就算是重启电脑之后，还是有办法找到每一次的历史提交记录，可以使用命令：<code>git reflog</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">1f7990b (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD~2</span><br><span class="line">466755c (origin/master) HEAD@&#123;1&#125;: reset: moving to 466755</span><br><span class="line">1f7990b (HEAD -&gt; master) HEAD@&#123;2&#125;: reset: moving to HEAD~2</span><br><span class="line">466755c (origin/master) HEAD@&#123;3&#125;: reset: moving to 466755</span><br><span class="line">b57119f HEAD@&#123;4&#125;: reset: moving to HEAD^</span><br><span class="line">466755c (origin/master) HEAD@&#123;5&#125;: commit: add a second title</span><br><span class="line">b57119f HEAD@&#123;6&#125;: commit: modified the file, add a new line</span><br><span class="line">1f7990b (HEAD -&gt; master) HEAD@&#123;7&#125;: commit (initial): first time to commit</span><br></pre></td></tr></table></figure>

<p>在使用<code>reset</code>等命令修改了本地文件之后，也就是当前本地电脑上的文件不是<code>git</code>托管平台的最新版本的时候，需要使用<code>git pull</code>命令将<code>git</code>平台的命令拉过来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull &lt;remote_repository&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull git@github.com:crazyjums/learngit.git master</span><br><span class="line">From github.com:crazyjums/learngit</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Auto-merging readme.md</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> readme.md</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><h3 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h3><blockquote>
<p><a href="https://git-scm.com/docs/git-revert">git-revert</a> - Revert some existing commits</p>
<p>sounds like the <code>git reset</code> command, but this command can remain the trackability information, when you wana go back to the history version in <code>master</code> branch, you should use <code>git revert</code> command instead of <code>git reset</code>.</p>
<p>This command’s usage just like the <code>git reset</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git revert HEAD^  <span class="comment"># go back to last version</span></span><br><span class="line">$ git revert HEAD~[number]  <span class="comment"># go back to previous version</span></span><br><span class="line"><span class="comment"># you can see the trackability information at `git revert`:</span></span><br><span class="line">commit d567e6e3e14165ffa8febd4c62bac2fa413a1509</span><br><span class="line">Author: crazyjums &lt;crazyjums@gmail.com&gt;</span><br><span class="line">Date:   Thu Jun 24 11:33:43 2021 +0800</span><br><span class="line"></span><br><span class="line">Revert <span class="string">&quot;add a txt file by jums&quot;</span></span><br><span class="line"></span><br><span class="line">This reverts commit db298e7bb373711438efdab0e64bbab72b5b5cac.</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><h3 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h3><blockquote>
<p>git-checkout - Switch branches or restore working tree files</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;branch name&gt;  <span class="comment"># swtich to a new branch</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ASUS@ZHG_ASUS MINGW64 ~/OneDrive/learngit (master)</span><br><span class="line">$ git checkout new_branch</span><br><span class="line">Switched to branch <span class="string">&#x27;new_branch&#x27;</span></span><br><span class="line"></span><br><span class="line">ASUS@ZHG_ASUS MINGW64 ~/OneDrive/learngit (new_branch)</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><h3 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h3><blockquote>
<p><a href="https://git-scm.com/docs/git-stash">git-stash</a> - Stash the changes in a dirty working directory away</p>
<p>应用场景：<a href="https://www.cnblogs.com/tocy/p/git-stash-reference.html">https://www.cnblogs.com/tocy/p/git-stash-reference.html</a></p>
<ul>
<li>发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑<code>git stash</code>。</li>
<li>使用git的时候，我们往往使用分支（branch）解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的bug，我们往往会把完成一半的代码<code>commit</code>提交到本地仓库，然后切换分支去修改bug，改好之后再切换回来。这样的话往往log上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急Bug，那么使用<code>git stash</code>就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修Bug，等到修完Bug，提交到服务器上后，再使用<code>git stash apply</code>将以前一半的工作应用回来。</li>
<li>经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是<code>git stash</code>命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash list  <span class="comment"># display all stash version</span></span><br><span class="line">$ git stash pop   <span class="comment"># get the top of the stash stack version</span></span><br><span class="line">$ git stask apply [version number]<span class="comment"># when there is a lot of stash versions, you can use this command to specify the version number</span></span><br><span class="line">$ git stash   <span class="comment"># save current working area to the stash version</span></span><br><span class="line">$ git stash save [a stash name]  <span class="comment"># the same as the &quot;git stash&quot;, but this version will get a nick name you named it.</span></span><br><span class="line">$ git stash drop  <span class="comment"># delete the top of stash stack&#x27;s version</span></span><br><span class="line">$ git stash show [version number]   <span class="comment"># use this command to view specific information of the working area</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><blockquote>
<p><a href="https://git-scm.com/docs/git-cherry-pick">git-cherry-pick</a> - Apply the changes introduced by some existing commits</p>
<p>应用场景：在多分支的分布式开发过程中，在合并代码时分两种情况，一种是将另一个分支中的所有代码都合并带当前分支中来，此时可以使用<code>git merge &lt;branch name&gt;</code>命令实现；还有一种情况是只需要将另一个分支中的部分代码合并到当前分支中来，这个时候就需要使用<code>git cherry-pick &lt;commitHash&gt;</code>命令来实现了，即将另一个分支的部分<code>commit</code>提交到当前的分支中。</p>
<p><a href="https://www.bilibili.com/video/BV1LK411F7mm?from=search&seid=8010070644096016508">Git进阶教程-5-5-如何再次应用已经存在的提交的修改</a>   (videos tutorials)</p>
<p><a href="http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html">git cherry-pick tutorials</a>  (more commands informations here)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># at master branch</span></span><br><span class="line">$ git add 1.txt &amp;&amp; git commit -m <span class="string">&quot;add a txt file&quot;</span></span><br><span class="line">ASUS@ZHG_ASUS MINGW64 ~/OneDrive/learngit (master)</span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit db298e7bb373711438efdab0e64bbab72b5b5cac (HEAD -&gt; master)</span><br><span class="line">Author: crazyjums &lt;crazyjums@gmail.com&gt;</span><br><span class="line">Date:   Thu Jun 24 10:28:47 2021 +0800</span><br><span class="line"></span><br><span class="line">add a txt file</span><br><span class="line">$ git checkout topic</span><br><span class="line">$ git cherry-pick db298e7</span><br><span class="line">ASUS@ZHG_ASUS MINGW64 ~/OneDrive/learngit (topic)</span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit ed9bd8a0e76044141efdf26547092eae24e38400 (HEAD -&gt; topic)</span><br><span class="line">Author: crazyjums &lt;crazyjums@gmail.com&gt;</span><br><span class="line">Date:   Thu Jun 24 10:28:47 2021 +0800</span><br><span class="line"></span><br><span class="line">add a txt file</span><br></pre></td></tr></table></figure>

<p><strong>if use the options [-n], it’s no commits in current branch.</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick [-n]/[--no-commit] [commit-id]</span><br></pre></td></tr></table></figure>

<p><strong>if use the options [-x], you can track the commits</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick -x [commit-id]</span><br><span class="line">ASUS@ZHG_ASUS MINGW64 ~/OneDrive/learngit (topic)</span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 6ba043389d5940b743ab39e37419ebc82685b0af (HEAD -&gt; topic)</span><br><span class="line">Author: crazyjums &lt;crazyjums@gmail.com&gt;</span><br><span class="line">Date:   Thu Jun 24 10:41:48 2021 +0800</span><br><span class="line"></span><br><span class="line">add 2.txt</span><br><span class="line"></span><br><span class="line">(cherry picked from commit 771858e928c708923e843ffe4c29843f2900125a)  <span class="comment"># this line will display the trackability information</span></span><br></pre></td></tr></table></figure>

<p><strong>if use the options [-e] or [–edit], you can edit the file before you commit</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick -e [commit-id] <span class="comment"># now it will jump to editing interface</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><blockquote>
<p>branche是git tree中的分支，其中主分支是master</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch &lt;branch name&gt; <span class="comment"># create a new branch </span></span><br><span class="line">$ git push origin &lt;branch name&gt; <span class="comment"># push the new branch to remote repository</span></span><br><span class="line">$ git branch -d &lt;branch name&gt; <span class="comment"># delete the local branch</span></span><br><span class="line">$ git push origin :&lt;branch name&gt; <span class="comment"># delete the remote repository branch</span></span><br><span class="line">$ git chechout &lt;branch name&gt; <span class="comment"># swtich to &lt;branch name&gt; branch</span></span><br><span class="line">$ git branch -a <span class="comment"># show all branch of your repository</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><h3 id="rm-delete-file-from-remote-repository"><a href="#rm-delete-file-from-remote-repository" class="headerlink" title="rm-delete file from remote repository"></a>rm-delete file from remote repository</h3><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm &lt;file name&gt; or &lt;dic name&gt;</span><br><span class="line">$ git commit -m <span class="string">&quot;&quot;</span></span><br><span class="line">$ git push origin &lt;branch name&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><h3 id="git-log-查询已经commit但没有push的文件"><a href="#git-log-查询已经commit但没有push的文件" class="headerlink" title="git log 查询已经commit但没有push的文件"></a>git log 查询已经commit但没有push的文件</h3><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p><code>git pull</code>与<code>git fetch</code>的区别</p>
<ul>
<li>git fetch –all 拉取远程分支内容到本地的远程分支，但不与本地关联的分支合并</li>
<li>git pull 拉取远程分支内容到本地的远程分支，并与本地关联分支进行自动合并</li>
</ul>
</blockquote>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>github如何上传大于100M的文件</title>
    <url>/github-more-than-100/</url>
    <content><![CDATA[<p>在命令行输入如下命令：    </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config http.postBuffer 524288000</span><br></pre></td></tr></table></figure>

<p>然后执行<code>git config -l</code>查看配置，我们会发现最下面会多出一条记录：   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config -l</span><br><span class="line">core.symlinks=<span class="literal">false</span></span><br><span class="line">core.autocrlf=<span class="literal">true</span></span><br><span class="line">core.fscache=<span class="literal">true</span></span><br><span class="line">color.diff=auto</span><br><span class="line">color.status=auto</span><br><span class="line">color.branch=auto</span><br><span class="line">color.interactive=<span class="literal">true</span></span><br><span class="line">help.format=html</span><br><span class="line">rebase.autosquash=<span class="literal">true</span></span><br><span class="line">http.sslcainfo=G:/software/git/Git/mingw64/ssl/certs/ca-bundle.crt</span><br><span class="line">http.sslbackend=openssl</span><br><span class="line">diff.astextplain.textconv=astextplain</span><br><span class="line">filter.lfs.clean=git-lfs clean -- %f</span><br><span class="line">filter.lfs.smudge=git-lfs smudge -- %f</span><br><span class="line">filter.lfs.process=git-lfs filter-process</span><br><span class="line">filter.lfs.required=<span class="literal">true</span></span><br><span class="line">credential.helper=manager</span><br><span class="line">user.email=xxx</span><br><span class="line">user.name=crazyjums</span><br><span class="line">gui.recentrepo=G:/codeFolder/blog</span><br><span class="line">filter.lfs.clean=git-lfs clean -- %f</span><br><span class="line">filter.lfs.smudge=git-lfs smudge -- %f</span><br><span class="line">filter.lfs.process=git-lfs filter-process</span><br><span class="line">filter.lfs.required=<span class="literal">true</span></span><br><span class="line">core.repositoryformatversion=0</span><br><span class="line">core.filemode=<span class="literal">false</span></span><br><span class="line">core.bare=<span class="literal">false</span></span><br><span class="line">core.logallrefupdates=<span class="literal">true</span></span><br><span class="line">core.symlinks=<span class="literal">false</span></span><br><span class="line">core.ignorecase=<span class="literal">true</span></span><br><span class="line">remote.origin.url=git@github.com:crazyjums/lizhi-resource.git</span><br><span class="line">remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*</span><br><span class="line">http.postbuffer=524288000</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/9ddf90864c89">read more</a></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>如何加速访问GitHub page页面</title>
    <url>/github-page-speed-access/</url>
    <content><![CDATA[<h3 id="1-查询地址"><a href="#1-查询地址" class="headerlink" title="1 查询地址"></a>1 查询地址</h3><p>打开<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a> 查询以下三个链接的的 DNS 地址：</p>
<ul>
<li>github.com</li>
<li>assets-cdn.github.com</li>
<li>github.global.ssl.fastly.net</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234562019.png" alt="example"></p>
<h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2 修改配置文件"></a>2 修改配置文件</h3><p>打开系统 hosts 文件(需管理员权限)。 路径：<code>C:\Windows\System32\drivers\etc</code>,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.30.253.112     github.com</span><br><span class="line">151.101.72.133    assets-cdn.github.com</span><br><span class="line">151.101.193.194    github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>

<h3 id="3-刷新DNS地址"><a href="#3-刷新DNS地址" class="headerlink" title="3 刷新DNS地址"></a>3 刷新DNS地址</h3><p>在命令行输入：<code>ipconfg /flushdns</code></p>
<p>原文出处：<a href="https://bestzuo.cn/posts/497652030.html">https://bestzuo.cn/posts/497652030.html</a></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>分享一个编程学习GitHub项目</title>
    <url>/github-project/</url>
    <content><![CDATA[<h3 id="1-这是个什么东西？"><a href="#1-这是个什么东西？" class="headerlink" title="1 这是个什么东西？"></a>1 这是个什么东西？</h3><p>12月已经过了块三分之一，然后我却一篇博客都还没来得及写，今天算是本月的第一篇博客了。今天分享一个GitHub的学习项目，这是很多人一起组成的一个分享项目，这是其<a href="https://github.com/crazyjums/HelloGitHub">GitHub地址</a>，或者你可可以访问该分享项目的<a href="https://hellogithub.com/">官网</a>，</p>
<h4 id="官网首页如下："><a href="#官网首页如下：" class="headerlink" title="官网首页如下："></a>官网首页如下：</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191208232553.png" alt="官网首页">   </p>
<h4 id="你可以选择哪一期进行阅览"><a href="#你可以选择哪一期进行阅览" class="headerlink" title="你可以选择哪一期进行阅览"></a>你可以选择哪一期进行阅览</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191208232924.png" alt="选择最新一期"></p>
<h4 id="你可以选择不同语言"><a href="#你可以选择不同语言" class="headerlink" title="你可以选择不同语言"></a>你可以选择不同语言</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191208233047.png" alt="编程语言"></p>
<h4 id="或者直接搜索"><a href="#或者直接搜索" class="headerlink" title="或者直接搜索"></a>或者直接搜索</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/sadfsadfasdfsad.PNG" alt="搜索项目"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌的logo的颜色代码</title>
    <url>/google-logo-color-code/</url>
    <content><![CDATA[<h2 id="color-code"><a href="#color-code" class="headerlink" title="color code"></a>color code</h2><table>
<thead>
<tr>
<th align="left"><strong>颜色</strong></th>
<th align="left">[R, G, B]</th>
<th>16进制表示</th>
</tr>
</thead>
<tbody><tr>
<td align="left">蓝色</td>
<td align="left">[66, 153, 244]</td>
<td><strong>#4286F3</strong></td>
</tr>
<tr>
<td align="left">红色</td>
<td align="left">[234, 67, 53]</td>
<td><strong>#EB4537</strong></td>
</tr>
<tr>
<td align="left">黄色</td>
<td align="left">[251, 188, 5]</td>
<td><strong>#FAC230</strong></td>
</tr>
<tr>
<td align="left">绿色</td>
<td align="left">[52, 168, 83]</td>
<td><strong>#55AF7B</strong></td>
</tr>
</tbody></table>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>解决问题</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署出现错误解决方式：Error: Spawn failed</title>
    <url>/hexo-Error-Spawn-failed/</url>
    <content><![CDATA[<h2 id="1-hexo部署过程中可能出现如下错误"><a href="#1-hexo部署过程中可能出现如下错误" class="headerlink" title="1 hexo部署过程中可能出现如下错误"></a>1 hexo部署过程中可能出现如下错误</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/a956551943/a956551943.github.io/&#x27;</span>: Encountered end of file</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (/usr/<span class="built_in">local</span>/src/hexo/hanyubolg/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:376:20)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line">Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure>

<h2 id="2-解决方式1（推荐）"><a href="#2-解决方式1（推荐）" class="headerlink" title="2 解决方式1（推荐）"></a>2 解决方式1（推荐）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##进入站点根目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/hexo/hanyubolg/</span><br><span class="line"></span><br><span class="line"><span class="comment">##删除git提交内容文件夹</span></span><br><span class="line">rm -rf .deploy_git/</span><br><span class="line"></span><br><span class="line"><span class="comment">##执行</span></span><br><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##最后</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h2 id="3-解决方式2"><a href="#3-解决方式2" class="headerlink" title="3 解决方式2"></a>3 解决方式2</h2><p>有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##进入站点根目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/hexo/hanyubolg/</span><br><span class="line"></span><br><span class="line"><span class="comment">##删除git提交内容文件夹</span></span><br><span class="line">vim _config.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">##修改</span></span><br><span class="line">deploy:</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span>: git</span><br><span class="line"></span><br><span class="line">repo: https://github.com/yourname/yourname.github.io.git -&gt; git@github.com:a956551943/weixiaohui.github.io.git</span><br><span class="line"></span><br><span class="line">branch: master</span><br><span class="line"></span><br><span class="line"><span class="comment">##最后</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h2 id="4-解决方式3"><a href="#4-解决方式3" class="headerlink" title="4 解决方式3"></a>4 解决方式3</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##进入站点根目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/hexo/hanyubolg/</span><br><span class="line"></span><br><span class="line"><span class="comment">##进入depoly文件夹</span></span><br><span class="line"><span class="built_in">cd</span> .deploy_git/</span><br><span class="line"></span><br><span class="line"><span class="comment">##强制推送</span></span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.icode9.com/content-4-1065440.html">https://www.icode9.com/content-4-1065440.html</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>关于深度学习中的梯度下降，了解一下</title>
    <url>/gradient-descent/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/c7e642877b0e">一篇让你很容易理解什么是梯度下降的博客</a></p>
<h3 id="0-什么是梯度下降"><a href="#0-什么是梯度下降" class="headerlink" title="0 什么是梯度下降"></a>0 什么是梯度下降</h3><blockquote>
<p>梯度下降法的基本思想可以类比为一个下山的过程。假设这样一个场景：一个人被困在山上，需要从山上下来(i.e. 找到山的最低点，也就是山谷)。但此时山上的浓雾很大，导致可视度很低。因此，下山的路径就无法确定，他必须利用自己周围的信息去找到下山的路径。这个时候，他就可以利用梯度下降算法来帮助自己下山。具体来说就是，以他当前的所处的位置为基准，寻找这个位置最陡峭的地方，然后朝着山的高度下降的地方走，同理，如果我们的目标是上山，也就是爬到山顶，那么此时应该是朝着最陡峭的方向往上走。然后每走一段距离，都反复采用同一个方法，最后就能成功的抵达山谷。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-6ae594f795406b8b.png" alt=""><br>我们同时可以假设这座山最陡峭的地方是无法通过肉眼立马观察出来的，而是需要一个复杂的工具来测量，同时，这个人此时正好拥有测量出最陡峭方向的能力。所以，此人每走一段距离，都需要一段时间来测量所在位置最陡峭的方向，这是比较耗时的。那么为了在太阳下山之前到达山底，就要尽可能的减少测量方向的次数。这是一个两难的选择，如果测量的频繁，可以保证下山的方向是绝对正确的，但又非常耗时，如果测量的过少，又有偏离轨道的风险。所以需要找到一个合适的测量方向的频率，来确保下山的方向不错误，同时又不至于耗时太多！</p>
</blockquote>
<h3 id="1-1-什么是微分"><a href="#1-1-什么是微分" class="headerlink" title="1.1 什么是微分"></a>1.1 什么是<strong>微分</strong></h3><p>微分的两种数学意义：</p>
<ul>
<li>函数图像中，某点的切线的斜率</li>
<li>函数的变化率<br>单变量微分的例子：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-0eb0f1bfd7de705b.png" alt="image"><br>多变量微分的例子：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-4029977524e3b365.png" alt="image"></li>
</ul>
<h3 id="1-2-什么是梯度"><a href="#1-2-什么是梯度" class="headerlink" title="1.2 什么是梯度"></a>1.2 什么是梯度</h3><blockquote>
<p>梯度实际上就是多变量微分的一般化。<br>看下面的例子：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-570afdfc6fabf3b6.png" alt="image"><br>我们可以看到，梯度就是分别对每个变量进行微分，然后用逗号分割开，梯度是用&lt;&gt;包括起来，说明梯度其实一个向量。</p>
</blockquote>
<p>梯度的意义：</p>
<ul>
<li>在单变量的函数中，梯度其实就是函数的微分，代表着函数在某个给定点的切线的斜率</li>
<li>在多变量函数中，梯度是一个向量，向量有方向，梯度的方向就指出了函数在给定点的上升最快的方向</li>
</ul>
<p>这也就说明了为什么我们需要千方百计的求取梯度！我们需要到达山底，就需要在每一步观测到此时最陡峭的地方，梯度就恰巧告诉了我们这个方向。梯度的方向是函数在给定点上升最快的方向，那么梯度的反方向就是函数在给定点下降最快的方向，这正是我们所需要的。所以我们只要沿着梯度的方向一直走，就能走到局部的最低点！</p>
<h3 id="1-3-梯度下降的数学解释"><a href="#1-3-梯度下降的数学解释" class="headerlink" title="1.3 梯度下降的数学解释"></a>1.3 梯度下降的数学解释</h3><blockquote>
<p>上面我们花了大量的篇幅介绍梯度下降算法的基本思想和场景假设，以及梯度的概念和思想。下面我们就开始从数学上解释梯度下降算法的计算过程和思想！<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-f20521a962005299.png" alt="image"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191119145602186.jpg" alt="image"><br>就想下年的的图中的解释那样：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-af8dd9722c762c13.png" alt="image"></p>
</blockquote>
<h3 id="1-4-对于公式中的疑问"><a href="#1-4-对于公式中的疑问" class="headerlink" title="1.4 对于公式中的疑问"></a>1.4 对于公式中的疑问</h3><p><strong>1. α是什么含义？</strong><br>α在梯度下降算法中被称作为学习率或者步长，意味着我们可以通过α来控制每一步走的距离，以保证不要步子跨的太大扯着蛋，哈哈，其实就是不要走太快，错过了最低点。同时也要保证不要走的太慢，导致太阳下山了，还没有走到山下。所以α的选择在梯度下降法中往往是很重要的！α不能太大也不能太小，太小的话，可能导致迟迟走不到最低点，太大的话，会导致错过最低点！<br>如下图所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-ba3da0b06da97ddb.png" alt="image">   </p>
<p><strong>2. 为什么要梯度要乘以一个负号？</strong><br>梯度前加一个负号，就意味着朝着梯度相反的方向前进！我们在前文提到，梯度的方向实际就是函数在此点上升最快的方向！而我们需要朝着下降最快的方向走，自然就是负的梯度的方向，所以此处需要加上负号</p>
<h3 id="1-5-梯度下降算法举例"><a href="#1-5-梯度下降算法举例" class="headerlink" title="1.5 梯度下降算法举例"></a>1.5 梯度下降算法举例</h3><ul>
<li><strong>单变量函数举例</strong><br>首先我们假设有一个单变量的函数，形式如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-abb73822fb6d2a2c.png" alt="image"><br>函数的微分形式如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-66ce0cdcef5e2686.png" alt="image"><br>初始化起点为：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-8ee36cc5ce832b17.png" alt="image"><br>学习率为：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-798b134107b6593d.png" alt="image"><br>梯度的计算公式如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-f20521a962005299.png" alt="image"><br>开始计算梯度下降的迭代过程：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-57538d21dbb34e65.png" alt="image"><br>经过4次运算之后，基本就到达了谷底，也就是收敛了，计算结果如下图所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-57538d21dbb34e65.png" alt="image"></li>
</ul>
<ul>
<li><strong>多变量函数举例</strong><br>下面是目标函数：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-a56cfde25c688859.png" alt="image">   <blockquote>
<p>现在要通过梯度下降法计算这个函数的最小值。我们通过观察就能发现最小值其实就是 (0，0)点。但是接下来，我们会从梯度下降算法开始一步步计算到这个最小值！</p>
</blockquote>
</li>
</ul>
<p>假设初始的起点为：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-8b1b6f1b200fd7b5.png" alt="image"><br>初始学习率为：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-ccc1493848871074.png" alt="image"><br>目标函数的梯度为：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-3d744d9364a4ba40.png" alt="image"><br>进行梯度下降迭代计算：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-b21bf64600c4e32f.png" alt="image"><br>梯度下降计算结果如下图所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1234352-becdcdfdefb4eab7.png" alt="image">   </p>
<blockquote>
<p>上述解释来自下面这篇<a href="https://jums.club/pdf/Gradient_Descent.pdf">PDF</a>，大家可以下载该PDF进行查看，只不过是英文的。</p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>deep learning</tag>
        <tag>basic knowledge</tag>
        <tag>cv</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo编辑器之HexoEditor安装以及闭坑教程</title>
    <url>/hexo-editor/</url>
    <content><![CDATA[<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h3><p>关于<a href="https://hexo.io/"><code>hexo</code></a>+<code>github</code>配置自己的个人自定义博客是一个很好的个人博客解决方案，让<code>hexo</code>跑起来其实很简单，但是后期写博客，就显得有些不是很方便，你得：   </p>
<ul>
<li>打开<code>git bash</code>进入到博客目录</li>
<li>使用<code>hexo new &quot;post_name&quot;</code>命令创建博客文件</li>
<li>使用Markdown编辑器或者记事本写博客</li>
<li>在使用<code>git bash</code>使用<code>hexo clean &amp; hexo g &amp; hexo d</code>部署到GitHub或者coding上</li>
</ul>
<p>这么一看确实很麻烦，而且还有图床也需要自己手动解决，所以这里介绍一个hexo编辑器<a href="https://github.com/zhuzhuyule/HexoEditor">HexoEditor</a>，可以创建博客，然后发布博客，还能编写边渲染，还支持图床备份等，很方便。当然还有其他的解决方案，比如：<a href="https://github.com/jaredly/hexo-admin"><code>hexo-admin</code></a>,<a href="https://github.com/lwz7512/hexo-admin-ehc"><code>hexo-admin-ehc</code></a>,<a href="https://github.com/nihgwu/hexo-hey"><code>hexo-hey</code></a>等</p>
<p>这里是<code>HexoEditor</code>代码的下载安装地址：<a href="https://github.com/zhuzhuyule/HexoEditor">https://github.com/zhuzhuyule/HexoEditor</a>。<br>该编辑器的界面如下，简洁大方：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/main.png" alt="HexoEditor main"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/side-menu.png" alt="HexoEditor side menu">   </p>
<p><strong>安装环境：</strong>   </p>
<ul>
<li>node.js，<a href="https://nodejs.org/en/">install</a></li>
<li>git，<a href="https://git-scm.com/downloads">install</a></li>
</ul>
<h3 id="2-配置环境"><a href="#2-配置环境" class="headerlink" title="2 配置环境"></a>2 配置环境</h3><h4 id="2-1-for-Windows"><a href="#2-1-for-Windows" class="headerlink" title="2.1 for Windows"></a>2.1 for Windows</h4><figure class="highlight plaintext"><figcaption><span>Files/nodejs/npm_global```和```C:/Program Files/nodejs/npm_cache```是node.js的安装目录，如果该目录下没有下面两个文件夹的话，我们需要**手动**创建这两个文件夹，名字**务必**一致。</span></figcaption><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">npm config set prefix &quot;C:/Program Files/nodejs/npm_global&quot;</span><br><span class="line">npm config set cache &quot;C:/Program Files/nodejs/npm_cache&quot; </span><br></pre></td></tr></table></figure>

<h4 id="2-2-for-Linux-or-Mac"><a href="#2-2-for-Linux-or-Mac" class="headerlink" title="2.2 for Linux or Mac"></a>2.2 for Linux or Mac</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;~/nodejs/npm_global&quot;</span><br><span class="line">npm config set cache &quot;~/nodejs/npm_cache&quot; </span><br></pre></td></tr></table></figure>

<h3 id="3-克隆代码及安装"><a href="#3-克隆代码及安装" class="headerlink" title="3 克隆代码及安装"></a>3 克隆代码及安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zhuzhuyule/HexoEditor.git</span><br><span class="line">cd HexoEditor</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<h3 id="4-闭坑"><a href="#4-闭坑" class="headerlink" title="4 闭坑"></a>4 闭坑</h3><p>当我们克隆完代码之后，然后<code>cd</code>到<code>HexoEditor</code>文件夹下，执行<code>npm install/i</code>命令之后，我们会发现一直不成功，如下面所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191125152248.png" alt="error install"><br>试了网上的很多解决方案，但是都没有道出真谛，只是草草回答。本想放弃算了，但是还是不甘心，然后又百度了一下，找到了一个解决方案，参考该<a href="https://blog.csdn.net/sihai12345/article/details/98099639">博客</a>，文件给出了一个回答，关于<code>otarget No matching version found for js-sequence-diagrams@^1000000.0.6.</code>的解决方案，<strong>执行如下命令即可解决</strong>：     </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install js-sequence-diagrams@0.0.1-security</span><br></pre></td></tr></table></figure>

<h3 id="5-建议"><a href="#5-建议" class="headerlink" title="5 建议"></a>5 建议</h3><p>npm的三方库<a href="https://www.npmjs.com/">官网</a>，该网站可以查找任何有关node.js的三方库，如果这里查不到，那就说明没有。<br>官网截图如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191125152829.png" alt="npm 官网"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>为你的hexo个人博客添加本地搜索功能</title>
    <url>/hexo-search-function/</url>
    <content><![CDATA[<h3 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1.下载安装包"></a>1.下载安装包</h3><p>先下载安装下面的安装包，进入到对应的博客目录里面执行下面的语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>

<h3 id="2-配置themes下面的配置文件-config-yml"><a href="#2-配置themes下面的配置文件-config-yml" class="headerlink" title="2.配置themes下面的配置文件_config.yml"></a>2.配置themes下面的配置文件_config.yml</h3><p>将enable选项改为true 很重要，否则不会有效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true # 将false改为true</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: &quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot; # if there are no result</span><br></pre></td></tr></table></figure>

<h3 id="3-重新启动本地服务器"><a href="#3-重新启动本地服务器" class="headerlink" title="3.重新启动本地服务器"></a>3.重新启动本地服务器</h3><blockquote>
<p>hexo clean<br>hexo s -g //相当于 hexo g和hexo s一起执行</p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>local search</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo搭建自己的博客</title>
    <url>/hexo-for-all/</url>
    <content><![CDATA[<h3 id="0-作者肺腑之言"><a href="#0-作者肺腑之言" class="headerlink" title="0 作者肺腑之言"></a>0 作者肺腑之言</h3><p>程序员的强迫症真是可怕，一个<code>hexo</code>博客我硬是折腾了近一个月，但还是没有完全弄好，限于时间问题，只能就到此打住了，因为真的时间有限。这里对于这段时间折腾<code>hexo</code>个人博客的一个总结，包括很多坑吧，因为刚开始弄，有很多的坑都是自己一步一步踩出来的，然后又通过百度去填补，确实很费时间，这里整理一下，希望多个人博客感兴趣的可以少走一点弯路。<strong>让后人少走弯路，我想这就是前人存在的意义吧。</strong>   </p>
<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h3><p>因为<code>hexo</code>是基于node.js编写的一个静态网页生成工具，可以基于<code>GitHub page</code>进行部署，通过互联网访问，类似于B/S结构。但是底层逻辑有些不同。<br>你需要准备的环境：   </p>
<ul>
<li>node.js，<a href="https://nodejs.org/en/">install</a></li>
<li>git，<a href="https://git-scm.com/downloads">install</a></li>
</ul>
<blockquote>
<p>因为安装都很简单，这里就不做赘述了，按照【下一步】方法操作安装完成之后，然后在继续下一步的操作。</p>
</blockquote>
<h3 id="2-开启GitHub-page服务"><a href="#2-开启GitHub-page服务" class="headerlink" title="2 开启GitHub page服务"></a>2 开启GitHub page服务</h3><h4 id="2-1-创建repository"><a href="#2-1-创建repository" class="headerlink" title="2.1 创建repository"></a>2.1 创建repository</h4><p>能完个人博客的人，应该都有一个GitHub账号了，这里就不讲述如何申请GitHub账号，应该很简单，对于大家来讲，如果实在不会的，可以参考这篇<a href="https://blog.csdn.net/xingkaifan/article/details/81105352">博客</a>。我们要做的就是在GitHub创建自己的page，我们新建一个repository，该repository的命名规则如下：</p>
<blockquote>
<p>yourgithubaccount.github.io<br>比如：下面是我的GitHub page的repository名：crazyjums.github.io。   后面的两个是固定的，前面的必须是你的GitHub用户名，如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124133708.png" alt="your github account">   </p>
</blockquote>
<h4 id="2-2-配置GitHub-page"><a href="#2-2-配置GitHub-page" class="headerlink" title="2.2 配置GitHub page"></a>2.2 配置GitHub page</h4><p>创建完成之后，然后进入该repository，点击setting，往下翻，找到page服务，有自己个人域名的可以绑定到自己的个人域名，关于如何申请个人域名，可以参考这篇<a href="https://jums.club/personal-domain-for-github-page">博客</a>，没有个人域名的话，也没关系，我们可以使用类似该域名进行访问：<a href="https://crazyjums.github.io">https://crazyjums.github.io</a>。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124133827.png" alt="into repository"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124133950.png" alt="click setting"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124134108.png" alt="set github page">      </p>
<h4 id="2-3-访问GitHub-page"><a href="#2-3-访问GitHub-page" class="headerlink" title="2.3 访问GitHub page"></a>2.3 访问GitHub page</h4><p>如果配置完成的话，我们可以使用自己的GitHub page地址进行访问，如：<a href="https://crazyjums.github.io">https://crazyjums.github.io</a></p>
<h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3 安装hexo"></a>3 安装hexo</h3><p>在第一步中，我们已经安装好了hexo需要的环境，node.js和git，我们现在开始安装hexo，这里针对Windows用户进行讲解，Windows用户到桌面然后右键用过<code>git bash here</code>进入到git终端界面，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124135009.png" alt="git bash"><br>如果你是Mac或者Linux用户，那么直接在终端进行操作节课，因为这两个系统的终端就可以操作git命令。   </p>
<h4 id="3-1-安装hexo"><a href="#3-1-安装hexo" class="headerlink" title="3.1 安装hexo"></a>3.1 安装hexo</h4><p>使用下面的命令安装hexo客户端，详情可以查看 <a href="https://hexo.io/zh-cn/">hexo</a> 官网。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h4 id="3-2-启动hexo"><a href="#3-2-启动hexo" class="headerlink" title="3.2 启动hexo"></a>3.2 启动hexo</h4><p>安装完之后，我们通过git终端随便进入一个目录，通过cd进入到相应的目录，然后使用<code>hexo i/init your_blog_folder</code>，比如：<code>hexo i my_hexo_blog</code>，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124141310.png" alt="my first hexo"><br>创建完之后，我们使用命令<code>hexo g/generate</code>将Markdown文件生产静态网页，然后在使用<code>hexo s/server/start</code>命令启动服务，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124140031.png" alt="hexo start"><br>启动完之后，我们就可以通过本地链接访问了，链接地址：<a href="http://localhost:4000/">http://localhost:4000/</a>，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124140201.png" alt="hexo first demo"></p>
<h4 id="3-3-部署hexo到GitHub"><a href="#3-3-部署hexo到GitHub" class="headerlink" title="3.3 部署hexo到GitHub"></a>3.3 部署<code>hexo</code>到<code>GitHub</code></h4><p>上面讲完了如何在本地安装使用<code>hexo</code>，但是我们的终极目的就是通过互联网访问自己的个人博客，这里通过<code>GitHub page</code>作为“服务器”来使用，当然你也可以使用腾讯的 <a href="https://dev.tencent.com/user">coding</a> 来作为自己的“服务器”来配置<code>coding page</code>，但是我个人觉得，<code>coding</code>没有<code>GitHub</code>好用，个人觉得，大家可以尝试一下，然后在做选择。但是<code>coding</code>有一个好处，就是coding的服务器在国内，而<code>GitHub</code>的服务器在国外，所以<code>GitHub</code>有时候会卡一下，速度上没有<code>coding</code>快，你们决定吧。</p>
<p>安装<code>git</code>插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>



<p>这里将一下如何将自己的静态<code>page</code>部署到<code>GitHub</code>，当然你可以同时将page同时部署到<code>GitHub</code>和<code>coding</code>上，可以参考这篇 <a href="https://jums.club/git-to-github-and-coding/">博客</a>，这里只讲如何部署到<code>GitHub</code>，我们需要修改<code>hexo</code>根目录下的<code>_config.yml</code>文件，记住，是根目录下的<code>_config.yml</code>文件，不是<code>themes</code>下的<code>_config.yml</code>文件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span> <span class="comment"># 通过git方式提交</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:crazyjums/crazyjums.github.io.git</span>  <span class="comment"># submit to github</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment"># 在GitHubrepository中的分支，一般为master</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置完成之后，我们使用<code>hexo d/deploy</code>命令进行部署，</p>
</blockquote>
<h3 id="4-hexo美化"><a href="#4-hexo美化" class="headerlink" title="4 hexo美化"></a>4 <code>hexo</code>美化</h3><h4 id="4-1-创建其他页面"><a href="#4-1-创建其他页面" class="headerlink" title="4.1 创建其他页面"></a>4.1 创建其他页面</h4><p><code>hexo</code>默认就只有两个两面，一个是home，另一个是<code>archives</code>，如果我们想要创建其他的固定页面的话，我们需要使用命令<code>hexo new page &quot;your page&quot;</code>，记住和<code>hexo new &quot;post page&quot;</code>区分开。</p>
<p><strong>区别：</strong>   </p>
<ul>
<li><code>hexo new page &quot;&quot;</code>用来创建一个页面，他会在hexo的source目录下创建一个index.md，用来生产.html页面，</li>
<li><code>hexo new &quot;your post&quot;</code>用来生产post页面，也就是我们需要发表的博客页，它会在 <code>hexo/source/_post</code>目录下生产一个 <code>your-post.md</code>文件，在 <code>hexo g</code>命令之后，会在 <code>public/</code>目录下生成一个 <code>.md</code>文件，用来放你写的博客。</li>
</ul>
<p><strong>举例：</strong><br>使用<code>hexo new &quot;about&quot;</code>创建自己的简历页面，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124144844.png" alt="hexo new about"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124145021.png" alt="about page">   </p>
<p><strong>配置页面：</strong><br>打开 <code>about</code>文件夹下的 <code>index.md</code>文件，然后在台头上加上如下语句：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124145215.png" alt="type about">   </p>
<p>还要对<code>themes</code>目录下的<code>_config.yml</code>文件进行配置，如下所示：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124152459.png" alt="config menu"></p>
<blockquote>
<p>#表示注释的意思</p>
</blockquote>
<p><strong>推广：</strong><br>我们配置完<code>about</code>页面之后，其他的页面我们可以按照这种方法进行配置。这里不多介绍。</p>
<h4 id="4-2-配置搜索页面"><a href="#4-2-配置搜索页面" class="headerlink" title="4.2 配置搜索页面"></a>4.2 配置搜索页面</h4><p>hexo提供了本地搜索功能，搜索本地的静态网页，首先我们需要安装一个三方包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>然后配置相应的配置文件，如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124150945.png" alt="config local search">   </p>
<p>然后就是<code>hexo clean</code>和<code>hexo g -s</code>，然后就可以看到那个搜索按钮了，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124151126.png" alt="search button"></p>
<h4 id="4-3-配置百度站长"><a href="#4-3-配置百度站长" class="headerlink" title="4.3 配置百度站长"></a>4.3 配置百度站长</h4><h5 id="4-3-1-添加站点"><a href="#4-3-1-添加站点" class="headerlink" title="4.3.1 添加站点"></a>4.3.1 添加站点</h5><p>百度搜索“百度站长”，如下：     <img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124152031.png" alt="百度站长"><br>百度账号登录或者微信登录都可以，下图进入到站点管理界面：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124152217.png" alt="站点管理"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124152418.png" alt="添加站点"></p>
<h5 id="4-3-2-验证站点"><a href="#4-3-2-验证站点" class="headerlink" title="4.3.2 验证站点"></a>4.3.2 验证站点</h5><p>进入到相应的站点进行管理，点击验证，有三种验证方式，这里推荐使用文件下载验证，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/a50f4bfbfbedab645ccff490fe36afc379311e24.png" alt="站点验证"><br>安装步骤验证完之后，接着在来配置站点地图</p>
<h5 id="4-3-3-配置站点地图"><a href="#4-3-3-配置站点地图" class="headerlink" title="4.3.3 配置站点地图"></a>4.3.3 配置站点地图</h5><p><strong>下载三个包：</strong>   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure>

<p><strong>配置：</strong><br>进入到根目录下的<code>_config.yml</code>文件中，进行配置，加入下面的语句： <img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124153208.png" alt="sitemap">    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#----------------------------------------------</span><br><span class="line"># 添加百度网站地图</span><br><span class="line">#----------------------------------------------</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124153313.png" alt="百度推送">    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#----------------------------------------------</span><br><span class="line"># 添加百度推送  让百度可以搜索到</span><br><span class="line">#----------------------------------------------</span><br><span class="line">baidu_url_submit:</span><br><span class="line">  count: 100 # 提交最新的10链接 可以改成其他数字</span><br><span class="line">  host: jums.club # 在百度站长平台中注册的域名</span><br><span class="line">  token: yiOH4yHRf0eeVuko # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span><br><span class="line">  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>配置deploy：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124153349.png" alt="deploy config">   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- type: baidu_url_submitter</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面三个配置都是在根目录下的<code>_config.yml</code>文件中进行配置的。</p>
</blockquote>
<h4 id="4-4-SEO优化"><a href="#4-4-SEO优化" class="headerlink" title="4.4 SEO优化"></a>4.4 SEO优化</h4><blockquote>
<p>最后的网站就是我们只要点三次，就可以到达我们网站的任何网页，这样的话，我们的网站就可以更好的被百度爬虫爬取到，但是<code>hexo</code>的博客目录是<code>year/month/day/blog_name</code>进行排序的，这样严重影响了搜索的效率，下面我们一个插件，直接使用<code>your_domain/blog_name</code>的格式进行排序博客。</p>
</blockquote>
<p><strong>安装：</strong>   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p><strong>配置：</strong><br>同样，也是在根目录下的<code>_config.yml</code>文件中进行配置，如下所示：   <img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124153749.png" alt="config SEO optimal"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abbrlink:</span><br><span class="line">  alg: crc32 # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure>

<h3 id="5-hexo插件"><a href="#5-hexo插件" class="headerlink" title="5 hexo插件"></a>5 hexo插件</h3><h4 id="5-1-安装豆瓣插件"><a href="#5-1-安装豆瓣插件" class="headerlink" title="5.1 安装豆瓣插件"></a>5.1 安装豆瓣插件</h4><p><a href="https://github.com/mythsman/hexo-douban">github地址</a>   </p>
<ul>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-douban --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<p>在主配置文件<code>_config.yml</code>中配置以下参数：（不是主题配置文件）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">mythsman</span>   <span class="comment">#这里填写你的豆瓣账号用户名</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my book title&#x27;</span>   <span class="comment"># 这是页面的标题</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my book quote&#x27;</span>   <span class="comment"># 这是页面中引用的一句话</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my movie title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my movie quote&#x27;</span></span><br><span class="line">  <span class="attr">game:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my game title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my game quote&#x27;</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span>   <span class="comment">#延迟时间</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>user</strong>: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”<a href="https://www.douban.com/people/xxxxxx/&quot;">https://www.douban.com/people/xxxxxx/&quot;</a> ，其中的”xxxxxx”就是你的个人ID了。</li>
<li><strong>builtin</strong>: 是否将生成页面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默认是<code>false</code>,另一可选项为<code>true</code>(1.x.x版本新增配置项)。</li>
<li><strong>title</strong>: 该页面的标题.</li>
<li><strong>quote</strong>: 写在页面开头的一段话,支持<code>html</code>语法.</li>
<li><strong>timeout</strong>: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li>
</ul>
</li>
</ul>
<h4 id="5-2-hexo支持流程图"><a href="#5-2-hexo支持流程图" class="headerlink" title="5.2 hexo支持流程图"></a>5.2 <code>hexo</code>支持流程图</h4><ul>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用说明</p>
<table>
<thead>
<tr>
<th>操作模块</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>start</td>
<td>开始</td>
</tr>
<tr>
<td>end</td>
<td>结束</td>
</tr>
<tr>
<td>opration</td>
<td>普通操作块</td>
</tr>
<tr>
<td>condition</td>
<td>判断块</td>
</tr>
<tr>
<td>subroutine</td>
<td>子任务块</td>
</tr>
<tr>
<td>inputoutput</td>
<td>输入输出块</td>
</tr>
</tbody></table>
</li>
<li><p>流程图案例</p>
<div id="flowchart-0" class="flow-chart"></div>

</li>
</ul>
<h4 id="5-3-hexo支持数学公式"><a href="#5-3-hexo支持数学公式" class="headerlink" title="5.3 hexo支持数学公式"></a>5.3 <code>hexo</code>支持数学公式</h4><ul>
<li><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-math --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<p>在主题的配置文件中，修改一下参数：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MathJax Support</span></span><br><span class="line"><span class="attr">mathjax:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>   <span class="comment"># 将false改成true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>用法</p>
<p><a href="https://jums.club/markdown-grammer/#12-数学公式">数学公式具体用法，参考这里</a></p>
</li>
</ul>
<h4 id="5-4-压缩静态资源"><a href="#5-4-压缩静态资源" class="headerlink" title="5.4 压缩静态资源"></a>5.4 压缩静态资源</h4><h5 id="5-4-1-安装插件："><a href="#5-4-1-安装插件：" class="headerlink" title="5.4.1 安装插件："></a>5.4.1 安装插件：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install gulp,babel-core@6.26.3, gulp-minify-css,gulp-uglify,gulp-htmlmin,gulp-htmlclean,gulp-imagemin，gulp-babel@7.0.1,babel-preset-es2015@6.24.1 --save</span><br><span class="line">## 拆分：</span><br><span class="line">npm install gulp --save</span><br><span class="line">npm install gulp-minify-css --save</span><br><span class="line">npm install gulp-uglify --save</span><br><span class="line">npm install gulp-htmlmin --save</span><br><span class="line">npm install gulp-htmlclean --save</span><br><span class="line">npm install gulp-imagemin --save  # 安装该模块时，需要管理员权限</span><br><span class="line"># 解决【Gulp打包问题】 GulpUglifyError: unable to minify JavaScript</span><br><span class="line"># 解决 gulp-uglify 压缩JavaScript 不兼容 es5 语法的问题</span><br><span class="line">npm install babel-core@6.26.3 --save</span><br><span class="line">npm install gulp-babel@7.0.1 --save</span><br><span class="line">npm install babel-preset-es2015@6.24.1 --save</span><br><span class="line"># gulp-babel 取消严格模式方法(&quot;use strict&quot;)</span><br><span class="line">npm install babel-plugin-transform-remove-strict-mode --save</span><br></pre></td></tr></table></figure>

<h5 id="5-4-2-创建gulpfile-js文件"><a href="#5-4-2-创建gulpfile-js文件" class="headerlink" title="5.4.2 创建gulpfile.js文件"></a>5.4.2 创建<code>gulpfile.js</code>文件</h5><p>在 <code>Hexo</code> 站点下根目录下新建<code>gulpfile.js</code>文件，文件内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css文件</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html文件</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js文件</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-js&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">&#x27;./public/**/*.js&#x27;</span>, <span class="string">&#x27;!./public/**/*.min.js&#x27;</span>])</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            <span class="comment">//将ES6代码转译为可执行的JS代码</span></span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;es2015&#x27;</span>] <span class="comment">// es5检查机制</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/images 目录内图片(Version&lt;3)</span></span><br><span class="line"><span class="comment">// gulp.task(&#x27;minify-images&#x27;, function () &#123;</span></span><br><span class="line"><span class="comment">//     gulp.src(&#x27;./public/images/**/*.*&#x27;)</span></span><br><span class="line"><span class="comment">//         .pipe(imagemin(&#123;</span></span><br><span class="line"><span class="comment">//             optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span></span><br><span class="line"><span class="comment">//             progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line"><span class="comment">//             interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line"><span class="comment">//             multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line"><span class="comment">//         &#125;))</span></span><br><span class="line"><span class="comment">//         .pipe(gulp.dest(&#x27;./public/images&#x27;));</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/images 目录内图片(Version&gt;3)</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-images&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">&#x27;./public/images/**/*.*&#x27;</span>)</span><br><span class="line">        .pipe(imagemin([</span><br><span class="line">            imagemin.gifsicle(&#123;<span class="attr">interlaced</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">            imagemin.jpegtran(&#123;<span class="attr">progressive</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">            imagemin.optipng(&#123;<span class="attr">optimizationLevel</span>: <span class="number">5</span>&#125;),</span><br><span class="line">            imagemin.svgo(&#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                    &#123;<span class="attr">removeViewBox</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">cleanupIDs</span>: <span class="literal">false</span>&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&#x27;./public/images&#x27;</span>));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.0以前的写法 </span></span><br><span class="line"><span class="comment">//gulp.task(&#x27;default&#x27;, [</span></span><br><span class="line"><span class="comment">//  &#x27;minify-html&#x27;, &#x27;minify-css&#x27;, &#x27;minify-js&#x27;, &#x27;minify-images&#x27;</span></span><br><span class="line"><span class="comment">//]);</span></span><br><span class="line"><span class="comment">//4.0以后的写法</span></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, gulp.series(gulp.parallel(<span class="string">&#x27;minify-html&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-js&#x27;</span>, <span class="string">&#x27;minify-images&#x27;</span>)), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;----------gulp Finished----------&quot;</span>);</span><br><span class="line">    <span class="comment">// Do something after a, b, and c are finished.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="5-4-3-修改主配置文件"><a href="#5-4-3-修改主配置文件" class="headerlink" title="5.4.3 修改主配置文件"></a>5.4.3 修改主配置文件</h5><p>将根目录下的配置文件<code>_config.yaml</code>做如下修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://jums.club</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/media/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure>

<p>修改：</p>
<p>将上述配置中的第5行进行修改，将改成这样：<code>:title/</code>，注意<code>:</code>和<code>/</code>，将前面的年月日删除。</p>
<h5 id="5-4-4-静态资源压缩"><a href="#5-4-4-静态资源压缩" class="headerlink" title="5.4.4 静态资源压缩"></a>5.4.4 静态资源压缩</h5><p>只需要每次在执行 <code>generate</code> 命令后执行 <code>gulp</code> 就可以实现对静态资源的压缩</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo gulp</span><br></pre></td></tr></table></figure>



<h4 id="5-5-配置gitalk评论"><a href="#5-5-配置gitalk评论" class="headerlink" title="5.5 配置gitalk评论"></a>5.5 配置<code>gitalk</code>评论</h4><h5 id="5-5-1-注册OAuth-Apps"><a href="#5-5-1-注册OAuth-Apps" class="headerlink" title="5.5.1 注册OAuth Apps"></a>5.5.1 注册<code>OAuth Apps</code></h5><p><a href="https://github.com/settings/applications/new">OAuth Apps注册地址</a>   </p>
<p><img src= "/img/loading.gif" data-src="G:%5CcodeFolder%5Chexo-blog%5Cmeida-blog%5Csource%5Cimages%5C360%E6%88%AA%E5%9B%BE20200419200404360.jpg" alt="注册"></p>
<p>注册完之后，可以查看对应的<code>client ID</code>和<code>client Sercet</code>：</p>
<p><img src= "/img/loading.gif" data-src="G:%5CcodeFolder%5Chexo-blog%5Cmeida-blog%5Csource%5Cimages%5C360%E6%88%AA%E5%9B%BE20200419165709363.jpg" alt=""></p>
<h5 id="5-5-2-在hexo中配置"><a href="#5-5-2-在hexo中配置" class="headerlink" title="5.5.2 在hexo中配置"></a>5.5.2 <a name="jump1">在<code>hexo</code>中配置</a></h5><p>打开<strong>主题</strong>的配置文件：<code>_config.yaml</code>，配置一下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comment:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">gitalk</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">crazyjums</span>         <span class="comment"># 你的github用户名</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">media</span>          <span class="comment"># 你的位置对应的github仓库</span></span><br><span class="line">    <span class="attr">client_id:</span>      <span class="comment"># (required) OAuth application client id</span></span><br><span class="line">    <span class="attr">client_secret:</span>  <span class="comment"># (required) OAuth application client secret</span></span><br><span class="line">    <span class="attr">admin:</span> <span class="string">crazyjums</span>  <span class="comment">## 你的github用户名</span></span><br><span class="line">    <span class="attr">create_issue_manually:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">distraction_free_mode:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">has_hot_recommend:</span> <span class="literal">true</span> <span class="comment"># 是否有热门推荐</span></span><br><span class="line">    <span class="attr">has_latest_comment:</span> <span class="literal">true</span> <span class="comment">#是否有最新评论</span></span><br></pre></td></tr></table></figure>

<h5 id="5-5-3-配置github-page"><a href="#5-5-3-配置github-page" class="headerlink" title="5.5.3 配置github page"></a>5.5.3 配置<code>github page</code></h5><p>如果前面的<code>OAuth Apps</code>注册的是<code>https</code>的，那么在<code>github page</code>也需要设置<code>https</code>：</p>
<p><img src= "/img/loading.gif" data-src="G:%5CcodeFolder%5Chexo-blog%5Cmeida-blog%5Csource%5Cimages%5C360%E6%88%AA%E5%9B%BE20200419200704372.jpg" alt="https"></p>
<h5 id="5-5-4-开始使用"><a href="#5-5-4-开始使用" class="headerlink" title="5.5.4 开始使用"></a>5.5.4 开始使用</h5><p>当第一次使用时，可能会遇到如下的问题：</p>
<ol>
<li><a href="https://github.com/Molunerfinn/hexo-theme-melody/issues/130">gitalk提示Error Not Found</a></li>
<li><a href="https://github.com/mzlogin/mzlogin.github.io/issues/63">未找到相关的 Issues 进行评论，请联系xxx初始化创建</a></li>
</ol>
<p>如果遇到这两个问题，可以做如下检查：</p>
<ol>
<li>看看是否在<code>github page</code>中设置了<code>https</code></li>
<li>看看<code>OAuth Apps</code>中的你的网站链接的末尾是否添加了一个<code>/</code>符号</li>
<li>你的配置文件中的信息是否填写正确，参见<a href="#jump1">修改配置文件</a></li>
</ol>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">  st=>start: 开始
  op=>operation: My Operation
  cond=>condition: Yes or No?
  e=>end
  st->op->cond
  cond(yes)->e
  cond(no)->op
  &</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>summary</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo主题添加热度显示</title>
    <url>/hexo-hot/</url>
    <content><![CDATA[<h3 id="1-注册leanCloud会员"><a href="#1-注册leanCloud会员" class="headerlink" title="1 注册leanCloud会员"></a>1 注册leanCloud会员</h3><p>点击官网：<a href="https://leancloud.cn/">https://leancloud.cn/</a>注册会员，注册成功之后，按下面的提示点击：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200101213442.png" alt="注册成功之后"><br>然后创建一个class，命名为：<code>Counter</code>，<strong>必须是这个名字</strong>。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200101213643.png" alt="创建class"></p>
<p>然后找到你自己的<code>APP-ID</code>和<code>APP-KEY</code>:<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200101213950.png" alt="app-id and app-key"></p>
<h3 id="2-配置主题配置文件"><a href="#2-配置主题配置文件" class="headerlink" title="2 配置主题配置文件"></a>2 配置主题配置文件</h3><p>在主题配置文件中，加入下面的代码：   </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="comment"># your app-id </span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="comment"># your app-key</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">  <span class="comment"># # If you don&#x27;t care about security in lc counter and just want to use it directly</span></span><br><span class="line">  <span class="comment"># # (without hexo-leancloud-counter-security plugin), set the `security` to `false`.</span></span><br><span class="line">  <span class="comment"># security: true</span></span><br><span class="line">  <span class="comment"># betterPerformance: true</span></span><br></pre></td></tr></table></figure>

<h3 id="3-配置全局配置文件"><a href="#3-配置全局配置文件" class="headerlink" title="3 配置全局配置文件"></a>3 配置全局配置文件</h3><p>打开全局配置文件，路径如下：<code>your_blog/_config.yml</code>，添加下面的代码：   </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_counter_security:</span></span><br><span class="line">  <span class="attr">enable_sync:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="comment"># your app-id</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="comment"># your app-key</span></span><br><span class="line">  <span class="attr">username:</span> <span class="comment"># your username</span></span><br><span class="line">  <span class="attr">password:</span> <span class="comment"># your password</span></span><br></pre></td></tr></table></figure>
<h4 id="3-1-配置用户名和密码"><a href="#3-1-配置用户名和密码" class="headerlink" title="3.1 配置用户名和密码"></a>3.1 配置用户名和密码</h4><p>首先安全插件：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-leancloud-counter-security --save</span><br></pre></td></tr></table></figure>
<p>安装成功之后，注册用户名：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo lc-counter r &quot;your username&quot; &quot;your password&quot;</span><br></pre></td></tr></table></figure>
<p>如果出现下面的错误：<br><code>Error: Cannot find module &#39;babel-runtime/regenerator&#39;</code>   </p>
<p>可以试试下面的解决方案：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i babel-runtime --save</span><br></pre></td></tr></table></figure>

<h3 id="4-leanCloud部署"><a href="#4-leanCloud部署" class="headerlink" title="4 leanCloud部署"></a>4 leanCloud部署</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2019-08-05-1.54.13.png" alt="部署"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2019-08-05-2.05.59.png" alt="创建函数"><br>部署完之后，将下面的代码复制进去。   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var AV = require(&#x27;leanengine&#x27;);</span><br><span class="line"></span><br><span class="line">AV.Cloud.beforeUpdate(&#x27;Counter&#x27;, async function(request) &#123;</span><br><span class="line">  var query = new AV.Query(&quot;Counter&quot;);</span><br><span class="line">if (request.object.updatedKeys.indexOf(&#x27;time&#x27;) !== -1) &#123;</span><br><span class="line">    return query.get(request.object.id).then(function (obj) &#123;</span><br><span class="line">        if (obj.get(&quot;time&quot;) + 1 !== request.object.get(&quot;time&quot;)) &#123;</span><br><span class="line">            throw new AV.Cloud.Error(&#x27;Invalid update!&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="5-创建hot-page"><a href="#5-创建hot-page" class="headerlink" title="5 创建hot page"></a>5 创建hot page</h3><p>进入到你的<code>hexo</code>博客目录，使用<code>hexo new page hot</code>创建一个<code>hot</code>主页，打开<code>hot/index.md</code>文件，将下面的代码复制进去：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;hot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;AV.initialize(&quot;2lPeEraOnOk7GF6ou1WWs6BP-gzGzoHsz&quot;, &quot;nXeW1bmcRE4TDrorjmdqj0ML&quot;);&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  var time=0</span><br><span class="line">  var title=&quot;&quot;</span><br><span class="line">  var url=&quot;&quot;</span><br><span class="line">  var query = new AV.Query(&#x27;Counter&#x27;);</span><br><span class="line">  query.notEqualTo(&#x27;id&#x27;,0);</span><br><span class="line">  query.descending(&#x27;time&#x27;);</span><br><span class="line">  query.limit(1000);</span><br><span class="line">  query.find().then(function (todo) &#123;</span><br><span class="line">    for (var i=0;i&lt;1000;i++)&#123;</span><br><span class="line">      var result=todo[i].attributes;</span><br><span class="line">      time=result.time;</span><br><span class="line">      title=result.title;</span><br><span class="line">      url=result.url;</span><br><span class="line">      var content=&quot;&lt;p&gt;&quot;+&quot;&lt;font color=&#x27;#1C1C1C&#x27;&gt;&quot;+&quot;【文章热度:&quot;+time+&quot;℃】&quot;+&quot;&lt;/font&gt;&quot;+&quot;&lt;a href=&#x27;&quot;+&quot;https://jums.club&quot; + url + &quot;&#x27;&gt;&quot;+title+&quot;&lt;/a&gt;&quot;+&quot;&lt;/p&gt;&quot;;</span><br><span class="line">      document.getElementById(&quot;hot&quot;).innerHTML+=content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    console.log(&quot;error&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-添加菜单"><a href="#5-添加菜单" class="headerlink" title="5 添加菜单"></a>5 添加菜单</h3><p>打开主题的配置文件：找到<code>menu</code>，添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  hot /hot </span><br></pre></td></tr></table></figure>


<p>原文：<a href="https://blog.qust.cc/archives/48665.html">https://blog.qust.cc/archives/48665.html</a></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何免费访问Google</title>
    <url>/how-to-access-google/</url>
    <content><![CDATA[<h1 id="一-谷歌访问助手（破解版）"><a href="#一-谷歌访问助手（破解版）" class="headerlink" title="一 谷歌访问助手（破解版）"></a>一 谷歌访问助手（破解版）</h1><blockquote>
<p>此方法不需要注册登录，就可以使用，但是只能访问谷歌，其他的国外网站不能访问</p>
</blockquote>
<h3 id="1-下载插件"><a href="#1-下载插件" class="headerlink" title="1 下载插件"></a>1 下载插件</h3><p>在百度中搜索<code>github 谷歌访问助手</code>，点击如下所示，第一条，然后会跳转到GitHub页面，我们下载<code>clone</code>即可。或者点击<a href="https://github.com/haotian-wang/google-access-helper.git">直接下载</a><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191129102455.png" alt="github 谷歌访问助手">   </p>
<h3 id="2-解压安装"><a href="#2-解压安装" class="headerlink" title="2 解压安装"></a>2 解压安装</h3><p>下载完成之后，我们解压压缩包，然后点击Google浏览器的<code>更多工具</code>-&gt;<code>扩展程序</code>。进入如下界面：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191207230134.png" alt="解压目录"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191129102834.png" alt="Google插件">   </p>
<h3 id="3-进行访问"><a href="#3-进行访问" class="headerlink" title="3 进行访问"></a>3 进行访问</h3><p>访问界面如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191129103026.png" alt="Google搜索案例"></p>
<h3 id="4-快捷访问"><a href="#4-快捷访问" class="headerlink" title="4 快捷访问"></a>4 快捷访问</h3><p>你也可以直接访问这个地址<a href="https://so.bban.fun/">https://so.bban.fun/</a>直接进行访问，但是改地址不能访问<code>Google mail</code>和<code>google shop</code>等应用</p>
<h1 id="二-Google-Helper（正式版）"><a href="#二-Google-Helper（正式版）" class="headerlink" title="二 Google Helper（正式版）"></a>二 Google Helper（正式版）</h1><blockquote>
<p>此方法需要注册登录，会有3天VIP，这3天，你可以访问任何国外网站，就想VPN一样，但是3天VIP过期之后，你就只能使用基本功能了，一样可以访问谷歌，但是VPN的服务就暂停了。</p>
</blockquote>
<h3 id="1-下载Google-Helper"><a href="#1-下载Google-Helper" class="headerlink" title="1 下载Google Helper"></a>1 下载Google Helper</h3><p>点击官网<a href="https://googlehelper.net/">下载</a>，截图如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191219222640.png" alt="Google Helper官网">   </p>
<h3 id="2-解压安装-1"><a href="#2-解压安装-1" class="headerlink" title="2 解压安装"></a>2 解压安装</h3><p>按照方法一中介绍的那样解压安装，这里不过多介绍</p>
<h3 id="3-注册和认证"><a href="#3-注册和认证" class="headerlink" title="3 注册和认证"></a>3 注册和认证</h3><p>我们需要注册一下<code>Google Helper</code>才能使用，注册完之后还需要邮箱认证。这里附上认证截图，点击我涂黑的部分即可<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191219222640.jpg" alt="邮箱认证"><br>认证完之后，等一会儿，我们就可以看到谷歌浏览右上角的一个图标，显示如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191219221854.png" alt="认证完毕"><br><code>Google Helper</code>界面：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191219221924.png" alt="Google Helper界面">   </p>
<h3 id="4-上网"><a href="#4-上网" class="headerlink" title="4 上网"></a>4 上网</h3><p>可以上<a href="https://www.youtube.com/">youtube</a>等网站，相当强大。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191219221840.png" alt="youtube">   </p>
<h1 id="三-其他的FQ方式"><a href="#三-其他的FQ方式" class="headerlink" title="三 其他的FQ方式"></a>三 其他的FQ方式</h1><h3 id="3-1-付费VPN"><a href="#3-1-付费VPN" class="headerlink" title="3.1 付费VPN"></a>3.1 付费VPN</h3><ul>
<li><p><a href="https://www.vyprvpn.com/zh/refer/?offer_id=223&aff_id=2231">VyprVPN</a>   </p>
</li>
<li><p><a href="https://www.avast.com/zh-cn/index">avast</a>   </p>
</li>
<li><p><a href="https://surfshark.com/zh/deals?coupon=sharkspecial&gclid=CjwKCAjwwYP2BRBGEiwAkoBpAtwz_o74eLACj8tJwuIh17iQaEmtXvhjk3F7VwSjkij0SRUVDyYnrhoCGpkQAvD_BwE">surfShark官网</a></p>
<p>可以使用支付宝支付，相对来讲比较友好。但是如果想要安全的，还是使用<code>visa</code>等双币信用卡进行支付，更加安全。</p>
<p><img src= "/img/loading.gif" data-src="G:%5C%E7%94%B5%E5%AD%90%E4%B9%A6%5Cpic%5C360%E6%88%AA%E5%9B%BE20200517170413775.jpg" alt=""></p>
</li>
<li><p>NordVPN</p>
<p><a href="https://nordvpn.com/zh/special/?utm_medium=affiliate&utm_term&utm_content=greatvpn_ggEAIaIQobChMItpGG6siX6AIVT9GWCh211wccEAEYASAAEgI2TfD_BwE&utm_campaign=off51&utm_source=aff826">NordVPN官网</a></p>
<p><img src= "/img/loading.gif" data-src="G:%5C%E7%94%B5%E5%AD%90%E4%B9%A6%5Cpic%5C360%E6%88%AA%E5%9B%BE20200517170716684.jpg" alt=""></p>
</li>
<li><p>cyberGhostVpn</p>
<p><a href="https://www.cyberghostvpn.com/en_US/offer/stay-at-home?aff_id=1004&brand=vpnMentor&coupon=2Y2M&aff_sub4=2Y2M&aff_sub=greatvpn_ggEAIaIQobChMItpGG6siX6AIVT9GWCh211wccEAEYASAAEgI2TfD_BwE&aff_sub2=D202005170405_o&affiliate_google_clientid=285281239.1589706183&utm_medium=affiliate&utm_source=1004">cyberGhostVpn官网</a></p>
<p><img src= "/img/loading.gif" data-src="G:%5C%E7%94%B5%E5%AD%90%E4%B9%A6%5Cpic%5C360%E6%88%AA%E5%9B%BE20200517170659261.jpg" alt=""></p>
</li>
<li><p>ExpressVPN（不推荐）</p>
<p>虽然这是一个全球挺大的vpn服务提供商，但是好像有红色背景，大家自行考量。既然不推荐，那就不放官网了，以免误导大家。</p>
</li>
</ul>
<h3 id="3-2-免费"><a href="#3-2-免费" class="headerlink" title="3.2 免费"></a>3.2 免费</h3><ul>
<li><a href="https://windscribe.com/">windscribe</a></li>
<li><a href="https://www.tunnelbear.com/b/vpn?aff_id=3188&offer_id=2&trans_id=102fb5a1a935d416ed9b3cf214069e&utm_source=Affiliate&ref_id=mkt_aff-free">tunnelbear</a></li>
<li><a href="https://hide.me/en/?friend=ntvpn">hide.me</a></li>
<li><a href="https://www.vpngate.net/cn/">vpngate</a>  (是一个vpn列表，可参考)</li>
</ul>
<blockquote>
<p>自己斟酌，付费的有保障，但是有点贵。免费的不花钱，但是没有那么安全，我们国家现在禁止用vpn了，剩下的，就你们自己考虑了。</p>
</blockquote>
<h2 id="0-1-什么是机场？"><a href="#0-1-什么是机场？" class="headerlink" title="0.1 什么是机场？"></a>0.1 什么是机场？</h2><blockquote>
<p>所谓“机场”，其实是一种形象化的说法，因为SS/SSR的LOGO就是纸飞机的图案。实质上是指提供翻墙服务的场所，【SS/SSR服务提供商】。广告推广方式往往多种多样：有网站注册、论坛注册、博客自推、telegram、GOOGLE+、twitter，facebook等等各类社交形式推广，甚至是任何网站的留言板推广。</p>
</blockquote>
<h2 id="0-2-什么是VPS？"><a href="#0-2-什么是VPS？" class="headerlink" title="0.2 什么是VPS？"></a>0.2 什么是VPS？</h2><blockquote>
<p><strong>虚拟专用服务器</strong>（英语：Virtual private server，缩写为VPS），是将一台服务器分割成多个虚拟专用服务器的服务。实现VPS的技术分为容器技术和虚拟机技术。在容器或虚拟机中，每个VPS都可分配独立公网IP地址、独立操作系统、实现不同VPS间磁盘空间、内存、CPU资源、进程和系统配置的隔离，为用户和应用程序模拟出“独占”使用计算资源的体验。VPS可以像独立服务器一样，重装操作系统，安装程序，单独重启服务器。VPS为用户提供了管理配置的自由，可用于企业虚拟化，也可以用于IDC资源租用。</p>
<p>IDC资源租用由VPS提供商提供。不同VPS提供商所使用的硬件、软件的差异，及销售策略的不同，VPS的使用体验也有较大差异。尤其是VPS提供商超卖，导致实体服务器超负荷时，VPS性能将受到极大影响。相对来说，容器技术比虚拟机技术效率更高，成本更低，但功能更少，更易超卖，一般来说容器VPS的价格都低于虚拟机VPS的价格。</p>
<p>这些VPS主机以最大化的效率共享硬件、软件许可证以及管理资源。每个VPS主机都可分配独立公网IP地址、独立操作系统、独立存储空间、独立内存、独立CPU资源、独立执行程序和独立系统配置等。VPS主机用户可在服务器上自行安装程序，单独重启主机。</p>
</blockquote>
<h2 id="0-3-VPS介绍"><a href="#0-3-VPS介绍" class="headerlink" title="0.3 VPS介绍"></a>0.3 VPS介绍</h2><p>下面介绍一些常用的且<strong>安全（没有中方背景）</strong>的<code>vps</code>服务提供商，可以供大家选择，当然你要是嫌麻烦的话，也可以直接购买机场订阅，或者购买<code>VPN</code>。</p>
<p>且<code>Google</code>、<code>Micrsoft</code>、<code>Amzon</code>这三大云计算服务商都会提供一年的年费试用，大家可以先试用这几个大的云计算商的服务试试看，然后再决定是否购买付费的<code>VPS</code>。</p>
<h3 id="（1）VULTR"><a href="#（1）VULTR" class="headerlink" title="（1）VULTR"></a>（1）VULTR</h3><p><a href="https://www.vultr.com/">VULTR官网</a></p>
<p><strong>vultr的套餐：</strong></p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/%E6%8D%95%E8%8E%B7.PNG" alt=""></p>
<p>如果只是用于搭建一个科学上网的梯子的话，那么选一个初级的套餐完全够用，一个月2.5美金，折合人民币的话大概20元左右。</p>
<h3 id="（2）Google-Cloud"><a href="#（2）Google-Cloud" class="headerlink" title="（2）Google Cloud"></a>（2）Google Cloud</h3><p><a href="https://cloud.google.com/">Google Cloud官网</a></p>
<p><strong>谷歌云福利：</strong>从注册谷歌云那天开始计算，有<strong>300美金</strong>的使用金额，使用年限是一年，如果仅仅是用于科学上网的话，这300美金足够自己用。如果不想花钱，可以重新申请一个谷歌账号，理论上可以无限用，知道谷歌取消这个福利为止。</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/360%E6%88%AA%E5%9B%BE20200516203059339.jpg" alt=""></p>
<h3 id="（3）Amzon-Cloud"><a href="#（3）Amzon-Cloud" class="headerlink" title="（3）Amzon Cloud"></a>（3）Amzon Cloud</h3><p><a href="https://aws.amazon.com/cn/?nc2=h_lg">AWS官网</a></p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/360%E6%88%AA%E5%9B%BE20200516203251983.jpg" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/360%E6%88%AA%E5%9B%BE20200516204413649.jpg" alt=""></p>
<h3 id="（4）Micrsoft-Cloud"><a href="#（4）Micrsoft-Cloud" class="headerlink" title="（4）Micrsoft Cloud"></a>（4）Micrsoft Cloud</h3><p><a href="https://azure.microsoft.com/zh-cn/">Micrsoft Cloud官网</a></p>
<p>免费试用权限界面：<a href="https://azure.microsoft.com/zh-cn/free/">free to use</a></p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/360%E6%88%AA%E5%9B%BE20200516203416625.jpg" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/360%E6%88%AA%E5%9B%BE20200516203535197.jpg" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/360%E6%88%AA%E5%9B%BE20200516203650802.jpg" alt=""></p>
<h3 id="（5）搬瓦工"><a href="#（5）搬瓦工" class="headerlink" title="（5）搬瓦工"></a>（5）搬瓦工</h3><p><a href="https://bandwagonhost.com/">搬瓦工官网</a></p>
<p>这个可能比VULTR稍微贵一些，这个选择就看个人了。</p>
<p><strong>搬瓦工套餐介绍：</strong></p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/360%E6%88%AA%E5%9B%BE20200516202924065.jpg" alt=""></p>
<h3 id="（6）谷歌、亚马逊、微软比较"><a href="#（6）谷歌、亚马逊、微软比较" class="headerlink" title="（6）谷歌、亚马逊、微软比较"></a>（6）谷歌、亚马逊、微软比较</h3><table>
<thead>
<tr>
<th>对比项</th>
<th>谷歌</th>
<th>亚马逊</th>
<th>微软</th>
</tr>
</thead>
<tbody><tr>
<td>免费资金</td>
<td>300美金+12个月</td>
<td>12个月</td>
<td>12个月+1个月200美金</td>
</tr>
<tr>
<td>试用介绍</td>
<td></td>
<td><a href="https://aws.amazon.com/cn/?nc2=h_lg">free to AWS</a></td>
<td><a href="https://azure.microsoft.com/zh-cn/free/">free to Azure</a></td>
</tr>
<tr>
<td>虚拟服务器</td>
<td>无限时间</td>
<td>750h/m</td>
<td>750h/m</td>
</tr>
<tr>
<td><strong>需要visa等外币信用卡</strong></td>
<td>是</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="四-科学上网协议"><a href="#四-科学上网协议" class="headerlink" title="四 科学上网协议"></a>四 科学上网协议</h1><h2 id="0-配置VPS"><a href="#0-配置VPS" class="headerlink" title="0 配置VPS"></a>0 配置VPS</h2><p>这里以<code>Google Cloud</code>为例，因为我就是用的这个，其他的方法类似，就是付费和管理界面有些不一样，但是配置的方法都是一样的。先创建一个虚拟机实例，然后打开虚拟机，再然后就是按照下面的配置方法进行配置了。</p>
<h5 id="2-2-2-1-开放防火墙"><a href="#2-2-2-1-开放防火墙" class="headerlink" title="2.2.2.1 开放防火墙"></a>2.2.2.1 开放防火墙</h5><p>由于谷歌云是国际大厂，跟常见的一些 VPS 商家有少许不同，所以需要开放外部防火墙。</p>
<p>打开 GCP 控制台，点开左边菜单<br>VPC 网络 》防火墙规则 》创建防火墙规则 (<a href="https://console.cloud.google.com/networking/firewalls/list"> 直达链接点我</a> )<br>(备注：如果你还没有项目，会提示你需要创建项目，自行创建即可)</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/axfs1-cno87.jpg" alt=""></p>
<p>点击》创建防火墙规则</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/aqnz7-mw53n.jpg" alt=""></p>
<h5 id="2-2-2-2-创建防火墙规则"><a href="#2-2-2-2-创建防火墙规则" class="headerlink" title="2.2.2.2 创建防火墙规则"></a>2.2.2.2 创建防火墙规则</h5><p>防火墙规则配置内容如下图</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/al9lc-29z2m.jpg" alt=""></p>
<h5 id="2-2-2-3-创建-VM-实例"><a href="#2-2-2-3-创建-VM-实例" class="headerlink" title="2.2.2.3 创建 VM 实例"></a>2.2.2.3 创建 VM 实例</h5><p>选择左侧菜单》Compute Engine 》VM 实例，再点击 <code>创建实例</code>，或者：(<a href="https://console.cloud.google.com/compute/instancesAdd"> 直达链接点我</a> )<br>VM 实例的区域建议香港，台湾，或者新加坡也行<br><strong>备注一下，由于 GCP 新开了香港区域，推荐使用。忽略下面的截图上推荐选择台湾区域的提示。</strong><br>机器类型，建议微型，用来搭建 V2Ray 翻墙的话，0.6G 内存的足以，已经完全够用了。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/ayh9a-lbjtz.jpg" alt=""></p>
<p>配置一下防火墙，然后创建实例</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/ad32w-4sedg.jpg" alt=""></p>
<h5 id="2-2-2-4-登录-VM-实例"><a href="#2-2-2-4-登录-VM-实例" class="headerlink" title="2.2.2.4 登录 VM 实例"></a>2.2.2.4 登录 VM 实例</h5><p>等待 VM 实例创建完成，然后点击 <code>ssh</code> 即可。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/atce7-7jhcq.jpg" alt=""></p>
<p>这是登录后的界面</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/akdxq-9lhhg.jpg" alt=""></p>
<h2 id="1-SSR"><a href="#1-SSR" class="headerlink" title="1 SSR"></a>1 SSR</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><blockquote>
<p>SSR只是众多翻墙工具的一种，前身是SS，全称是shadowsocks，为描述简便，取其简称为SS。为了能成功翻墙，必须要获取到免费或付费的节点服务器参数（也就是”机场“或SSR服务提供商提供给你），填入SSR内正确设置并开启就可以正常浏览封锁的所有网站，比如常见的：google，youtube，facebook，twitter，telegram等等。<br>shadowsocks已经出现很多年了，作者是clowwindy，大家可以去github查看他的主页。github上ss仓库<a href="https://github.com/shadowsocks/shadowsocks/tree/master的代码已经比较难维护了，状态机和epoll很好，提高了程序的性能效率，但是很多东西也影响了我们去看核心的东西是什么。所以本文解析的是一个轻量级的ss，clowwindy写的比较早的版本，那个时候使用select而不是epoll，网络通信的逻辑也很清晰，容易了解ss的原理，代码的仓库为https://github.com/YvesChan/shadowsocks">https://github.com/shadowsocks/shadowsocks/tree/master的代码已经比较难维护了，状态机和epoll很好，提高了程序的性能效率，但是很多东西也影响了我们去看核心的东西是什么。所以本文解析的是一个轻量级的ss，clowwindy写的比较早的版本，那个时候使用select而不是epoll，网络通信的逻辑也很清晰，容易了解ss的原理，代码的仓库为https://github.com/YvesChan/shadowsocks</a></p>
</blockquote>
<p><a href="https://github.com/shadowsocks/shadowsocks/tree/master">SSR的作者的github地址</a>   </p>
<h3 id="1-2-原理介绍"><a href="#1-2-原理介绍" class="headerlink" title="1.2 原理介绍"></a>1.2 原理介绍</h3><p><a href="[https://bingtaoli.github.io/2016/11/23/shadowsocks%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/](https://bingtaoli.github.io/2016/11/23/shadowsocks实现原理/)">参考文章</a></p>
<h4 id="1-2-1-原理图"><a href="#1-2-1-原理图" class="headerlink" title="1.2.1 原理图"></a>1.2.1 原理图</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/shadowsocks.png" alt=""></p>
<p>ss要求本机运行local.py，海外服务器运行server.py。local.py默认监听localhost的1080端口，该端口代理浏览器的请求。browser要访问google时，会和localhost:1080进行一次基于sock5协议的通信，如上图的红色虚线框，sock5协议可以去了解下，维基百科有不错的介绍。</p>
<p>代理的流程如下：</p>
<ol>
<li>localhost:1080经过sock5协议后，就知道要访问google了</li>
<li>local程序会把流量加密，然后把普通的TCP流量发往海外服务器；</li>
<li>海外服务器收到请求后，解密得到要访问google</li>
<li>海外服务器请求google后把得到的数据加密返回给local</li>
<li>local解密返回给browser。</li>
</ol>
<p>ss的解密和加密基于用户设置的密码，所以local和server之间可以做到加密和解密的一致。</p>
<h4 id="1-2-2-网络编程"><a href="#1-2-2-网络编程" class="headerlink" title="1.2.2 网络编程"></a>1.2.2 网络编程</h4><p>python网络编程相比C语言要少很多代码，由于有很多封装得很好的类可以使用，网络编程更加符合思维走向。作者clowwindy使用了SocketServer.TCPServer和SocketServer.StreamRequestHandler两个类完成TCP的处理。在python的官方文档可以查看到两者的详细介绍。从名字中也可以知道两者的作用：TCPServer负责处理连接accept或close等，此类的构造函数要求传入Handler类；Handler类负责连接的数据处理，包括recv和send，此类要求实现handle方法。StreamRequestHandler更进一步把recv和send封装为rfile读端的read和wfile.write，把socket操作转化为了文件的读写，更加便捷。</p>
<p>local程序的handle方法：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/localpy.png" alt=""></p>
<p>图截自github，本人已经标注handle函数每个部分的作用，最后的handle_tcp等待sock和remote的事件，sock可读则读取然后发往remote，remote可读就读取然后发往sock，代码如下图：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/localpyhandler.png" alt=""></p>
<p>注意encrypt和decrypt，加密和解密的算法感兴趣可以去看看代码，使用到了python自带的加密解密方法。</p>
<p>server端的handle方法就不再截图了，因为和local.py很类似，只是一些细节流程不一致而已。大家感兴趣可以下载代码阅读。</p>
<p>运行效果<br>服务端先运行server.py后，本地运行loca.py，并且设置浏览器代理为本地1080就OK了</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/shadowsocksrun.png" alt=""></p>
<h3 id="1-3-如何在vps上配置SSR"><a href="#1-3-如何在vps上配置SSR" class="headerlink" title="1.3 如何在vps上配置SSR"></a><strong>1.3 如何在<code>vps</code>上配置<code>SSR</code></strong></h3><h4 id="第一步-提权"><a href="#第一步-提权" class="headerlink" title="第一步 提权"></a>第一步 提权</h4><p>在进入到<code>VPS</code>Linux服务器中之后，先使用<code>sudo -i</code>进行提权，也就将自己变成管理员权限。</p>
<h4 id="第二步-运行脚本"><a href="#第二步-运行脚本" class="headerlink" title="第二步 运行脚本"></a>第二步 运行脚本</h4><p>然后运行下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>

<p>按下<code>enter</code>键之后，会出现下面的界面：</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/360%E6%88%AA%E5%9B%BE20200516205757327.jpg" alt=""></p>
<p>然后按<code>1</code>进行安装，因为这是安装<code>v2ray</code>（这是一个相对<code>SSR</code>而言更加安全的协议，下面会介绍）的脚本，在这个脚本中会有<code>SSR</code>的安装，会提示是否安装<code>shadowsocks</code>，输入<code>y</code>即可。</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/5c305224cfe05.jpg" alt=""></p>
<p>配置<code>shadowsocks</code>如下：</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/5c305224ad11c.jpg" alt=""></p>
<p>配置完之后，会显示<code>v2ray</code>和<code>ssr</code>的配置信息：</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/5c305224bbd75.jpg" alt=""></p>
<h4 id="第三步-查看配置"><a href="#第三步-查看配置" class="headerlink" title="第三步 查看配置"></a>第三步 查看配置</h4><p>如果手抖了一下，没有来得及保存这些配置，就关掉了配置界面。没关系，重新打开虚拟机，输入<code>v2ray</code>即可查看相关的配置信息：</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/5c305224c606e.jpg" alt=""></p>
<h3 id="1-4-SSR客户端下载"><a href="#1-4-SSR客户端下载" class="headerlink" title="1.4 SSR客户端下载"></a>1.4 <code>SSR</code>客户端下载</h3><p>windows：<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a><br>android：<a href="https://github.com/shadowsocksrr/shadowsocksr-android/releases">https://github.com/shadowsocksrr/shadowsocksr-android/releases</a><br>mac os：<a href="https://github.com/qinyuhang/ShadowsocksX-NG-R/releases/">https://github.com/qinyuhang/ShadowsocksX-NG-R/releases/</a></p>
<h2 id="2-V2RAY"><a href="#2-V2RAY" class="headerlink" title="2 V2RAY"></a>2 V2RAY</h2><h3 id="2-1-原理介绍"><a href="#2-1-原理介绍" class="headerlink" title="2.1 原理介绍"></a>2.1 原理介绍</h3><p><a href="https://toutyrater.github.io/basic/vmess.html">参考文章</a></p>
<h3 id="2-2-配置V2RAY"><a href="#2-2-配置V2RAY" class="headerlink" title="2.2 配置V2RAY"></a>2.2 配置V2RAY</h3><p><a href="https://github.com/233boy/v2ray/wiki/V2Ray一键安装脚本">https://github.com/233boy/v2ray/wiki/V2Ray一键安装脚本</a></p>
<p><a href="https://233v2.com/post/16/">v2ray安装教程</a></p>
<h4 id="第一步-提权-1"><a href="#第一步-提权-1" class="headerlink" title="第一步 提权"></a>第一步 提权</h4><p>都是一样，因为有些事只有管理员才可以做，所以必须先提权，要不然后续厚些操作没办法进行。</p>
<p>执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<h4 id="第二步-运行脚本-1"><a href="#第二步-运行脚本-1" class="headerlink" title="第二步 运行脚本"></a>第二步 运行脚本</h4><p>这里的命令和上面的配置<code>ssr</code>的命令是一样的，因为这个配置文件中整合了<code>v2ray</code>和<code>ssr</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>

<p>然后选择安装，即是输入 1 回车<br>选择传输协议，如果没有特别的需求，使用默认的 TCP 传输协议即可，直接回车<br>选择端口，如果没有特别的需求，使用默认的端口即可，直接回车<br>是否屏蔽广告，除非你真的需要，一般来说，直接回车即可</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/5c305224cfe05.jpg" alt=""></p>
<p>是否配置 Shadowsocks ，如果不需要就直接回车，否则就输入 Y 回车<br>Shadowsocks 端口，密码，加密方式这些东西自己看情况配置即可，我个人当然是全部直接回车。。<br>OK，按回车继续</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/5c305224ad11c.jpg" alt=""></p>
<p>安装信息，如果确保没有什么问题了，按回车继续</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/5c3052248ca3e.jpg" alt=""></p>
<p>(备注，安装信息会因你的配置而变化..不用在乎这截图)<br>(备注，由于我懒…脚本显示的一些信息可能会跟上面的截图有少许不同，但实际上都是很简单明了的)</p>
<p>OK，大概等待一分钟左右， V2Ray 便会安装完成了。</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/5c305224bbd75.jpg" alt=""></p>
<p>如上图所示，V2Ray 配置信息，Shadowsocks 配置信息都有了<br>如果你使用过 Shadowsocks ，那么现在你可以测试一下 Shadowsocks 配置了，看看是否能正常使用。<br>如果你使用过 V2Ray 某些客户端，那么现在也可以测试一下配置了。<br>(备注，可能某些 V2Ray 客户端的选项或描述略有不同，但事实上，上面的 V2Ray 配置信息已经足够详细，由于客户端的不同，请对号入座。)</p>
<h4 id="第三步-查看V2ray配置"><a href="#第三步-查看V2ray配置" class="headerlink" title="第三步 查看V2ray配置"></a>第三步 查看V2ray配置</h4><p>现在可以尝试一下输入 <code>v2ray</code> 回车，即可管理 V2Ray</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/5c305224c606e.jpg" alt=""></p>
<h4 id="参考-v2ray快速管理命令"><a href="#参考-v2ray快速管理命令" class="headerlink" title="参考 v2ray快速管理命令"></a>参考 v2ray快速管理命令</h4><ol>
<li><code>v2ray info</code> 查看 V2Ray 配置信息</li>
<li><code>v2ray config</code> 修改 V2Ray 配置</li>
<li><code>v2ray link</code> 生成 V2Ray 配置文件链接</li>
<li><code>v2ray infolink</code> 生成 V2Ray 配置信息链接</li>
<li><code>v2ray qr</code> 生成 V2Ray 配置二维码链接</li>
<li><code>v2ray ss</code> 修改 Shadowsocks 配置</li>
<li><code>v2ray ssinfo</code> 查看 Shadowsocks 配置信息</li>
<li><code>v2ray ssqr</code> 生成 Shadowsocks 配置二维码链接</li>
<li><code>v2ray status</code> 查看 V2Ray 运行状态</li>
<li><code>v2ray start</code> 启动 V2Ray</li>
<li><code>v2ray stop</code> 停止 V2Ray</li>
<li><code>v2ray restart</code> 重启 V2Ray</li>
<li><code>v2ray log</code> 查看 V2Ray 运行日志</li>
<li><code>v2ray update</code> 更新 V2Ray</li>
<li><code>v2ray update.sh</code> 更新 V2Ray 管理脚本</li>
<li><code>v2ray uninstall</code> 卸载 V2Ray</li>
</ol>
<h3 id="2-3-WebSocket-TLS"><a href="#2-3-WebSocket-TLS" class="headerlink" title="2.3 WebSocket + TLS"></a>2.3 WebSocket + TLS</h3><p>实现 WebSocket + TLS 超级无敌简单，前提是要拥有一个能正常解析的域名 (并且知道怎么解析域名)<br>服务器输入 <code>v2ray config</code> 回车，然后选择 修改 V2Ray 传输协议，再选择 WebSocket + TLS，即是输入 4，接着输入你的域名，然后我都懒得说了，脚本都那么简单明了，我还瞎BB干嘛…<br>备注一下啦，这里我没写怎么教你注册域名啦，怎么解析域名啦，如果你真的想要使用 WebSocket + TLS，那就 自己谷歌摸索一下，其实好简单的啦！<br>我本人并没有在使用 WS + TLS (WebSocket + TLS)，我用 TCP，就是用一键脚本全程回车的那种懒人</p>
<h3 id="2-4-HTTP2"><a href="#2-4-HTTP2" class="headerlink" title="2.4 HTTP2"></a>2.4 HTTP2</h3><p>实现 HTTP/2 (h2) 也超级无敌简单，和 WebSocket + TLS 一样，也就是只要一个域名就够<br>服务器输入 <code>v2ray config</code> 回车，然后选择 修改 V2Ray 传输协议，再选择 HTTP/2，即是输入 16，然后………看上面的 WebSocket + TLS 的相关。<br>备注一下，HTTP/2 相比 WS + TLS (WebSocket + TLS) ，在浏览网页时有一些优势。速度是差不多的啦</p>
<h3 id="2-5-mKCP"><a href="#2-5-mKCP" class="headerlink" title="2.5 mKCP"></a>2.5 mKCP</h3><p>mKCP 这个东东其实就是 KCP 协议，反正你知道是能提速的就行，但是不保证都能提速，还能避免 TCP 阻断，但是也可以会被运营商 Qos.<br>使用方法：服务器输入 <code>v2ray config</code> 回车，然后选择 修改 V2Ray 传输协议，之后再选择 mKCP 相关的就行</p>
<h3 id="2-6-Telegram-专用代理"><a href="#2-6-Telegram-专用代理" class="headerlink" title="2.6 Telegram 专用代理"></a>2.6 Telegram 专用代理</h3><blockquote>
<p>重要提醒：不建议使用 V2Ray 的 MTProto 代理！<br>推荐使用： <a href="https://github.com/cutelua/mtg-dist">https://github.com/cutelua/mtg-dist</a></p>
</blockquote>
<p>如果你在使用 Telegram 的话，你可以配置一个 Telegram 的专用代理，这样来，在某些情况下你就不需要再开一个代理软件了。<br>输入 <code>v2ray tg</code> 即可配置 TG 专用代理<br>配置 Telegram MTProto</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/acj8z-fjeyt.jpg" alt=""></p>
<p>Telegram MTProto 配置信息</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/adhnn-gfj6o.jpg" alt=""></p>
<h3 id="V2Ray-脚本说明"><a href="#V2Ray-脚本说明" class="headerlink" title="V2Ray 脚本说明"></a>V2Ray 脚本说明</h3><p><a href="https://233v2.com/post/1/">最好用的 V2Ray 一键安装脚本 &amp; 管理脚本</a></p>
<h2 id="3-Trojan"><a href="#3-Trojan" class="headerlink" title="3 Trojan"></a>3 Trojan</h2><h4 id="3-1-原理及配置"><a href="#3-1-原理及配置" class="headerlink" title="3.1 原理及配置"></a>3.1 原理及配置</h4><p><a href="https://trojan-tutor.github.io/2019/04/10/p41.html">参考文章</a></p>
<h1 id="IOS科学上网APP"><a href="#IOS科学上网APP" class="headerlink" title="IOS科学上网APP"></a>IOS科学上网APP</h1><h2 id="1-小火箭-SoadowSocksR"><a href="#1-小火箭-SoadowSocksR" class="headerlink" title="1 小火箭-SoadowSocksR"></a>1 小火箭-SoadowSocksR</h2><p><a href="https://t.me/shadowrocketid">小火箭电报群</a></p>
<h3 id="1-1-下载小火箭"><a href="#1-1-下载小火箭" class="headerlink" title="1.1 下载小火箭"></a>1.1 下载小火箭</h3><p>请认准下面的图标，不要下载错了，因为叫这个名字的软件有很多，很容易下错，这个是需要苹果账号非中国大陆区的账号，且这是一个收费的软件，网上有很多已经下载多了的账号分享，这里分享两个：</p>
<p><strong>账号1：</strong></p>
<p>账号：<code>xie15369599764@163.com</code></p>
<p>密码：<code>Xie990522.</code></p>
<p><strong>账号2：</strong></p>
<p>账号：<code>h9a73e18@icloud.com</code><br>密码：<code>Tedsc.co1</code></p>
<img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/photo_2020-05-16_22-12-29.jpg" style="zoom:50%;" />

<h4 id="1-2-苹果账号换区登录"><a href="#1-2-苹果账号换区登录" class="headerlink" title="1.2 苹果账号换区登录"></a>1.2 苹果账号换区登录</h4><p>首先进去到【设置】，然后进入你的苹果的iCloud界面，然后进入到【App store】。</p>
<img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/ios-account-473x1024.jpg" style="zoom:50%;" />

<p>然后退出当前账号，登录上面提供的账号即可。</p>
<img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/app-store-options-473x1024.jpeg" style="zoom:50%;" />

<h3 id="1-3-配置"><a href="#1-3-配置" class="headerlink" title="1.3 配置"></a>1.3 配置</h3><p>该软件可以通过<code>扫描二维码</code>、<code>链接导入</code>、<code>手动输入</code>、<code>配置文件</code>等方式进行配置代理信息。且所有的协议都支持前面讲的方法。</p>
<p>这些配置相对简单，所以这里就不多说了，下面介绍一下该APP的分流如何设置。</p>
<h3 id="1-4分流"><a href="#1-4分流" class="headerlink" title="1.4分流"></a>1.4分流</h3><p>什么是分流呢？很简单，我们在使用代理时，并不是就不访问国内的网站了，但是当国内的请求走代理时，那么就会很慢，因为这个请求先到海外的代理服务器，然后再由该服务器访问具体的国内网站，国内网站再将请求结果返回给海外代理服务器，然后代理服务器再把结果返回给你，这就相当于绕地球一圈了，速度（延迟很大）会很慢。</p>
<p>那么我们肯定希望国内的请求就直接连接就好了，不走代理；国外的请求就走代理，这样当我们连接上代理服务器的时候，访问国内的请求就不会很慢了。</p>
<p><a href="https://cdn.jsdelivr.net/gh/crazyjums/static@master/ssr-role.conf">分流规则</a></p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/68747470733a2f2f6832792e6769746875622e696f2f536861646f77726f636b65742d4144426c6f636b2d52756c65732f6669677572652f73725f746f703530305f62616e6c6973745f61642e706e673f31.png" alt=""></p>
<h2 id="2-圈-quantumult"><a href="#2-圈-quantumult" class="headerlink" title="2 圈-quantumult"></a>2 圈-quantumult</h2><p>分流策略配置文件：</p>
<p><a href="https://cdn.jsdelivr.net/gh/crazyjums/static@master/quantumult_filter.conf">https://cdn.jsdelivr.net/gh/crazyjums/static@master/quantumult_filter.conf</a></p>
<p>拒绝访问的配置文件：</p>
<p><a href="https://cdn.jsdelivr.net/gh/crazyjums/static@master/quantumult_rejection.conf">https://cdn.jsdelivr.net/gh/crazyjums/static@master/quantumult_rejection.conf</a></p>
<p><a href="https://xingkaixin.me/2019/05/01/How-to-use-Quantumult/">quantumult的配置参考这篇文献的介绍</a></p>
<h2 id="3-quantumult-X"><a href="#3-quantumult-X" class="headerlink" title="3 quantumult X"></a>3 quantumult X</h2><p>圈的配置只支持<code>SSR</code>协议能够通过扫描二维码和url导入，其他的协议（vmess,socks）等都只能通过配置文件进行添加。</p>
<h3 id="3-1-导入配置文件"><a href="#3-1-导入配置文件" class="headerlink" title="3.1 导入配置文件"></a>3.1 导入配置文件</h3><p>在进行配置之前，需要导入一些大牛的配置文件，这样我们就不需要进行繁琐的配置操作了。</p>
<p>配置文件地址：<a href="https://cdn.jsdelivr.net/gh/crazyjums/static@master/quantumult_X.conf">https://cdn.jsdelivr.net/gh/crazyjums/static@master/quantumult_X.conf</a></p>
<p>选择【下载】，然后输入该链接地址即可。</p>
<img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/photo_2020-05-16_23-04-42.jpg" style="zoom: 67%;" />

<img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/photo_2020-05-16_23-04-48.jpg" style="zoom:67%;" />

<p>这里就只介绍一下如何添加<code>v2ray</code>协议了，其他的都类似这个。</p>
<p>配置文件配置示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[server_local]</span><br><span class="line"># 以下示范都是 ip(域名):端口，</span><br><span class="line"># 比如 vmess-a.203.167.55.4:777 ，实际是 203.167.55.4:777</span><br><span class="line"># 前面的 ss-a，ws-tls这些，只是为了让你快速找到自己节点的类型</span><br><span class="line"># 实际使用时，请不要真的 傻乎乎的 写 vmess-a.203.167.55.4:777 这种。</span><br><span class="line"></span><br><span class="line">#shadowsocks以及shadowsocksR类型</span><br><span class="line">;shadowsocks=ss-a.example.com:80, method=chacha20, password=pwd, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, server_check_url=http://www.apple.com/generate_204, tag=Sample-A</span><br><span class="line">;shadowsocks=ss-b.example.com:80, method=chacha20, password=pwd, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, tag=Sample-B</span><br><span class="line">;shadowsocks=ss-c.example.com:443, method=chacha20, password=pwd, obfs=tls, obfs-host=bing.com, fast-open=false, udp-relay=false, tag=Sample-C</span><br><span class="line">;shadowsocks=ssr-a.example.com:443, method=chacha20, password=pwd, ssr-protocol=auth_chain_b, ssr-protocol-param=def, obfs=tls1.2_ticket_fastauth, obfs-host=bing.com, tag=Sample-D</span><br><span class="line">;shadowsocks=ws-a.example.com:80, method=aes-128-gcm, password=pwd, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=Sample-E</span><br><span class="line">;shadowsocks=ws-b.example.com:80, method=aes-128-gcm, password=pwd, obfs=ws, fast-open=false, udp-relay=false, tag=Sample-F</span><br><span class="line">;shadowsocks=ws-tls-a.example.com:443, method=aes-128-gcm, password=pwd, obfs=wss, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=Sample-G</span><br><span class="line"></span><br><span class="line"># vmess 类型，ws，wss(ws+tls),over-tls,tcp </span><br><span class="line">;ws 类型</span><br><span class="line">;vmess=ws-c.example.com:80, method=chacha20-ietf-poly1305, password= 23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs-host=ws-c.example.com, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=Sample-H</span><br><span class="line">; wss(ws+tls) 类型</span><br><span class="line">;vmess=ws-tls-b.example.com:443, method=chacha20-ietf-poly1305, password= 23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs-host=ws-tls-b.example.com, obfs=wss, obfs-uri=/ws, tls-verification=true,fast-open=false, udp-relay=false, tag=Sample-I</span><br><span class="line">; tcp 类型</span><br><span class="line">;vmess=vmess-a.example.com:80, method=aes-128-gcm, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, tag=Sample-J</span><br><span class="line">;vmess=vmess-b.example.com:80, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, tag=Sample-K</span><br><span class="line">; over-tls 类型</span><br><span class="line">;vmess=vmess-over-tls.example.com:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs-host=vmess-over-tls.example.com, obfs=over-tls, tls-verification=true, fast-open=false, udp-relay=false, tag=Sample-L</span><br><span class="line"></span><br><span class="line">; http 类型</span><br><span class="line">;http=http.example.com:80, username=name, password=pwd, fast-open=false, udp-relay=false, tag=http</span><br><span class="line">;http=https.example.com:443, username=name, password=pwd, over-tls=true, tls-verification=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=http-tls</span><br><span class="line"></span><br><span class="line">; trojan 类型</span><br><span class="line">;trojan=example.com:443, password=pwd, over-tls=true, tls-verification=true, fast-open=false, udp-relay=false, tag=trojan-tls-01</span><br><span class="line">;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=trojan-tls-02</span><br></pre></td></tr></table></figure>

<h1 id="五-windows科学上网程序"><a href="#五-windows科学上网程序" class="headerlink" title="五 windows科学上网程序"></a>五 windows科学上网程序</h1><h2 id="1-v2rayN-下载"><a href="#1-v2rayN-下载" class="headerlink" title="1 v2rayN-下载"></a>1 v2rayN-<a href="https://github.com/2dust/v2rayN/releases">下载</a></h2><h3 id="1-1-添加节点"><a href="#1-1-添加节点" class="headerlink" title="1.1 添加节点"></a>1.1 添加节点</h3><p>添加节点比较简单，下面一张图介绍了该软件的添加方式：</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/Snipaste_2020-05-16_21-38-18.png" alt=""></p>
<ol>
<li>添加<code>ssr</code>节点</li>
</ol>
<p>选择<code>服务器</code>-&gt;<code>添加shadowsocks服务器</code>：</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/Snipaste_2020-05-16_21-40-57.png" alt=""></p>
<ol start="2">
<li>添加<code>v2ray</code>节点</li>
</ol>
<p>选择<code>服务器</code>-&gt;<code>添加VMess服务器</code>：</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/Snipaste_2020-05-16_21-42-17.png" alt=""></p>
<ol start="3">
<li>添加<code>trojan</code>节点</li>
</ol>
<p>选择<code>服务器</code>-&gt;<code>添加socks服务器</code>：</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/Snipaste_2020-05-16_21-44-41.png" alt=""></p>
<h3 id="1-2-设置分流"><a href="#1-2-设置分流" class="headerlink" title="1.2 设置分流"></a>1.2 设置分流</h3><ol>
<li>到 <a href="https://github.com/ToutyRater/V2Ray-SiteDAT/tree/master/geofiles">https://github.com/ToutyRater/V2Ray-SiteDAT/tree/master/geofiles</a> 下载 h2y.dat 文件放到 V2Ray 运行文件的目录下。</li>
</ol>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/Snipaste_2020-05-16_21-46-01.png" alt=""></p>
<ol start="2">
<li>按需要写路由规则，格式为 “ext:h2y.dat:tag”。ext 表示使用外部文件；h2y.dat 是具体的文件名；tag 泛指标签，有哪些标签由文件提供。步骤 1 下载的 h2y.dat 文件目前只有 <code>ad</code> 和 <code>gfw</code> 两个标签，ad 包含着常见的广告域名，gfw 包含着常见的被 gfw 屏蔽的域名。它们各自所包含的域名在<a href="https://github.com/ToutyRater/v2ray-SiteDAT/tree/master/h2y">这里</a>可以看到。这个域名文件每星期自动更新，你也可以使用下面的文件配置(打开 <a href="https://github.com/ToutyRater/V2Ray-SiteDAT/tree/master/geofiles">https://github.com/ToutyRater/V2Ray-SiteDAT/tree/master/geofiles</a> 看到的都是当时的最新版本)。路由配置示例如下。</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;rules&quot;</span>:[</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;outboundTag&quot;</span>: <span class="string">&quot;block&quot;</span>, <span class="comment">//拦截广告相关域名</span></span><br><span class="line">     <span class="attr">&quot;domain&quot;</span>: [</span><br><span class="line">         <span class="string">&quot;ext:h2y.dat:ad&quot;</span></span><br><span class="line">     ]</span><br><span class="line"> &#125;,</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;outboundTag&quot;</span>: <span class="string">&quot;proxy&quot;</span>, <span class="comment">//被 gfw 屏蔽的域名走代理</span></span><br><span class="line">     <span class="attr">&quot;domain&quot;</span>: [</span><br><span class="line">         <span class="string">&quot;ext:h2y.dat:gfw&quot;</span></span><br><span class="line">     ]</span><br><span class="line"> &#125;,</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;network&quot;</span>:<span class="string">&quot;tcp,udp&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;outboundTag&quot;</span>: <span class="string">&quot;direct&quot;</span> <span class="comment">// 默认直连</span></span><br><span class="line"> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>因为使用了 gfw 列表的用户，通常是想要默认情况下直连，但有时候习惯上在 outbounds 的第一个是代理的出站，所以在上面的配置中，最后加了一条直连的规则。那个<code>network:&quot;tcp,udp&quot;</code> 是为了让所有流量都能匹配上。</p>
<blockquote>
<p><strong>需要注意的是，目前所有第三方的 V2Ray GUI 客户端都不支持加载外置的域名文件。</strong></p>
</blockquote>
<h2 id="2-clash-下载"><a href="#2-clash-下载" class="headerlink" title="2 clash-下载"></a>2 clash-<a href="https://github.com/yichengchen/clashX/releases">下载</a></h2><p><a href="https://docs.cfw.lbyczf.com/">配置介绍</a></p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/ui-general1.png" alt=""></p>
<p>配置代理：</p>
<p><strong>Profiles/xxxx.yaml</strong></p>
<p>Profiles文件夹下文件均由用户导入，CFW统一生成的，一般命名为时间戳</p>
<p>这些文件可以不完整，通常只需要有：<code>Proxy/Proxy Group/Rule</code>三个字段组成即可：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Proxy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Shadowsocks</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">socks5</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">1080</span></span><br><span class="line"><span class="attr">Proxy Group:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Proxy</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Shadowsocks</span></span><br><span class="line"><span class="attr">Rule:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;MATCH,DIRECT&#x27;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>选项说明：</p>
<ul>
<li>Port：HTTP代理端口</li>
<li>Socks Port：Socks5代理端口</li>
<li>Allow LAN：是否允许局域网代理</li>
<li>Log Level：Clash核心日志等级</li>
<li>Home Directory：Clash配置文件目录（不建议修改此目录下文件内容）</li>
<li>GeoIP Database：GeoIP数据库更新</li>
<li>UWP Loopback：UWP应用联网限制解除工具</li>
<li>TAP Device：虚拟网卡安装</li>
<li>General YAML：文本模式编辑基础配置</li>
<li>Theme：切换<code>亮</code>/<code>暗</code>主题</li>
<li>System Proxy：系统代理开关</li>
<li>Start with Windows：开机自启动开关</li>
</ul>
</blockquote>
<blockquote>
<p>点击行为：</p>
<ul>
<li>Connected to Clash core：快速打开 logs 文件夹</li>
<li>Clash for Windows（标题）：快速重启软件</li>
<li>v x.x.x: 当显示<code>new</code>提示时可以直接点击下载新版安装包 (每隔6小时检查一次更新)</li>
<li>Home Directory：快速打开配置文件目录</li>
<li>GeoIP Database：点击更新 GeoIP 库</li>
<li>UWP Loopback：快速打开回环代理限制器</li>
<li>TAP Device：安装虚拟网卡驱动</li>
</ul>
</blockquote>
<h2 id="3-Trojan-Qt5-下载"><a href="#3-Trojan-Qt5-下载" class="headerlink" title="3 Trojan Qt5-下载"></a>3 Trojan Qt5-<a href="https://github.com/Trojan-Qt5/Trojan-Qt5/releases/tag/v1.0.4">下载</a></h2><h3 id="3-1-手动添加节点"><a href="#3-1-手动添加节点" class="headerlink" title="3.1 手动添加节点"></a>3.1 手动添加节点</h3><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/%E6%89%8B%E5%8A%A8%E6%B7%BB%E5%8A%A0%E8%BF%9E%E6%8E%A5.jpg" alt=""></p>
<p>编辑信息：</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/%E6%89%8B%E5%8A%A8%E6%B7%BB%E5%8A%A0%E8%BF%9E%E6%8E%A51.jpg" alt=""></p>
<h3 id="3-2-启动PAC"><a href="#3-2-启动PAC" class="headerlink" title="3.2 启动PAC"></a>3.2 启动PAC</h3><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/PAC%E6%A8%A1%E5%BC%8F.jpg" alt=""></p>
<p>更换<code>PAC</code>为<code>GFWlist</code>。</p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/GFWlist.jpg" alt=""></p>
<h3 id="3-3-其他设置"><a href="#3-3-其他设置" class="headerlink" title="3.3 其他设置"></a>3.3 其他设置</h3><p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/autostartup.jpg" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/outside@gh-pages/images/%E7%AE%A1%E7%90%86%E8%8A%82%E7%82%B9.jpg" alt=""></p>
<h1 id="六-福利"><a href="#六-福利" class="headerlink" title="六 福利"></a>六 福利</h1><ol>
<li><p><a href="https://www.pincong.rocks/article/17177">自动代理使用电报（telegram）</a></p>
</li>
<li><p><a href="https://toutyrater.github.io/advanced/wss_and_web.html">v2ray原理介绍</a></p>
</li>
<li><p><a href="[https://bingtaoli.github.io/2016/11/23/shadowsocks%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/](https://bingtaoli.github.io/2016/11/23/shadowsocks实现原理/)">ssr原理说明</a></p>
</li>
<li><p><a href="https://docs.cfw.lbyczf.com/contents/configfile.html">clash配置教程</a></p>
</li>
<li><p>IOS账号下载<code>quantumult x</code>和<code>quantumult</code>:</p>
<p>香港ID：<code>uubxs39@163.com</code></p>
<p>密码：<code>App86685</code></p>
<blockquote>
<p>切勿从icloud处登录，正确的登录方式应该是从App Store里面进行登录。</p>
</blockquote>
</li>
<li><p>IOS账号下载<code>shadowsocksR</code>（小火箭）：</p>
<p><strong>账号1：</strong></p>
<p>账号：<code>xie15369599764@163.com</code></p>
<p>密码：<code>Xie990522.</code></p>
<p><strong>账号2：</strong></p>
<p>账号：<code>h9a73e18@icloud.com</code><br>密码：<code>Tedsc.co1</code></p>
</li>
</ol>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>software cracking</tag>
      </tags>
  </entry>
  <entry>
    <title>How to change timezone in linux</title>
    <url>/how-to-change-timezone-in-linux/</url>
    <content><![CDATA[<h2 id="1-How-to-view-time-in-Linux"><a href="#1-How-to-view-time-in-Linux" class="headerlink" title="1 How to view time in Linux"></a>1 How to view time in Linux</h2><ul>
<li><p><code>date</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ date</span><br><span class="line">2021年 06月 25日 星期五 01:44:00 PDT</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>timedatectl</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ timedatectl</span><br><span class="line">      Local time: 五 2021-06-25 01:44:34 PDT</span><br><span class="line">  Universal time: 五 2021-06-25 08:44:34 UTC</span><br><span class="line">        RTC time: 五 2021-06-25 08:44:34</span><br><span class="line">       Time zone: America/Los_Angeles (PDT, -0700)</span><br><span class="line">     NTP enabled: yes</span><br><span class="line">NTP synchronized: yes</span><br><span class="line"> RTC <span class="keyword">in</span> <span class="built_in">local</span> TZ: no</span><br><span class="line">      DST active: yes</span><br><span class="line"> Last DST change: DST began at</span><br><span class="line">                  日 2021-03-14 01:59:59 PST</span><br><span class="line">                  日 2021-03-14 03:00:00 PDT</span><br><span class="line"> Next DST change: DST ends (the clock jumps one hour backwards) at</span><br><span class="line">                  日 2021-11-07 01:59:59 PDT</span><br><span class="line">                  日 2021-11-07 01:00:00 PST</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-How-to-change-timezone-in-Linux"><a href="#2-How-to-change-timezone-in-Linux" class="headerlink" title="2 How to change timezone in Linux"></a>2 How to change timezone in Linux</h2><p>But the timezone is not correct, so I need change the timezone in Linux.</p>
<p>First, you should know there is how many zone in Linux.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ timedatectl list-timezones</span><br><span class="line">Africa/Abidjan</span><br><span class="line">Africa/Accra</span><br><span class="line">Africa/Addis_Ababa</span><br><span class="line">Africa/Algiers</span><br><span class="line">Africa/Asmara</span><br><span class="line">Africa/Bamako</span><br><span class="line">Africa/Bangui</span><br><span class="line">Africa/Banjul</span><br><span class="line">Africa/Bissau</span><br><span class="line">Africa/Blantyre</span><br><span class="line">Africa/Brazzaville</span><br><span class="line">Africa/Bujumbura</span><br><span class="line">Africa/Cairo</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>And you choose a timezone to set in your Linux with the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo timedatectl set-timezone &lt;your timezone name&gt;</span><br><span class="line"><span class="comment"># for example</span></span><br><span class="line">$ sudo timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure>

<h2 id="Reference-Page"><a href="#Reference-Page" class="headerlink" title="Reference Page"></a>Reference Page</h2><p><a href="https://linuxize.com/post/how-to-set-or-change-timezone-in-linux/">How to Set or Change the Time Zone in Linux</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>C盘内存不足，如何清理不需要的缓存</title>
    <url>/how-to-clear-C-disk-cache/</url>
    <content><![CDATA[<h3 id="1-C盘下面有哪些必要的文件夹"><a href="#1-C盘下面有哪些必要的文件夹" class="headerlink" title="1 C盘下面有哪些必要的文件夹"></a>1 C盘下面有哪些必要的文件夹</h3><ul>
<li><p>ProgramData/  </p>
<ul>
<li>作用：programdata属于电脑C盘的一个系统文件夹，它是公用的被创建文件夹或文件存放的地方，这些文件夹或文件仅由创建者完整控制。专家建议不要删除，隐藏即可！</li>
</ul>
</li>
<li><p>‘Program Files’/ </p>
<ul>
<li>作用：Program Files 指的是程序文件，也就是Windows 操作系统，也包括其它的操作系统各种软件默认安装到的目录。位于C盘分区（”C:\Program Files”，”%ProgramFiles%”），但也可根据用户的需要自定义到别的分区。</li>
</ul>
</li>
<li><p>‘Program Files (x86)’/ </p>
<ul>
<li>作用：Program Files (x86)和Program Files类似，都是软件的默认安装目录，但是这个(x86)是存放的32位的软件，上面的文件夹存放的是64位软件的。</li>
</ul>
</li>
<li><p>AppData/</p>
<ul>
<li><strong>LocalLow/</strong>：用来存放共享数据文件，一般可以通过清理一些无用的共享文件，来达到清理释放C盘的目的。当你解压缩包时如果不指定路径，系统就把压缩包解到local\temp文件夹下，存放了一些解压文件，安装软件时就从这里调取数据特别是一些制图软件，体积非常大，占用很多空间</li>
<li><strong>Local/</strong>：用来保存本地文件，其中可以通过删除本地临时文件，即AppData\Local\Temp\文件夹下的所有文件，来达到释放C盘的目的</li>
<li><strong>Roaming/</strong>：保存应用程序运行后的数据信息，如果删除应用程序运行配置数据会丢失，但是重新启动应用程序，又会重新创建，只不过会消耗一定的时间。删除该文件夹下的文件，不会影响电脑正常运行。如：空间听音乐，登入的号码等而缓存的一些数据，这些数据优化大师是清理不掉的，可以打开roaming文件夹里的文件全选定点击删除，删除不掉的就选择跳过，不过当你再使用程序时，这个文件夹又开始膨胀，又会缓存数据</li>
<li><blockquote>
<p>该文件下的文件不能全部删除，可以根据需要，将一些软件的缓存删除，以释放C盘空间，如果将该文件夹全部删除的话，那么可能导致系统不能正常启动。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Windows/</p>
<ul>
<li>该文件夹几乎存放了Windows系统运行所需要的所有的文件，包括：临时文件、系统文件、缓存等。</li>
<li><strong>WinSxS/</strong>：该文件下存放的是windows系统的一些补丁，也就是每次系统更新下载的补丁都存放这个文件夹下。</li>
<li><blockquote>
<p>因为是补丁，所以不能随便删除，如果删除可能会影响系统的防病毒能力。但是该文件夹有一个BackUp文件夹，用来备份一些补丁，该文件下的内容可以删除，其他的不建议删除。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Users/</p>
<ul>
<li><strong>Default/</strong>：用户的默认配置</li>
<li><strong>公用/</strong>：这是所有用户共享的文件夹，有音乐/、下载/等</li>
<li><strong>[你的电脑用户名]/</strong>：该文件夹存放的是当前用户的一些操作文件，包括软件的快捷方式，一些软件的默认配置文件都存放在这里，不建议删除。</li>
</ul>
</li>
</ul>
<h3 id="2-释放C盘内存空间"><a href="#2-释放C盘内存空间" class="headerlink" title="2 释放C盘内存空间"></a>2 释放C盘内存空间</h3><ul>
<li>C:\Users\Your-Computert-Name\AppData\Roaming\下的文件夹或文件可以删除。</li>
<li>C:\Program Files和C:\Program Files (x86)这两个文件下的应用程序，可以挪到其他的盘，以达到释放C盘空间的目的</li>
<li>C:\Users\Your-Computer-Name\文件夹的部分文件(出AppDate外)，可以删除，但是删除的时候，还是需要考虑一下，因为有些软件的配置文件会存放在这里，如果有些软件是你配置好久之后的一些参数，那么删除之后就会需要你重新调校，会很费时间的。</li>
</ul>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>如何破解myeclipse|myeclipse破解教程</title>
    <url>/how-to-crack-myeclipse/</url>
    <content><![CDATA[<h3 id="0-声明"><a href="#0-声明" class="headerlink" title="0 声明"></a>0 声明</h3><blockquote>
<p>本篇文章是转载自<a href="https://www.jianshu.com/p/f97916ff67e2">该博客</a>，这里记录是为了方便自己日后使用，别无他用的目的。</p>
</blockquote>
<h3 id="1-下载软件"><a href="#1-下载软件" class="headerlink" title="1 下载软件"></a>1 下载软件</h3><p>链接: <a href="https://pan.baidu.com/s/1H-LUX1T07oXINVqDbKsgpg">https://pan.baidu.com/s/1H-LUX1T07oXINVqDbKsgpg</a> 提取码: 1gxb    </p>
<h3 id="2-破解过程"><a href="#2-破解过程" class="headerlink" title="2 破解过程"></a>2 破解过程</h3><h4 id="2-1-解压文件之后，双击run-bat，运行软件。"><a href="#2-1-解压文件之后，双击run-bat，运行软件。" class="headerlink" title="2.1 解压文件之后，双击run.bat，运行软件。"></a>2.1 解压文件之后，双击run.bat，运行软件。</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200204201928.png" alt="face UI"></p>
<h4 id="2-2-获取到SystemId后，点击菜单Tools–0-RebuildKey，然后点击Active按钮，将会看到生产一串数字。"><a href="#2-2-获取到SystemId后，点击菜单Tools–0-RebuildKey，然后点击Active按钮，将会看到生产一串数字。" class="headerlink" title="2.2 获取到SystemId后，点击菜单Tools–0.RebuildKey，然后点击Active按钮，将会看到生产一串数字。"></a>2.2 获取到SystemId后，点击菜单Tools–0.RebuildKey，然后点击Active按钮，将会看到生产一串数字。</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200204202014.png" alt="republickey">   </p>
<h4 id="2-3-点击菜单Tools–1-ReplaceJarFile"><a href="#2-3-点击菜单Tools–1-ReplaceJarFile" class="headerlink" title="2.3 点击菜单Tools–1.ReplaceJarFile"></a>2.3 点击菜单Tools–1.ReplaceJarFile</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200204202037.png" alt="republicjarfile"></p>
<h4 id="2-4-跳出一个文件夹选项，找到你的MyEclipse安装的位置，并进入plugins文件夹，然后点击右下方的打开按钮。"><a href="#2-4-跳出一个文件夹选项，找到你的MyEclipse安装的位置，并进入plugins文件夹，然后点击右下方的打开按钮。" class="headerlink" title="2.4 跳出一个文件夹选项，找到你的MyEclipse安装的位置，并进入plugins文件夹，然后点击右下方的打开按钮。"></a>2.4 跳出一个文件夹选项，找到你的MyEclipse安装的位置，并进入plugins文件夹，然后点击右下方的打开按钮。</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200204202100.png" alt="plugins">   </p>
<h4 id="2-5-点击打开按钮后，程序会卡顿一会儿，然后出现下方页面，看到Done后说明成功替换Jar文件了："><a href="#2-5-点击打开按钮后，程序会卡顿一会儿，然后出现下方页面，看到Done后说明成功替换Jar文件了：" class="headerlink" title="2.5 点击打开按钮后，程序会卡顿一会儿，然后出现下方页面，看到Done后说明成功替换Jar文件了："></a>2.5 点击打开按钮后，程序会卡顿一会儿，然后出现下方页面，看到Done后说明成功替换Jar文件了：</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200204202121.png" alt="success">   </p>
<h4 id="2-6-点击菜单Tools–2-SaveProperities"><a href="#2-6-点击菜单Tools–2-SaveProperities" class="headerlink" title="2.6 点击菜单Tools–2.SaveProperities"></a>2.6 点击菜单Tools–2.SaveProperities</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200204202142.png" alt="save file">   </p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>software cracking</tag>
      </tags>
  </entry>
  <entry>
    <title>如何正确的研究（for 研究生）</title>
    <url>/how-to-do-research/</url>
    <content><![CDATA[<h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/v2-0de792fa46151391a3620b903fc3c273_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/v2-5c651983667044179df38467994be311_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/v2-c41f13c3df2b07dceeacf94b1b4ee9f3_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/v2-d6f3e82e1c04002e6cb51d9711a291c5_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-4ab941c0bc735ecb777575782308cfa4_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-87ff1da0f8138334b55900db578e679e_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/v2-d2de3a386532ed71990f951462bf55f7_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/v2-3f876e02e1f1784fa9e7b8d328a74077_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/v2-6b218d62ee4fb52d7b03165a541e441f_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-74a094d8a3db70d8cb76b6e6994b1576_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-221ac7855b0e3828860a07d388d4b0a4_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/v2-4d1b8f0ebfc40fc9454706f8fadc868d_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-0856f97457206e600903cc153e4641e2_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-2ff27b5f46d7c9117757e163a4f4d30c_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/v2-2a45cdf29f1d11faaa346f6d4cb8d41f_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/v2-07109407703f26a2069c5a68c3724d4f_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/v2-458d2f630fd191aa06164817b78969e9_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/v2-06ded3b2453d366e795dbb3c692abdb5_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/v2-209fb99b715393da4faf0ee24db11801_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-60df23229aefbb6f1d6f7c5040eaf522_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-d43a8ef0407e4c35c4ef0d892fcc58ec_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/v2-ab69c1425fa78c089a72fd0a51d88e57_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-4a484f3b7041b4f2473f8149c977f940_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/v2-03c37ddb5127b890128a6cc99c9d5d13_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-d1069e7057a10c0cb7aa4b81a18a7fde_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-9237a668d71ac3393ec561fe2a719514_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/v2-2d25fcf8e012650237da80acb924c295_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-a5066ecaf4f95bb81a27e82159dd3496_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/v2-429677b4480a173f028e4207e5c75985_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-93c1e022eecfed3f56b0e100193f1bc0_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-f4a7e9339950e4b4706266f7498b8e72_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-49dcc609038422abbfa7b23e8f394fba_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-3713003ac332e9dccb1f98841ceb080c_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-341153b0c00474a691ff84444246597e_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-8a9c1d379213e89495df90e9ed7d76c2_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-33046b15629ef1759c5b743dc54fc692_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-881e8d2a2052d00babbb5b98aadcf5fa_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-433bc1ab35450dbe6544358b9c6efc44_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/v2-08f782fd8620f8cc310c51a4f06064ad_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-ceae13eee989d104cf3e9c342f410ed0_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-26854d975ee0d213076618a345b3a904_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-4c7e98bdcd4e34e9994fb6047e7e543c_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-4b9ccc49f201478e5283ff145814047c_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/v2-45db6b762fbddd1df9ec7f7524e55313_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/v2-310f29e61688bdfd0e41d06e4010f6a7_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-284d23ee6d0c0f573ad95687af3e9fb8_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/v2-f3ae0b8c40004c853756cfa3262de5f8_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-6bfd04296d2ea1c43fdffabe27acc646_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/v2-eb47ea69bd8c67868072b1ae3824c04d_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/v2-f3ccb4763450d661032ca4df3adf1829_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-830f9253de72dbac3eeeaada5e9e26fe_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-d9ae56eec7f2c42e6890e1c294057d8a_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/v2-f70839afb86c1b4549c7e810849c3d81_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/v2-c5f588fb502ea3ebc0d3e7a137506603_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-20d7202bc82d38648552278e2440e6ba_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/v2-7f28d2d0672def7f0415f300b44e6653_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/v2-203c5b7314cf4d1038af614081abab75_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-6d909ac114d4aae1fe23f6494bf7f0fe_b.jpg" alt=""><br><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/v2-3b18a6d30172420488ad9e8828f03522_b.jpg" alt="">  </p>
<hr>
<h3 id="原文出处"><a href="#原文出处" class="headerlink" title="原文出处"></a>原文出处</h3><p>知乎文章：<a href="https://zhuanlan.zhihu.com/p/98747105">周志华教授：如何做研究与写论文</a><br>文章中的PPT原件：<a href="https://jums.club/pdf/how_to_do_research.pdf">PDF下载</a></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>算法，数据反转算法</title>
    <url>/how-to-reverse-string/</url>
    <content><![CDATA[<h3 id="1-要求"><a href="#1-要求" class="headerlink" title="1 要求"></a>1 要求</h3><p>给定一组数据，将其倒序输出，如：</p>
<blockquote>
<p>input: [1,2,3,4,5]<br>output: [5,4,3,2,1]</p>
</blockquote>
<blockquote>
<p>input: [‘h’,’e’,’l’,’l’,’o’]<br>output: [‘o’,’l’,’l’,’e’,’h’]</p>
</blockquote>
<h3 id="2-题解"><a href="#2-题解" class="headerlink" title="2 题解"></a>2 题解</h3><p>使用双指针，遍历数组长度的一半次数，即可，不需要借助额外的临时数组。</p>
<h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3 代码"></a>3 代码</h3><h4 id="3-1-python"><a href="#3-1-python" class="headerlink" title="3.1 python"></a>3.1 python</h4><p>1 method one</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">array_like</span>):</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    j=<span class="built_in">len</span>(array_like)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j):</span><br><span class="line">        array_like[i],array_like[j] = array_like[j],array_like[i]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        j -=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> array_like</span><br></pre></td></tr></table></figure>

<p>2 method two</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array_like)&gt;&gt;<span class="number">1</span>):</span><br><span class="line">    array_like[i],array_like[<span class="built_in">len</span>(array_like)-<span class="number">1</span>-i] = array_like[<span class="built_in">len</span>(array_like)-<span class="number">1</span>-i],array_like[i]</span><br></pre></td></tr></table></figure>

<h4 id="3-2-java"><a href="#3-2-java" class="headerlink" title="3.2 java"></a>3.2 java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j = s.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span>[] res = <span class="keyword">new</span> <span class="keyword">char</span>[s.length];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">            res[j] = s[i];</span><br><span class="line">            res[i] = s[j];</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>algorithm</tag>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>how to view os version on linux（如何查看Linux的系统信息）</title>
    <url>/how-to-show-os-version-on-linux/</url>
    <content><![CDATA[<h2 id="1-How-to-view-OS-version-on-Linux"><a href="#1-How-to-view-OS-version-on-Linux" class="headerlink" title="1 How to view OS version on Linux"></a>1 How to view OS version on Linux</h2><ul>
<li><p><code>cat /etc/os-release</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# cat /etc/os-release     // cent os</span><br><span class="line">NAME=&quot;CentOS Linux&quot;</span><br><span class="line">VERSION=&quot;7 (Core)&quot;</span><br><span class="line">ID=&quot;centos&quot;</span><br><span class="line">ID_LIKE=&quot;rhel fedora&quot;</span><br><span class="line">VERSION_ID=&quot;7&quot;</span><br><span class="line">PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;31&quot;</span><br><span class="line">CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;</span><br><span class="line">HOME_URL=&quot;https://www.centos.org/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;</span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;</span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@395c51a2be53:/# cat /etc/os-release    //ubuntu</span><br><span class="line">NAME=&quot;Ubuntu&quot;</span><br><span class="line">VERSION=&quot;20.04.2 LTS (Focal Fossa)&quot;</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=&quot;Ubuntu 20.04.2 LTS&quot;</span><br><span class="line">VERSION_ID=&quot;20.04&quot;</span><br><span class="line">HOME_URL=&quot;https://www.ubuntu.com/&quot;</span><br><span class="line">SUPPORT_URL=&quot;https://help.ubuntu.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.launchpad.net/ubuntu/&quot;</span><br><span class="line">PRIVACY_POLICY_URL=&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span><br><span class="line">VERSION_CODENAME=focal</span><br><span class="line">UBUNTU_CODENAME=focal	</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>hostnamectl</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># hostnamectl     //cent os </span></span><br><span class="line">   Static hostname: localhost.localdomain</span><br><span class="line">Transient hostname: bogon</span><br><span class="line">         Icon name: computer-vm</span><br><span class="line">           Chassis: vm</span><br><span class="line">        Machine ID: c88ed388db814131ba13845cb03d9fde</span><br><span class="line">           Boot ID: e779409a6a4f4c1a84fb43fe812bcf73</span><br><span class="line">    Virtualization: vmware</span><br><span class="line">  Operating System: CentOS Linux 7 (Core)</span><br><span class="line">       CPE OS Name: cpe:/o:centos:centos:7</span><br><span class="line">            Kernel: Linux 3.10.0-514.el7.x86_64</span><br><span class="line">      Architecture: x86-64</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-How-to-view-kernel-version-of-Linux"><a href="#2-How-to-view-kernel-version-of-Linux" class="headerlink" title="2 How to view kernel version of Linux"></a>2 How to view kernel version of Linux</h2><ul>
<li><p>uname -r  # (All Linux version can use this command)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># uname -r   //cent os</span></span><br><span class="line">3.10.0-514.el7.x86_64</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Reference-Page"><a href="#Reference-Page" class="headerlink" title="Reference Page"></a>Reference Page</h2><p><a href="https://www.cyberciti.biz/faq/how-to-check-os-version-in-linux-command-line/"><a href="https://www.cyberciti.biz/faq/how-to-check-os-version-in-linux-command-line/">How to check os version in Linux command line</a></a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用git上传代码到GitHub等代码托管网站</title>
    <url>/how-to-use-git/</url>
    <content><![CDATA[<p>本文教你如果使用git工具将本地电脑上的代码上传至GitHub</p>
<h3 id="1-安装git工具"><a href="#1-安装git工具" class="headerlink" title="1 安装git工具"></a>1 安装git工具</h3><p>如何在电脑端安装<a href="https://www.cnblogs.com/smuxiaolei/p/7484678.html">安装git</a>工具。</p>
<h3 id="2-使用git工具上传自己的代码到GitHub中"><a href="#2-使用git工具上传自己的代码到GitHub中" class="headerlink" title="2 使用git工具上传自己的代码到GitHub中"></a>2 使用git工具上传自己的代码到GitHub中</h3><p>安装完git工具之后，我们会得到两个命令行工具，一个是git GUI HERE，一个是git bash HERE，我们可以鼠标右键看到这两个工具，如图所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190327211458423-1226917494.jpg" alt="右键查看"></p>
<p>我们这里使用的git bash工具，这个工具类似Linux的命令行操作。</p>
<h4 id="（1）mkdir-p"><a href="#（1）mkdir-p" class="headerlink" title="（1）mkdir p"></a>（1）mkdir p</h4><p>我们创建一个新的目录，用来当做我们本地计算机的一个仓库，注意：尽量不要在该目录的路径中夹带中文字符，以免出错</p>
<h4 id="（2）ll-a"><a href="#（2）ll-a" class="headerlink" title="（2）ll -a"></a>（2）ll -a</h4><p>创建完毕之后，我们cd进入该目录中，使用git init命令对该目录进行初始化，初始化成功之后，会在该目录下产生一个.git文件夹，如下图所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190327211911073-1991058892.png" alt="初始化"><br>我们可以看到最后在目录中多了一个.git文件夹。</p>
<h4 id="（3）cp-g-software-pycharm-files-alibaba-g-p"><a href="#（3）cp-g-software-pycharm-files-alibaba-g-p" class="headerlink" title="（3）cp   /g/software/pycharm/files/alibaba   /g/p"></a>（3）cp   /g/software/pycharm/files/alibaba   /g/p</h4><p>然后就是我们把需要上传的代码文件或者目录拷贝到该仓库中，在进行拷贝目录时，记得使用递归拷贝，cp -r /doc1 /doc2</p>
<p>我们这里将G盘中的一个文件夹移动到了仓库中</p>
<p>（4）git   add   alibaba/和git   status -s<br>拷贝完毕之后，我们需要将我们需要上传的文件或者文件夹add到缓存中，如下图所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190327212328323-1777789895.png" alt=""><br>我们会看到系统会提示一些警告信息，这个没有关系，不用担心，我们的文件已经添加到缓存中，我们可以使用git status -s命令进行查看状态<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190327212528017-77666794.png" alt=""><br>我们可以看到文件夹中的每一个具体的文件前面都有一个绿色的A，这就表示已经添加到缓存成功，且没有需要改动的内容。我们这里暂不谈具体的修改代码的操作。</p>
<h4 id="（5）git-commit-m-“-”"><a href="#（5）git-commit-m-“-”" class="headerlink" title="（5）git commit -m “*”"></a>（5）git commit -m “*”</h4><p>运行完第四步之后，我们还要将缓存中的文件添加到本地的仓库中才行，使用的是命令就是第五步所示，双引号中的*代表自己填写的注释，如图所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190327213344636-1165289069.png" alt=""><br>我们可以看到，上传成功了。接下我们执行第六步</p>
<h4 id="（6）git-remote-add-origin-https-github-com-bluepen-python-git"><a href="#（6）git-remote-add-origin-https-github-com-bluepen-python-git" class="headerlink" title="（6）git remote add origin https://github.com/bluepen/python.git"></a>（6）git remote add origin <a href="https://github.com/bluepen/python.git">https://github.com/bluepen/python.git</a></h4><p>第六步，我们使用git的远程命令将本地仓库中的代码上传至GitHub中，命令就是第六步所示，记得一定要加后面的“.git”，如果遇到如下图所示的的问题没有关系，我们执行以下语句之后，在执行第六步所示的命令即可。<br>git remote rm origin<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190327213808713-1461645969.png" alt=""><br>GitHub的上传路径如图所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190327214347921-789418649.png" alt="路径"></p>
<p>执行完该命令之后，终端不会提示任何任何内容，就表示提交成功了。</p>
<h4 id="（7）git-push-origin-master"><a href="#（7）git-push-origin-master" class="headerlink" title="（7）git push origin master"></a>（7）git push origin master</h4><p>最后一步就是将代码push到GitHub中，如果不执行这一步，代码时不会上传到GitHub中的，代码会停留在一个类似缓冲区中，如果多次执行到第六步，将不同的代码上传至一个类似缓冲区时，如果随后执行第七步的语句话，那么git会一次性将所有的代码都上传至GitHub。<br>在上传的过程中，git会提示输入GitHub账号的用户名和密码，我们正常输入就可以了。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190327214647551-1609392178.png" alt="输入密码"></p>
<p>执行完毕之后，终端会提示上传完毕，如下图所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190327215117661-519790211.png" alt="执行完毕"></p>
<h4 id="（8）查看GitHub"><a href="#（8）查看GitHub" class="headerlink" title="（8）查看GitHub"></a>（8）查看GitHub</h4><p>上传完毕之后，我们来查看一下GitHub网站的变化<br>上传之前：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190327215336904-867030622.png" alt="上传之前"><br>上传之后：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1212206-20190327215347866-796341061.png" alt="上传之后"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用github的REST API接口获取github项目数据</title>
    <url>/how-to-use-github-API/</url>
    <content><![CDATA[<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Python使用命令行参数的用法</title>
    <url>/how-to-use-python-command-param/</url>
    <content><![CDATA[<h3 id="方法一（sys）"><a href="#方法一（sys）" class="headerlink" title="方法一（sys）"></a>方法一（<code>sys</code>）</h3><p>直接看代码： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python    </span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-     </span></span><br><span class="line"><span class="keyword">import</span> sys    </span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;参数个数为:&#x27;</span>, <span class="built_in">len</span>(sys.argv), <span class="string">&#x27;个参数。&#x27;</span>)    </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;参数列表:&#x27;</span>, <span class="built_in">str</span>(sys.argv))    </span><br></pre></td></tr></table></figure>

<p>运行结果：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191228112401.png" alt="方法一运行结果">    </p>
<h3 id="方法二（argparse）"><a href="#方法二（argparse）" class="headerlink" title="方法二（argparse）"></a>方法二（<code>argparse</code>）</h3><p>还是一样，直接看代码：    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&quot;给Markdown文件中的每一行末尾，添加三个空格和换行符&quot;</span>)    </span><br><span class="line">parser.add_argument(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--filename&quot;</span>, default=<span class="literal">None</span>)    </span><br><span class="line">args = parser.parse_args()    </span><br><span class="line">filename = args.filename    </span><br><span class="line"><span class="built_in">print</span>(filename)    </span><br></pre></td></tr></table></figure>

<p>运行结果：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191228112638.png" alt="方法二运行结果">    </p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>program language</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python使用命令行参数的用法</title>
    <url>/how-to-use-setuptools/</url>
    <content><![CDATA[<h3 id="方法一（sys）"><a href="#方法一（sys）" class="headerlink" title="方法一（sys）"></a>方法一（<code>sys</code>）</h3><p>直接看代码： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python    </span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-     </span></span><br><span class="line"><span class="keyword">import</span> sys    </span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;参数个数为:&#x27;</span>, <span class="built_in">len</span>(sys.argv), <span class="string">&#x27;个参数。&#x27;</span>)    </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;参数列表:&#x27;</span>, <span class="built_in">str</span>(sys.argv))    </span><br></pre></td></tr></table></figure>

<p>运行结果：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191228112401.png" alt="方法一运行结果">    </p>
<h3 id="方法二（argparse）"><a href="#方法二（argparse）" class="headerlink" title="方法二（argparse）"></a>方法二（<code>argparse</code>）</h3><p>还是一样，直接看代码：    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&quot;给Markdown文件中的每一行末尾，添加三个空格和换行符&quot;</span>)    </span><br><span class="line">parser.add_argument(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--filename&quot;</span>, default=<span class="literal">None</span>)    </span><br><span class="line">args = parser.parse_args()    </span><br><span class="line">filename = args.filename    </span><br><span class="line"><span class="built_in">print</span>(filename)    </span><br></pre></td></tr></table></figure>

<p>运行结果：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191228112638.png" alt="方法二运行结果">    </p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>program language</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用readthedoc.org编写属于自己的说明文档</title>
    <url>/how-to-write-a-document-for-your-project/</url>
    <content><![CDATA[<h3 id="1-网站"><a href="#1-网站" class="headerlink" title="1 网站"></a>1 网站</h3><p>访问<a href="https://readthedocs.org/">https://readthedocs.org/</a>使用<code>github</code>进行登录，然后倒入自己需要撰写说明文档的项目。如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200302133939.png" alt="import project">   </p>
<h3 id="2-创建index-rst-or-README-rst文件"><a href="#2-创建index-rst-or-README-rst文件" class="headerlink" title="2 创建index.rst or README.rst文件"></a>2 创建index.rst or README.rst文件</h3><p>在自己的<code>github</code>项目中，创建你的说明文件，里面放的是你的说明文档的内容，将文件命名为<code>index.rst</code>or<code>README.rst</code>即可。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用readthedoc.org编写属于自己的说明文档</title>
    <url>/html-lunfan-effect/</url>
    <content><![CDATA[<h3 id="1-网站"><a href="#1-网站" class="headerlink" title="1 网站"></a>1 网站</h3><p>访问<a href="https://readthedocs.org/">https://readthedocs.org/</a>使用<code>github</code>进行登录，然后倒入自己需要撰写说明文档的项目。如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200302133939.png" alt="import project">   </p>
<h3 id="2-创建index-rst-or-README-rst文件"><a href="#2-创建index-rst-or-README-rst文件" class="headerlink" title="2 创建index.rst or README.rst文件"></a>2 创建index.rst or README.rst文件</h3><p>在自己的<code>github</code>项目中，创建你的说明文件，里面放的是你的说明文档的内容，将文件命名为<code>index.rst</code>or<code>README.rst</code>即可。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>http和https协议的区别？</title>
    <url>/http-and-https/</url>
    <content><![CDATA[<h2 id="1-HTTP-和-HTTPS-的区别？"><a href="#1-HTTP-和-HTTPS-的区别？" class="headerlink" title="1 $HTTP$和$HTTPS$的区别？"></a>1 $HTTP$和$HTTPS$的区别？</h2><iframe src="//player.bilibili.com/player.html?aid=625049023&bvid=BV1rt4y1m7o5&cid=172240093&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<p><a href="https://blog.csdn.net/xionghuixionghui/article/details/68569282">reference</a></p>
<p>超文本传输协议HTTP协议被用于在Web浏览器和网站服务器之间传递信息，HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</p>
<p>为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS，为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</p>
<h3 id="一、HTTP和HTTPS的基本概念"><a href="#一、HTTP和HTTPS的基本概念" class="headerlink" title="一、HTTP和HTTPS的基本概念"></a><strong>一、HTTP和HTTPS的基本概念</strong></h3><p>HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p>
<p>HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>
<p>HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p>
<h3 id="二、HTTP与HTTPS有什么区别？"><a href="#二、HTTP与HTTPS有什么区别？" class="headerlink" title="二、HTTP与HTTPS有什么区别？"></a><strong>二、HTTP与HTTPS有什么区别？</strong></h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1866628594-5e11d64f42c8e_fix732.png" alt=""></p>
<p>HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。</p>
<p>简单来说，HTTPS协议是由SSL+HTTP协议构建的可进行<strong>加密传输</strong>、<strong>身份认证的网络协议</strong>，要比http协议安全。</p>
<p>HTTPS和HTTP的区别主要如下：</p>
<p>1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p>
<p>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p>
<p>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>
<p>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p>
<h3 id="三、HTTPS的工作原理"><a href="#三、HTTPS的工作原理" class="headerlink" title="三、HTTPS的工作原理"></a><strong>三、HTTPS的工作原理</strong></h3><p>我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。</p>
<h4 id="1、客户端发起HTTPS请求"><a href="#1、客户端发起HTTPS请求" class="headerlink" title="1、客户端发起HTTPS请求"></a><strong>1、客户端发起HTTPS请求</strong></h4><p>这个没什么好说的，就是用户在浏览器里输入一个https网址，然后连接到server的443端口。</p>
<h4 id="2、服务端的配置"><a href="#2、服务端的配置" class="headerlink" title="2、服务端的配置"></a><strong>2、服务端的配置</strong></h4><p>采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请，区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl就是个不错的选择，有1年的免费服务)。</p>
<p>这套证书其实就是一对公钥和私钥，如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。</p>
<h4 id="3、传送证书"><a href="#3、传送证书" class="headerlink" title="3、传送证书"></a><strong>3、传送证书</strong></h4><p>这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。</p>
<h4 id="4、客户端解析证书"><a href="#4、客户端解析证书" class="headerlink" title="4、客户端解析证书"></a><strong>4、客户端解析证书</strong></h4><p>这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。</p>
<p>如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密，就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。</p>
<h4 id="5、传送加密信息"><a href="#5、传送加密信息" class="headerlink" title="5、传送加密信息"></a><strong>5、传送加密信息</strong></h4><p>这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。</p>
<h4 id="6、服务端解密信息"><a href="#6、服务端解密信息" class="headerlink" title="6、服务端解密信息"></a><strong>6、服务端解密信息</strong></h4><p>服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密，所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。</p>
<h4 id="7、传输加密后的信息"><a href="#7、传输加密后的信息" class="headerlink" title="7、传输加密后的信息"></a><strong>7、传输加密后的信息</strong></h4><p>这部分信息是服务端用私钥加密后的信息，可以在客户端被还原。</p>
<h4 id="8、客户端解密信息"><a href="#8、客户端解密信息" class="headerlink" title="8、客户端解密信息"></a><strong>8、客户端解密信息</strong></h4><p>客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容，整个过程第三方即使监听到了数据，也束手无策。</p>
<h3 id="四、HTTPS的优点"><a href="#四、HTTPS的优点" class="headerlink" title="四、HTTPS的优点"></a>四、HTTPS的优点</h3><p>正是由于HTTPS非常的安全，攻击者无法从中找到下手的地方，从站长的角度来说，HTTPS的优点有以下2点：</p>
<h4 id="1、SEO方面"><a href="#1、SEO方面" class="headerlink" title="1、SEO方面"></a><strong>1、SEO方面</strong></h4><p>谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</p>
<h4 id="2、安全性"><a href="#2、安全性" class="headerlink" title="2、安全性"></a><strong>2、安全性</strong></h4><p>尽管HTTPS并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，主要有以下几个好处：</p>
<p>（1）、使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p>
<p>（2）、HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p>
<p>（3）、HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p>
<h3 id="五-TPS的缺点"><a href="#五-TPS的缺点" class="headerlink" title="五 TPS的缺点"></a>五 TPS的缺点</h3><p>虽然说HTTPS有很大的优势，但其相对来说，还是有些不足之处的，具体来说，有以下2点：</p>
<h4 id="1、SEO方面-1"><a href="#1、SEO方面-1" class="headerlink" title="1、SEO方面"></a><strong>1、SEO方面</strong></h4><p>据ACM CoNEXT数据显示，使用HTTPS协议会使页面的加载时间延长近50%，增加10%到20%的耗电，此外，HTTPS协议还会影响缓存，增加数据开销和功耗，甚至已有安全措施也会受到影响也会因此而受到影响。</p>
<p>而且HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。</p>
<p>最关键的，SSL证书的信用链体系并不安全</p>
<h4 id="2、经济方面"><a href="#2、经济方面" class="headerlink" title="2、经济方面"></a><strong>2、经济方面</strong></h4><p>（1）、SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</p>
<p>（2）、SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗（SSL有扩展可以部分解决这个问题，但是比较麻烦，而且要求浏览器、操作系统支持，Windows XP就不支持这个扩展，考虑到XP的装机量，这个特性几乎没用）。</p>
<p>（3）、HTTPS连接缓存不如HTTP高效，大流量网站如非必要也不会采用，流量成本太高。</p>
<p>（4）、HTTPS连接服务器端资源占用高很多，支持访客稍多的网站需要投入更大的成本，如果全部采用HTTPS，基于大部分计算资源闲置的假设的VPS的平均成本会上去。</p>
<p>（5）、HTTPS协议握手阶段比较费时，对网站的相应速度有负面影响，如非必要，没有理由牺牲用户体验。</p>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://segmentfault.com/a/1190000021494676">HTTPS 详解一：附带最精美详尽的 HTTPS 原理图</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>java interview</tag>
        <tag>computer network</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP请求的常见错误代码</title>
    <url>/http-error-code/</url>
    <content><![CDATA[<h2 id="1-消息"><a href="#1-消息" class="headerlink" title="1**-消息"></a>1**-消息</h2><blockquote>
<p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。这些状态码代表的响应都是信息性的，标示客户应该等待服务器采取进一步行动。</p>
</blockquote>
<ul>
<li><p><strong>100 Continue</strong>：服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送<code>Expect: 100-continue</code>作为头部，并在发送正文之前接收<code>100 Continue</code>状态代码。响应代码417期望失败表示请求不应继续。</p>
</li>
<li><p><strong>101 Switching Protocols</strong>：服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。</p>
<p>只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本（如<a href="https://zh.wikipedia.org/wiki/HTTP/2">HTTP/2</a>）比旧版本更有优势，或者切换到一个实时且同步的协议（如<a href="https://zh.wikipedia.org/wiki/WebSocket">WebSocket</a>）以传送利用此类特性的资源。</p>
</li>
<li><p><strong>102 Processing</strong>：WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示服务器已经收到并正在处理请求，但无响应可用。这样可以防止客户端超时，并假设请求丢失。</p>
</li>
<li><p><strong>103 Early Hints</strong>：用来在最终的HTTP消息之前返回一些响应头。</p>
</li>
</ul>
<h2 id="2-成功"><a href="#2-成功" class="headerlink" title="2**-成功"></a>2**-成功</h2><blockquote>
<p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p>
</blockquote>
<ul>
<li><strong>200 OK</strong>：请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</li>
<li><strong>201 Created</strong>：请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其<a href="https://zh.wikipedia.org/wiki/URI">URI</a>已经随Location头信息返回。假如需要的资源无法及时创建的话，应当返回’<a href="https://zh.wikipedia.org/wiki/HTTP状态码#202">202 Accepted</a>‘。</li>
<li><strong>202 Accepted</strong>：服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止。</li>
<li><strong>203 Non-Authoritative Information（自HTTP / 1.1起）</strong>：服务器是一个转换代理服务器（transforming proxy，例如<a href="https://zh.wikipedia.org/wiki/網絡加速器">网络加速器</a>），以<code>200 OK</code>状态码为起源，但回应了原始响应的修改版本。</li>
<li><strong>204 No Content</strong>：服务器成功处理了请求，没有返回任何内容。<a href="https://zh.wikipedia.org/wiki/HTTP状态码#cite_note-11">[11]</a>在<a href="https://zh.wikipedia.org/wiki/强制门户">强制门户</a>功能中，Wifi设备连接到需要进行Web认证的Wifi接入点时，通过访问一个能生成HTTP 204响应的的网站，如果能正常收到204响应，则代表无需Web认证，否则会弹出网页浏览器界面，显示出Web网页认证界面用于让用户认证登录。</li>
<li><strong>205 Reset Content</strong>：服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。</li>
<li><strong>206 Partial Content（</strong><a href="https://tools.ietf.org/html/rfc7233">RFC 7233</a><strong>）</strong>：服务器已经成功处理了部分GET请求。类似于<a href="https://zh.wikipedia.org/wiki/FlashGet">FlashGet</a>或者<a href="https://zh.wikipedia.org/wiki/迅雷">迅雷</a>这类的HTTP<a href="https://zh.wikipedia.org/wiki/Category:下載工具">下载工具</a>都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</li>
<li><strong>207 Multi-Status（WebDAV；</strong><a href="https://tools.ietf.org/html/rfc4918">RFC 4918</a><strong>）</strong>：代表之后的消息体将是一个<a href="https://zh.wikipedia.org/wiki/XML">XML</a>消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</li>
<li><strong>208 Already Reported （WebDAV；</strong><a href="https://tools.ietf.org/html/rfc5842">RFC 5842</a><strong>）</strong>：DAV绑定的成员已经在（多状态）响应之前的部分被列举，且未被再次包含。</li>
<li><strong>226 IM Used （</strong><a href="https://tools.ietf.org/html/rfc3229">RFC 3229</a><strong>）</strong>：服务器已经满足了对资源的请求，对实体请求的一个或多个实体操作的结果表示。</li>
</ul>
<h2 id="3-重定向"><a href="#3-重定向" class="headerlink" title="3**-重定向"></a>3**-重定向</h2><blockquote>
<p>这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。</p>
<p>当且仅当后续的请求所使用的方法是GET或者HEAD时，用户<a href="https://zh.wikipedia.org/wiki/浏览器">浏览器</a>才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测<a href="https://zh.wikipedia.org/wiki/死循環">无限循环</a>重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。</p>
</blockquote>
<ul>
<li><p><strong>300 Multiple Choices</strong>：</p>
<ul>
<li><p>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</p>
</li>
<li><p>除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。</p>
</li>
<li><p>如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的<a href="https://zh.wikipedia.org/wiki/URI">URI</a>；浏览器可能会将这个Location值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p>
</li>
</ul>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/HTTP_301">301 Moved Permanently</a>：</p>
<ul>
<li><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。<a href="https://zh.wikipedia.org/wiki/HTTP状态码#cite_note-18">[18]</a>除非额外指定，否则这个响应也是可缓存的。</p>
</li>
<li><p>新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的<a href="https://zh.wikipedia.org/wiki/超链接">超链接</a>及简短说明。</p>
</li>
<li><p>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>
</li>
<li><p><strong>注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</strong></p>
</li>
</ul>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/HTTP_302">302 Found</a>：</p>
<ul>
<li><p>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p>
</li>
<li><p>新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p>
</li>
<li><p>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>
</li>
<li><p><strong>注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为<a href="https://zh.wikipedia.org/wiki/HTTP状态码#303">303响应</a>，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。](<a href="https://zh.wikipedia.org/wiki/HTTP状态码#cite_note-ruby-on-rails-ActionController-Redirecting-redirect_to-20)因此状态码303和[307](https://zh.wikipedia.org/wiki/HTTP状态码#307)被添加了进来，用以明确服务器期待客户端进行何种反应。">https://zh.wikipedia.org/wiki/HTTP状态码#cite_note-ruby-on-rails-ActionController-Redirecting-redirect_to-20)因此状态码303和[307](https://zh.wikipedia.org/wiki/HTTP状态码#307)被添加了进来，用以明确服务器期待客户端进行何种反应。</a></strong></p>
</li>
</ul>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/HTTP_303">303 See Other</a>：</p>
<ul>
<li><p>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。</p>
</li>
<li><p>新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。</p>
</li>
<li><p><strong>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，<a href="https://zh.wikipedia.org/wiki/HTTP状态码#302">302状态码</a>应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</strong></p>
</li>
</ul>
</li>
<li><p><strong>304 Not Modified</strong>：表示资源在由请求头中的If-Modified-Since或If-None-Match参数指定的这一版本之后，未曾被修改。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p>
</li>
<li><p><strong>305 Use Proxy</strong>：</p>
<ul>
<li><p>被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能创建305响应。许多HTTP客户端（像是<a href="https://zh.wikipedia.org/wiki/Mozilla">Mozilla</a>和<a href="https://zh.wikipedia.org/wiki/Internet_Explorer">Internet Explorer</a>）都没有正确处理这种状态代码的响应，主要是出于安全考虑。</p>
</li>
<li><p><strong>注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器创建。忽视这些限制可能导致严重的安全后果。</strong></p>
</li>
</ul>
</li>
<li><p><strong>306 Switch Proxy</strong>：在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。</p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/HTTP_307">307 Temporary Redirect</a>：在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。</p>
</li>
<li><p><strong>308 Permanent Redirect (</strong><a href="https://tools.ietf.org/html/rfc7538">RFC 7538</a><strong>)</strong>：请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。</p>
</li>
</ul>
<h2 id="4-客户端错误"><a href="#4-客户端错误" class="headerlink" title="4**-客户端错误"></a>4**-客户端错误</h2><blockquote>
<p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p>
<p>如果错误发生时客户端正在传送数据，那么使用<a href="https://zh.wikipedia.org/wiki/传输控制协议">TCP</a>的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的<a href="https://zh.wikipedia.org/wiki/数据包">数据包</a>。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入<a href="https://zh.wikipedia.org/w/index.php?title=缓冲&action=edit&redlink=1">缓冲</a>，以免这些数据被服务器上的<a href="https://zh.wikipedia.org/wiki/应用程序">应用程序</a>读取并干扰后者。</p>
</blockquote>
<ul>
<li><p><strong>400 Bad Request</strong>：由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p>
</li>
<li><p><strong>401 Unauthorized（</strong><a href="https://tools.ietf.org/html/rfc7235">RFC 7235</a><strong>）</strong>：</p>
<p>类似于403 Forbidden，401语义即“<a href="https://zh.wikipedia.org/wiki/身份验证">未认证</a>”，即用户没有必要的凭据。<a href="https://zh.wikipedia.org/wiki/HTTP状态码#cite_note-rfc7235-401-31">[31]</a>该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。<a href="https://zh.wikipedia.org/wiki/HTTP状态码#cite_note-32">[32]</a>如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</p>
<p>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。</p>
</li>
<li><p><strong>402 Payment Required</strong>：该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。如果特定开发人员已超过请求的每日限制，<a href="https://zh.wikipedia.org/wiki/Google_Developers">Google Developers</a> API会使用此状态码。</p>
</li>
<li><p><strong>403</strong>：403状态码意为服务器成功解析请求但是客户端没有访问该资源的权限。服务器已经理解请求，但是拒绝执行它。与<a href="https://zh.wikipedia.org/wiki/HTTP状态码#401">401响应</a>不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个<a href="https://zh.wikipedia.org/wiki/HTTP状态码#404">404响应</a>，假如它不希望让客户端获得任何信息。</p>
</li>
<li><p><strong>404</strong>：</p>
<ul>
<li>此消息代表客户端在浏览网页时，服务器无法正常提供消息，或是服务器无法回应且不知原因。通常是因为用户所访问的对应网页已被<a href="https://zh.wikipedia.org/wiki/失效連結">删除</a>、移动或从未存在。404也是互联网上最常见的错误之一。404错误消息可能与“server not found”（无法找到服务器）或其他类似消息产生混淆。</li>
<li>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。<a href="https://zh.wikipedia.org/wiki/HTTP状态码#cite_note-34">[34]</a>没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用<a href="https://zh.wikipedia.org/wiki/HTTP状态码#410">410状态码</a>来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</li>
</ul>
</li>
<li><p><strong>405 Method Not Allowed</strong>：</p>
<ul>
<li><p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表。例如，需要通过POST呈现数据的表单上的GET请求，或只读资源上的PUT请求。</p>
</li>
<li><p>鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的<a href="https://zh.wikipedia.org/wiki/网页服务器">网页服务器</a>都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p>
</li>
</ul>
</li>
<li><p><strong>406 Not Acceptable</strong>：（参见：<a href="https://zh.wikipedia.org/wiki/内容协商">内容协商</a>），请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。除非这是一个HEAD请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址栏表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p>
</li>
<li><p><strong>407 Proxy Authentication Required（</strong><a href="https://tools.ietf.org/html/rfc2617">RFC 2617</a><strong>）</strong>：与<a href="https://zh.wikipedia.org/wiki/HTTP状态码#401">401响应</a>类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。</p>
</li>
<li><p><strong>408 Request Timeout</strong>：请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。</p>
</li>
<li><p><strong>409 Conflict</strong>：表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的<a href="https://zh.wikipedia.org/w/index.php?title=编辑冲突&action=edit&redlink=1">编辑冲突</a>。</p>
</li>
<li><p><strong>410 Gone</strong>：表示所请求的资源不再可用，将不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用<a href="https://zh.wikipedia.org/wiki/HTTP状态码#404">404状态码</a>。</p>
</li>
<li><p><strong>411 Length Required</strong>：服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求。</p>
</li>
<li><p><strong>412 Precondition Failed（</strong><a href="https://tools.ietf.org/html/rfc7232">RFC 7232</a><strong>）</strong>：服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p>
</li>
<li><p><strong>413 Request Entity Too Large（</strong><a href="https://tools.ietf.org/html/rfc7231">RFC 7231</a><strong>）</strong>：前称“Request Entity Too Large”，表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。如果这个状况是临时的，服务器应当返回一个Retry-After的响应头，以告知客户端可以在多少时间以后重新尝试。</p>
</li>
<li><p><strong>414 Request-URI Too Long（</strong><a href="https://tools.ietf.org/html/rfc7231">RFC 7231</a><strong>）</strong>：前称“Request-URI Too Long”，表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。<a href="https://zh.wikipedia.org/wiki/HTTP状态码#cite_note-43)这比较少见，通常的情况包括：">https://zh.wikipedia.org/wiki/HTTP状态码#cite_note-43)这比较少见，通常的情况包括：</a></p>
<ul>
<li>本应使用POST方法的表单提交变成了GET方法，导致<a href="https://zh.wikipedia.org/w/index.php?title=查询字符串&action=edit&redlink=1">查询字符串</a>过长。</li>
<li>重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。</li>
<li>客户端正在尝试利用某些服务器中存在的<a href="https://zh.wikipedia.org/wiki/安全漏洞">安全漏洞</a>攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回414状态码。</li>
</ul>
</li>
<li><p><strong>415 Unsupported Media Type</strong>：对于当前请求的方法和所请求的资源，请求中提交的<a href="https://zh.wikipedia.org/wiki/互联网媒体类型">互联网媒体类型</a>并不是服务器中所支持的格式，因此请求被拒绝。例如，客户端将图像上传格式为svg，但服务器要求图像使用上传格式为jpg。</p>
</li>
<li><p><strong>416 Requested Range Not Satisfiable（</strong><a href="https://tools.ietf.org/html/rfc7233">RFC 7233</a><strong>）</strong>：前称“Requested Range Not Satisfiable”。客户端已经要求文件的一部分（<a href="https://zh.wikipedia.org/w/index.php?title=Byte_serving&action=edit&redlink=1">Byte serving</a>），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。</p>
</li>
<li><p><strong>417 Expectation Failed</strong>：在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前<a href="https://zh.wikipedia.org/wiki/路由">路由</a>的下一个节点上，Expect的内容无法被满足。</p>
</li>
<li><p><strong>418 I’m a teapot（</strong><a href="https://tools.ietf.org/html/rfc2324">RFC 2324</a><strong>）</strong>：本操作码是在1998年作为<a href="https://zh.wikipedia.org/wiki/IETF">IETF</a>的传统<a href="https://zh.wikipedia.org/wiki/惡搞RFC">愚人节笑话</a>, 在RFC 2324<a href="https://zh.wikipedia.org/wiki/超文本咖啡壶控制协议">超文本咖啡壶控制协议</a>‘中定义的，并不需要在真实的HTTP服务器中定义。当一个控制茶壶的<a href="https://zh.wikipedia.org/wiki/HTCPCP">HTCPCP</a>收到BREW或POST指令要求其煮咖啡时应当回传此错误。这个HTTP状态码在某些网站（包括Google.com）与项目（如<a href="https://zh.wikipedia.org/wiki/Node.js">Node.js</a>、<a href="https://zh.wikipedia.org/wiki/ASP.NET">ASP.NET</a>和<a href="https://zh.wikipedia.org/wiki/Go语言">Go语言</a>）中用作<a href="https://zh.wikipedia.org/wiki/彩蛋_(媒体)">彩蛋</a>。</p>
</li>
<li><p><strong>421 Misdirected Request （</strong><a href="https://tools.ietf.org/html/rfc7540">RFC 7540</a><strong>）</strong>：该请求针对的是无法产生响应的服务器（例如因为连接重用）。</p>
</li>
<li><p><strong>422 Unprocessable Entity（</strong><a href="https://zh.wikipedia.org/wiki/WebDAV">WebDAV</a><strong>；</strong><a href="https://tools.ietf.org/html/rfc4918">RFC 4918</a> <strong>）</strong>：请求格式正确，但是由于含有<a href="https://zh.wikipedia.org/wiki/语义">语义</a>错误，无法响应。</p>
</li>
<li><p><strong>423 Locked（</strong><a href="https://zh.wikipedia.org/wiki/WebDAV">WebDAV</a><strong>；</strong><a href="https://tools.ietf.org/html/rfc4918">RFC 4918</a><strong>）</strong>：当前资源被锁定。</p>
</li>
<li><p><strong>424 Failed Dependency（</strong><a href="https://zh.wikipedia.org/wiki/WebDAV">WebDAV</a><strong>；</strong><a href="https://tools.ietf.org/html/rfc4918">RFC 4918</a><strong>）</strong>：由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH。</p>
</li>
<li><p><strong>425 Too Early (</strong><a href="https://tools.ietf.org/html/rfc8470">RFC 8470</a><strong>)</strong>：服务器拒绝处理在Early Data中的请求，以规避可能的<a href="https://zh.wikipedia.org/wiki/重放攻击">重放攻击</a>。</p>
</li>
<li><p><strong>426 Upgrade Required（</strong><a href="https://tools.ietf.org/html/rfc2817">RFC 2817</a><strong>）</strong>：客户端应切换到<a href="https://zh.wikipedia.org/w/index.php?title=Upgrade头字段&action=edit&redlink=1">Upgrade头字段</a>中给出的不同协议，如<a href="https://zh.wikipedia.org/wiki/传输层安全">TLS/1.0</a>。</p>
</li>
<li><p><strong>428 Precondition Required (</strong><a href="https://tools.ietf.org/html/rfc6585">RFC 6585</a><strong>)</strong>：原服务器要求该请求满足一定条件。这是为了防止“未更新”问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。”</p>
</li>
<li><p><strong>429 Too Many Requests （</strong><a href="https://tools.ietf.org/html/rfc6585">RFC 6585</a><strong>）</strong>：用户在给定的时间内发送了太多的请求。旨在用于<a href="https://zh.wikipedia.org/w/index.php?title=网络限速&action=edit&redlink=1">网络限速</a>。</p>
</li>
<li><p><strong>431 Request Header Fields Too Large （</strong><a href="https://tools.ietf.org/html/rfc6585">RFC 6585</a><strong>）</strong>：服务器不愿处理请求，因为一个或多个头字段过大。</p>
</li>
<li><p><strong>451 Unavailable For Legal Reasons</strong>：该访问因<a href="https://zh.wikipedia.org/wiki/法律">法律</a>的要求而被拒绝，由<a href="https://zh.wikipedia.org/wiki/IETF">IETF</a>在2015核准后新增加。</p>
</li>
</ul>
<h2 id="5-服务器错误"><a href="#5-服务器错误" class="headerlink" title="5**-服务器错误"></a>5**-服务器错误</h2><blockquote>
<p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。</p>
</blockquote>
<ul>
<li><p><strong>500 Internal Server Error</strong>：通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p>
</li>
<li><p><strong>501 Not Implemented</strong>：服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务API的新功能）</p>
</li>
<li><p><strong>502 Bad Gateway</strong>：作为<a href="https://zh.wikipedia.org/wiki/网关">网关</a>或者<a href="https://zh.wikipedia.org/wiki/代理服务器">代理</a>工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p>
</li>
<li><p><strong>503 Service Unavailable</strong>：由于临时的服务器维护或者<a href="https://zh.wikipedia.org/wiki/過載">过载</a>，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理<a href="https://zh.wikipedia.org/w/index.php?title=500_Internal_Error&action=edit&redlink=1">500响应</a>的方式处理它。。服务器不可访问时给客户端的一种状态</p>
</li>
<li><p><strong>504 Gateway Timeout</strong>：作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如<a href="https://zh.wikipedia.org/wiki/HTTP">HTTP</a>、<a href="https://zh.wikipedia.org/wiki/FTP">FTP</a>、<a href="https://zh.wikipedia.org/wiki/LDAP">LDAP</a>）或者辅助服务器（例如<a href="https://zh.wikipedia.org/wiki/DNS">DNS</a>）收到响应。<strong>注意：某些代理服务器在DNS查询<a href="https://zh.wikipedia.org/w/index.php?title=超时&action=edit&redlink=1">超时</a>时会返回<a href="https://zh.wikipedia.org/wiki/HTTP状态码#400">400</a>或者<a href="https://zh.wikipedia.org/wiki/HTTP状态码#500">500</a>错误</strong></p>
</li>
<li><p><strong>505 HTTP Version Not Supported</strong>：服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p>
</li>
<li><p><strong>506 Variant Also Negotiates（</strong><a href="https://tools.ietf.org/html/rfc2295">RFC 2295</a><strong>）</strong>：由《透明内容协商协议》（<a href="https://tools.ietf.org/html/rfc2295">RFC 2295</a>）扩展，代表服务器存在内部配置错误，被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</p>
</li>
<li><p><strong>507 Insufficient Storage（</strong><a href="https://zh.wikipedia.org/wiki/WebDAV">WebDAV</a><strong>；</strong><a href="https://tools.ietf.org/html/rfc4918">RFC 4918</a><strong>）</strong>：服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。</p>
</li>
<li><p><strong>508 Loop Detected （</strong><a href="https://zh.wikipedia.org/wiki/WebDAV">WebDAV</a><strong>；</strong><a href="https://tools.ietf.org/html/rfc5842">RFC 5842</a><strong>）</strong>：服务器在处理请求时陷入死循环。 （可代替 <a href="https://zh.wikipedia.org/wiki/HTTP状态码#208">208状态码</a>）</p>
</li>
<li><p><strong>510 Not Extended（</strong><a href="https://tools.ietf.org/html/rfc2774">RFC 2774</a><strong>）</strong>：获取资源所需要的策略并没有被满足。</p>
</li>
<li><p><strong>511 Network Authentication Required （</strong><a href="https://tools.ietf.org/html/rfc6585">RFC 6585</a><strong>）</strong>：客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接<a href="https://zh.wikipedia.org/wiki/热点_(Wi-Fi)">WiFi热点</a>时的<a href="https://zh.wikipedia.org/wiki/强制门户">强制网络门户</a>）</p>
</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">HTTP状态码 of wikipeida</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>computer network</tag>
      </tags>
  </entry>
  <entry>
    <title>https原理解析</title>
    <url>/https-theory/</url>
    <content><![CDATA[<p>HTTP协议是一种不安全的传输协议，所有数据在传输过程都是明文传输，很容易被第三方截获，造成数据不安全。</p>
<p>HTTPS使用混合加密协议对数据进行加密，即对称加密和非对称加密：</p>
<p>对称加密和非对称加密的优缺点：</p>
<ul>
<li>对称加密的加密和解密的速度快，效率高；非对称加密算法的加密和解密的速度满，效率低</li>
<li>对称加密算法的加密和解密都是用的同一个密钥，密钥的传输成本较高；非对称加密算法的加密和解密采用的是不同的密钥，一个公钥一个私钥，公钥可以对外公开，密钥传输的成本较低。</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/bVbClUj.png" alt="https://jums.club/images/article2/bVbClUj.png"></p>
<blockquote>
<p><strong>Hypertext Transfer Protocol Secure</strong> (<strong>HTTPS</strong>) is an extension of the <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">Hypertext Transfer Protocol</a> (HTTP). It is used for <a href="https://en.wikipedia.org/wiki/Secure_communications">secure communication</a> over a <a href="https://en.wikipedia.org/wiki/Network_operating_system">computer network</a>, and is widely used on the Internet.<a href="https://en.wikipedia.org/wiki/HTTPS#cite_note-1">[1]</a><a href="https://en.wikipedia.org/wiki/HTTPS#cite_note-2">[2]</a> In HTTPS, the <a href="https://en.wikipedia.org/wiki/Communication_protocol">communication protocol</a> is encrypted using <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">Transport Layer Security</a> (TLS) or, formerly, Secure Sockets Layer (SSL). The protocol is therefore also referred to as <strong>HTTP over TLS</strong>,<a href="https://en.wikipedia.org/wiki/HTTPS#cite_note-3">[3]</a> or <strong>HTTP over SSL</strong>.</p>
<p>The principal motivations for HTTPS are <a href="https://en.wikipedia.org/wiki/Authentication">authentication</a> of the accessed <a href="https://en.wikipedia.org/wiki/Website">website</a>, and protection of the <a href="https://en.wikipedia.org/wiki/Information_privacy">privacy</a> and <a href="https://en.wikipedia.org/wiki/Data_integrity">integrity</a> of the exchanged data while in transit. It protects against <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">man-in-the-middle attacks</a>, and the bidirectional <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation">encryption</a> of communications between a client and server protects the communications against <a href="https://en.wikipedia.org/wiki/Eavesdropping">eavesdropping</a> and <a href="https://en.wikipedia.org/wiki/Tamper-evident#Tampering">tampering</a>.<a href="https://en.wikipedia.org/wiki/HTTPS#cite_note-httpse-4">[4]</a><a href="https://en.wikipedia.org/wiki/HTTPS#cite_note-5">[5]</a> The authentication aspect of HTTPS requires a trusted third party to sign server-side <a href="https://en.wikipedia.org/wiki/Public_key_certificate">digital certificates</a>. This was historically an expensive operation, which meant fully authenticated HTTPS connections were usually found only on secured payment transaction services and other secured corporate information systems on the <a href="https://en.wikipedia.org/wiki/World_Wide_Web">World Wide Web</a>. In 2016, a campaign by the <a href="https://en.wikipedia.org/wiki/Electronic_Frontier_Foundation">Electronic Frontier Foundation</a> with the support of web browser developers led to the protocol becoming more prevalent.<a href="https://en.wikipedia.org/wiki/HTTPS#cite_note-6">[6]</a> HTTPS is now used more often by web users than the original non-secure HTTP, primarily to protect page authenticity on all types of websites; secure accounts; and to keep user communications, identity, and web browsing private.<a href="https://en.wikipedia.org/wiki/HTTPS#cite_note-7">[7]</a></p>
</blockquote>
<p><code>HTTPS=HTTP+TLS/SSL</code></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/bVbClUl.png" alt=""></p>
<p>数字正式在HTTPS中相当于非对称加密算法的私钥和公钥的分配这么一个工作。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://segmentfault.com/a/1190000021494676">HTTPS 详解一：附带最精美详尽的 HTTPS 原理图</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>computer network</tag>
      </tags>
  </entry>
  <entry>
    <title>install and run redis on Docker</title>
    <url>/install-and-run-redis-on-docker/</url>
    <content><![CDATA[<h2 id="1-Install-Docker-on-CentOS"><a href="#1-Install-Docker-on-CentOS" class="headerlink" title="1 Install Docker on CentOS"></a>1 Install Docker on CentOS</h2><p>First of all, you should <a href="https://www.docker.com/">docker</a> on your CentOS, jump to the <a href="https://docs.docker.com/engine/install/centos/">official page</a> and learn how to install docker on cent os. </p>
<p>You can run the following commands to install docker on your CentOS.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils   <span class="comment"># pre install</span></span><br><span class="line">$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo  <span class="comment"># pull the repository of docker</span></span><br><span class="line">$ sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-nightly  <span class="comment"># enabke some config</span></span><br><span class="line">$ sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-test     <span class="comment"># enabke some config</span></span><br><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io   <span class="comment"># install it throuth yum</span></span><br></pre></td></tr></table></figure>

<p>After you installed docker, you should test it.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start docker   <span class="comment"># start docker service</span></span><br><span class="line">$ sudo docker run hello-world   <span class="comment"># run hello world test</span></span><br></pre></td></tr></table></figure>

<h2 id="2-Install-Redis-on-docker"><a href="#2-Install-Redis-on-docker" class="headerlink" title="2 Install Redis on docker"></a>2 Install Redis on docker</h2><p>First, use <code>docker search redis</code> to search all the redis version:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker search redis</span><br><span class="line">NAME                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">redis                            Redis is an open <span class="built_in">source</span> key-value store that…   9611      [OK]       </span><br><span class="line">bitnami/redis                    Bitnami Redis Docker Image                      185                  [OK]</span><br><span class="line">sameersbn/redis                                                                  83                   [OK]</span><br><span class="line">grokzen/redis-cluster            Redis cluster 3.0, 3.2, 4.0, 5.0, 6.0, 6.2      78                   </span><br><span class="line">rediscommander/redis-commander   Alpine image <span class="keyword">for</span> redis-commander - Redis man…   60                   [OK]</span><br><span class="line">redislabs/redisearch             Redis With the RedisSearch module pre-loaded…   34                   </span><br><span class="line">redislabs/redis                  Clustered in-memory database engine compatib…   31                   </span><br><span class="line">redislabs/redisinsight           RedisInsight - The GUI <span class="keyword">for</span> Redis                31                   </span><br><span class="line">oliver006/redis_exporter          Prometheus Exporter <span class="keyword">for</span> Redis Metrics. Supp…   28                   </span><br><span class="line">arm32v7/redis                    Redis is an open <span class="built_in">source</span> key-value store that…   24                   </span><br><span class="line">redislabs/rejson                 RedisJSON - Enhanced JSON data <span class="built_in">type</span> processi…   23                   </span><br><span class="line">bitnami/redis-sentinel           Bitnami Docker Image <span class="keyword">for</span> Redis Sentinel         23                   [OK]</span><br><span class="line">redislabs/redisgraph             A graph database module <span class="keyword">for</span> Redis               15                   [OK]</span><br><span class="line">arm64v8/redis                    Redis is an open <span class="built_in">source</span> key-value store that…   13                   </span><br><span class="line">redislabs/redismod               An automated build of redismod - latest Redi…   13                   [OK]</span><br><span class="line">redislabs/rebloom                A probablistic datatypes module <span class="keyword">for</span> Redis       12                   [OK]</span><br><span class="line">webhippie/redis                  Docker images <span class="keyword">for</span> Redis                         11                   [OK]</span><br><span class="line">s7anley/redis-sentinel-docker    Redis Sentinel                                  10                   [OK]</span><br><span class="line">insready/redis-stat              Docker image <span class="keyword">for</span> the real-time Redis monitor…   10                   [OK]</span><br><span class="line">circleci/redis                   CircleCI images <span class="keyword">for</span> Redis                       7                    [OK]</span><br><span class="line">centos/redis-32-centos7          Redis in-memory data structure store, used a…   5                    </span><br><span class="line">clearlinux/redis                 Redis key-value data structure server with t…   3                    </span><br><span class="line">wodby/redis                      Redis container image with orchestration        1                    [OK]</span><br><span class="line">tiredofit/redis                  Redis Server w/ Zabbix monitoring and S6 Ove…   1                    [OK]</span><br><span class="line">xetamus/redis-resource           forked redis-resource                           0                    [OK]</span><br></pre></td></tr></table></figure>

<p>And, install a version of reids, I have installed the official version.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull redis:latest  <span class="comment"># you can install the latest version of redis</span></span><br><span class="line">$ docker images   <span class="comment"># you can use this command to view how many images have been installed on docker</span></span><br></pre></td></tr></table></figure>

<p>And then, create a redis image on docker.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -itd --name redis-test -p 6379:6379 redis</span><br><span class="line">$ docker ps   <span class="comment"># you can view redis version by this command</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">90f9bfe40ae4   redis     <span class="string">&quot;docker-entrypoint.s…&quot;</span>   42 minutes ago   Up 42 minutes   0.0.0.0:6379-&gt;6379/tcp, :::6379-&gt;6379/tcp   redis-test</span><br></pre></td></tr></table></figure>

<p>Finally, you can run redis on docker like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker run -it --name redis-test -d redis bash</span><br></pre></td></tr></table></figure>

<p>Or like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker <span class="built_in">exec</span>/run -it redis-test bash</span><br><span class="line"><span class="comment"># you can also use CONTAINER ID instead of NAMES</span></span><br><span class="line">$ sudo docker <span class="built_in">exec</span>/run -it 90f9bfe40ae4 bash</span><br></pre></td></tr></table></figure>

<p>When you at this step, it’s not means you are started redis successfully, you need run it on a remote host:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ redis -h [ip address or domain address] -p port </span><br><span class="line"><span class="comment"># for example</span></span><br><span class="line">$ redis -h 127.0.0.1 -p 6379</span><br><span class="line">127.0.0.1:6379&gt;   <span class="comment"># when you see this line, it&#x27;s means successful.</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference-Page"><a href="#Reference-Page" class="headerlink" title="Reference Page"></a>Reference Page</h2><p><a href="https://bobcares.com/blog/could-not-connect-to-redis-connection-refused/">Could not connect to redis connection refused – Fix it easily</a></p>
<p><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS</a></p>
<p><a href="https://www.linode.com/docs/guides/install-and-configure-redis-on-centos-7/">Install and Configure Redis on CentOS 7</a></p>
<p><a href="https://www.ionos.com/digitalguide/server/know-how/redis-in-docker-containers/">Using Redis in Docker containers</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>如何写出更优雅的代码</title>
    <url>/hwo-to-write-elegant-code/</url>
    <content><![CDATA[<p><strong>导读：</strong>编程是一门创造性的工作，是一门艺术。我们每天与代码打交道，为什么普通码农辛苦一年只拿十万，而高级架构师年薪百万。最主要的就是我们敲出来的代码有差别，差别在意大部分码农敲出来坏的代码，而高级架构师能敲出优雅的好的代码。我们每天都会敲代码，但当被问道什么是好的优雅的代码时，大家可能会先愣一下，然后给出的回答要么比较空泛，要么比较散，没办法简单明了地概括出来。显然，这个问题并没有唯一的标准答案，谁都可以谈论自己的理解。要成为合格的架构师最基本的要求是能写好的优雅的代码，所以必须要知道什么是优雅代码。这篇文章我来分享一下阿里系高级架构师对于好的优雅代码的理解。<br> <strong>一句话概括</strong></p>
<blockquote>
<p>衡量代码质量的唯一有效标准：WTF/min —— Robert C. Martin</p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/20273755-da97640bdcb1b6a4.png" alt="img"></p>
<p>年薪十万与年薪百万程序员写的代码的区别</p>
<p>Martin（Bob大叔）曾在《代码整洁之道》一书中说：当你的代码在做 Code Review 时，审查者要是愤怒地吼道：“What the fuck, is this shit?”、“Dude, What the fuck！”等言辞激烈的词语，那说明你写的代码是 Bad Code，如果审查者只是漫不经心的吐出几个：“What the fuck?”，那说明你写的是 Good Code。</p>
<p>衡量代码质量的唯一标准就是每分钟骂出“WTF”的频率。</p>
<p>我敢打赌每个人都遇到过这样的情况：过几周或者几个月之后，再看到自己写的代码，感觉一团糟，不禁怀疑人生。</p>
<p>我们自己写的代码，一段时间后自己看尚且如此，更别提拿给别人看了。</p>
<h1 id="一、好的优雅的代码"><a href="#一、好的优雅的代码" class="headerlink" title="一、好的优雅的代码"></a><strong>一、好的优雅的代码</strong></h1><p>我们如何来形容好的优雅的代码？好的优雅的代码一定具备以下特征：</p>
<ul>
<li>精简代码，可读性高</li>
<li>逻辑清晰</li>
<li>高内聚，低耦合</li>
<li>OOP三大特征（封装、继承、多态）</li>
</ul>
<p><strong>1、精简代码，可读性高</strong></p>
<blockquote>
<p>任何一个傻瓜都能写出计算机可以理解的代码。唯有写出人类容易理解的代码，才是优秀的程序员。—— Martin Fowler</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>((!(bucket = findBucket(key))) || !bucket.isOccupied());</span><br></pre></td></tr></table></figure>

<p>上面这行代码虽然比较短，但是难以阅读。为了更好地阅读，我们做如下修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bucket = findBucket(key);</span><br><span class="line"><span class="keyword">if</span>(bucket != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">assert</span>(!bucket.isOccupied());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>减少代码行数是一个好目标，但是让阅读代码的事件最小化是个更好的目标。</p>
<p>但是这些词没有任何指导意义，我准备从最基本的概念入手。</p>
<p>所以，谈到好代码，首先跳入自己脑子里的一个词就是：精简。</p>
<p>好的代码一定是精简的，给阅读的人一种轻松愉快感觉。</p>
<p><strong>2、逻辑清晰</strong></p>
<p><strong>对代码的逻辑层次要有感觉。</strong></p>
<p>比如大体上，一个程序会分三个层次：界面层，逻辑层，数据层。简化后一般也有两个层次：界面和逻辑层。</p>
<p>逻辑层是去掉外表的，内在的，实质的东西。一般来说，就是表现为对数据的一组操作。</p>
<p>而界面层，是关注程序应该如何和用户沟通的。比如可视的视窗，图表，控件等。它是内部逻辑的呈现，也是用户和内部逻辑沟通的桥梁。</p>
<p>区分这两个层次的好处，一个是这两个层次所注重的核心内容有所不同，用到的技巧或者指导方法有所差别。第二点是，可以将问题解构和局部化，减轻开发难度。第三点，有助分开来修改内容，比如界面层挪动一下，改变一下形式，并不需要修改逻辑层的；而逻辑层改进一下算法，也不会影响界面层的代码。</p>
<p>对代码的逻辑层次有感觉，以上的要求只是很基本的，编写代码要时时刻刻对当前代码所代表的逻辑层次要有“感觉”，要能意识到这段代码和上一段代码是否在某种标准下，处在同一个层次。比较经典的范例如：互联网的7层协议，还有操作系统的层次分部等。编写代码要善于归纳这些层次，才能建构一个优美的结构。</p>
<p><strong>3、高内聚低耦合</strong></p>
<p>高内聚低耦合几乎是每个程序员员都会挂在嘴边的，但这个词太过于宽泛，太过于正确，所以聪明的编程人员们提出了若干面向对象设计原则来衡量代码的优劣：</p>
<ul>
<li>开闭原则 OCP (The Open-Close Principle)</li>
<li>单一职责原则 SRP (Single Responsibility Principle)</li>
<li>依赖倒置原则 DIP (Dependence Inversion Principle)</li>
<li>最少知识原则 LKP (Least Knowledge Principle)) / 迪米特法则 (Law Of Demeter)</li>
<li>里氏替换原则 LSP (Liskov Substitution Principle)</li>
<li>接口隔离原则 ISP (Interface Segregation Principle)</li>
<li>组合/聚合复用原则 CARP (Composite/Aggregate Reuse Principle)</li>
</ul>
<p>这些原则想必大家都很熟悉了，是我们编写代码时的指导方针，按照这些原则开发的代码具有高内聚低耦合的特性。换句话说，我们可以用这些原则来衡量代码的优劣。</p>
<p>但这些原则并不是死板的教条，我们也经常会因为其他的权衡（例如可读性、复杂度等）违背或者放弃一些原则。比如子类拥有特性的方法时，我们很可能打破里氏替换原则。再比如，单一职责原则跟接口隔离原则有时候是冲突的，我们通常会舍弃接口隔离原则，保持单一职责。只要打破原则的理由足够充分，也并不见得是坏的代码。</p>
<p><strong>4、OOP三大特征</strong></p>
<p><strong>4.1封装</strong></p>
<p>尽可能隐藏一个模块的实现细节（属性名称，属性是否可变，算法，数据结构，数据类型）</p>
<p>访问控制只是为了防止程序员的无意误用，不打算，也无法防止程序员的故意破坏</p>
<p><strong>4.2继承</strong></p>
<p>继承使用不当会破坏封装，造成信息泄露</p>
<p>先考虑组合，在考虑继承</p>
<p>继承是 <code>behaves-like-a</code>, <code>is-substitutable-for</code> 的关系，不是 <code>is-a</code> 或 <code>is-a-kind-of</code> 的关系</p>
<p><strong>4.3多态</strong></p>
<ul>
<li>相同的实现代码适用不同的场合</li>
<li>不同的实现代码适用相同的场合</li>
</ul>
<h1 id="二、如何判断不是好的代码"><a href="#二、如何判断不是好的代码" class="headerlink" title="二、如何判断不是好的代码"></a><strong>二、如何判断不是好的代码</strong></h1><p>讨论了好代码的必要条件，我们再来看看好代码的否定条件：什么不是好的代码。Kent Beck 使用味道来形容重构的时机，我认为当代码有坏味道的时候，也代表了其并不是好的代码。</p>
<p><strong>代码的坏味道</strong></p>
<p>► 重复</p>
<blockquote>
<p>重复可能是软件中一切邪恶的根源。—— Robert C.Martin</p>
</blockquote>
<p>Martin Fowler 也认为坏味道中首当其冲的就是重复代码。</p>
<p>很多时候，当我们消除了重复代码之后，发现代码就已经比原来整洁多了。</p>
<p>► 函数过长、类过大、参数过长</p>
<p>过长的函数解释能力、共享能力、选择能力都较差，也不易维护。</p>
<p>过大的类代表了类做了很多事情，也常常有过多的重复代码。</p>
<p>参数过长，不易理解，调用时也容易出错。</p>
<p>► 发散式变化、霰弹式修改、依恋情结</p>
<p>如果一个类不是单一职责的，则不同的变化可能都需要修改这个类，说明存在发散式变化，应考虑将不同的变化分离开。</p>
<p>如果某个变化需要修改多个类的方法，则说明存在霰弹式修改，应考虑将这些需要修改的方法放入同一个类。</p>
<p>如果函数对于某个类的兴趣高于了自己所处的类，说明存在依恋情结，应考虑将函数转移到他应有的类中。</p>
<p>► 数据泥团</p>
<p>有时候会发现三四个相同的字段，在多个类和函数中均出现，这时候说明有必要给这一组字段建立一个类，将其封装起来。</p>
<p>► 过多的 <code>if...else</code> 或者使用 <code>switch</code></p>
<p>过多的 <code>if...else</code> 或者 <code>switch</code> ，都应该考虑用多态来替换掉。甚至有些人认为除个别情况外，代码中就不应该存在 if…else 。</p>
<h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>本文首先一句话概括了我认为的好的优雅代码的必要条件：精简，逻辑清晰，高内聚，低耦合，接着具体分析了坏代码的特点，什么样的代码不是好的代码。仅是本人的一些见解，希望对各位以后的编程有些许的帮助。</p>
<p>对于如何保持代码整洁，离不开设计模式和代码重构，多阅读开源社区的代码，比如最近微信开源的<code>MMKV</code>就可以读来学习，像世界同行大佬学习交流如何优雅的写代码，也可以读一些经典的书籍如《代码整洁之道》、《重构改善既有代码的设计》、《重构改善既有代码的设计》等等。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://developer.aliyun.com/article/598076#?utm_content=m_1000007560">代码整洁之道（一）最佳实践小结</a></li>
<li><a href="https://www.jianshu.com/p/c92709a98eda">https://www.jianshu.com/p/c92709a98eda</a></li>
</ul>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux上安装MySQL</title>
    <url>/install-mysql-on-linux/</url>
    <content><![CDATA[<h2 id="1-下载MySQL的Linux版本安装包"><a href="#1-下载MySQL的Linux版本安装包" class="headerlink" title="1 下载MySQL的Linux版本安装包"></a>1 下载MySQL的Linux版本安装包</h2><p>1、进入MySQL的<a href="https://www.mysql.com/downloads/">官网</a>，下载相应的版本。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/3466103699-5ed8f4247b52c_fix732.png" alt=""></p>
<p>2、选择<a href="https://link.segmentfault.com/?url=https%3A%2F%2Fdev.mysql.com%2Fdownloads%2F">MySQL Community (GPL) Downloads »</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/2816185100-5ed8f505e9efd_fix732.png" alt=""></p>
<p>3、选择<a href="https://link.segmentfault.com/?url=https%3A%2F%2Fdev.mysql.com%2Fdownloads%2Frepo%2Fyum%2F">MySQL Yum Repository</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1774290956-5ed8f55ae3432_fix732.png" alt=""></p>
<p>4、选择<strong>Red Hat Enterprise Linux 7 / Oracle Linux 7 (Architecture Independent), RPM Package</strong>，点击DownLoad</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/183236378-5ed8f58ce0b1f_fix732.png" alt=""></p>
<p>5、跳转到登录页面，点击下方<strong><a href="https://link.segmentfault.com/?url=https%3A%2F%2Fdev.mysql.com%2Fget%2Fmysql80-community-release-el7-3.noarch.rpm">No thanks, just start my download.</a></strong></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1892343794-5ed8f5e44cf86_fix732.png" alt=""></p>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h2><ol>
<li><p>首先检查是否安装了MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -qa|grep mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果已经安装，先卸载mysql （下面是卸载mysql的库，防止产生冲突，mysql也是类似卸载方式）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  rpm -e --nodeps mysql-libs-5.1.*</span><br><span class="line">卸载之后，记得：</span><br><span class="line">find / -name mysql</span><br><span class="line">删除查询出来的所有东西</span><br></pre></td></tr></table></figure>
</li>
<li><p>将下载好的rpm文件上传到CentOS服务器上</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/4178251878-5ed8f708abe82_fix732.png" alt=""></p>
</li>
<li><p>本地安装</p>
<ul>
<li>第一步</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum localinstall mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/2677627241-5ed8f746cea1c_fix732.png" alt=""></p>
<ul>
<li>第二步</li>
</ul>
<p>上面安装完成之后，然后执行下面的命令安装MySQL服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install mysql-community-server</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/3121202060-5ed8f7762ebb5_fix732.png" alt=""></p>
</li>
<li><p>安装完毕，启动MySQL服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service mysqld start</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看mysql服务是否启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -ef|grep mysql</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/436550067-5ed8f876c4976_fix732.png" alt=""></p>
</li>
</ol>
<h2 id="3-修改MySQL密码"><a href="#3-修改MySQL密码" class="headerlink" title="3 修改MySQL密码"></a>3 修改MySQL密码</h2><ol>
<li><p>查询MySQL的临时密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/68333165-5ed8fb1fa32d5_fix732.png" alt=""></p>
</li>
<li><p>复制临时密码，然后登录MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p&#123;临时密码&#125;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/2162662767-5ed8fbc0be575_fix732.png" alt=""></p>
</li>
<li><p>修改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;MyNewPass4!&#x27;</span>;</span><br><span class="line">grant all privileges on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;数据库密码&#x27;</span> with grant option;</span><br><span class="line">SET PASSWORD FOR <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> = PASSWORD(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"><span class="comment"># 默认MySQL会有密码复杂度要求，所以先设置一个复杂的，后面在修改密码设置</span></span><br></pre></td></tr></table></figure>

<p>然后刷新权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/3926016665-5ed8fc4a8809c_fix732.png" alt=""></p>
</li>
</ol>
<h2 id="4-创建用户"><a href="#4-创建用户" class="headerlink" title="4 创建用户"></a>4 创建用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create user <span class="string">&#x27;你的用户名&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;你的密码&#x27;</span>;</span><br><span class="line">grant all on *.* to <span class="string">&#x27;你的用户名&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;   <span class="comment"># 刷新权限</span></span><br></pre></td></tr></table></figure>

<h2 id="5-解决-Unknown-system-variable-‘validate-password-policy’"><a href="#5-解决-Unknown-system-variable-‘validate-password-policy’" class="headerlink" title="5 解决 Unknown system variable ‘validate_password_policy’"></a>5 解决 Unknown system variable ‘validate_password_policy’</h2><p>再修改MySQL8密码的时候，会提示密码太简单，不符合规范，可以先设置一个符合要求的密码，然后再修改密码验证规则。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements。 </span><br></pre></td></tr></table></figure>

<p>设置密码成功之后，查看密码验证插件是否安装以及设置的参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#x27;validate_password%&#x27;;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210728145600.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global validate_password.policy=0;</span><br><span class="line">mysql&gt; set global validate_password.length=1;</span><br><span class="line">mysql&gt; set global validate_password.mixed_case_count=0;</span><br><span class="line">mysql&gt; set global validate_password.special_char_count=0;</span><br></pre></td></tr></table></figure>

<h2 id="6-解决LNMP一键包安装后解决MySQL无法远程连接问题"><a href="#6-解决LNMP一键包安装后解决MySQL无法远程连接问题" class="headerlink" title="6 解决LNMP一键包安装后解决MySQL无法远程连接问题"></a>6 解决LNMP一键包安装后解决MySQL无法远程连接问题</h2><p>lnmp一键安装包默认的站点根目录是 /home/wwwroot/defualt，当然你也可以创建虚拟主机，方法参见官网 虚拟主机配置，此处不作多说明。一切安装好后，我在本地用Navicat For Mysql 连接时，居然报错，2003 不能连接MySql服务器”XXXXX”10061）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;your_username&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;your_password&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">mysql&gt;FLUSH PRIVILEGES     //更新权限(也就是更新mysql内置的权限表)</span><br><span class="line">//ON后面第一个*代表对所有数据库执行这个权限修改命令，第二个*代表所有表啦，</span><br><span class="line">//@后面的%代表针对所有外网ip地址赋予可访问权限</span><br><span class="line">&lt;!--下面查看修改成功后的权限--&gt;</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; select user,password,host from user;</span><br></pre></td></tr></table></figure>

<p><strong>Linux防火墙(Mysql的3306端口没有对外开放)为了安全LNMP默认是禁止远程连接的</strong></p>
<ol>
<li><p>查看已有的iptables规则，以序号显示,linux终端输入以下命令：<br><code>iptables -L -n --line-numbers</code></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210820101027.png" alt=""></p>
</li>
<li><p>发现第五条对应的3306端口是Drop(拒接)的，所以我们需要手动开启，输入以下命令开启，linux终端输入以下命令：<br><code>iptables -D INPUT 5</code></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210820101136.png" alt=""></p>
</li>
<li><p>再次测试下，MySQL已经可以远程登录了。</p>
</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://segmentfault.com/a/1190000022843273">https://segmentfault.com/a/1190000022843273</a></li>
<li><a href="https://blog.csdn.net/HaHa_Sir/article/details/80552663">https://blog.csdn.net/HaHa_Sir/article/details/80552663</a></li>
<li><a href="https://blog.csdn.net/kuluzs/article/details/51924374">https://blog.csdn.net/kuluzs/article/details/51924374</a></li>
<li><a href="https://blog.csdn.net/qq_32388977/article/details/79796705">https://blog.csdn.net/qq_32388977/article/details/79796705</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>java中3种for循环遍历集合的方式</title>
    <url>/java-3-type-of-iterator/</url>
    <content><![CDATA[<h3 id="1-For循环方式"><a href="#1-For循环方式" class="headerlink" title="1 For循环方式"></a>1 For循环方式</h3><ol>
<li>最普通的遍历方式，即定义一个下标<code>int i</code>，按照依次递增循环遍历集合。</li>
<li>使用<code>for(数据类型 变量名 : 集合引用名)</code>的方式遍历</li>
<li>集合有一个<code>forEach</code>的方法，可以调用该方法，参数<code>lambda</code>匿名函数进行遍历</li>
</ol>
<h3 id="2-代码示例"><a href="#2-代码示例" class="headerlink" title="2 代码示例"></a>2 代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List aList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        aList.add(<span class="string">&quot;nihao&quot;</span>);</span><br><span class="line">        aList.add(<span class="string">&quot;wohao&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; aList.size(); i++)&#123;</span><br><span class="line">            System.out.println(aList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="keyword">for</span> (Object each : aList)&#123;</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式3</span></span><br><span class="line">        aList.forEach(each-&gt;&#123;</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>nihao<br>wohao<br>nihao<br>wohao<br>nihao<br>wohao   </p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>program language</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 19. 正则表达式匹配</title>
    <url>/is-match/</url>
    <content><![CDATA[<h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1 题目"></a>1 题目</h2><blockquote>
<p>请实现一个函数用来匹配包含’. ‘和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但与”aa.a”和”ab*a”均不匹配。</p>
<p>示例 1:</p>
<p>输入:<br>s = “aa”<br>p = “a”<br>输出: false<br>解释: “a” 无法匹配 “aa” 整个字符串。<br>示例 2:</p>
<p>输入:<br>s = “aa”<br>p = “a*”<br>输出: true<br>解释: 因为 ‘*’ 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 ‘a’。因此，字符串 “aa” 可被视为 ‘a’ 重复了一次。<br>示例 3:</p>
<p>输入:<br>s = “ab”<br>p = “.*”<br>输出: true<br>解释: “.*” 表示可匹配零个或多个（’*’）任意字符（’.’）。<br>示例 4:</p>
<p>输入:<br>s = “aab”<br>p = “c<em>a</em>b”<br>输出: true<br>解释: 因为 ‘*’ 表示零个或多个，这里 ‘c’ 为 0 个, ‘a’ 被重复一次。因此可以匹配字符串 “aab”。<br>示例 5:</p>
<p>输入:<br>s = “mississippi”<br>p = “mis<em>is*p</em>.”<br>输出: false<br>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母以及字符 . 和 <em>，无连续的 ‘</em>‘。<br>注意：本题与主站 10 题相同：<a href="https://leetcode-cn.com/problems/regular-expression-matching/">https://leetcode-cn.com/problems/regular-expression-matching/</a></p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof">https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2 分析"></a>2 <a href="https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof/solution/zhu-xing-xiang-xi-jiang-jie-you-qian-ru-shen-by-je/">分析</a></h2><p>使用正则表达式进行求解。将两个字符串从后往前进行比较，其中模式串的最后一个字符可能由一下三种情况：</p>
<ul>
<li>正常字符（[a-zA-Z]）</li>
<li>星号（*）</li>
<li>点号（.）</li>
</ul>
<p>定义主串为$s$，长度为$m$，模式串为$p$，长度为$n$。则有一下三种情况：</p>
<ol>
<li>$p[n - 1]$为一个正常字符，则此时只能将模式串的最后一个字符和主串的最后一个字符进行比较，如果模式串的最后一个字符等于主串的最后一个字符（$p[n - 1] == s[m-1]$），则继续判断$p[n-2]$是否等于$s[m-2]$，以此类推。</li>
<li>$p[n-1]==’.’$。因为题目中说，$’.’$可以匹配任何一个字符，所以模式串和主串的最后一个就相当于匹配上了，继续匹配$p[n-2]$和$s[m-2]$。</li>
<li>$p[n-1]==’<em>‘$。题目中说$’</em>‘$可以匹配$’*’$号之前的那个字符任意多次（包括0次），假设$p[n-2]==c$，则主串中的字符可以匹配$c$0次或者多次：<ol>
<li>匹配0次。那么模式串的最后两个字符就可以不用看了，因为主串被匹配了0次。比如：$s=”abc”$，$p=”abcd*”$，可将$p$的倒数第二个字符$d$认为匹配了0次，所以主串和模式串可以匹配。</li>
<li>匹配了多次。此种情况必须满足$s[m-1]==c$或者$c=’.’$，否则将不能匹配多次。比如：$s=”abc”$，$p=”abc*”$，可以认为字符$’c’$匹配了1次；或者$s=”abc”$，$p=”ab.*”$，此时两个串也可以匹配上。</li>
</ol>
</li>
</ol>
<p>上面将所有的可能情况都列举了，那么此时只需要定义一个$dp$数组即可，其中$dp[i][j]$表示$s$串的前$i$个字符和$p$串的前$j$个字符能否匹配。此时又分成以下4中情况：</p>
<ol>
<li>主串为空，模式串也为空，那么此时一定可以匹配</li>
<li>主串为空，模式串不为空，此时不能直接得出结果，必须通过计算得出，比如$s=””$，$p=”a<em>b</em>c*”$，此种情况两个串可以匹配。</li>
<li>主串不为空，模式串为空，此时一定不能匹配。</li>
<li>主串不为空，模式串也不为空，那么此时就需要计算得出结果</li>
</ol>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3 代码"></a>3 代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = s.length();</span><br><span class="line">        <span class="keyword">int</span> n = p.length();</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义dp数组，dp[i][j]表示s串的前i个字符和p串的前j个字符是否匹配</span></span><br><span class="line"><span class="comment">        有一下四种情况：</span></span><br><span class="line"><span class="comment">            1. 主串为空， 模式串也为空， 此种情况可以匹配</span></span><br><span class="line"><span class="comment">            2. 主串为空， 模式串为非空， 此种情况不能直接判断是否能匹配，需要计算</span></span><br><span class="line"><span class="comment">            3. 主串非空， 模式为空， 此时一定不能匹配</span></span><br><span class="line"><span class="comment">            4. 主串和模式串都是非空， 此时需要计算</span></span><br><span class="line"><span class="comment">                计算规则如下：从后往前匹配，可以将一个大的问题转化为一个子问题</span></span><br><span class="line"><span class="comment">                模式串的最后一个字符有三种可能：正常字符，星号（*），点（.）</span></span><br><span class="line"><span class="comment">                1. 如果p的最后一个字符是正常字符，则判断：</span></span><br><span class="line"><span class="comment">                    - p[n - 1] == s[m - 1]，则继续匹配s和p的倒数第二个字符 dp[i][j] = dp[i - 1][j - 1]</span></span><br><span class="line"><span class="comment">                    - p[n - 1] != s[m - 1]，则说明最后一个字符不匹配 dp[i][j] = false</span></span><br><span class="line"><span class="comment">                2. 如果p的最后一个字符是&quot;.&quot;，说明可以匹配任何字符，此时继续匹配倒数第二个字符  dp[i][j] = dp[i - 1][j - 1]</span></span><br><span class="line"><span class="comment">                3. 如果p的最后一个字符是“*”，表示“*”之前的一个字符（p[n - 1] = c）可以出现0次或多次，</span></span><br><span class="line"><span class="comment">                    - 出现0次：即表示p串的最后两个字符可以不用比较，直接比较s[n - 1]和p[n - 3]，dp[i][j] = dp[i][j - 2]</span></span><br><span class="line"><span class="comment">                    - 出现多次：此种情况下，要求s[m - 1] == p[n- 1] || p[n - 1] == &#x27;.&#x27;，模式串不动，主串继续向前移动。</span></span><br><span class="line"><span class="comment">                     dp[i][j] = [i - 1][j]</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// for (int i = 1; i &lt; n; i++) &#123;</span></span><br><span class="line">        <span class="comment">//     dp[0][i] = false;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) <span class="comment">//主串</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123; <span class="comment">//模式匹配串</span></span><br><span class="line">                <span class="comment">//如果模式串是空串</span></span><br><span class="line">                <span class="comment">//1.主串为空， 模式串也为空， 此种情况可以匹配</span></span><br><span class="line">                <span class="comment">//2.主串非空， 模式为空， 此时一定不能匹配</span></span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = i == <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// char ch = p.charAt(j - 1);</span></span><br><span class="line">                    <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) != <span class="string">&#x27;*&#x27;</span>) &#123; <span class="comment">//将正常字符和“.”合并处理</span></span><br><span class="line">                        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; (s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">1</span>) || p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                            dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//出现0次</span></span><br><span class="line">                        <span class="keyword">if</span> (j &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                            dp[i][j] = dp[i][j - <span class="number">2</span>];</span><br><span class="line">                        &#125; </span><br><span class="line">                        <span class="comment">//出现多次</span></span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        关于为什么用|=，比如这段代码： //碰到 * 了，</span></span><br><span class="line"><span class="comment">                        分为看和不看两种情况 //不看 if (j &gt;= 2) &#123; f[i][j] |= f[i][j - 2]; </span></span><br><span class="line"><span class="comment">                        //可用可不用，因为dp矩阵初始化默认为false，本质上和=一样 &#125; </span></span><br><span class="line"><span class="comment">                        //看 if (i &gt;= 1 &amp;&amp; j &gt;= 2 </span></span><br><span class="line"><span class="comment">                        &amp;&amp; (A.charAt(i - 1) == B.charAt(j - 2) || B.charAt(j - 2) == &#x27;.&#x27;)) &#123; f[i][j] |= f[i - 1][j]; </span></span><br><span class="line"><span class="comment">                        //必须使用，否则不能ac &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        其中，第一步先算的是不看‘*’的情况，然后第二步再算看‘*’的情况。</span></span><br><span class="line"><span class="comment">                        也就是说，对于f[i][j]我们会算两次。如果在第一次，即不看&#x27;*&#x27;的时候，</span></span><br><span class="line"><span class="comment">                        就已经算出来TURE了。那在第二步看&#x27;*&#x27;的时候。不管结果是ture还是false，</span></span><br><span class="line"><span class="comment">                        都保持true不变，这是合理的，因为只要其中有一种情况能完整匹配，结果就为true。</span></span><br><span class="line"><span class="comment">                        这就是为什么要用或符号。 这个不难证明，举个例子 &quot;ba&quot; &quot;baa*&quot; 这种情况下直接用=号过不了。</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        <span class="keyword">if</span> (i &gt;=<span class="number">1</span> &amp;&amp; j &gt;= <span class="number">2</span> &amp;&amp; (s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">2</span>) || p.charAt(j - <span class="number">2</span>) == <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                            dp[i][j] |= dp[i - <span class="number">1</span>][j];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>dp</tag>
        <tag>hard</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中抽象类和接口的区别？</title>
    <url>/java-abstract-interface/</url>
    <content><![CDATA[<h3 id="0-转载声明"><a href="#0-转载声明" class="headerlink" title="0 转载声明"></a>0 转载声明</h3><blockquote>
<p>这是转载自<a href="https://blog.csdn.net/chenssy/article/details/12858267" title="https://blog.csdn.net/chenssy/article/details/12858267">https://blog.csdn.net/chenssy/article/details/12858267</a>的一篇博客。个人觉得讲的挺好的，所以转载过来一是为了方便自己日后查看复习，二也是为了帮助博主转发，提高能见度。</p>
</blockquote>
<blockquote>
<p>接口和内部类为我们提供了一种将接口与实现分离的更加结构化的方法。</p>
</blockquote>
<p>抽象类与接口是java语言中对抽象概念进行定义的两种机制，正是由于他们的存在才赋予java强大的面向对象的能力。他们两者之间对抽象概念的支持有很大的相似，甚至可以互换，但是也有区别。</p>
<h3 id="一、抽象类"><a href="#一、抽象类" class="headerlink" title="一、抽象类"></a>一、抽象类</h3><p>我们都知道在面向对象的领域一切都是对象，同时所有的对象都是通过类来描述的，但是并不是所有的类都是来描述对象的。如果一个类没有足够的信息来描述一个具体的对象，而需要其他具体的类来支撑它，那么这样的类我们称它为抽象类。比如new Animal()，我们都知道这个是产生一个动物Animal对象，但是这个Animal具体长成什么样子我们并不知道，它没有一个具体动物的概念，所以他就是一个抽象类，需要一个具体的动物，如狗、猫来对它进行特定的描述，我们才知道它长成啥样。<br>在面向对象领域由于抽象的概念在问题领域没有对应的具体概念，所以用以表征抽象概念的抽象类是不能实例化的。<br>同时，抽象类体现了数据抽象的思想，是实现多态的一种机制。它定义了一组抽象的方法，至于这组抽象方法的具体表现形式有派生类来实现。同时抽象类提供了继承的概念，它的出发点就是为了继承，否则它没有存在的任何意义。所以说定义的抽象类一定是用来继承的，同时在一个以抽象类为节点的继承关系等级链中，叶子节点一定是具体的实现类。（不知这样理解是否有错!!!高手指点….）<br>在使用抽象类时需要注意几点：   </p>
<ul>
<li>1、抽象类不能被实例化，实例化的工作应该交由它的子类来完成，它只需要有一个引用即可。</li>
<li>2、抽象方法必须由子类来进行重写。</li>
<li>3、只要包含一个抽象方法的抽象类，该方法必须要定义成抽象类，不管是否还包含有其他方法。</li>
<li>4、抽象类中可以包含具体的方法，当然也可以不包含抽象方法。</li>
<li>5、子类中的抽象方法不能与父类的抽象方法同名。</li>
<li>6、abstract不能与final并列修饰同一个类。</li>
<li>7、abstract 不能与private、static、final或native并列修饰同一个方法。</li>
</ul>
<p>实例：<br>定义一个抽象动物类Animal，提供抽象方法叫cry()，猫、狗都是动物类的子类，由于cry()为抽象方法，所以Cat、Dog必须要实现cry()方法。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫叫：喵喵...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗叫:汪汪...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a1 = <span class="keyword">new</span> Cat();</span><br><span class="line">        Animal a2 = <span class="keyword">new</span> Dog();</span><br><span class="line">        </span><br><span class="line">        a1.cry();</span><br><span class="line">        a2.cry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>Output:<br>猫叫：喵喵…<br>狗叫:汪汪…</p>
<hr>
<p>创建抽象类和抽象方法非常有用,因为他们可以使类的抽象性明确起来,并告诉用户和编译器打算怎样使用他们.抽象类还是有用的重构器,因为它们使我们可以很容易地将公共方法沿着继承层次结构向上移动。（From:Think in java ）</p>
<h3 id="二、接口"><a href="#二、接口" class="headerlink" title="二、接口"></a>二、接口</h3><p>接口是一种比抽象类更加抽象的“类”。这里给“类”加引号是我找不到更好的词来表示，但是我们要明确一点就是，接口本身就不是类，从我们不能实例化一个接口就可以看出。如new Runnable();肯定是错误的，我们只能new它的实现类。<br>接口是用来建立类与类之间的协议，它所提供的只是一种形式，而没有具体的实现。同时实现该接口的实现类必须要实现该接口的所有方法，通过使用implements关键字，他表示该类在遵循某个或某组特定的接口，同时也表示着“interface只是它的外貌，但是现在需要声明它是如何工作的”。<br>接口是抽象类的延伸，java了保证数据安全是不能多重继承的，也就是说继承只能存在一个父类，但是接口不同，一个类可以同时实现多个接口，不管这些接口之间有没有关系，所以接口弥补了抽象类不能多重继承的缺陷，但是推荐继承和接口共同使用，因为这样既可以保证数据安全性又可以实现多重继承。</p>
<p>在使用接口过程中需要注意如下几个问题：</p>
<ul>
<li>1、个Interface的方所有法访问权限自动被声明为public。确切的说只能为public，当然你可以显示的声明为protected、private，但是编译会出错！</li>
<li>2、接口中可以定义“成员变量”，或者说是不可变的常量，因为接口中的“成员变量”会自动变为为public static final。可以通过类命名直接访问：ImplementClass.name。</li>
<li>3、接口中不存在实现的方法。</li>
<li>4、实现接口的非抽象类必须要实现该接口的所有方法。抽象类可以不用实现。</li>
<li>5、不能使用new操作符实例化一个接口，但可以声明一个接口变量，该变量必须引用（refer to)一个实现该接口的类的对象。可以使用 instanceof 检查一个对象是否实现了某个特定的接口。例如：if(anObject instanceof Comparable){}。</li>
<li>6、在实现多接口的时候一定要避免方法名的重复。</li>
</ul>
<h3 id="三、抽象类与接口的区别"><a href="#三、抽象类与接口的区别" class="headerlink" title="三、抽象类与接口的区别"></a>三、抽象类与接口的区别</h3><p>尽管抽象类和接口之间存在较大的相同点，甚至有时候还可以互换，但这样并不能弥补他们之间的差异之处。下面将从语法层次和设计层次两个方面对抽象类和接口进行阐述。</p>
<h4 id="3-1语法层次"><a href="#3-1语法层次" class="headerlink" title="3.1语法层次"></a>3.1语法层次</h4><p>在语法层次，java语言对于抽象类和接口分别给出了不同的定义。下面已Demo类来说明他们之间的不同之处。</p>
<p>使用抽象类来实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用接口来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽象类方式中，抽象类可以拥有任意范围的成员数据，同时也可以拥有自己的非抽象方法，但是接口方式中，它仅能够有静态、不能修改的成员数据（但是我们一般是不会在接口中使用成员数据），同时它所有的方法都必须是抽象的。在某种程度上来说，接口是抽象类的特殊化。<br>对子类而言，它只能继承一个抽象类（这是java为了数据安全而考虑的），但是却可以实现多个接口。</p>
<h4 id="3-2设计层次"><a href="#3-2设计层次" class="headerlink" title="3.2设计层次"></a>3.2设计层次</h4><p>上面只是从语法层次和编程角度来区分它们之间的关系，这些都是低层次的，要真正使用好抽象类和接口，我们就必须要从较高层次来区分了。只有从设计理念的角度才能看出它们的本质所在。一般来说他们存在如下三个不同点：</p>
<ul>
<li>1、 抽象层次不同。抽象类是对类抽象，而接口是对行为的抽象。抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。</li>
<li>2、 跨域不同。抽象类所跨域的是具有相似特点的类，而接口却可以跨域不同的类。我们知道抽象类是从子类中发现公共部分，然后泛化成抽象类，子类继承该父类即可，但是接口不同。实现它的子类可以不存在任何关系，共同之处。例如猫、狗可以抽象成一个动物类抽象类，具备叫的方法。鸟、飞机可以实现飞Fly接口，具备飞的行为，这里我们总不能将鸟、飞机共用一个父类吧！所以说抽象类所体现的是一种继承关系，要想使得继承关系合理，父类和派生类之间必须存在”is-a” 关系，即父类和派生类在概念本质上应该是相同的。对于接口则不然，并不要求接口的实现者和接口定义在概念本质上是一致的， 仅仅是实现了接口定义的契约而已。</li>
<li>3、 设计层次不同。对于抽象类而言，它是自下而上来设计的，我们要先知道子类才能抽象出父类，而接口则不同，它根本就不需要知道子类的存在，只需要定义一个规则即可，至于什么子类、什么时候怎么实现它一概不知。比如我们只有一个猫类在这里，如果你这是就抽象成一个动物类，是不是设计有点儿过度？我们起码要有两个动物类，猫、狗在这里，我们在抽象他们的共同点形成动物抽象类吧！所以说抽象类往往都是通过重构而来的！但是接口就不同，比如说飞，我们根本就不知道会有什么东西来实现这个飞接口，怎么实现也不得而知，我们要做的就是事前定义好飞的行为接口。所以说抽象类是自底向上抽象而来的，接口是自顶向下设计出来的。</li>
</ul>
<p>为了更好的阐述他们之间的区别，下面将使用一个例子来说明。该例子引自：<a href="http://blog.csdn.net/ttgjz/article/details/2960451" title="http://blog.csdn.net/ttgjz/article/details/2960451">http://blog.csdn.net/ttgjz/article/details/2960451</a></p>
<p>我们有一个Door的抽象概念，它具备两个行为open()和close()，此时我们可以定义通过抽象类和接口来定义这个抽象概念：</p>
<p>抽象类：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Door</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至于其他的具体类可以通过使用extends使用抽象类方式定义Door或者Implements使用接口方式定义Door，这里发现两者并没有什么很大的差异。<br>但是现在如果我们需要门具有报警的功能，那么该如何实现呢？</p>
<p>解决方案一：给Door增加一个报警方法:clarm();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Door</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方法违反了面向对象设计中的一个核心原则 ISP (Interface Segregation Principle)—见批注，在Door的定义中把Door概念本身固有的行为方法和另外一个概念”报警器”的行为方 法混在了一起。这样引起的一个问题是那些仅仅依赖于Door这个概念的模块会因为”报警器”这个概念的改变而改变，反之依然。</p>
<p>解决方案二</p>
<p>既然open()、close()和alarm()属于两个不同的概念，那么我们依据ISP原则将它们分开定义在两个代表两个不同概念的抽象类里面，定义的方式有三种：</p>
<ul>
<li>1、两个都使用抽象类来定义。</li>
<li>2、两个都使用接口来定义。</li>
<li>3、一个使用抽象类定义，一个是用接口定义。</li>
</ul>
<p>由于java不支持多继承所以第一种是不可行的。后面两种都是可行的，但是选择何种就反映了你对问题域本质的理解。</p>
<p>如果选择第二种都是接口来定义，那么就反映了两个问题：1、我们可能没有理解清楚问题域，AlarmDoor在概念本质上到底是门还报警器。2、如果我们对问题域的理解没有问题，比如我们在分析时确定了AlarmDoor在本质上概念是一致的，那么我们在设计时就没有正确的反映出我们的设计意图。因为你使用了两个接口来进行定义，他们概念的定义并不能够反映上述含义。</p>
<p>第三种，如果我们对问题域的理解是这样的：AlarmDoor本质上Door，但同时它也拥有报警的行为功能，这个时候我们使用第三种方案恰好可以阐述我们的设计意图。AlarmDoor本质是们，所以对于这个概念我们使用抽象类来定义，同时AlarmDoor具备报警功能，说明它能够完成报警概念中定义的行为功能，所以alarm可以使用接口来进行定义。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Alarm</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlarmDoor</span> <span class="keyword">extends</span> <span class="title">Door</span> <span class="keyword">implements</span> <span class="title">Alarm</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种实现方式基本上能够明确的反映出我们对于问题领域的理解，正确的揭示我们的设计意图。其实抽象类表示的是”is-a”关系，接口表示的是”like-a”关系，大家在选择时可以作为一个依据，当然这是建立在对问题领域的理解上的，比如：如果我们认为AlarmDoor在概念本质上是报警器，同时又具有Door的功能，那么上述的定义方式就要反过来了。<br>批注：</p>
<blockquote>
<p>ISP（Interface Segregation Principle）：面向对象的一个核心原则。它表明使用<br>多个专门的接口比使用单一的总接口要好。<br>   一个类对另外一个类的依赖性应当是建立在最小的接口上的。<br>   一个接口代表一个角色，不应当将不同的角色都交给一个接口。没有关系的接口合并在一起，形成一个臃肿的大接口，这是对角色和接口的污染。</p>
</blockquote>
<h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><ul>
<li>1、 抽象类在java语言中所表示的是一种继承关系，一个子类只能存在一个父类，但是可以存在多个接口。</li>
<li>2、 在抽象类中可以拥有自己的成员变量和非抽象类方法，但是接口中只能存在静态的不可变的成员数据（不过一般都不在接口中定义成员数据），而且它的所有方法都是抽象的。</li>
<li>3、抽象类和接口所反映的设计理念是不同的，抽象类所代表的是“is-a”的关系，而接口所代表的是“like-a”的关系。</li>
</ul>
<blockquote>
<p>抽象类和接口是java语言中两种不同的抽象概念，他们的存在对多态提供了非常好的支持，虽然他们之间存在很大的相似性。但是对于他们的选择往往反应了您对问题域的理解。只有对问题域的本质有良好的理解，才能做出正确、合理的设计。</p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>program language</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础知识介绍</title>
    <url>/java-basic/</url>
    <content><![CDATA[<h3 id="1-打印信息"><a href="#1-打印信息" class="headerlink" title="1 打印信息"></a>1 打印信息</h3><p>打印信息，在<code>System.out</code>下面，主要有：</p>
<ul>
<li>print：标准输出，但是不会换行</li>
<li>printf：可以使用类似C语言中的语法，进行格式化输出，即：<code>printf(&quot;%s&quot;, prama)</code>，<code>printf</code>也不会换行</li>
<li>println：输出完之后，会自动换行</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414205625.png" alt="printf用法"></p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;%s&quot;</span>, <span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world.&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;hello world.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414205851.png" alt="输出结果"></p>
</blockquote>
<h3 id="2-循环控制结构"><a href="#2-循环控制结构" class="headerlink" title="2 循环控制结构"></a>2 循环控制结构</h3><h4 id="2-1-for循环"><a href="#2-1-for循环" class="headerlink" title="2.1 for循环"></a>2.1 for循环</h4><ul>
<li>方式1:<code>for(int i=0;i&lt;length;i++)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;v&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;f&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方式2:<code>for(Object object : iterators)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;v&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;f&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String string : list)&#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方式3:<code>list.forEach(temp-&gt;&#123;  ... &#125;)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;v&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;f&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        list.forEach(temp-&gt;&#123;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：    </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414210228.png" alt="输出结果"></p>
</blockquote>
<h4 id="2-2-while循环"><a href="#2-2-while循环" class="headerlink" title="2.2 while循环"></a>2.2 while循环</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;v&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;f&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; list.size())&#123;</span><br><span class="line">            System.out.println(list.get(index));</span><br><span class="line">            index += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-do…while循环"><a href="#2-3-do…while循环" class="headerlink" title="2.3 do…while循环"></a>2.3 do…while循环</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;v&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;f&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(list.get(index));</span><br><span class="line">            index += <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span>(index &lt; list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>while和do…while的区别：</p>
<ul>
<li>do…while循环至少循环一次</li>
<li>while循环可以一次都不循环</li>
</ul>
<h3 id="3-if…else"><a href="#3-if…else" class="headerlink" title="3 if…else"></a>3 if…else</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a is &quot;</span> + a);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a is &quot;</span> + a);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a is not 1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-获取用户输入"><a href="#4-获取用户输入" class="headerlink" title="4 获取用户输入"></a>4 获取用户输入</h3><p>在<code>java</code>中获取用户输入，通常情况下，使用<code>java.util.Scanner</code>类。<code>Scanner</code>具有以下的一些方法：   </p>
<ul>
<li>hasNext():判断是否有字符换输入</li>
<li>hasNextxxx():判断是否有与<code>xxx</code>对应的数据类型输入</li>
</ul>
<h4 id="4-1-如下面的代码（这里以输入int型整数为例）："><a href="#4-1-如下面的代码（这里以输入int型整数为例）：" class="headerlink" title="4.1 如下面的代码（这里以输入int型整数为例）："></a>4.1 如下面的代码（这里以输入<code>int</code>型整数为例）：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入整数，以非整数结束：&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextInt())&#123;</span><br><span class="line">            <span class="keyword">int</span> s = scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;Your input:&quot;</span> + s);</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入整数，以非整数结束：&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结束条件：当输入的数据与<code>hasNextxxx()</code>中的<code>xxx</code>不相符时，退出。</p>
<blockquote>
<p>运行结果：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414212226.png" alt="输入整数"></p>
</blockquote>
<h4 id="4-2-hasNext-输入任何字符"><a href="#4-2-hasNext-输入任何字符" class="headerlink" title="4.2 hasNext()输入任何字符"></a>4.2 hasNext()输入任何字符</h4><ul>
<li><p><code>next()</code></p>
<ul>
<li>一定要读取到有效字符后才可以结束输入。</li>
<li>一定要读取到有效字符后才可以结束输入。</li>
<li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li>
<li>next() 不能得到带有空格的字符串。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入字符串，输入exit结束：&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String s = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;exit&quot;</span>.equals(s))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Your input:&quot;</span> + s);</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入字符串，输入exit结束：&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414213229.png" alt="输出结果"></p>
</blockquote>
</li>
<li><p><code>nextLine()</code></p>
<ul>
<li>以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li>
<li>可以获得空白。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入字符串，输入exit结束：&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;exit&quot;</span>.equals(s))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Your input:&quot;</span> + s);</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入字符串，输入exit结束：&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>结束条件：自己制定，在<code>while</code>循环中做判断。</p>
<h3 id="5-switch…case"><a href="#5-switch…case" class="headerlink" title="5 switch…case"></a>5 switch…case</h3><p>这是一个选择结构，类似<code>if</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入字符串，输入exit结束：&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            <span class="keyword">switch</span> (s)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;exit&quot;</span>: <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;abc&quot;</span>:</span><br><span class="line">                    System.out.println(s);</span><br><span class="line">                    System.out.print(<span class="string">&quot;请输入字符串，输入exit结束：&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: System.out.println(<span class="string">&quot;over&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414213906.png" alt="运行结果"></p>
</blockquote>
<h3 id="6-数组"><a href="#6-数组" class="headerlink" title="6 数组"></a>6 数组</h3><h4 id="6-1-定义数组"><a href="#6-1-定义数组" class="headerlink" title="6.1 定义数组"></a>6.1 定义数组</h4><ol>
<li>字符串数组:<code>String[] strings = new String[5];   //[]中指定数组的大小</code>，默认值是<code>null</code></li>
<li>字节数组:<code>byte[] bytes = new byte[5];</code>，默认值是<code>0</code></li>
<li>字符数组:<code>char[] chars = new char[5];</code>，默认值是<code>\u0000</code></li>
<li>整数数组:<code>int[] ints = new int[5];</code>，默认值是<code>0</code></li>
<li>浮点数数组:<ol>
<li><code>double[] doubles = new double[5];</code>，默认值是<code>0.0d</code></li>
<li><code>float[] floats = new float[5];</code>，默认值是<code>0.0f</code></li>
</ol>
</li>
</ol>
<h4 id="6-2-给数组赋值"><a href="#6-2-给数组赋值" class="headerlink" title="6.2 给数组赋值"></a>6.2 给数组赋值</h4><p>数组的赋值都是给指定下标进行赋值，这里以<code>strings</code>为例：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] strings = <span class="keyword">new</span> String[<span class="number">5</span>];  <span class="comment">//[]中指定数组的大小</span></span><br><span class="line">        strings[<span class="number">1</span>] = <span class="string">&quot;dddfd&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strings.length;i++)&#123;</span><br><span class="line">            System.out.println(strings[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出结果：    </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200415133044.png" alt="运行结果"></p>
</blockquote>
<h3 id="7-线程"><a href="#7-线程" class="headerlink" title="7 线程"></a>7 线程</h3><h4 id="7-1-通过实现Runable接口，来创建线程"><a href="#7-1-通过实现Runable接口，来创建线程" class="headerlink" title="7.1 通过实现Runable接口，来创建线程"></a>7.1 通过实现Runable接口，来创建线程</h4><p>RunableDemo.java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunableDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RunableDemo</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程：&quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;次运行。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (thread == <span class="keyword">null</span>)&#123;</span><br><span class="line">            thread = <span class="keyword">new</span> Thread(<span class="keyword">this</span>, name);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main.java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        RunableDemo runableDemo = <span class="keyword">new</span> RunableDemo(<span class="string">&quot;我是runuable线程&quot;</span>);</span><br><span class="line">        runableDemo.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200415164028.png" alt="运行结果"></p>
</blockquote>
<h4 id="7-2通过集成Thread类，来创建线程"><a href="#7-2通过集成Thread类，来创建线程" class="headerlink" title="7.2通过集成Thread类，来创建线程"></a>7.2通过集成Thread类，来创建线程</h4><p>ThreadDemo.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程-&gt;&quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;次运行。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.thread == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.thread = <span class="keyword">new</span> Thread(<span class="keyword">this</span>,<span class="keyword">this</span>.name);</span><br><span class="line">            <span class="keyword">this</span>.thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadDemo</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>main.java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDemo threadDemo = <span class="keyword">new</span> ThreadDemo(<span class="string">&quot;我是ThreadDemo线程&quot;</span>);</span><br><span class="line">        threadDemo.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200415164711.png" alt="运行结果"></p>
</blockquote>
<h4 id="7-3-使用Thread匿名调用"><a href="#7-3-使用Thread匿名调用" class="headerlink" title="7.3 使用Thread匿名调用"></a>7.3 使用Thread匿名调用</h4><p>直接看代码：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;次运行。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200415165001.png" alt="运行结果"></p>
</blockquote>
<h4 id="7-4-通过Callable来创建线程"><a href="#7-4-通过Callable来创建线程" class="headerlink" title="7.4 通过Callable来创建线程"></a>7.4 通过Callable来创建线程</h4><ul>
<li>方式1：通过<code>ExecutorService</code>执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableDemo</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是callable线程--&gt;&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CallableDemo callableDemo = <span class="keyword">new</span> CallableDemo();</span><br><span class="line">        <span class="comment">//定义一个线程池，有三个线程</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        Future&lt;Integer&gt; res1 = service.submit(callableDemo);</span><br><span class="line">        Future&lt;Integer&gt; res2 = service.submit(callableDemo);</span><br><span class="line">        Future&lt;Integer&gt; res3 = service.submit(callableDemo);</span><br><span class="line">        System.out.println(res1);</span><br><span class="line">        System.out.println(res2);</span><br><span class="line">        System.out.println(res3);</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200416132338.png" alt="运行结果"></p>
</blockquote>
<ul>
<li>方式：通过<code>FutureTask</code>执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableDemo</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是callable线程--&gt;&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CallableDemo callableDemo = <span class="keyword">new</span> CallableDemo();</span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(callableDemo);</span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200416132318.png" alt="运行结果"></p>
</blockquote>
<h4 id="7-5-线程同步"><a href="#7-5-线程同步" class="headerlink" title="7.5 线程同步"></a>7.5 线程同步</h4><p>当我们在使用多线程访问同一个资源并需要对其进行增删改时，如果某一时刻，有多个线程同时对该资源进行了修改，那么就会导致该资源的数据紊乱。那么解决办法就是，当某一个线程该资源时，就将该资源锁住，其他线程只有等待该线程执行完毕之后，才能对该线程进行修改。</p>
<p>先看一种线程不安全的同步代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            buy();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticketNum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + ticketNum--);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;aaa&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;bbb&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;ccc&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200415213440.png" alt="运行结果"></p>
<p>从图中我们可以到，有两个线程同时获得了第10张票，现实中是不存在这种情况的。</p>
</blockquote>
<ol>
<li>synchronized</li>
</ol>
<blockquote>
<p>被synchronized修饰符修饰的变量或者方法，在同一时刻，只能被一个线程访问。使用<code>synchronized</code>修饰符将需要同步的资源“锁”起来，这样就可以避免多个线程同时竞争了。</p>
</blockquote>
<ul>
<li>写法1：给修改同步资源的方法加上<code>synchronized</code>修饰符。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            buy();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticketNum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + ticketNum--);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;aaa&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;bbb&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;ccc&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>写法2：将需要锁住的资源用<code>()</code>括起来，<code>()</code>中必须是一个对象，基本数据类型需要使用装饰类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer ticketNum = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ticketNum)&#123; <span class="comment">//synchronized锁住的是一个对象，需要使用装饰类</span></span><br><span class="line">            <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">                buy();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticketNum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + ticketNum--);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ticketNum)&#123;</span><br><span class="line">            Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">            <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;aaa&quot;</span>).start();</span><br><span class="line">            <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;bbb&quot;</span>).start();</span><br><span class="line">            <span class="keyword">new</span> Thread(ticket,<span class="string">&quot;ccc&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Lock锁</li>
</ol>
<blockquote>
<p>使用该锁，可以对需要同步的对象进行手动加锁，然后关锁。<code>synchronized</code>不能显式的指定加锁的位置，使用<code>Lock</code>可以手动给对象加锁。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer ticketNum = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            buy();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + ticketNum--);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ticketNum) &#123;</span><br><span class="line">            Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">            <span class="keyword">new</span> Thread(ticket, <span class="string">&quot;aaa&quot;</span>).start();</span><br><span class="line">            <span class="keyword">new</span> Thread(ticket, <span class="string">&quot;bbb&quot;</span>).start();</span><br><span class="line">            <span class="keyword">new</span> Thread(ticket, <span class="string">&quot;ccc&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-6-线程间协程"><a href="#7-6-线程间协程" class="headerlink" title="7.6 线程间协程"></a>7.6 线程间协程</h4><p>消费者和生产者问题：当消费者需要消费某一个产品时，必须先由生产者生产出来，才能消费，否则就只能等待生产者生产。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerCosumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cache cache = <span class="keyword">new</span> Cache();</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer(cache);</span><br><span class="line">        Cosumer cosumer = <span class="keyword">new</span> Cosumer(cache);</span><br><span class="line">        <span class="keyword">new</span> Thread(producer).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(cosumer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Cache cache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            cache.producing(<span class="keyword">new</span> Prodcut(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了&quot;</span> + i + <span class="string">&quot;号产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cosumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Cache cache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cosumer</span><span class="params">(Cache cache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Prodcut prodcut = cache.cosuming();</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了&quot;</span> + prodcut.id + <span class="string">&quot;号产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prodcut</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Prodcut</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cache</span></span>&#123;</span><br><span class="line">    Prodcut[]  prodcuts = <span class="keyword">new</span> Prodcut[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">producing</span><span class="params">(Prodcut prodcut)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == prodcuts.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        prodcuts[count] = prodcut;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Prodcut <span class="title">cosuming</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        Prodcut prodcut = prodcuts[count];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> prodcut;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：    </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200416135000.png" alt="运行结果"></p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>program language</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中基本数据类型和包装类的区别？</title>
    <url>/java-class-base-datatype/</url>
    <content><![CDATA[<h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1 数据类型"></a>1 数据类型</h3><p>Java中基本数据类型包括int,long,string,boolean等，但是我们在编程的过程中，更多的是使用对象，而不是数据类型，所以Java为了方便编程，给每种基本数据类型都做了一个包装类，二者的基本功能相似，但是也有一些差别。比如在内存中的存储位置。举例：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们知道变量<code>i</code>是通过基本数据类型进行定义的，此时该变量的值是存放在内存的栈内存中，且如果我们在定义时没有指定值的话，且需要判断该值是否为空，我们需要使用下面的判断语句：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">0</span>)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-包装类"><a href="#2-包装类" class="headerlink" title="2 包装类"></a>2 包装类</h3><p>Java中的每一种数据类型都有其对应的包装类，如下图举例所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/number1.png" alt="Number"><br>包装类的本质是一个类，所以如果我们需要使用的话，必须使用<code>new</code>来定义，当在定义对象没有指定具体的值时，如果做<code>if</code>判断，那么和基本数据类型的判断是不同的，如：     </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer();</span><br><span class="line"><span class="keyword">if</span> (i==<span class="keyword">null</span>)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时的<code>i</code>中的值，存储在内存中的堆内存中。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
      </tags>
  </entry>
  <entry>
    <title>java中类和函数、方法、属性，以及对象的区别</title>
    <url>/java-class-method/</url>
    <content><![CDATA[<h3 id="1-类和函数、方法"><a href="#1-类和函数、方法" class="headerlink" title="1 类和函数、方法"></a>1 类和函数、方法</h3><p>类的定义，在<code>java</code>中是用<code>class</code>关键字定义的一个结构，类中可以定义函数以及定义变量。</p>
<p>当我们使用<code>java</code>封装了一个实体类时，该实体类中，有一些变量和函数。此时在该类中的函数，我们可以称之为该实体类的方法了，该实体类中的变量，我们可以称之为该实体类的属性。我们这里以一个<code>Person</code>实体类为例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> height; <span class="comment">//身高</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">float</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">float</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以看到上面的代码，<code>Person</code>实体类中，具有变量和函数。现在这个变量和函数就成了<code>Person</code>实体类的属性和方法了。在<code>java</code>中，实质上都是一样的，只是叫法不同而已。</p>
<h3 id="2-对象"><a href="#2-对象" class="headerlink" title="2 对象"></a>2 对象</h3><p>在<code>java</code>中，一切皆是对象，因为<code>java</code>时一门面向对象的语言，所以这里就有必要介绍一下<strong>对象</strong>是什么了。在<code>java</code>中，对象可以理解为：<strong>在内存中的一段代码块</strong>，当我们使用<code>new</code>创建了一个实体类时，那么<code>java</code>虚拟机就会在内存中开辟一段内存空间，用来存放<code>new</code>出来的这个实体类。我们可以看下面这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person(<span class="string">&quot;Jums&quot;</span>,<span class="number">78</span>,<span class="number">187</span>);</span><br></pre></td></tr></table></figure>
<p>代码中定义了一定<code>Person</code>实体类，该实体类的别名叫<code>person</code>，那么此时的这个<code>person</code>，就代表一个对象，因为该内存中已经分配了一段内存空间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person;</span><br></pre></td></tr></table></figure>
<p>我们再来看这一行代码，此时也定义了一个实体类，别名是<code>person</code>，但是没有实例化，也就是没有给它分配一个具体的<code>class</code>的实例。</p>
<h3 id="3-理解"><a href="#3-理解" class="headerlink" title="3 理解"></a>3 理解</h3><p>我们可以这样理解，用<code>class</code>定义的一个<code>Person</code>实体类，就如同工厂中的样品产品（俗称模子），不能直接没给客户。而<code>person</code>就是工厂具体生产出来的一个产品，也就是说是量产出来的，可以直接卖给客户。而那个<strong>对象</strong>的概念，就是这里讲的量产出来的具体的产品，可以类似这么理解。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
        <tag>basic knowledge</tag>
      </tags>
  </entry>
  <entry>
    <title>Java字节码指令含义解释与指令查询</title>
    <url>/java-byte-code-command/</url>
    <content><![CDATA[<h3 id="1-反编译获得java字节码信息"><a href="#1-反编译获得java字节码信息" class="headerlink" title="1 反编译获得java字节码信息"></a>1 反编译获得java字节码信息</h3><p>首先看一段<code>java</code>源代码，然后编译后产生了一个<code>.class</code>文件，使用命令：<code>javap -v xxx.class</code>将其反编译。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; <span class="number">10</span>)&#123;</span><br><span class="line">            x = x++;  </span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;x=&quot;</span>+x);<span class="comment">//x=?</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i=&quot;</span>+i);<span class="comment">//i=?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200417204334706.jpg" alt="运行结果"></p>
</blockquote>
<p>执行完反编译命令<code>javap -v Code.class</code>之后的信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Classfile /G:/codeFolder/JavaCode/reflectTest/out/production/reflectTest/com/basic/Code.class</span><br><span class="line">  Last modified <span class="number">2020</span>-<span class="number">4</span>-<span class="number">17</span>; size <span class="number">870</span> bytes</span><br><span class="line">  MD5 checksum 78308b0495e2add94c235bc0f4d2394b</span><br><span class="line">  Compiled from <span class="string">&quot;Code.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">basic</span>.<span class="title">Code</span></span></span><br><span class="line"><span class="class">  <span class="title">minor</span> <span class="title">version</span>: 0</span></span><br><span class="line"><span class="class">  <span class="title">major</span> <span class="title">version</span>: 52</span></span><br><span class="line"><span class="class">  <span class="title">flags</span>: <span class="title">ACC_PUBLIC</span>, <span class="title">ACC_SUPER</span></span></span><br><span class="line"><span class="class"><span class="title">Constant</span> <span class="title">pool</span>:</span></span><br><span class="line"><span class="class">   #1 </span>= Methodref          #<span class="number">12.</span>#<span class="number">30</span>        <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Fieldref           #<span class="number">31.</span>#<span class="number">32</span>        <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">   #<span class="number">3</span> = Class              #<span class="number">33</span>            <span class="comment">// java/lang/StringBuilder</span></span><br><span class="line">   #<span class="number">4</span> = Methodref          #<span class="number">3.</span>#<span class="number">30</span>         <span class="comment">// java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">5</span> = String             #<span class="number">34</span>            <span class="comment">// x=</span></span><br><span class="line">   #<span class="number">6</span> = Methodref          #<span class="number">3.</span>#<span class="number">35</span>         <span class="comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">   #<span class="number">7</span> = Methodref          #<span class="number">3.</span>#<span class="number">36</span>         <span class="comment">// java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">   #<span class="number">8</span> = Methodref          #<span class="number">3.</span>#<span class="number">37</span>         <span class="comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class="line">   #<span class="number">9</span> = Methodref          #<span class="number">38.</span>#<span class="number">39</span>        <span class="comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">  #<span class="number">10</span> = String             #<span class="number">40</span>            <span class="comment">// i=</span></span><br><span class="line">  #<span class="number">11</span> = Class              #<span class="number">41</span>            <span class="comment">// com/basic/Code</span></span><br><span class="line">  #<span class="number">12</span> = Class              #<span class="number">42</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">  #<span class="number">13</span> = Utf8               &lt;init&gt;</span><br><span class="line">  #<span class="number">14</span> = Utf8               ()V</span><br><span class="line">  #<span class="number">15</span> = Utf8               Code</span><br><span class="line">  #<span class="number">16</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">17</span> = Utf8               LocalVariableTable</span><br><span class="line">  #<span class="number">18</span> = Utf8               <span class="keyword">this</span></span><br><span class="line">  #<span class="number">19</span> = Utf8               Lcom/basic/Code;</span><br><span class="line">  #<span class="number">20</span> = Utf8               main</span><br><span class="line">  #<span class="number">21</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">22</span> = Utf8               args</span><br><span class="line">  #<span class="number">23</span> = Utf8               [Ljava/lang/String;</span><br><span class="line">  #<span class="number">24</span> = Utf8               i</span><br><span class="line">  #<span class="number">25</span> = Utf8               I</span><br><span class="line">  #<span class="number">26</span> = Utf8               x</span><br><span class="line">  #<span class="number">27</span> = Utf8               StackMapTable</span><br><span class="line">  #<span class="number">28</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">29</span> = Utf8               Code.java</span><br><span class="line">  #<span class="number">30</span> = NameAndType        #<span class="number">13</span>:#<span class="number">14</span>        <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">31</span> = Class              #<span class="number">43</span>            <span class="comment">// java/lang/System</span></span><br><span class="line">  #<span class="number">32</span> = NameAndType        #<span class="number">44</span>:#<span class="number">45</span>        <span class="comment">// out:Ljava/io/PrintStream;</span></span><br><span class="line">  #<span class="number">33</span> = Utf8               java/lang/StringBuilder</span><br><span class="line">  #<span class="number">34</span> = Utf8               x=</span><br><span class="line">  #<span class="number">35</span> = NameAndType        #<span class="number">46</span>:#<span class="number">47</span>        <span class="comment">// append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">  #<span class="number">36</span> = NameAndType        #<span class="number">46</span>:#<span class="number">48</span>        <span class="comment">// append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">  #<span class="number">37</span> = NameAndType        #<span class="number">49</span>:#<span class="number">50</span>        <span class="comment">// toString:()Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">38</span> = Class              #<span class="number">51</span>            <span class="comment">// java/io/PrintStream</span></span><br><span class="line">  #<span class="number">39</span> = NameAndType        #<span class="number">52</span>:#<span class="number">53</span>        <span class="comment">// println:(Ljava/lang/String;)V</span></span><br><span class="line">  #<span class="number">40</span> = Utf8               i=</span><br><span class="line">  #<span class="number">41</span> = Utf8               com/basic/Code</span><br><span class="line">  #<span class="number">42</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">43</span> = Utf8               java/lang/System</span><br><span class="line">  #<span class="number">44</span> = Utf8               out</span><br><span class="line">  #<span class="number">45</span> = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #<span class="number">46</span> = Utf8               append</span><br><span class="line">  #<span class="number">47</span> = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">  #<span class="number">48</span> = Utf8               (I)Ljava/lang/StringBuilder;</span><br><span class="line">  #<span class="number">49</span> = Utf8               toString</span><br><span class="line">  #<span class="number">50</span> = Utf8               ()Ljava/lang/String;</span><br><span class="line">  #<span class="number">51</span> = Utf8               java/io/PrintStream</span><br><span class="line">  #<span class="number">52</span> = Utf8               println</span><br><span class="line">  #<span class="number">53</span> = Utf8               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.basic.Code();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/basic/Code;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: iconst_0</span><br><span class="line">         <span class="number">1</span>: istore_1</span><br><span class="line">         <span class="number">2</span>: iconst_0</span><br><span class="line">         <span class="number">3</span>: istore_2</span><br><span class="line">         <span class="number">4</span>: iload_1</span><br><span class="line">         <span class="number">5</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">7</span>: if_icmpge     <span class="number">21</span></span><br><span class="line">        <span class="number">10</span>: iload_2</span><br><span class="line">        <span class="number">11</span>: iinc          <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">        <span class="number">14</span>: istore_2</span><br><span class="line">        <span class="number">15</span>: iinc          <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="number">18</span>: goto          <span class="number">4</span></span><br><span class="line">        <span class="number">21</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">24</span>: <span class="keyword">new</span>           #<span class="number">3</span>                  <span class="comment">// class java/lang/StringBuilder</span></span><br><span class="line">        <span class="number">27</span>: dup</span><br><span class="line">        <span class="number">28</span>: invokespecial #<span class="number">4</span>                  <span class="comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">31</span>: ldc           #<span class="number">5</span>                  <span class="comment">// String x=</span></span><br><span class="line">        <span class="number">33</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">        <span class="number">36</span>: iload_2</span><br><span class="line">        <span class="number">37</span>: invokevirtual #<span class="number">7</span>                  <span class="comment">// Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">        <span class="number">40</span>: invokevirtual #<span class="number">8</span>                  <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class="line">        <span class="number">43</span>: invokevirtual #<span class="number">9</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">        <span class="number">46</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">49</span>: <span class="keyword">new</span>           #<span class="number">3</span>                  <span class="comment">// class java/lang/StringBuilder</span></span><br><span class="line">        <span class="number">52</span>: dup</span><br><span class="line">        <span class="number">53</span>: invokespecial #<span class="number">4</span>                  <span class="comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">56</span>: ldc           #<span class="number">10</span>                 <span class="comment">// String i=</span></span><br><span class="line">        <span class="number">58</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">        <span class="number">61</span>: iload_1</span><br><span class="line">        <span class="number">62</span>: invokevirtual #<span class="number">7</span>                  <span class="comment">// Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">        <span class="number">65</span>: invokevirtual #<span class="number">8</span>                  <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class="line">        <span class="number">68</span>: invokevirtual #<span class="number">9</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">        <span class="number">71</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">2</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">4</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">15</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">21</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">46</span></span><br><span class="line">        line <span class="number">14</span>: <span class="number">71</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">72</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">2</span>      <span class="number">70</span>     <span class="number">1</span>     i   I</span><br><span class="line">            <span class="number">4</span>      <span class="number">68</span>     <span class="number">2</span>     x   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">253</span> <span class="comment">/* append */</span></span><br><span class="line">          offset_delta = <span class="number">4</span></span><br><span class="line">          locals = [ <span class="keyword">int</span>, <span class="keyword">int</span> ]</span><br><span class="line">        frame_type = <span class="number">16</span> <span class="comment">/* same */</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;Code.java&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们可以看到，<code>java</code>源代码文件编译后的<code>class</code>文件，通过反编译之后，有很多的执行信息，那么那些指定到底是什么意思呢。下面通过一张表介绍一下。</p>
<h3 id="2-java字节码指令含义"><a href="#2-java字节码指令含义" class="headerlink" title="2 java字节码指令含义"></a>2 java字节码指令含义</h3><h4 id="2-1-java常量指令集合"><a href="#2-1-java常量指令集合" class="headerlink" title="2.1 java常量指令集合"></a>2.1 <code>java</code>常量指令集合</h4><table>
<thead>
<tr>
<th>字节码</th>
<th>助记符</th>
<th>指令含义</th>
</tr>
</thead>
<tbody><tr>
<td>0x00</td>
<td>nop</td>
<td>None</td>
</tr>
<tr>
<td>0x01</td>
<td>aconst_null</td>
<td>将null推送至栈顶</td>
</tr>
<tr>
<td>0x02</td>
<td>iconst_m1</td>
<td>将int型-1推送至栈顶</td>
</tr>
<tr>
<td>0x03</td>
<td>iconst_0</td>
<td>将int型0推送至栈顶</td>
</tr>
<tr>
<td>0x04</td>
<td>iconst_1</td>
<td>将int型1推送至栈顶</td>
</tr>
<tr>
<td>0x05</td>
<td>iconst_2</td>
<td>将int型2推送至栈顶</td>
</tr>
<tr>
<td>0x06</td>
<td>iconst_3</td>
<td>将int型3推送至栈顶</td>
</tr>
<tr>
<td>0x07</td>
<td>iconst_4</td>
<td>将int型4推送至栈顶</td>
</tr>
<tr>
<td>0x08</td>
<td>iconst_5</td>
<td>将int型5推送至栈顶</td>
</tr>
<tr>
<td>0x09</td>
<td>lconst_0</td>
<td>将long型0推送至栈顶</td>
</tr>
<tr>
<td>0x0a</td>
<td>lconst_1</td>
<td>将long型1推送至栈顶</td>
</tr>
<tr>
<td>0x0b</td>
<td>fconst_0</td>
<td>将float型0推送至栈顶</td>
</tr>
<tr>
<td>0x0c</td>
<td>fconst_1</td>
<td>将float型1推送至栈顶</td>
</tr>
<tr>
<td>0x0d</td>
<td>fconst_2</td>
<td>将float型2推送至栈顶</td>
</tr>
<tr>
<td>0x0e</td>
<td>dconst_0</td>
<td>将double型0推送至栈顶</td>
</tr>
<tr>
<td>0x0f</td>
<td>dconst_1</td>
<td>将double型1推送至栈顶</td>
</tr>
</tbody></table>
<h4 id="2-2-栈操作指令集合"><a href="#2-2-栈操作指令集合" class="headerlink" title="2.2 栈操作指令集合"></a>2.2 栈操作指令集合</h4><table>
<thead>
<tr>
<th>字节码</th>
<th>助记符</th>
<th>指令含义</th>
</tr>
</thead>
<tbody><tr>
<td>0x10</td>
<td>bipush</td>
<td>将单字节的常量值(-128~127)推送至栈顶</td>
</tr>
<tr>
<td>0x11</td>
<td>sipush</td>
<td>将一个短整型常量(-32768~32767)推送至栈顶</td>
</tr>
<tr>
<td>0x12</td>
<td>ldc</td>
<td>将int,float或String型常量值从常量池中推送至栈顶</td>
</tr>
<tr>
<td>0x13</td>
<td>ldc_w</td>
<td>将int,float或String型常量值从常量池中推送至栈顶(宽索引)</td>
</tr>
<tr>
<td>0x14</td>
<td>ldc2_w</td>
<td>将long或double型常量值从常量池中推送至栈顶(宽索引)</td>
</tr>
<tr>
<td>0x15</td>
<td>iload</td>
<td>将指定的int型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x16</td>
<td>lload</td>
<td>将指定的long型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x17</td>
<td>fload</td>
<td>将指定的float型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x18</td>
<td>dload</td>
<td>将指定的double型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x19</td>
<td>aload</td>
<td>将指定的引用类型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x1a</td>
<td>iload_0</td>
<td>将第一个int型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x1b</td>
<td>iload_1</td>
<td>将第二个int型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x1c</td>
<td>iload_2</td>
<td>将第三个int型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x1d</td>
<td>iload_3</td>
<td>将第四个int型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x1e</td>
<td>lload_0</td>
<td>将第一个long型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x1f</td>
<td>lload_1</td>
<td>将第二个long型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x20</td>
<td>lload_2</td>
<td>将第三个long型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x21</td>
<td>lload_3</td>
<td>将第四个long型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x22</td>
<td>fload_0</td>
<td>将第一个float型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x23</td>
<td>fload_1</td>
<td>将第二个float型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x24</td>
<td>fload_2</td>
<td>将第三个float型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x25</td>
<td>fload_3</td>
<td>将第四个float型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x26</td>
<td>dload_0</td>
<td>将第一个double型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x27</td>
<td>dload_1</td>
<td>将第二个double型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x28</td>
<td>dload_2</td>
<td>将第三个double型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x29</td>
<td>dload_3</td>
<td>将第四个double型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x2a</td>
<td>aload_0</td>
<td>将第一个引用类型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x2b</td>
<td>aload_1</td>
<td>将第二个引用类型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x2c</td>
<td>aload_2</td>
<td>将第三个引用类型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x2d</td>
<td>aload_3</td>
<td>将第四个引用类型本地变量推送至栈顶</td>
</tr>
<tr>
<td>0x2e</td>
<td>iaload</td>
<td>将int型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x2f</td>
<td>laload</td>
<td>将long型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x30</td>
<td>faload</td>
<td>将float型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x31</td>
<td>daload</td>
<td>将double型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x32</td>
<td>aaload</td>
<td>将引用类型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x33</td>
<td>baload</td>
<td>将boolean或byte型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x34</td>
<td>caload</td>
<td>将char型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x35</td>
<td>saload</td>
<td>将short型数组指定索引的值推送至栈顶</td>
</tr>
<tr>
<td>0x36</td>
<td>istore</td>
<td>将栈顶int型数值存入指定本地变量</td>
</tr>
<tr>
<td>0x37</td>
<td>lstore</td>
<td>将栈顶long型数值存入指定本地变量</td>
</tr>
<tr>
<td>0x38</td>
<td>fstore</td>
<td>将栈顶float型数值存入指定本地变量</td>
</tr>
<tr>
<td>0x39</td>
<td>dstore</td>
<td>将栈顶double型数值存入指定本地变量</td>
</tr>
<tr>
<td>0x3a</td>
<td>astore</td>
<td>将栈顶引用类型数值存入指定本地变量</td>
</tr>
<tr>
<td>0x3b</td>
<td>istore_0</td>
<td>将栈顶int型数值存入第一个本地变量</td>
</tr>
<tr>
<td>0x3c</td>
<td>istore_1</td>
<td>将栈顶int型数值存入第二个本地变量</td>
</tr>
<tr>
<td>0x3d</td>
<td>istore_2</td>
<td>将栈顶int型数值存入第三个本地变量</td>
</tr>
<tr>
<td>0x3e</td>
<td>istore_3</td>
<td>将栈顶int型数值存入第四个本地变量</td>
</tr>
<tr>
<td>0x3f</td>
<td>lstore_0</td>
<td>将栈顶long型数值存入第一个本地变量</td>
</tr>
<tr>
<td>0x40</td>
<td>lstore_1</td>
<td>将栈顶long型数值存入第二个本地变量</td>
</tr>
<tr>
<td>0x41</td>
<td>lstore_2</td>
<td>将栈顶long型数值存入第三个本地变量</td>
</tr>
<tr>
<td>0x42</td>
<td>lstore_3</td>
<td>将栈顶long型数值存入第四个本地变量</td>
</tr>
<tr>
<td>0x43</td>
<td>fstore_0</td>
<td>将栈顶float型数值存入第一个本地变量</td>
</tr>
<tr>
<td>0x44</td>
<td>fstore_1</td>
<td>将栈顶float型数值存入第二个本地变量</td>
</tr>
<tr>
<td>0x45</td>
<td>fstore_2</td>
<td>将栈顶float型数值存入第三个本地变量</td>
</tr>
<tr>
<td>0x46</td>
<td>fstore_3</td>
<td>将栈顶float型数值存入第四个本地变量</td>
</tr>
<tr>
<td>0x47</td>
<td>dstore_0</td>
<td>将栈顶double型数值存入第一个本地变量</td>
</tr>
<tr>
<td>0x48</td>
<td>dstore_1</td>
<td>将栈顶double型数值存入第二个本地变量</td>
</tr>
<tr>
<td>0x49</td>
<td>dstore_2</td>
<td>将栈顶double型数值存入第三个本地变量</td>
</tr>
<tr>
<td>0x4a</td>
<td>dstore_3</td>
<td>将栈顶double型数值存入第四个本地变量</td>
</tr>
<tr>
<td>0x4b</td>
<td>astore_0</td>
<td>将栈顶引用型数值存入第一个本地变量</td>
</tr>
<tr>
<td>0x4c</td>
<td>astore_1</td>
<td>将栈顶引用型数值存入第二个本地变量</td>
</tr>
<tr>
<td>0x4d</td>
<td>astore_2</td>
<td>将栈顶引用型数值存入第三个本地变量</td>
</tr>
<tr>
<td>0x4e</td>
<td>astore_3</td>
<td>将栈顶引用型数值存入第四个本地变量</td>
</tr>
<tr>
<td>0x4f</td>
<td>iastore</td>
<td>将栈顶int型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x50</td>
<td>lastore</td>
<td>将栈顶long型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x51</td>
<td>fastore</td>
<td>将栈顶float型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x52</td>
<td>dastore</td>
<td>将栈顶double型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x53</td>
<td>aastore</td>
<td>将栈顶引用型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x54</td>
<td>bastore</td>
<td>将栈顶boolean或byte型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x55</td>
<td>castore</td>
<td>将栈顶char型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x56</td>
<td>sastore</td>
<td>将栈顶short型数值存入指定数组的指定索引位置</td>
</tr>
<tr>
<td>0x57</td>
<td>pop</td>
<td>将栈顶数值弹出(数值不能是long或double类型的)</td>
</tr>
<tr>
<td>0x58</td>
<td>pop2</td>
<td>将栈顶的一个(对于非long或double类型)或两个数值(对于非long或double的其他类型)弹出</td>
</tr>
<tr>
<td>0x59</td>
<td>dup</td>
<td>复制栈顶数值并将复制值压入栈顶</td>
</tr>
<tr>
<td>0x5a</td>
<td>dup_x1</td>
<td>复制栈顶数值并将两个复制值压入栈顶</td>
</tr>
<tr>
<td>0x5b</td>
<td>dup_x2</td>
<td>复制栈顶数值并将三个(或两个)复制值压入栈顶</td>
</tr>
<tr>
<td>0x5c</td>
<td>dup2</td>
<td>复制栈顶一个(对于long或double类型)或两个(对于非long或double的其他类型)数值并将复制值压入栈顶</td>
</tr>
<tr>
<td>0x5d</td>
<td>dup2_x1</td>
<td>dup_x1指令的双倍版本</td>
</tr>
<tr>
<td>0x5e</td>
<td>dup2_x2</td>
<td>dup_x2指令的双倍版本</td>
</tr>
</tbody></table>
<h4 id="2-3-算术指令集合"><a href="#2-3-算术指令集合" class="headerlink" title="2.3 算术指令集合"></a>2.3 算术指令集合</h4><table>
<thead>
<tr>
<th>字节码</th>
<th>助记符</th>
<th>指令含义</th>
</tr>
</thead>
<tbody><tr>
<td>0x5f</td>
<td>swap</td>
<td>将栈顶最顶端的两个数值互换(数值不能是long或double类型)</td>
</tr>
<tr>
<td>0x60</td>
<td>iadd</td>
<td>将栈顶两int型数值相加并将结果压入栈顶</td>
</tr>
<tr>
<td>0x61</td>
<td>ladd</td>
<td>将栈顶两long型数值相加并将结果压入栈顶</td>
</tr>
<tr>
<td>0x62</td>
<td>fadd</td>
<td>将栈顶两float型数值相加并将结果压入栈顶</td>
</tr>
<tr>
<td>0x63</td>
<td>dadd</td>
<td>将栈顶两double型数值相加并将结果压入栈顶</td>
</tr>
<tr>
<td>0x64</td>
<td>isub</td>
<td>将栈顶两int型数值相减并将结果压入栈顶</td>
</tr>
<tr>
<td>0x65</td>
<td>lsub</td>
<td>将栈顶两long型数值相减并将结果压入栈顶</td>
</tr>
<tr>
<td>0x66</td>
<td>fsub</td>
<td>将栈顶两float型数值相减并将结果压入栈顶</td>
</tr>
<tr>
<td>0x67</td>
<td>dsub</td>
<td>将栈顶两double型数值相减并将结果压入栈顶</td>
</tr>
<tr>
<td>0x68</td>
<td>imul</td>
<td>将栈顶两int型数值相乘并将结果压入栈顶</td>
</tr>
<tr>
<td>0x69</td>
<td>lmul</td>
<td>将栈顶两long型数值相乘并将结果压入栈顶</td>
</tr>
<tr>
<td>0x6a</td>
<td>fmul</td>
<td>将栈顶两float型数值相乘并将结果压入栈顶</td>
</tr>
<tr>
<td>0x6b</td>
<td>dmul</td>
<td>将栈顶两double型数值相乘并将结果压入栈顶</td>
</tr>
<tr>
<td>0x6c</td>
<td>idiv</td>
<td>将栈顶两int型数值相除并将结果压入栈顶</td>
</tr>
<tr>
<td>0x6d</td>
<td>ldiv</td>
<td>将栈顶两long型数值相除并将结果压入栈顶</td>
</tr>
<tr>
<td>0x6e</td>
<td>fdiv</td>
<td>将栈顶两float型数值相除并将结果压入栈顶</td>
</tr>
<tr>
<td>0x6f</td>
<td>ddiv</td>
<td>将栈顶两double型数值相除并将结果压入栈顶</td>
</tr>
<tr>
<td>0x70</td>
<td>irem</td>
<td>将栈顶两int型数值作取模运算并将结果压入栈顶</td>
</tr>
<tr>
<td>0x71</td>
<td>lrem</td>
<td>将栈顶两long型数值作取模运算并将结果压入栈顶</td>
</tr>
<tr>
<td>0x72</td>
<td>frem</td>
<td>将栈顶两float型数值作取模运算并将结果压入栈顶</td>
</tr>
<tr>
<td>0x73</td>
<td>drem</td>
<td>将栈顶两double型数值作取模运算并将结果压入栈顶</td>
</tr>
<tr>
<td>0x74</td>
<td>ineg</td>
<td>将栈顶int型数值取负并将结果压入栈顶</td>
</tr>
<tr>
<td>0x75</td>
<td>lneg</td>
<td>将栈顶long型数值取负并将结果压入栈顶</td>
</tr>
<tr>
<td>0x76</td>
<td>fneg</td>
<td>将栈顶float型数值取负并将结果压入栈顶</td>
</tr>
<tr>
<td>0x77</td>
<td>dneg</td>
<td>将栈顶double型数值取负并将结果压入栈顶</td>
</tr>
<tr>
<td>0x78</td>
<td>ishl</td>
<td>将int型数值左移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td>0x79</td>
<td>lshl</td>
<td>将long型数值左移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td>0x7a</td>
<td>ishr</td>
<td>将int型数值右(带符号)移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td>0x7b</td>
<td>lshr</td>
<td>将long型数值右(带符号)移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td>0x7c</td>
<td>iushr</td>
<td>将int型数值右(无符号)移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td>0x7d</td>
<td>lushr</td>
<td>将long型数值右(无符号)移指定位数并将结果压入栈顶</td>
</tr>
<tr>
<td>0x7e</td>
<td>iand</td>
<td>将栈顶两int型数值”按位与”并将结果压入栈顶</td>
</tr>
<tr>
<td>0x7f</td>
<td>land</td>
<td>将栈顶两long型数值”按位与”并将结果压入栈顶</td>
</tr>
<tr>
<td>0x80</td>
<td>ior</td>
<td>将栈顶两int型数值”按位或”并将结果压入栈顶</td>
</tr>
<tr>
<td>0x81</td>
<td>lor</td>
<td>将栈顶两long型数值”按位或”并将结果压入栈顶</td>
</tr>
<tr>
<td>0x82</td>
<td>ixor</td>
<td>将栈顶两int型数值”按位异或”并将结果压入栈顶</td>
</tr>
<tr>
<td>0x83</td>
<td>lxor</td>
<td>将栈顶两long型数值”按位异或”并将结果压入栈顶</td>
</tr>
<tr>
<td>0x84</td>
<td>iinc</td>
<td>将指定int型变量增加指定值(如i++, i–, i+=2等)</td>
</tr>
</tbody></table>
<h4 id="2-5-Number类型间转换指令集合"><a href="#2-5-Number类型间转换指令集合" class="headerlink" title="2.5 Number类型间转换指令集合"></a>2.5 <code>Number</code>类型间转换指令集合</h4><table>
<thead>
<tr>
<th>字节码</th>
<th>助记符</th>
<th>指令含义</th>
</tr>
</thead>
<tbody><tr>
<td>0x85</td>
<td>i2l</td>
<td>将栈顶int型数值强制转换为long型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x86</td>
<td>i2f</td>
<td>将栈顶int型数值强制转换为float型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x87</td>
<td>i2d</td>
<td>将栈顶int型数值强制转换为double型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x88</td>
<td>l2i</td>
<td>将栈顶long型数值强制转换为int型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x89</td>
<td>l2f</td>
<td>将栈顶long型数值强制转换为float型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x8a</td>
<td>l2d</td>
<td>将栈顶long型数值强制转换为double型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x8b</td>
<td>f2i</td>
<td>将栈顶float型数值强制转换为int型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x8c</td>
<td>f2l</td>
<td>将栈顶float型数值强制转换为long型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x8d</td>
<td>f2d</td>
<td>将栈顶float型数值强制转换为double型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x8e</td>
<td>d2i</td>
<td>将栈顶double型数值强制转换为int型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x8f</td>
<td>d2l</td>
<td>将栈顶double型数值强制转换为long型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x90</td>
<td>d2f</td>
<td>将栈顶double型数值强制转换为float型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x91</td>
<td>i2b</td>
<td>将栈顶int型数值强制转换为byte型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x92</td>
<td>i2c</td>
<td>将栈顶int型数值强制转换为char型数值并将结果压入栈顶</td>
</tr>
<tr>
<td>0x93</td>
<td>i2s</td>
<td>将栈顶int型数值强制转换为short型数值并将结果压入栈顶</td>
</tr>
</tbody></table>
<h4 id="2-6-比较指令集合"><a href="#2-6-比较指令集合" class="headerlink" title="2.6 比较指令集合"></a>2.6 比较指令集合</h4><table>
<thead>
<tr>
<th>字节码</th>
<th>助记符</th>
<th>指令含义</th>
</tr>
</thead>
<tbody><tr>
<td>0x94</td>
<td>lcmp</td>
<td>比较栈顶两long型数值大小, 并将结果(1, 0或-1)压入栈顶</td>
</tr>
<tr>
<td>0x95</td>
<td>fcmpl</td>
<td>比较栈顶两float型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为<code>NaN</code>时, 将-1压入栈顶</td>
</tr>
<tr>
<td>0x96</td>
<td>fcmpg</td>
<td>比较栈顶两float型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为<code>NaN</code>时, 将1压入栈顶</td>
</tr>
<tr>
<td>0x97</td>
<td>dcmpl</td>
<td>比较栈顶两double型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为<code>NaN</code>时, 将-1压入栈顶</td>
</tr>
<tr>
<td>0x98</td>
<td>dcmpg</td>
<td>比较栈顶两double型数值大小, 并将结果(1, 0或-1)压入栈顶; 当其中一个数值为<code>NaN</code>时, 将1压入栈顶</td>
</tr>
</tbody></table>
<h4 id="2-7-if跳转指令集合"><a href="#2-7-if跳转指令集合" class="headerlink" title="2.7 if跳转指令集合"></a>2.7 <code>if</code>跳转指令集合</h4><table>
<thead>
<tr>
<th>字节码</th>
<th>助记符</th>
<th>指令含义</th>
</tr>
</thead>
<tbody><tr>
<td>0x99</td>
<td>ifeq</td>
<td>当栈顶int型数值等于0时跳转</td>
</tr>
<tr>
<td>0x9a</td>
<td>ifne</td>
<td>当栈顶int型数值不等于0时跳转</td>
</tr>
<tr>
<td>0x9b</td>
<td>iflt</td>
<td>当栈顶int型数值小于0时跳转</td>
</tr>
<tr>
<td>0x9c</td>
<td>ifge</td>
<td>当栈顶int型数值大于等于0时跳转</td>
</tr>
<tr>
<td>0x9d</td>
<td>ifgt</td>
<td>当栈顶int型数值大于0时跳转</td>
</tr>
<tr>
<td>0x9e</td>
<td>ifle</td>
<td>当栈顶int型数值小于等于0时跳转</td>
</tr>
<tr>
<td>0x9f</td>
<td>if_icmpeq</td>
<td>比较栈顶两int型数值大小, 当结果等于0时跳转</td>
</tr>
<tr>
<td>0xa0</td>
<td>if_icmpne</td>
<td>比较栈顶两int型数值大小, 当结果不等于0时跳转</td>
</tr>
<tr>
<td>0xa1</td>
<td>if_icmplt</td>
<td>比较栈顶两int型数值大小, 当结果小于0时跳转</td>
</tr>
<tr>
<td>0xa2</td>
<td>if_icmpge</td>
<td>比较栈顶两int型数值大小, 当结果大于等于0时跳转</td>
</tr>
<tr>
<td>0xa3</td>
<td>if_icmpgt</td>
<td>比较栈顶两int型数值大小, 当结果大于0时跳转</td>
</tr>
<tr>
<td>0xa4</td>
<td>if_icmple</td>
<td>比较栈顶两int型数值大小, 当结果小于等于0时跳转</td>
</tr>
<tr>
<td>0xa5</td>
<td>if_acmpeq</td>
<td>比较栈顶两引用型数值, 当结果相等时跳转</td>
</tr>
<tr>
<td>0xa6</td>
<td>if_acmpne</td>
<td>比较栈顶两引用型数值, 当结果不相等时跳转</td>
</tr>
<tr>
<td>0xa7</td>
<td>goto</td>
<td>无条件跳转</td>
</tr>
<tr>
<td>0xa8</td>
<td>jsr</td>
<td>跳转至指定的16位offset位置, 并将jsr的下一条指令地址压入栈顶</td>
</tr>
<tr>
<td>0xa9</td>
<td>ret</td>
<td>返回至本地变量指定的index的指令位置(一般与jsr或jsr_w联合使用)</td>
</tr>
<tr>
<td>0xaa</td>
<td>tableswitch</td>
<td>用于switch条件跳转, case值连续(可变长度指令)</td>
</tr>
<tr>
<td>0xab</td>
<td>lookupswitch</td>
<td>用于switch条件跳转, case值不连续(可变长度指令)</td>
</tr>
</tbody></table>
<h4 id="2-8-方法调用指令集合"><a href="#2-8-方法调用指令集合" class="headerlink" title="2.8 方法调用指令集合"></a>2.8 方法调用指令集合</h4><table>
<thead>
<tr>
<th>字节码</th>
<th>助记符</th>
<th>指令含义</th>
</tr>
</thead>
<tbody><tr>
<td>0xac</td>
<td>ireturn</td>
<td>从当前方法返回int</td>
</tr>
<tr>
<td>0xad</td>
<td>lreturn</td>
<td>从当前方法返回long</td>
</tr>
<tr>
<td>0xae</td>
<td>freturn</td>
<td>从当前方法返回float</td>
</tr>
<tr>
<td>0xaf</td>
<td>dreturn</td>
<td>从当前方法返回double</td>
</tr>
<tr>
<td>0xb0</td>
<td>areturn</td>
<td>从当前方法返回对象引用</td>
</tr>
<tr>
<td>0xb1</td>
<td>return</td>
<td>从当前方法返回void</td>
</tr>
<tr>
<td>0xb2</td>
<td>getstatic</td>
<td>获取指定类的静态域, 并将其压入栈顶</td>
</tr>
<tr>
<td>0xb3</td>
<td>putstatic</td>
<td>为指定类的静态域赋值</td>
</tr>
<tr>
<td>0xb4</td>
<td>getfield</td>
<td>获取指定类的实例域, 并将其压入栈顶</td>
</tr>
<tr>
<td>0xb5</td>
<td>putfield</td>
<td>为指定类的实例域赋值</td>
</tr>
<tr>
<td>0xb6</td>
<td>invokevirtual</td>
<td>调用实例方法</td>
</tr>
<tr>
<td>0xb7</td>
<td>invokespecial</td>
<td>调用超类构建方法, 实例初始化方法, 私有方法</td>
</tr>
<tr>
<td>0xb8</td>
<td>invokestatic</td>
<td>调用静态方法</td>
</tr>
<tr>
<td>0xb9</td>
<td>invokeinterface</td>
<td>调用接口方法</td>
</tr>
<tr>
<td>0xba</td>
<td>invokedynamic</td>
<td>调用动态方法</td>
</tr>
<tr>
<td>0xbb</td>
<td>new</td>
<td>创建一个对象, 并将其引用引用值压入栈顶</td>
</tr>
<tr>
<td>0xbc</td>
<td>newarray</td>
<td>创建一个指定的原始类型(如int, float, char等)的数组, 并将其引用值压入栈顶</td>
</tr>
<tr>
<td>0xbd</td>
<td>anewarray</td>
<td>创建一个引用型(如类, 接口, 数组)的数组, 并将其引用值压入栈顶</td>
</tr>
<tr>
<td>0xbe</td>
<td>arraylength</td>
<td>获取数组的长度值并压入栈顶</td>
</tr>
<tr>
<td>0xbf</td>
<td>athrow</td>
<td>将栈顶的异常抛出</td>
</tr>
<tr>
<td>0xc0</td>
<td>checkcast</td>
<td>检验类型转换, 检验未通过将抛出 ClassCastException</td>
</tr>
<tr>
<td>0xc1</td>
<td>instanceof</td>
<td>检验对象是否是指定类的实际, 如果是将1压入栈顶, 否则将0压入栈顶</td>
</tr>
<tr>
<td>0xc2</td>
<td>monitorenter</td>
<td>获得对象的锁, 用于同步方法或同步块</td>
</tr>
<tr>
<td>0xc3</td>
<td>monitorexit</td>
<td>释放对象的锁, 用于同步方法或同步块</td>
</tr>
<tr>
<td>0xc4</td>
<td>wide</td>
<td>扩展本地变量的宽度</td>
</tr>
<tr>
<td>0xc5</td>
<td>multianewarray</td>
<td>创建指定类型和指定维度的多维数组(执行该指令时, 操作栈中必须包含各维度的长度值), 并将其引用压入栈顶</td>
</tr>
<tr>
<td>0xc6</td>
<td>ifnull</td>
<td>为null时跳转</td>
</tr>
<tr>
<td>0xc7</td>
<td>ifnonnull</td>
<td>不为null时跳转</td>
</tr>
<tr>
<td>0xc8</td>
<td>goto_w</td>
<td>无条件跳转(宽索引)</td>
</tr>
<tr>
<td>0xc9</td>
<td>jsr_w</td>
<td>跳转至指定的32位offset位置, 并将jsr_w的下一条指令地址压入栈顶</td>
</tr>
</tbody></table>
<h3 id="3-字节码文件信息"><a href="#3-字节码文件信息" class="headerlink" title="3 字节码文件信息"></a>3 字节码文件信息</h3><table>
<thead>
<tr>
<th>标志名称</th>
<th>标志值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>ACC_PUBLIC</strong></td>
<td>0x0001</td>
<td>是否为Public类型</td>
</tr>
<tr>
<td><strong>ACC_FINAL</strong></td>
<td>0x0010</td>
<td>是否被声明为final，只有类可以设置</td>
</tr>
<tr>
<td><strong>ACC_SUPER</strong></td>
<td>0x0020</td>
<td>是否允许使用invokespecial字节码指令的新语义．</td>
</tr>
<tr>
<td><strong>ACC_INTERFACE</strong></td>
<td>0x0200</td>
<td>标志这是一个接口</td>
</tr>
<tr>
<td><strong>ACC_ABSTRACT</strong></td>
<td>0x0400</td>
<td>是否为abstract类型，对于接口或者抽象类来说， 次标志值为真，其他类型为假</td>
</tr>
<tr>
<td><strong>ACC_SYNTHETIC</strong></td>
<td>0x1000</td>
<td>标志这个类并非由用户代码产生</td>
</tr>
<tr>
<td><strong>ACC_ANNOTATION</strong></td>
<td>0x2000</td>
<td>标志这是一个注解</td>
</tr>
<tr>
<td>*<em>ACC_ENUM *</em></td>
<td>0x4000</td>
<td>标志这是一个枚举</td>
</tr>
</tbody></table>
<h3 id="4-字节码类型信息"><a href="#4-字节码类型信息" class="headerlink" title="4 字节码类型信息"></a>4 字节码类型信息</h3><table>
<thead>
<tr>
<th>标识字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>B</td>
<td>基本类型byte</td>
</tr>
<tr>
<td>C</td>
<td>基本类型char</td>
</tr>
<tr>
<td>D</td>
<td>基本类型double</td>
</tr>
<tr>
<td>F</td>
<td>基本类型float</td>
</tr>
<tr>
<td>I</td>
<td>基本类型int</td>
</tr>
<tr>
<td>J</td>
<td>基本类型long</td>
</tr>
<tr>
<td>S</td>
<td>基本类型short</td>
</tr>
<tr>
<td>Z</td>
<td>基本类型boolean</td>
</tr>
<tr>
<td>V</td>
<td>特殊类型void</td>
</tr>
<tr>
<td>L ;</td>
<td>表示对象类型，以分号结尾，如Ljava/lang/Object;</td>
</tr>
<tr>
<td>[</td>
<td>一维数组</td>
</tr>
<tr>
<td>[[</td>
<td>二维数组</td>
</tr>
</tbody></table>
<h3 id="5-字节码中方法表信息"><a href="#5-字节码中方法表信息" class="headerlink" title="5 字节码中方法表信息"></a>5 字节码中方法表信息</h3><table>
<thead>
<tr>
<th>标识字符</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>stack</strong></td>
<td>最大操作数栈，JVM运行时会根据这个值来分配栈帧(Frame)中的操作栈深度,此处为1</td>
</tr>
<tr>
<td><strong>locals</strong></td>
<td>局部变量所需的存储空间，单位为Slot, Slot是虚拟机为局部变量分配内存时所使用的最小单位，为4个字节大小。方法参数(包括实例方法中的隐藏参数this)，显示异常处理器的参数(try catch中的catch块所定义的异常)，方法体中定义的局部变量都需要使用局部变量表来存放。值得一提的是，locals的大小并不一定等于所有局部变量所占的Slot之和，因为局部变量中的Slot是可以重用的。</td>
</tr>
<tr>
<td><strong>args_size</strong></td>
<td>方法参数的个数，这里是1，因为每个实例方法都会有一个隐藏参数this</td>
</tr>
<tr>
<td><strong>attribute_info</strong></td>
<td>方法体内容，0,1,4为字节码”行号”，该段代码的意思是将第一个引用类型本地变量推送至栈顶，然后执行该类型的实例方法，也就是常量池存放的第一个变量，也就是注释里的”java/lang/Object.””:()V”, 然后执行返回语句，结束方法。</td>
</tr>
<tr>
<td><strong>LineNumberTable</strong></td>
<td>该属性的作用是描述源码行号与字节码行号(字节码偏移量)之间的对应关系。可以使用 -g:none 或-g:lines选项来取消或要求生成这项信息，如果选择不生成LineNumberTable，当程序运行异常时将无法获取到发生异常的源码行号，也无法按照源码的行数来调试程序。</td>
</tr>
<tr>
<td><strong>LocalVariableTable</strong></td>
<td>该属性的作用是描述帧栈中局部变量与源码中定义的变量之间的关系。可以使用 -g:none 或 -g:vars来取消或生成这项信息，如果没有生成这项信息，那么当别人引用这个方法时，将无法获取到参数名称，取而代之的是arg0, arg1这样的占位符。 start 表示该局部变量在哪一行开始可见，length表示可见行数，Slot代表所在帧栈位置，Name是变量名称，然后是类型签名。</td>
</tr>
</tbody></table>
<h3 id="6-属性表集合"><a href="#6-属性表集合" class="headerlink" title="6 属性表集合"></a>6 属性表集合</h3><table>
<thead>
<tr>
<th>属性名称</th>
<th>使用位置</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Code</td>
<td>方法表</td>
<td>Java代码编译成的字节码指令</td>
</tr>
<tr>
<td>ConstantValue</td>
<td>字段表</td>
<td>final关键字定义的常量池</td>
</tr>
<tr>
<td>Deprecated</td>
<td>类，方法，字段表</td>
<td>被声明为deprecated的方法和字段</td>
</tr>
<tr>
<td>Exceptions</td>
<td>方法表</td>
<td>方法抛出的异常</td>
</tr>
<tr>
<td>EnclosingMethod</td>
<td>类文件</td>
<td>仅当一个类为局部类或者匿名类是才能拥有这个属性，这个属性用于标识这个类所在的外围方法</td>
</tr>
<tr>
<td>InnerClass</td>
<td>类文件</td>
<td>内部类列表</td>
</tr>
<tr>
<td>LineNumberTable</td>
<td>Code属性</td>
<td>Java源码的行号与字节码指令的对应关系</td>
</tr>
<tr>
<td>LocalVariableTable</td>
<td>Code属性</td>
<td>方法的局部变量描述</td>
</tr>
<tr>
<td>StackMapTable</td>
<td>Code属性</td>
<td>JDK1.6中新增的属性，供新的类型检查检验器检查和处理目标方法的局部变量和操作数有所需要的类是否匹配</td>
</tr>
<tr>
<td>Signature</td>
<td>类，方法表，字段表</td>
<td>JDK1.5中新增的属性，用于支持泛型情况下的方法签名。任何类，接口，初始化方法或成员的泛型前面如果包含了类型变量（Type Variables）或参数化类型（Parameterized Type），则signature属性会为它记录泛型前面信息，由于Java的泛型采用擦除法实现，在为了便面类型信息被擦除后导致签名混乱，需要这个属性记录泛型中的相关信息。</td>
</tr>
<tr>
<td>SourceFile</td>
<td>类文件</td>
<td>记录源文件名称</td>
</tr>
<tr>
<td>SourceDebugExtension</td>
<td>类文件</td>
<td>JDK1.6中新增的属性，用于存储额外的调试信息</td>
</tr>
<tr>
<td>Synthetic</td>
<td>类，方法表，字段表</td>
<td>标志方法或字段为编译器自动生成的</td>
</tr>
<tr>
<td>LocalVariableTypeTable</td>
<td>类</td>
<td>JDK1.5中新增的属性，使用特征签名代替描述符，是为了引入泛型语法之后能描述泛型参数化类型而添加</td>
</tr>
<tr>
<td>RuntimeVisibleAnnotations</td>
<td>类，方法表，字段表</td>
<td>JDK1.5中新增的属性，为动态注解提供支持 ，用于指明那些注解是运行时（运行时就是进行反射调用）可见的</td>
</tr>
<tr>
<td>RuntimeInvisibleAnnotations</td>
<td>表，方法表，字段表</td>
<td>JDK1.5中新增的属性，和上面刚好相反，用于指明哪些注解是运行时不可见的</td>
</tr>
<tr>
<td>RuntimeVisibleParameterAnnotation</td>
<td>方法表</td>
<td>JDK1.5中新增的属性，作用与RuntimeVisibleAnnotations属性类似，只不过作用对象为方法</td>
</tr>
<tr>
<td>AnnotationDefault</td>
<td>方法表</td>
<td>JDK1.5中新增的属性，用于记录注解类元素的默认值</td>
</tr>
<tr>
<td>BootstrapMethods</td>
<td>类文件</td>
<td>JDK1.7中新增的属性，用于保存invokeddynamic指令引用的引导方式限定符</td>
</tr>
</tbody></table>
<p>对于每个属性，它的名称需要从常量池中应用一个<code>CONSTANT_Utf8_info</code>类型的常量来标书，而属性值的结构则是完全子墩医德，只需要通过一个<code>u4</code>的长度属性去说明属性值做占用的位数即可，其符合规则的结构如下图。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody><tr>
<td>u2</td>
<td>attribute_name_index</td>
<td>1</td>
</tr>
<tr>
<td>u4</td>
<td>attribute_length</td>
<td>1</td>
</tr>
<tr>
<td>u1</td>
<td>infoattribute_length</td>
<td></td>
</tr>
</tbody></table>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol>
<li><a href="https://juejin.im/post/5aca2c366fb9a028c97a5609">https://juejin.im/post/5aca2c366fb9a028c97a5609</a></li>
<li><a href="https://segmentfault.com/a/1190000008722128">https://segmentfault.com/a/1190000008722128</a></li>
<li><a href="https://juejin.im/post/5db7e3dcf265da4d40711f7e">https://juejin.im/post/5db7e3dcf265da4d40711f7e</a></li>
</ol>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>program language</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>java垃圾回收算法介绍</title>
    <url>/java-gc/</url>
    <content><![CDATA[<h3 id="1-垃圾回收算法"><a href="#1-垃圾回收算法" class="headerlink" title="1 垃圾回收算法"></a>1 垃圾回收算法</h3><ol>
<li><p>标记算法</p>
<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414214951.png" alt="介绍"></p>
<p>该算法分成两步完成：   </p>
<ol>
<li>在<code>java</code>程序运行过程中，当有些对应没有被<code>gc root</code>所引用时，那么该对象就会被标记。</li>
<li>当标记完之后，那些被标记的对应，就会被清除掉，也就是释放内存。释放之后，会那段内存的起始位置加入到内存的空内存地址库。当再有新对象被创建时，首先会查找地址库中的内存块是否有符合条件（内存大小是否够用）的，如果有，就将其分配给新对象，否则就另外开辟一段。 </li>
</ol>
</blockquote>
</li>
</ol>
<ul>
<li><p>优点：</p>
<ul>
<li><p>清理速度很快</p>
<blockquote>
<p>只需要将被标记的对象的起始地址记录下来，就可以完成清理工作，所以速度很快</p>
</blockquote>
</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li><p>容易产生内存碎片</p>
<blockquote>
<p>从上图中可以看到，由于很多被释放掉的对象都是穿插着的，所以很难有一块完整的空内存，有时候总的空内存是足够分配给一块新的需要大内存的对象的，但是由于非常零碎，所以没办法利用。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p>标记整理</p>
<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414220020.png" alt="标记整理"></p>
<p>该算法还是分两步：</p>
<ol>
<li>首先第一步和标记算法一样，都是先给没有被<code>gc root</code>引用的对象进行标记</li>
<li>这一步，该算法做了一个整理的操作：也就是将一些还在被<code>gc root</code>引用的对象向前移动，这里的移动包括数据，以及一些引用的地址，都需要做修改，所以这一步需要消耗一定的时间。相对于标记算法而言，速度较慢</li>
</ol>
</blockquote>
<ul>
<li><p>优点：</p>
<ul>
<li>能够有效利用被释放的空间，相对于标记算法，不会再产生内存碎片了</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>速度没有标记算法快，较慢</li>
</ul>
</li>
</ul>
</li>
<li><p>复制</p>
<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414220724.png" alt="复制算法"></p>
<p>该算法有两个区域，一个是<code>FROM</code>区域，另一个是<code>TO</code>区域，该算法执行分成三步：</p>
<ol>
<li><p>先标记处没有被<code>gc root</code>引用的对象</p>
</li>
<li><p>然后将<code>FROM</code>被标记的对象释放掉，在将没有被释放掉的对象复制一份到<code>TO</code>区域中</p>
<p>复制完成之后：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414221427.png" alt="复制完成之后"></p>
</li>
<li><p>然后在交换<code>FROM</code>和<code>TO</code>的位置，这样<code>TO</code>就又变成了一个空的内存空间</p>
<p>交换完以后：    </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414221535.png" alt="交换完之后"></p>
</li>
</ol>
</blockquote>
<ul>
<li>优点：<ul>
<li>不会产生内存碎片</li>
</ul>
</li>
<li>缺点：<ul>
<li>需要占用两块内存空间，所需要的内存空间较大</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程内部堆内存溢出，并不会导致主线程退出</title>
    <url>/java-heap-overflow-thread/</url>
    <content><![CDATA[<h3 id="1-代码"><a href="#1-代码" class="headerlink" title="1 代码"></a>1 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _8M = <span class="number">8</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">//vm 参数：-Xmx20m  设置堆内存为20M</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_8M]);</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_8M]);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(<span class="number">2000L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200415153313.png" alt="运行结果"></p>
</blockquote>
<p>从运行结果可以看出，线程内部的堆内存溢出，并不会导致主线程结束。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>program language</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>java内部类讲解，成员内部类，局部内部类，匿名内部类，静态内部类</title>
    <url>/java-inner-class/</url>
    <content><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h3><p><code>java</code>中的类，除了定义在包（<code>package</code>）中之外，还可以定义在一个类的内部，主要有4种，分别是成员内部类，局部内部类，匿名内部类，静态内部类。接下通过代码分析，了解一下什么是<code>java</code>内部类。</p>
<h3 id="2-java内部类介绍"><a href="#2-java内部类介绍" class="headerlink" title="2 java内部类介绍"></a>2 <code>java</code>内部类介绍</h3><h4 id="2-1-成员内部类"><a href="#2-1-成员内部类" class="headerlink" title="2.1 成员内部类"></a>2.1 成员内部类</h4><p>成员内部类，顾名思义，也就是该内部类相当于该<code>外部类</code>的一个成员一样，和该<code>外部类</code>中的成员属性或者成员方法同级。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;drawshape&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-1-成员内部类访问外部类属性："><a href="#2-1-1-成员内部类访问外部类属性：" class="headerlink" title="2.1.1 成员内部类访问外部类属性："></a>2.1.1 成员内部类访问外部类属性：</h5><p>外部类<code>Circle</code>里面定义了一个内部类<code>Draw</code>，该成员内部类可以无条件调用外部类<code>Circle</code>中的任何属性、方法等，无论公有还是私有，都可以访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count =<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(radius);  <span class="comment">//外部类的private成员</span></span><br><span class="line">            System.out.println(count);   <span class="comment">//外部类的静态成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：当成员内部类中也定义了一个和外部类中相同名字的变量时，如果此时想要使用外部类中的属性，那么需要使用下面的这种方式，不能直接使用变量调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">外部类.<span class="keyword">this</span>.成员变量</span><br><span class="line">外部类.<span class="keyword">this</span>.成员方法</span><br></pre></td></tr></table></figure>

<h5 id="2-1-2-外部类访问成员内部类属性："><a href="#2-1-2-外部类访问成员内部类属性：" class="headerlink" title="2.1.2 外部类访问成员内部类属性："></a>2.1.2 外部类访问成员内部类属性：</h5><p>虽然成员内部类可以无条件地访问外部类的成员，而外部类想访问成员内部类的成员却不是这么随心所欲了。在外部类中如果要访问成员内部类的成员，必须先创建一个成员内部类的对象，再通过指向这个对象的引用来访问：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">        getDrawInstance().drawSahpe();   <span class="comment">//必须先创建成员内部类的对象，再进行访问</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Draw <span class="title">getDrawInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Draw();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(radius);  <span class="comment">//外部类的private成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-3-创建成员内部类"><a href="#2-1-3-创建成员内部类" class="headerlink" title="2.1.3 创建成员内部类"></a>2.1.3 创建成员内部类</h5><p>成员内部类是依附在外部类中的，所以不能单独存在，因为它是作为该外部类的一个成员。如果需要使用成员内部类对象，可以通过两种方式创建：</p>
<ul>
<li>先创建外部类，通过外部类创建成员内部类</li>
<li>在外部类中写一个方法，该方法中创建一个成员内部类并返回</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//第一种方式：</span></span><br><span class="line">        Outter outter = <span class="keyword">new</span> Outter();</span><br><span class="line">        Outter.Inner inner = outter.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;  <span class="comment">//必须通过Outter对象来创建</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//第二种方式：</span></span><br><span class="line">        Outter.Inner inner1 = outter.getInnerInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Inner inner = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Outter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">getInnerInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inner == <span class="keyword">null</span>)</span><br><span class="line">            inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        <span class="keyword">return</span> inner;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-4-小结"><a href="#2-1-4-小结" class="headerlink" title="2.1.4 小结"></a>2.1.4 小结</h5><p>　内部类可以拥有private访问权限、protected访问权限、public访问权限及包访问权限。比如上面的例子，如果成员内部类Inner用private修饰，则只能在外部类的内部访问，如果用public修饰，则任何地方都能访问；如果用protected修饰，则只能在同一个包下或者继承外部类的情况下访问；如果是默认访问权限，则只能在同一个包下访问。这一点和外部类有一点不一样，外部类只能被public和包访问两种权限修饰。由于成员内部类看起来像是外部类的一个成员，所以可以像类的成员一样拥有多种权限修饰。</p>
<h4 id="2-2-局部内部类"><a href="#2-2-局部内部类" class="headerlink" title="2.2 局部内部类"></a>2.2 局部内部类</h4><p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span></span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> People <span class="title">getWoman</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;   <span class="comment">//局部内部类</span></span><br><span class="line">            <span class="keyword">int</span> age =<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Woman();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>，局部内部类就像是方法里面的一个局部变量一样，是不能有public、protected、private以及static修饰符的。</p>
<h4 id="2-3-匿名内部类"><a href="#2-3-匿名内部类" class="headerlink" title="2.3 匿名内部类"></a>2.3 匿名内部类</h4><p>匿名内部类是<code>java</code>中使用的比较频繁的一种，因为使用方便，不需要给类取名字，省去了一些维护的功夫。下面看一个<code>java</code>类的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;  <span class="comment">//定义了一个线程接口</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;this is inner&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>同样的，匿名内部类也是不能有访问修饰符和static修饰符的。　　</p>
<p>匿名内部类是唯一一种没有构造器的类。正因为其没有构造器，所以匿名内部类的使用范围非常有限，大部分匿名内部类用于接口回调。匿名内部类在编译的时候由系统自动起名为Outter$1.class。一般来说，匿名内部类用于继承其他类或是实现接口，并不需要增加额外的方法，只是对继承方法的实现或是重写。</p>
<h4 id="2-4-静态内部类"><a href="#2-4-静态内部类" class="headerlink" title="2.4 静态内部类"></a>2.4 静态内部类</h4><p>静态内部类也是定义在另一个类里面的类，只不过在类的前面多了一个关键字static。静态内部类是不需要依赖于外部类的，这点和类的静态成员属性有点类似，并且它不能使用外部类的非static成员变量或者方法，这点很好理解，因为在没有外部类的对象的情况下，可以创建静态内部类的对象，如果允许访问外部类的非static成员就会产生矛盾，因为外部类的非static成员必须依附于具体的对象。就比如说程序的入口函数，<code>main</code>函数就是一个静态内部类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  <span class="comment">//静态内部类</span></span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;this is inner&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-内部类的使用场景"><a href="#3-内部类的使用场景" class="headerlink" title="3 内部类的使用场景"></a>3 内部类的使用场景</h3><ol>
<li><p>每个内部类都能独立的集成一个接口的实现，所以无论外部类是否已经集成了某个（接口）实现，对于内部类都没有影响。内部类使得多重集成的解决方案变得完整。</p>
</li>
<li><p>方便将存在一定逻辑关系的类组织在一起，又可以对外界隐藏。</p>
</li>
<li><p>方便编写时间驱动程序。</p>
</li>
<li><p>方便编写线程代码。</p>
</li>
</ol>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol>
<li><a href="https://www.cnblogs.com/dolphin0520/p/3811445.html">https://www.cnblogs.com/dolphin0520/p/3811445.html</a></li>
<li><a href="https://juejin.im/entry/5d15db5be51d4550bf1ae8a1">https://juejin.im/entry/5d15db5be51d4550bf1ae8a1</a></li>
</ol>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>program language</tag>
      </tags>
  </entry>
  <entry>
    <title>java中的接口(interface)和抽象类(abstract)的区别</title>
    <url>/java-interface-abstract/</url>
    <content><![CDATA[<h3 id="1-如何定义interface"><a href="#1-如何定义interface" class="headerlink" title="1 如何定义interface"></a>1 如何定义interface</h3><p>如何在<code>java</code>中定义接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterfaceName</span></span>&#123;</span><br><span class="line">  <span class="comment">//这里写具体的接口内部的方法</span></span><br><span class="line">  <span class="comment">//比如：</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-如何定义abstract"><a href="#2-如何定义abstract" class="headerlink" title="2 如何定义abstract"></a>2 如何定义abstract</h3><p>如何在<code>java</code>中定义抽象类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsName</span></span>&#123;</span><br><span class="line">  <span class="comment">//这里写具体的方法  可以写抽象方法和具体方法</span></span><br><span class="line">  <span class="comment">//比如：</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;; <span class="comment">//不是抽象方法</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="interface和abstract的相同之处"><a href="#interface和abstract的相同之处" class="headerlink" title="interface和abstract的相同之处"></a>interface和abstract的相同之处</h3><ul>
<li>都是用来定义一个规范的，不写具体的实现</li>
</ul>
<h3 id="interface和abstract的不同之处"><a href="#interface和abstract的不同之处" class="headerlink" title="interface和abstract的不同之处"></a>interface和abstract的不同之处</h3><ul>
<li>interface内部定义的方法，它的实现类必须将其全部实现</li>
<li>abstract内部定义的方法，继承自它的子类，其子类可以不用全部实现其父类中的方法，普通方法可以不用全部实现，抽象方法必须全部实现</li>
<li>抽象类中可以没有抽象方法</li>
</ul>
<h3 id="看具体代码"><a href="#看具体代码" class="headerlink" title="看具体代码"></a>看具体代码</h3><p>AbsClass.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这是定义的一个抽象方法 不需要大括号</span></span><br><span class="line"><span class="comment">    继承该类的子类必须实现该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这是一个普通方法 必须带大括号，内部可以空实现即不写任何代码</span></span><br><span class="line"><span class="comment">    继承该类的子类可以不用实现该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showName</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>interface1.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">interface1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    下面定义的两个方法，实现该接口的类，必去全部实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>concreteClass.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">concreteClass</span> <span class="keyword">extends</span> <span class="title">AbsClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>concreteInterface.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">concreteInterface</span> <span class="keyword">implements</span> <span class="title">Interface1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
        <tag>basic knowledge</tag>
      </tags>
  </entry>
  <entry>
    <title>底层数据结构链表，以及java代码实现</title>
    <url>/java-link/</url>
    <content><![CDATA[<h3 id="1-原理介绍"><a href="#1-原理介绍" class="headerlink" title="1 原理介绍"></a>1 原理介绍</h3><p>链表和数组的区别在于，数组的插入和删除操作需要整个数组一起跟着动，这样的效率很低。举个例子：打麻将时，当有一个麻将子，其大小正好在已经排序好的麻将中间，如果需要插入进原来的麻将序列，那么需要将之前或者之后的麻将全部移动，这样很费时间，所以链表可以弥补这种不足。</p>
<h4 id="1-1-增"><a href="#1-1-增" class="headerlink" title="1.1 增"></a>1.1 增</h4><p>链表的插入操作包括两种：</p>
<ul>
<li>直接在末尾追加</li>
<li>在中间的某个位置插入</li>
</ul>
<p>如下图所示，两种方式需要单独考虑。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200425205325406.jpg" alt="示意图"></p>
<h4 id="1-2-删"><a href="#1-2-删" class="headerlink" title="1.2 删"></a>1.2 删</h4><p>链表的删除，也包括两种：</p>
<ul>
<li>直接删除末尾的节点</li>
<li>删除中间的节点</li>
</ul>
<p><strong>方式1删除：</strong></p>
<p>使用两个指针，一个指针指向当前的节点，一个指针指向当前节点的前驱节点，前驱节点的后驱直接指向点前节点的后驱，即可实现删除功能。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200425210011928.jpg" alt="方式1删除"></p>
<p><strong>方式2删除：</strong></p>
<p>只使用一个指针，将当前节点的后一个节点的数据赋值到当前节点，并将当前节点的后驱指向后一个节点的后一个节点。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200425203253891.jpg" alt="方式2 删除"></p>
<h4 id="1-3-改"><a href="#1-3-改" class="headerlink" title="1.3 改"></a>1.3 改</h4><p>修改其实就是先查找是否有需要修改的这个<code>数据</code>，如果没有这个数据返回<code>false</code>，否则就修改数据。</p>
<h4 id="1-4-查"><a href="#1-4-查" class="headerlink" title="1.4 查"></a>1.4 查</h4><p>查找数据也是一个一个遍历，但是如果链表有重复数据的话，只会返回第一次查找的数据。</p>
<h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h3><h4 id="2-1-创建链表"><a href="#2-1-创建链表" class="headerlink" title="2.1 创建链表"></a>2.1 创建链表</h4><p>链表中的节点的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        T data;</span><br><span class="line">        Node next = <span class="keyword">null</span>;<span class="comment">//下一个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-插入元素"><a href="#2-2-插入元素" class="headerlink" title="2.2 插入元素"></a>2.2 插入元素</h4><p>首先判断是否是一个空链表，如果是，则创建新链表，并将数据赋值给新节点，否则在末尾追加，或者在中间任意位置处插入。</p>
<ul>
<li>在末尾追加</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == head) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = newNode;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在中间任意位置插入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, T data)</span> </span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="comment">//if index=1, special opearate</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123; <span class="comment">//head is not existed</span></span><br><span class="line">                head = newNode;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//head is existed</span></span><br><span class="line">                Node temp = head;</span><br><span class="line">                newNode.next = temp;</span><br><span class="line">                head = newNode;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index not true -&gt; false</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; <span class="keyword">this</span>.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;<span class="comment">//count the current node</span></span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; index) &#123;</span><br><span class="line">            count += <span class="number">1</span>;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.next = temp.next;</span><br><span class="line">        temp.next = newNode;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-删除元素"><a href="#2-3-删除元素" class="headerlink" title="2.3 删除元素"></a>2.3 删除元素</h4><h5 id="2-3-1-方法1"><a href="#2-3-1-方法1" class="headerlink" title="2.3.1 方法1"></a>2.3.1 方法1</h5><p>上面介绍过了方式1的删除方式，这里主要展示关键代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node pre = head;</span><br><span class="line">Node cur = head.next;</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cur.data == data) &#123;</span><br><span class="line">        foundNum++;</span><br><span class="line">        pre.next = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    pre = cur;</span><br><span class="line">    cur = cur.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-2-方法2"><a href="#2-3-2-方法2" class="headerlink" title="2.3.2 方法2"></a>2.3.2 方法2</h5><p>关键代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node temp = head;</span><br><span class="line"><span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (temp.data == data) &#123;</span><br><span class="line">        foundNum += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        T tempData = temp.data;</span><br><span class="line">        temp.data = temp.next.data;</span><br><span class="line">        temp.next.data = tempData;</span><br><span class="line">        temp.next = temp.next.next;</span><br><span class="line"></span><br><span class="line">        length--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = temp.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-查询元素"><a href="#2-4-查询元素" class="headerlink" title="2.4 查询元素"></a>2.4 查询元素</h4><p>对着链表中的元素一个一个遍历，直到找到为止，如果找不到则返回<code>false</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> foundIndex = <span class="number">0</span>;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span> (temp.next.data == data) &#123;</span><br><span class="line">                foundIndex++;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (foundIndex == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-5-打印元素"><a href="#2-5-打印元素" class="headerlink" title="2.5 打印元素"></a>2.5 打印元素</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">printNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(temp.next.data + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-6-获取长度"><a href="#2-6-获取长度" class="headerlink" title="2.6 获取长度"></a>2.6 获取长度</h4><p>定义了一个全局变量，用来存储链表的长度，当插入元素成功之后，自加1，删除之后自减1,。</p>
<h3 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3 完整代码"></a>3 完整代码</h3><p><code>MyLinkNode.java</code>文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    Node head = <span class="keyword">new</span> Node();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        T data;</span><br><span class="line">        Node next = <span class="keyword">null</span>;<span class="comment">//下一个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == head) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = newNode;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, T data)</span> </span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">        <span class="comment">//if index=1, special opearate</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123; <span class="comment">//head is not existed</span></span><br><span class="line">                head = newNode;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//head is existed</span></span><br><span class="line">                Node temp = head;</span><br><span class="line">                newNode.next = temp;</span><br><span class="line">                head = newNode;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index not true -&gt; false</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; <span class="keyword">this</span>.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;<span class="comment">//count the current node</span></span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; index) &#123;</span><br><span class="line">            count += <span class="number">1</span>;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.next = temp.next;</span><br><span class="line">        temp.next = newNode;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">printNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(temp.next.data + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> foundNum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方式1：</span></span><br><span class="line"><span class="comment">        使用两个指针，一个指针指向当前指针，一个指针当前指针的前驱，当删除时，直接忽略需要删除的节点即可</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node pre = head;</span><br><span class="line">        Node cur = head.next;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.data == data) &#123;</span><br><span class="line">                foundNum++;</span><br><span class="line">                pre.next = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方式2：将要删除的节点(假设要删除的节点的位置3)的下一个节点（位置是4）的数据赋值到当前要删除的节点，</span></span><br><span class="line"><span class="comment">        此时当前节点（位置是3）的数据是下一节点（位置是4）的数据，然后将当前节点（位置是3）的后驱指向一下节点（位置是4）</span></span><br><span class="line"><span class="comment">        的下一节点（位置是5）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        Node temp = head;</span></span><br><span class="line"><span class="comment">//        while (temp != null) &#123;</span></span><br><span class="line"><span class="comment">//            if (temp.data == data) &#123;</span></span><br><span class="line"><span class="comment">//                foundNum += 1;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                T tempData = temp.data;</span></span><br><span class="line"><span class="comment">//                temp.data = temp.next.data;</span></span><br><span class="line"><span class="comment">//                temp.next.data = tempData;</span></span><br><span class="line"><span class="comment">//                temp.next = temp.next.next;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                length--;</span></span><br><span class="line"><span class="comment">//                return true;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            temp = temp.next;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (foundNum == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;not found data -&gt;&quot;</span> + data);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        length--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            Node temp = head;</span><br><span class="line">            head = temp.next;</span><br><span class="line">            System.out.println(head.data + <span class="string">&quot;---&quot;</span> + head.next.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt;= <span class="keyword">this</span>.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; index) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = temp.next.next;</span><br><span class="line">        length--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> foundIndex = <span class="number">0</span>;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span> (temp.next.data == data) &#123;</span><br><span class="line">                foundIndex++;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (foundIndex == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">update</span><span class="params">(T oldData, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> foundNum = <span class="number">0</span>;</span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">if</span> (oldData <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((oldData.equals(temp.data))) &#123;</span><br><span class="line">                    foundNum++;</span><br><span class="line">                    temp.data = data;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldData <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">            <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp.data == oldData) &#123;</span><br><span class="line">                    foundNum++;</span><br><span class="line">                    temp.data = data;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (foundNum == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试<code>java</code>文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyLinkNode&lt;String&gt; myLinkNode = <span class="keyword">new</span> MyLinkNode&lt;&gt;();</span><br><span class="line">        myLinkNode.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        myLinkNode.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        myLinkNode.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        myLinkNode.add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        myLinkNode.insert(<span class="number">3</span>,<span class="string">&quot;insert&quot;</span>);</span><br><span class="line">        myLinkNode.printNode();</span><br><span class="line">        System.out.println(<span class="string">&quot;length=&quot;</span>+myLinkNode.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        myLinkNode.delete(<span class="string">&quot;insert&quot;</span>);</span><br><span class="line">        myLinkNode.printNode();</span><br><span class="line">        System.out.println(<span class="string">&quot;length=&quot;</span>+myLinkNode.length());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>program language</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>java多线程中的锁机制</title>
    <url>/java-lock-mechanism/</url>
    <content><![CDATA[<p><a href="https://tech.meituan.com/2018/11/15/java-lock.html">reference</a></p>
<p>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。本文旨在对锁相关源码（本文中的源码来自JDK 8和Netty 3.10.6）、使用场景进行举例，为读者介绍主流锁的知识点，以及不同的锁的适用场景。</p>
<p>Java中往往是按照是否含有某一特性来定义锁，我们通过特性将锁进行分组归类，再使用对比的方式进行介绍，帮助大家更快捷的理解相关知识。下面给出本文内容的总体分类目录：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/7f749fc8.png" alt="img"></p>
<h3 id="1-乐观锁-VS-悲观锁"><a href="#1-乐观锁-VS-悲观锁" class="headerlink" title="1. 乐观锁 VS 悲观锁"></a>1. 乐观锁 VS 悲观锁</h3><p>乐观锁与悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。在Java和数据库中都有此概念对应的实际应用。</p>
<p>先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。</p>
<p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</p>
<p>乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/c8703cd9.png" alt="img"></p>
<p>根据从上面的概念描述我们可以发现：</p>
<ul>
<li>悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</li>
<li>乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。</li>
</ul>
<p>光说概念有些抽象，我们来看下乐观锁和悲观锁的调用方式示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------------------- 悲观锁的调用方式 -------------------------</span></span><br><span class="line"><span class="comment">// synchronized</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 操作同步资源</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ReentrantLock</span></span><br><span class="line"><span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">// 需要保证多个线程使用的是同一个锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyPublicResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	lock.lock();</span><br><span class="line">	<span class="comment">// 操作同步资源</span></span><br><span class="line">	lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------- 乐观锁的调用方式 -------------------------</span></span><br><span class="line"><span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();  <span class="comment">// 需要保证多个线程使用的是同一个AtomicInteger</span></span><br><span class="line">atomicInteger.incrementAndGet(); <span class="comment">//执行自增1</span></span><br></pre></td></tr></table></figure>

<p>通过调用方式示例，我们可以发现悲观锁基本都是在显式的锁定之后再操作同步资源，而乐观锁则直接去操作同步资源。那么，为何乐观锁能够做到不锁定同步资源也可以正确的实现线程同步呢？我们通过介绍乐观锁的主要实现方式 “CAS” 的技术原理来为大家解惑。</p>
<p>CAS全称 Compare And Swap（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。java.util.concurrent包中的原子类就是通过CAS来实现了乐观锁。</p>
<p>CAS算法涉及到三个操作数：</p>
<ul>
<li>需要读写的内存值 V。</li>
<li>进行比较的值 A。</li>
<li>要写入的新值 B。</li>
</ul>
<p>当且仅当 V 的值等于 A 时，CAS通过原子方式用新值B来更新V的值（“比较+更新”整体是一个原子操作），否则不会执行任何操作。一般情况下，“更新”是一个不断重试的操作。</p>
<p>之前提到java.util.concurrent包中的原子类，就是通过CAS来实现了乐观锁，那么我们进入原子类AtomicInteger的源码，看一下AtomicInteger的定义：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/feda866e.png" alt="img"></p>
<p>根据定义我们可以看出各属性的作用：</p>
<ul>
<li>unsafe： 获取并操作内存的数据。</li>
<li>valueOffset： 存储value在AtomicInteger中的偏移量。</li>
<li>value： 存储AtomicInteger的int值，该属性需要借助volatile关键字保证其在线程间是可见的。</li>
</ul>
<p>接下来，我们查看AtomicInteger的自增函数incrementAndGet()的源码时，发现自增函数底层调用的是unsafe.getAndAddInt()。但是由于JDK本身只有Unsafe.class，只通过class文件中的参数名，并不能很好的了解方法的作用，所以我们通过OpenJDK 8 来查看Unsafe的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------------------- JDK 8 -------------------------</span></span><br><span class="line"><span class="comment">// AtomicInteger 自增方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unsafe.class</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> var5;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">      var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">  &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">  <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------- OpenJDK 8 -------------------------</span></span><br><span class="line"><span class="comment">// Unsafe.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> v;</span><br><span class="line">   <span class="keyword">do</span> &#123;</span><br><span class="line">       v = getIntVolatile(o, offset);</span><br><span class="line">   &#125; <span class="keyword">while</span> (!compareAndSwapInt(o, offset, v, v + delta));</span><br><span class="line">   <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据OpenJDK 8的源码我们可以看出，getAndAddInt()循环获取给定对象o中的偏移量处的值v，然后判断内存值是否等于v。如果相等则将内存值设置为 v + delta，否则返回false，继续循环进行重试，直到设置成功才能退出循环，并且将旧值返回。整个“比较+更新”操作封装在compareAndSwapInt()中，在JNI里是借助于一个CPU指令完成的，属于原子操作，可以保证多个线程都能够看到同一个变量的修改值。</p>
<p>后续JDK通过CPU的cmpxchg指令，去比较寄存器中的 A 和 内存中的值 V。如果相等，就把要写入的新值 B 存入内存中。如果不相等，就将内存值 V 赋值给寄存器中的值 A。然后通过Java代码中的while循环再次调用cmpxchg指令进行重试，直到设置成功为止。</p>
<p>CAS虽然很高效，但是它也存在三大问题，这里也简单说一下：</p>
<ol>
<li><p>ABA问题</p>
<p>。CAS需要在操作值的时候检查内存值是否发生变化，没有发生变化才会更新内存值。但是如果内存值原来是A，后来变成了B，然后又变成了A，那么CAS进行检查时会发现值没有发生变化，但是实际上是有变化的。ABA问题的解决思路就是在变量前面添加版本号，每次变量更新的时候都把版本号加一，这样变化过程就从“A－B－A”变成了“1A－2B－3A”。</p>
<ul>
<li>JDK从1.5开始提供了AtomicStampedReference类来解决ABA问题，具体操作封装在compareAndSet()中。compareAndSet()首先检查当前引用和当前标志与预期引用和预期标志是否相等，如果都相等，则以原子方式将引用值和标志的值设置为给定的更新值。</li>
</ul>
</li>
<li><p><strong>循环时间长开销大</strong>。CAS操作如果长时间不成功，会导致其一直自旋，给CPU带来非常大的开销。</p>
</li>
<li><p>只能保证一个共享变量的原子操作</p>
<p>。对一个共享变量执行操作时，CAS能够保证原子操作，但是对多个共享变量操作时，CAS是无法保证操作的原子性的。</p>
<ul>
<li>Java从1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，可以把多个变量放在一个对象里来进行CAS操作。</li>
</ul>
</li>
</ol>
<h3 id="2-自旋锁-VS-适应性自旋锁"><a href="#2-自旋锁-VS-适应性自旋锁" class="headerlink" title="2. 自旋锁 VS 适应性自旋锁"></a>2. 自旋锁 VS 适应性自旋锁</h3><p>在介绍自旋锁前，我们需要介绍一些前提知识来帮助大家明白自旋锁的概念。</p>
<p>阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p>
<p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p>
<p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/452a3363.png" alt="img"></p>
<p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程。</p>
<p>自旋锁的实现原理同样也是CAS，AtomicInteger中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/83b3f85e.png" alt="img"></p>
<p>自旋锁在JDK1.4.2中引入，使用-XX:+UseSpinning来开启。JDK 6中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。</p>
<p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p>
<p>在自旋锁中 另有三种常见的锁形式:TicketLock、CLHlock和MCSlock，本文中仅做名词介绍，不做深入讲解，感兴趣的同学可以自行查阅相关资料。</p>
<h3 id="3-无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁"><a href="#3-无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁" class="headerlink" title="3. 无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁"></a>3. 无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁</h3><p>这四种锁是指锁的状态，专门针对synchronized的。在介绍这四种锁状态之前还需要介绍一些额外的知识。</p>
<p>首先为什么Synchronized能实现线程同步？</p>
<p>在回答这个问题之前我们需要了解两个重要的概念：“Java对象头”、“Monitor”。</p>
<h4 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h4><p>synchronized是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在Java对象头里的，而Java对象头又是什么呢？</p>
<p>我们以Hotspot虚拟机为例，Hotspot的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。</p>
<p><strong>Mark Word</strong>：默认存储对象的HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。</p>
<p><strong>Klass Point</strong>：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>
<h4 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h4><p>Monitor可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者Monitor锁。</p>
<p>Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。</p>
<p>现在话题回到synchronized，synchronized通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步。</p>
<p>如同我们在自旋锁中提到的“阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长”。这种方式就是synchronized最初实现同步的方式，这就是JDK 6之前synchronized效率低的原因。这种依赖于操作系统Mutex Lock所实现的锁我们称之为“重量级锁”，JDK 6中为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。</p>
<p>所以目前锁一共有4种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。锁状态只能升级不能降级。</p>
<p>通过上面的介绍，我们对synchronized的加锁机制以及相关知识有了一个了解，那么下面我们给出四种锁状态对应的的Mark Word内容，然后再分别讲解四种锁状态的思路以及特点：</p>
<table>
<thead>
<tr>
<th align="left">锁状态</th>
<th align="left">存储内容</th>
<th align="left">存储内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">无锁</td>
<td align="left">对象的hashCode、对象分代年龄、是否是偏向锁（0）</td>
<td align="left">01</td>
</tr>
<tr>
<td align="left">偏向锁</td>
<td align="left">偏向线程ID、偏向时间戳、对象分代年龄、是否是偏向锁（1）</td>
<td align="left">01</td>
</tr>
<tr>
<td align="left">轻量级锁</td>
<td align="left">指向栈中锁记录的指针</td>
<td align="left">00</td>
</tr>
<tr>
<td align="left">重量级锁</td>
<td align="left">指向互斥量（重量级锁）的指针</td>
<td align="left">10</td>
</tr>
</tbody></table>
<p><strong>无锁</strong></p>
<p>无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</p>
<p>无锁的特点就是修改操作在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。上面我们介绍的CAS原理及应用即是无锁的实现。无锁无法全面代替有锁，但无锁在某些场合下的性能是非常高的。</p>
<p><strong>偏向锁</strong></p>
<p>偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</p>
<p>在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。</p>
<p>当一个线程访问同步代码块并获取锁时，会在Mark Word里存储锁偏向的线程ID。在线程进入和退出同步块时不再通过CAS操作来加锁和解锁，而是检测Mark Word里是否存储着指向当前线程的偏向锁。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令即可。</p>
<p>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态。撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。</p>
<p>偏向锁在JDK 6及以后的JVM里是默认启用的。可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，关闭之后程序默认会进入轻量级锁状态。</p>
<p><strong>轻量级锁</strong></p>
<p>是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</p>
<p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，然后拷贝对象头中的Mark Word复制到锁记录中。</p>
<p>拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock Record里的owner指针指向对象的Mark Word。</p>
<p>如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，表示此对象处于轻量级锁定状态。</p>
<p>如果轻量级锁的更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明多个线程竞争锁。</p>
<p>若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。</p>
<p><strong>重量级锁</strong></p>
<p>升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。</p>
<p>整体的锁状态升级流程如下：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/8afdf6f2.png" alt="img"></p>
<p>综上，偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。</p>
<h3 id="4-公平锁-VS-非公平锁"><a href="#4-公平锁-VS-非公平锁" class="headerlink" title="4. 公平锁 VS 非公平锁"></a>4. 公平锁 VS 非公平锁</h3><p>公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</p>
<p>非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p>
<p>直接用语言描述可能有点抽象，这里作者用从别处看到的一个例子来讲述一下公平锁和非公平锁。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/a23d746a.png" alt="img"></p>
<p>如上图所示，假设有一口水井，有管理员看守，管理员有一把锁，只有拿到锁的人才能够打水，打完水要把锁还给管理员。每个过来打水的人都要管理员的允许并拿到锁之后才能去打水，如果前面有人正在打水，那么这个想要打水的人就必须排队。管理员会查看下一个要去打水的人是不是队伍里排最前面的人，如果是的话，才会给你锁让你去打水；如果你不是排第一的人，就必须去队尾排队，这就是公平锁。</p>
<p>但是对于非公平锁，管理员对打水的人没有要求。即使等待队伍里有排队等待的人，但如果在上一个人刚打完水把锁还给管理员而且管理员还没有允许等待队伍里下一个人去打水时，刚好来了一个插队的人，这个插队的人是可以直接从管理员那里拿到锁去打水，不需要排队，原本排队等待的人只能继续等待。如下图所示：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/4499559e.png" alt="img"></p>
<p>接下来我们通过ReentrantLock的源码来讲解公平锁和非公平锁。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/6edea205.png" alt="img"></p>
<p>根据代码可知，ReentrantLock里面有一个内部类Sync，Sync继承AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在Sync中实现的。它有公平锁FairSync和非公平锁NonfairSync两个子类。ReentrantLock默认使用非公平锁，也可以通过构造器来显示的指定使用公平锁。</p>
<p>下面我们来看一下公平锁与非公平锁的加锁方法的源码:</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/bc6fe583.png" alt="img"></p>
<p>通过上图中的源代码对比，我们可以明显的看出公平锁与非公平锁的lock()方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件：hasQueuedPredecessors()。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/bd0036bb.png" alt="img"></p>
<p>再进入hasQueuedPredecessors()，可以看到该方法主要做一件事情：主要是判断当前线程是否位于同步队列中的第一个。如果是则返回true，否则返回false。</p>
<p>综上，公平锁就是通过同步队列来实现多个线程按照申请锁的顺序来获取锁，从而实现公平的特性。非公平锁加锁时不考虑排队等待问题，直接尝试获取锁，所以存在后申请却先获得锁的情况。</p>
<h3 id="5-可重入锁-VS-非可重入锁"><a href="#5-可重入锁-VS-非可重入锁" class="headerlink" title="5. 可重入锁 VS 非可重入锁"></a>5. 可重入锁 VS 非可重入锁</h3><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。下面用示例代码来进行分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法1执行...&quot;</span>);</span><br><span class="line">        doOthers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doOthers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法2执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，类中的两个方法都是被内置锁synchronized修饰的，doSomething()方法中调用doOthers()方法。因为内置锁是可重入的，所以同一个线程在调用doOthers()时可以直接获得当前对象的锁，进入doOthers()进行操作。</p>
<p>如果是一个不可重入锁，那么当前线程在调用doOthers()之前需要将执行doSomething()时获取当前对象的锁释放掉，实际上该对象锁已被当前线程所持有，且无法释放。所以此时会出现死锁。</p>
<p>而为什么可重入锁就可以在嵌套调用时可以自动获得锁呢？我们通过图示和源码来分别解析一下。</p>
<p>还是打水的例子，有多个人在排队打水，此时管理员允许锁和同一个人的多个水桶绑定。这个人用多个水桶打水时，第一个水桶和锁绑定并打完水之后，第二个水桶也可以直接和锁绑定并开始打水，所有的水桶都打完水之后打水人才会将锁还给管理员。这个人的所有打水流程都能够成功执行，后续等待的人也能够打到水。这就是可重入锁。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/58fc5bc9.png" alt="img"></p>
<p>但如果是非可重入锁的话，此时管理员只允许锁和同一个人的一个水桶绑定。第一个水桶和锁绑定打完水之后并不会释放锁，导致第二个水桶不能和锁绑定也无法打水。当前线程出现死锁，整个等待队列中的所有线程都无法被唤醒。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/ea597a0c.png" alt="img"></p>
<p>之前我们说过ReentrantLock和synchronized都是重入锁，那么我们通过重入锁ReentrantLock以及非可重入锁NonReentrantLock的源码来对比分析一下为什么非可重入锁在重复调用同步资源时会出现死锁。</p>
<p>首先ReentrantLock和NonReentrantLock都继承父类AQS，其父类AQS中维护了一个同步状态status来计数重入次数，status初始值为0。</p>
<p>当线程尝试获取锁时，可重入锁先尝试获取并更新status值，如果status == 0表示没有其他线程在执行同步代码，则把status置为1，当前线程开始执行。如果status != 0，则判断当前线程是否是获取到这个锁的线程，如果是的话执行status+1，且当前线程可以再次获取锁。而非可重入锁是直接去获取并尝试更新当前status的值，如果status != 0的话会导致其获取锁失败，当前线程阻塞。</p>
<p>释放锁时，可重入锁同样先获取当前status的值，在当前线程是持有锁的线程的前提下。如果status-1 == 0，则表示当前线程所有重复获取锁的操作都已经执行完毕，然后该线程才会真正释放锁。而非可重入锁则是在确定当前线程是持有锁的线程之后，直接将status置为0，将锁释放。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/32536e7a.png" alt="img"></p>
<h3 id="6-独享锁-VS-共享锁"><a href="#6-独享锁-VS-共享锁" class="headerlink" title="6. 独享锁 VS 共享锁"></a>6. 独享锁 VS 共享锁</h3><p>独享锁和共享锁同样是一种概念。我们先介绍一下具体的概念，然后通过ReentrantLock和ReentrantReadWriteLock的源码来介绍独享锁和共享锁。</p>
<p>独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的synchronized和JUC中Lock的实现类就是互斥锁。</p>
<p>共享锁是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</p>
<p>独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。</p>
<p>下图为ReentrantReadWriteLock的部分源码：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/762a042b.png" alt="img"></p>
<p>我们看到ReentrantReadWriteLock有两把锁：ReadLock和WriteLock，由词知意，一个读锁一个写锁，合称“读写锁”。再进一步观察可以发现ReadLock和WriteLock是靠内部类Sync实现的锁。Sync是AQS的一个子类，这种结构在CountDownLatch、ReentrantLock、Semaphore里面也都存在。</p>
<p>在ReentrantReadWriteLock里面，读锁和写锁的锁主体都是Sync，但读锁和写锁的加锁方式不一样。读锁是共享锁，写锁是独享锁。读锁的共享锁可保证并发读非常高效，而读写、写读、写写的过程互斥，因为读锁和写锁是分离的。所以ReentrantReadWriteLock的并发性相比一般的互斥锁有了很大提升。</p>
<p>那读锁和写锁的具体加锁方式有什么区别呢？在了解源码之前我们需要回顾一下其他知识。 在最开始提及AQS的时候我们也提到了state字段（int类型，32位），该字段用来描述有多少线程获持有锁。</p>
<p>在独享锁中这个值通常是0或者1（如果是重入锁的话state值就是重入的次数），在共享锁中state就是持有锁的数量。但是在ReentrantReadWriteLock中有读、写两把锁，所以需要在一个整型变量state上分别描述读锁和写锁的数量（或者也可以叫状态）。于是将state变量“按位切割”切分成了两个部分，高16位表示读锁状态（读锁个数），低16位表示写锁状态（写锁个数）。如下图所示：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/8793e00a.png" alt="img"></p>
<p>了解了概念之后我们再来看代码，先看写锁的加锁源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">	Thread current = Thread.currentThread();</span><br><span class="line">	<span class="keyword">int</span> c = getState(); <span class="comment">// 取到当前锁的个数</span></span><br><span class="line">	<span class="keyword">int</span> w = exclusiveCount(c); <span class="comment">// 取写锁的个数w</span></span><br><span class="line">	<span class="keyword">if</span> (c != <span class="number">0</span>) &#123; <span class="comment">// 如果已经有线程持有了锁(c!=0)</span></span><br><span class="line">    <span class="comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span><br><span class="line">		<span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread()) <span class="comment">// 如果写线程数（w）为0（换言之存在读锁） 或者持有锁的线程不是当前线程就返回失败</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)    <span class="comment">// 如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">		<span class="comment">// Reentrant acquire</span></span><br><span class="line">    setState(c + acquires);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (writerShouldBlock() || !compareAndSetState(c, c + acquires)) <span class="comment">// 如果当且写线程数为0，并且当前线程需要阻塞那么就返回失败；或者如果通过CAS增加写线程数失败也返回失败。</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	setExclusiveOwnerThread(current); <span class="comment">// 如果c=0，w=0或者c&gt;0，w&gt;0（重入），则设置当前线程或锁的拥有者</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这段代码首先取到当前锁的个数c，然后再通过c来获取写锁的个数w。因为写锁是低16位，所以取低16位的最大值与当前的c做与运算（ int w = exclusiveCount©; ），高16位和0与运算后是0，剩下的就是低位运算的值，同时也是持有写锁的线程数目。</li>
<li>在取到写锁线程的数目后，首先判断是否已经有线程持有了锁。如果已经有线程持有了锁(c!=0)，则查看当前写锁线程的数目，如果写线程数为0（即此时存在读锁）或者持有锁的线程不是当前线程就返回失败（涉及到公平锁和非公平锁的实现）。</li>
<li>如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。</li>
<li>如果当且写线程数为0（那么读线程也应该为0，因为上面已经处理c!=0的情况），并且当前线程需要阻塞那么就返回失败；如果通过CAS增加写线程数失败也返回失败。</li>
<li>如果c=0,w=0或者c&gt;0,w&gt;0（重入），则设置当前线程或锁的拥有者，返回成功！</li>
</ul>
<p>tryAcquire()除了重入条件（当前线程为获取了写锁的线程）之外，增加了一个读锁是否存在的判断。如果存在读锁，则写锁不能被获取，原因在于：必须确保写锁的操作对读锁可见，如果允许读锁在已被获取的情况下对写锁的获取，那么正在运行的其他读线程就无法感知到当前写线程的操作。</p>
<p>因此，只有等待其他读线程都释放了读锁，写锁才能被当前线程获取，而写锁一旦被获取，则其他读写线程的后续访问均被阻塞。写锁的释放与ReentrantLock的释放过程基本类似，每次释放均减少写状态，当写状态为0时表示写锁已被释放，然后等待的读写线程才能够继续访问读写锁，同时前次写线程的修改对后续的读写线程可见。</p>
<p>接着是读锁的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">    Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">        getExclusiveOwnerThread() != current)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;                                   <span class="comment">// 如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态</span></span><br><span class="line">    <span class="keyword">int</span> r = sharedCount(c);</span><br><span class="line">    <span class="keyword">if</span> (!readerShouldBlock() &amp;&amp;</span><br><span class="line">        r &lt; MAX_COUNT &amp;&amp;</span><br><span class="line">        compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">            firstReader = current;</span><br><span class="line">            firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">            firstReaderHoldCount++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            HoldCounter rh = cachedHoldCounter;</span><br><span class="line">            <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                readHolds.set(rh);</span><br><span class="line">            rh.count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fullTryAcquireShared(current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到在tryAcquireShared(int unused)方法中，如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态。如果当前线程获取了写锁或者写锁未被获取，则当前线程（线程安全，依靠CAS保证）增加读状态，成功获取读锁。读锁的每次释放（线程安全的，可能有多个读线程同时释放读锁）均减少读状态，减少的值是“1&lt;&lt;16”。所以读写锁才能实现读读的过程共享，而读写、写读、写写的过程互斥。</p>
<p>此时，我们再回头看一下互斥锁ReentrantLock中公平锁和非公平锁的加锁源码：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/8b7878ec.png" alt="img"></p>
<p>我们发现在ReentrantLock虽然有公平锁和非公平锁两种，但是它们添加的都是独享锁。根据源码所示，当某一个线程调用lock方法获取锁时，如果同步资源没有被其他线程锁住，那么当前线程在使用CAS更新state成功后就会成功抢占该资源。而如果公共资源被占用且不是被当前线程占用，那么就会加锁失败。所以可以确定ReentrantLock无论读操作还是写操作，添加的锁都是都是独享锁。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文Java中常用的锁以及常见的锁的概念进行了基本介绍，并从源码以及实际应用的角度进行了对比分析。限于篇幅以及个人水平，没有在本篇文章中对所有内容进行深层次的讲解。</p>
<p>其实Java本身已经对锁本身进行了良好的封装，降低了研发同学在平时工作中的使用难度。但是研发同学也需要熟悉锁的底层原理，不同场景下选择最适合的锁。而且源码中的思路都是非常好的思路，也是值得大家去学习和借鉴的。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li>《Java并发编程艺术》</li>
<li><a href="https://blog.csdn.net/u013256816/article/details/51204385">Java中的锁</a></li>
<li><a href="https://juejin.im/post/5a73cbbff265da4e807783f5">Java CAS 原理剖析</a></li>
<li><a href="https://juejin.im/post/5b42c2546fb9a04f8751eabc">Java并发——关键字synchronized解析</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/29866981">Java synchronized原理总结</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-se-16-synchronized">聊聊并发（二）——Java SE1.6中的Synchronized</a></li>
<li><a href="https://blog.csdn.net/qq_19431333/article/details/70568478">深入理解读写锁—ReadWriteLock源码分析</a></li>
<li><a href="https://www.cnblogs.com/twoheads/p/9635309.html">【JUC】JDK1.8源码分析之ReentrantReadWriteLock</a></li>
<li><a href="https://my.oschina.net/adan1/blog/158107">Java多线程（十）之ReentrantReadWriteLock深入分析</a></li>
<li><a href="https://mrdear.cn/2018/06/23/java/java--readwritelock">Java–读写锁的实现原理</a></li>
</ol>
<h2 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h2><ul>
<li>家琪，美团点评后端工程师。2017 年加入美团点评，负责美团点评境内度假的业务开发。</li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
      </tags>
  </entry>
  <entry>
    <title>java多态面试题</title>
    <url>/java-polymorphism/</url>
    <content><![CDATA[<p>多态分两种：</p>
<p>(1)   编译时多态（设计时多态）：方法重载。</p>
<p>(2)   运行时多态：JAVA运行时系统根据调用该方法的实例的类型来决定选择调用哪个方法则被称为运行时多态。（我们平时说得多的事运行时多态，所以多态主要也是指运行时多态）</p>
<p>运行时多态存在的三个必要条件：</p>
<ul>
<li>要有继承（包括接口的实现）；</li>
<li>要有重写；</li>
<li>父类引用指向子类对象。</li>
</ul>
<p>多态的好处：</p>
<ol>
<li><p>可替换性（substitutability）。多态对已存在代码具有可替换性。例如，多态对圆Circle类工作，对其他任何圆形几何体，如圆环，也同样工作。</p>
</li>
<li><p>可扩充性（extensibility）。多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在实现了圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。</p>
</li>
<li><p>接口性（interface-ability）。多态是超类通过方法签名，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。如图8.3 所示。图中超类Shape规定了两个实现多态的接口方法，computeArea()以及computeVolume()。子类，如Circle和Sphere为了实现多态，完善或者覆盖这两个接口方法。</p>
</li>
<li><p>灵活性（flexibility）。它在应用中体现了灵活多样的操作，提高了使用效率。</p>
</li>
<li><p>简化性（simplicity）。多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。</p>
</li>
</ol>
<p><strong>注意：优先级从高到低：this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)。</strong></p>
<p>相关面试题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(D obj)</span>...</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;A and D&quot;</span>); </span><br><span class="line">     &#125; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span>...</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;A and A&quot;</span>); </span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(B obj)</span>...</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;B and B&quot;</span>); </span><br><span class="line">     &#125; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span>...</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;B and A&quot;</span>); </span><br><span class="line">     &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>(二)问题：以下输出结果是什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a1 = <span class="keyword">new</span> A();</span><br><span class="line">    A a2 = <span class="keyword">new</span> B();</span><br><span class="line">    B b = <span class="keyword">new</span> B();</span><br><span class="line">    C c = <span class="keyword">new</span> C();</span><br><span class="line">    D d = <span class="keyword">new</span> D();</span><br><span class="line">    System.out.println(a1.show(b)); <span class="comment">//  ①</span></span><br><span class="line">    System.out.println(a1.show(c)); <span class="comment">//   ②</span></span><br><span class="line">    System.out.println(a1.show(d)); <span class="comment">//  ③</span></span><br><span class="line">    System.out.println(a2.show(b)); <span class="comment">//  ④</span></span><br><span class="line">    System.out.println(a2.show(c)); <span class="comment">//  ⑤</span></span><br><span class="line">    System.out.println(a2.show(d));<span class="comment">//   ⑥</span></span><br><span class="line">    System.out.println(b.show(b)); <span class="comment">//    ⑦</span></span><br><span class="line">    System.out.println(b.show(c)); <span class="comment">//    ⑧</span></span><br><span class="line">	System.out.println(b.show(d)); <span class="comment">//    ⑨ </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(三)答案</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">①   A and A</span><br><span class="line">②   A and A</span><br><span class="line">③   A and D</span><br><span class="line">④   B and A</span><br><span class="line">⑤   B and A</span><br><span class="line">⑥   A and D</span><br><span class="line">⑦   B and B</span><br><span class="line">⑧   B and B</span><br><span class="line">⑨   A and D</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>做这种题的话要时时刻刻使用那个优先级顺序：<b>注意：优先级从高到低：this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)。</b></p>
<ol>
<li>对于第一题：</li>
</ol>
<blockquote>
<p><code>a1</code>是<code>A</code>类的一个实例化对象，所以<code>this</code>指向<code>A</code>，然后查找<code>this.show(b)</code>，由于没有这个方法，所以到<code>super.show(b)</code>，但是由于<code>A</code>类没有超类了，所以到<code>this.show(super b)</code>，由于b的超类是A，所以相当于<code>this.show(A)</code>，然后在<code>A</code>类中查找到了这个方法，于是输出<code>A and A</code>。</p>
</blockquote>
<ol start="2">
<li>对于第二题：</li>
</ol>
<blockquote>
<p>同样，<code>a1</code>是A类的实例化对象，所以<code>this</code>指向<code>A</code>，然后在<code>A</code>类中查找<code>this.show(C)</code>方法，由于没有这个方法，所以到了<code>super.show(C)</code>，在<code>A</code>类的超类里面找，但是<code>A</code>没有超类，所以到了<code>this.show(super C)</code>，由于<code>C</code>的超类是<code>B</code>，所以在<code>A</code>类里面查找<code>this.show(B)</code>方法，也没找到，然后<code>B</code>也有超类，就是<code>A</code>，所以查找<code>this.show(A)</code>，找到了，于是输出<code>A and A</code>；</p>
</blockquote>
<ol start="3">
<li>对于第三题：</li>
</ol>
<blockquote>
<p>同样，<code>a1</code>是<code>A</code>类的实例化对象，所以<code>this</code>指向<code>A</code>，然后在<code>A</code>类中找到<code>this.show(D)</code>方法，找到了，所以就输出<code>A and D</code>；</p>
</blockquote>
<ol start="4">
<li>对于第四题：</li>
</ol>
<blockquote>
<p><code>a2</code>是<code>B</code>类的引用对象，类型为<code>A</code>，所以<code>this</code>指向<code>A</code>类，然后在A类里面找<code>this.show(B)</code>方法，没有找到，所以到了<code>super.show(B)</code>，由于<code>A</code>类没有超类，所以到了<code>this.show(super B)</code>，<code>B</code>的超类是<code>A</code>，即<code>super B = A</code>，所以执行方法<code>this.show(A)</code>，在<code>A</code>方法里面找<code>show(A)</code>，找到了，但是由于<code>a2</code>是一个类<code>B</code>的引用对象，而<code>B</code>类里面覆盖了<code>A</code>类的<code>show(A)</code>方法，所以最终执行的是<code>B</code>类里面的<code>show(A)</code>方法，即输出<code>B and A</code>；</p>
</blockquote>
<ol start="5">
<li>对于第五题：</li>
</ol>
<blockquote>
<p><code>a2</code>是<code>B</code>类的引用对象，类型为<code>A</code>，所以<code>this</code>指向<code>A</code>类，然后在A类里面找<code>this.show(C)</code>方法，没有找到，所以到了<code>super.show(C)</code>方法，由于<code>A</code>类没有超类，所以到了<code>this.show(super C)</code>，<code>C</code>的超类是<code>B</code>，所以在<code>A</code>类里面找<code>show(B)</code>，同样没有找到，发现<code>B</code>还有超类，即<code>A</code>，所以还继续在<code>A</code>类里面找<code>show(A)</code>方法，找到了，但是由于<code>a2</code>是一个类<code>B</code>的引用对象，而<code>B</code>类里面覆盖了<code>A</code>类的<code>show(A)</code>方法，所以最终执行的是<code>B</code>类里面的<code>show(A)</code>方法，即输出<code>B and A</code>；</p>
</blockquote>
<ol start="6">
<li>对于第六题：</li>
</ol>
<blockquote>
<p><code>a2</code>是<code>B</code>类的引用对象，类型为<code>A</code>，所以<code>this</code>指向<code>A</code>类，然后在A类里面找<code>this.show(D)</code>方法，找到了，但是由于<code>a2</code>是一个类<code>B</code>的引用对象，所以在<code>B</code>类里面查找有没有覆盖<code>show(D)</code>方法，没有，所以执行的是<code>A</code>类里面的<code>show(D)</code>方法，即输出<code>A and D</code>；</p>
</blockquote>
<ol start="7">
<li>对于第七题：</li>
</ol>
<blockquote>
<p><code>b</code>是<code>B</code>类的一个实例化对象，首相执行<code>this.show(B)</code>，在<code>B</code>类里面找<code>show(B)</code>方法，找到了，直接输出<code>B and B</code>；</p>
</blockquote>
<ol start="8">
<li>对于第八题：</li>
</ol>
<blockquote>
<p><code>b</code>是<code>B</code>类的一个实例化对象，首相执行<code>this.show(C)</code>，在<code>B</code>类里面找<code>show(C)</code>方法，没有找到，所以到了<code>super.show(c)</code>，<code>B</code>的超类是<code>A</code>，所以在<code>A</code>类中找<code>show(C)</code>方法，没有找到，于是到了<code>this.show(super C)</code>，<code>C</code>的超类是<code>B</code>，所以在<code>B</code>类中找<code>show(B)</code>方法，找到了，所以执行<code>B</code>类中的<code>show(B)</code>方法输出<code>B and B</code>；</p>
</blockquote>
<ol start="9">
<li>对于第九题：</li>
</ol>
<blockquote>
<p><code>b</code>是<code>B</code>类的一个实例化对象，首相执行<code>this.show(D)</code>，在<code>B</code>类里面找<code>show(D)</code>方法，没有找到，于是到了<code>super.show(D)</code>，<code>B</code>的超类是<code>A</code>类，所以在<code>A</code>类里面找<code>show(D)</code>方法，找到了，输出<code>A and D</code>；</p>
</blockquote>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
      </tags>
  </entry>
  <entry>
    <title>java多态总结</title>
    <url>/java-polymorphism2/</url>
    <content><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>多态：指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用）</p>
<h2 id="2-实现多态的技术称为"><a href="#2-实现多态的技术称为" class="headerlink" title="2.实现多态的技术称为"></a>2.实现多态的技术称为</h2><p>动态绑定（dynamicbinding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。</p>
<h2 id="3-作用"><a href="#3-作用" class="headerlink" title="3.作用"></a>3.作用</h2><p>消除类型之间的耦合关系。</p>
<h2 id="4-现实中，关于多态的例子不胜枚举"><a href="#4-现实中，关于多态的例子不胜枚举" class="headerlink" title="4.现实中，关于多态的例子不胜枚举"></a>4.现实中，关于多态的例子不胜枚举</h2><p>比方说按下F1键这个动作，如果当前在Flash界面下弹出的就是AS3的帮助文档；如果当前在Word下弹出的就是Word帮助；在Windows下弹出的就是Windows帮助和支持。同一个事件发生在不同的对象上会产生不同的结果。</p>
<h2 id="5-多态存在的三个必要条件"><a href="#5-多态存在的三个必要条件" class="headerlink" title="5.多态存在的三个必要条件"></a>5.多态存在的三个必要条件</h2><ol>
<li><p>要有继承；</p>
</li>
<li><p>要有重写；</p>
</li>
<li><p>父类引用指向子类对象。</p>
</li>
</ol>
<h2 id="6-多态的好处："><a href="#6-多态的好处：" class="headerlink" title="6.多态的好处："></a>6.多态的好处：</h2><ol>
<li><p>可替换性（substitutability）:多态对已存在代码具有可替换性。例如，多态对圆Circle类工作，对其他任何圆形几何体，如圆环，也同样工作。</p>
</li>
<li><p>可扩充性（extensibility）:多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在实现了圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。</p>
</li>
<li><p>接口性（interface-ability）:多态是超类通过方法签名，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。如图8.3所示。图中超类Shape规定了两个实现多态的接口方法，computeArea()以及computeVolume()。子类，如Circle和Sphere为了实现多态，完善或者覆盖这两个接口方法。</p>
</li>
<li><p>灵活性（flexibility）:它在应用中体现了灵活多样的操作，提高了使用效率。</p>
</li>
<li><p>简化性（simplicity）:多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。</p>
</li>
</ol>
<h2 id="7-Java中多态的实现方式"><a href="#7-Java中多态的实现方式" class="headerlink" title="7.Java中多态的实现方式"></a>7.Java中多态的实现方式</h2><ul>
<li>接口实现</li>
<li>继承父类进行方法重写，同一个类中进行方法重载。</li>
</ul>
<h2 id="8-Java中多态的分类"><a href="#8-Java中多态的分类" class="headerlink" title="8.Java中多态的分类"></a>8.Java中多态的分类</h2><p>在java中，多态大致可以分为以下几种情况：</p>
<ol>
<li><p><code>person</code>为父类，<code>student</code>为子类。那么：<code>person p = new student()</code>；</p>
</li>
<li><p><code>fliable</code>为接口，<code>bird</code>为实现接口的类，那么：<code>fliable f = new bird()</code>；</p>
</li>
<li><p><code>fliable</code>为抽象类，<code>bird</code>为继承<code>fliable</code>的类，那么：<code>fliable f = new bird()</code>；</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗吃肉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">    public void sleep() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;狗站着睡觉&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatShit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog is eating shit...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDuoTai</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        dog.eat(); <span class="comment">//dog对象不能使用.eatShit()方法，因为父类中没有定义该方法</span></span><br><span class="line">		dog.sleep();</span><br><span class="line">        Dog dog1 = <span class="keyword">new</span> Dog(); <span class="comment">//只能通过子类本身的引用调用子类特有的方法</span></span><br><span class="line">        dog1.eatShit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>狗吃肉<br>sleep<br>dog is eating shit…</p>
</blockquote>
<p>多态时需要说明<code>dog</code>声明为父类的引用，但他实际为子类引用。但是他只能调用父类中存在的方法（<strong>父类中的方法子类如果重写了，就调用子类的重写方法，如果没有被重写就调用父类中的方法</strong>）。</p>
<p>如果想使用子类中特有的方法，比如<code>eatShit()</code>方法，那么使用声明类型<code>dog</code>是不能调用该方法的，只能使用声明类型<code>dog1</code>进行调用，即子类本身的引用。<strong>接口和继承都遵循该规律。</strong></p>
<h2 id="9-instanceof运算符"><a href="#9-instanceof运算符" class="headerlink" title="9.instanceof运算符"></a>9.instanceof运算符</h2><p><code>java</code>语言的多态机制导致了引用变量的声明类型和其实际引用对象的类型可能不一致，再结合虚方法调用规则可以得出结论：声明为同种类型的两个引用变量调用同一个方法时也可能会有不同的行为。这里就引入了<code>instanceof</code>运算符。</p>
<p>那么如果我声明了<code>person p = new student()</code>；我想将p转为student的可不可以？当然可以，但是就得强制转换了（儿子想成为父亲直接来，父亲想成为儿子你就强来）。</p>
<p>通常在强制转换时加上<code>instanceof</code>来判断。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(p <span class="keyword">instanceof</span> student) &#123; student s =(student) p; &#125;</span><br></pre></td></tr></table></figure>

<p>多态贯穿于java整个学习，比如在异常处理时写catch语句，我们规定必须子类异常写在前，父类异常写在后。为什么呢？原因就是多态了。我们的catch语句格式：catch（Exceptione）。java程序在产生异常时会自动生成一个异常对象，如果先产生一个子类异常，并且父类异常写在前，那么根据多态肯定会执行此catch语句，执行完一条catch语句后将会跳出。</p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.jb51.net/article/128815.htm">https://www.jb51.net/article/128815.htm</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
      </tags>
  </entry>
  <entry>
    <title>java反射机制讲解，如何利用java发射机制开发自己的java框架</title>
    <url>/java-reflect/</url>
    <content><![CDATA[<h3 id="1-java反射机制介绍"><a href="#1-java反射机制介绍" class="headerlink" title="1 java反射机制介绍"></a>1 java反射机制介绍</h3><blockquote>
<p><strong>定义介绍：</strong> Java 反射机制在程序运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性。这种 动态的获取信息 以及 动态调用对象的方法 的功能称为 java 的反射机制。</p>
</blockquote>
<h4 id="1-1-java代码的三种状态"><a href="#1-1-java代码的三种状态" class="headerlink" title="1.1 java代码的三种状态"></a>1.1 java代码的三种状态</h4><p>这里以一个<code>Person</code>类为例，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gend;</span><br><span class="line">    <span class="keyword">public</span> String a;</span><br><span class="line">    <span class="keyword">protected</span> String b;</span><br><span class="line">    String c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age, String gend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gend = gend;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(String name, String gend)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gend = gend;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, gend=&#x27;&quot;</span> + gend + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">laugh</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;person is laughing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;person is eating...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="QQ%E6%88%AA%E5%9B%BE20200409152630.png" alt="分析图">   </p>
<h4 id="1-2-获取class的3种方法"><a href="#1-2-获取class的3种方法" class="headerlink" title="1.2 获取class的3种方法"></a>1.2 获取class的3种方法</h4><ol>
<li><code>Class.forName(&quot;全类名&quot;)</code>，对应的是上图中的第一阶段（java源码阶段），如：<code>Class.forName(&quot;com.reflect.entity.Person&quot;)</code></li>
<li><code>类名.class</code>，对应的是上图中的第二阶段（class类对象阶段），因为字节码文件已经加载带了内存，但是还没有调用，如：<code>ReflectTest.class</code></li>
<li><code>对象.getClass()</code>，对应的是上图中的第三阶段，也就是Runtime阶段，因为此时已经创建了一个对象，如：<code>person.getClass()</code> </li>
</ol>
<blockquote>
<p><strong>注意：</strong> 同一个*.class文件被重复或多次加载到内存中时，不会重复加载，只会加载一次</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">&quot;com.reflect.entity.Person&quot;</span>);</span><br><span class="line">Class cls2 = Person.class;</span><br><span class="line">Class cls3 = <span class="keyword">new</span> Person().getClass();</span><br><span class="line"></span><br><span class="line">System.out.println(cls1 == cls2);<span class="comment">//true</span></span><br><span class="line">System.out.println(cls1 == cls3);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>


<h4 id="1-3-class内部的属性"><a href="#1-3-class内部的属性" class="headerlink" title="1.3 class内部的属性"></a>1.3 class内部的属性</h4><ul>
<li><p>构造方法数组Constructor[]</p>
<ul>
<li>Constructor<T> getConstructor(Class&lt;?&gt;… parameterTypes)  </li>
<li>Constructor&lt;?&gt;[] getConstructors()  获取所有由<code>public</code>修饰的构造方法</li>
<li>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)  </li>
<li>Constructor&lt;?&gt;[] getDeclaredConstructors()   获取所有构造方法</li>
</ul>
</li>
<li><p>成员属性Field[]</p>
<ul>
<li>Field getField(String name)  获取一个：只能获取由<code>public</code>修饰的成员属性</li>
<li>Field[] getFields() 获取所有 ：只能获取类中定义的由<code>public</code>修饰的成员属性</li>
<li>Field[] getDeclaredFields() 获取所有属性：只要类中声明的，都会获取到</li>
<li>Field getDeclaredField(String name)  获取一个：只要类中声明的，都会获取到</li>
</ul>
</li>
<li><p>成员方法Method[]</p>
<ul>
<li>Method[] getMethods()   获取全部由<code>public</code>修饰的成员方法</li>
<li>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)  </li>
<li>Method[] getDeclaredMethods()  获取所有</li>
<li>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)  </li>
</ul>
</li>
<li><p>获取类名</p>
<ul>
<li>String getName()  获取全类名</li>
<li>String getSimpleName()  仅仅获取类名</li>
</ul>
</li>
</ul>
<h3 id="2-举例"><a href="#2-举例" class="headerlink" title="2 举例"></a>2 举例</h3><h4 id="2-1-获取成员属性"><a href="#2-1-获取成员属性" class="headerlink" title="2.1 获取成员属性"></a>2.1 获取成员属性</h4><h5 id="（1）Field-getFields"><a href="#（1）Field-getFields" class="headerlink" title="（1）Field[] getFields()"></a>（1）Field[] getFields()</h5><p>得到所有由<code>public</code>声明的成员属性   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">&quot;com.reflect.entity.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">Field[] fields = cls1.getFields();  </span><br><span class="line"><span class="keyword">for</span> (Field field : fields)&#123;</span><br><span class="line">    System.out.println(field);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>public java.lang.String com.reflect.entity.Person.a</p>
</blockquote>
<h5 id="（2）Field-getField-String-name"><a href="#（2）Field-getField-String-name" class="headerlink" title="（2）Field getField(String name)"></a>（2）Field getField(String name)</h5><p>得到某一个具体的由<code>public</code>声明的成员属性   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">&quot;com.reflect.entity.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">Field field = cls1.getField(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">System.out.println(field);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>public java.lang.String com.reflect.entity.Person.a</p>
</blockquote>
<h5 id="3-Field-getDeclaredFields"><a href="#3-Field-getDeclaredFields" class="headerlink" title="(3) Field[] getDeclaredFields()"></a>(3) Field[] getDeclaredFields()</h5><p>得到所有的类中已经声明的成员属性，不管修饰符   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">&quot;com.reflect.entity.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">Field[] fields = cls1.getDeclaredFields();  </span><br><span class="line"><span class="keyword">for</span> (Field field : fields)&#123;</span><br><span class="line">    System.out.println(field);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>private java.lang.String com.reflect.entity.Person.name<br>private java.lang.Integer com.reflect.entity.Person.age<br>private java.lang.String com.reflect.entity.Person.gend<br>public java.lang.String com.reflect.entity.Person.a<br>protected java.lang.String com.reflect.entity.Person.b<br>java.lang.String com.reflect.entity.Person.c   </p>
</blockquote>
<h5 id="4-Field-getDeclaredField-String-name"><a href="#4-Field-getDeclaredField-String-name" class="headerlink" title="(4) Field getDeclaredField(String name)"></a>(4) Field getDeclaredField(String name)</h5><p>得到某一个具体的类中已经声明的成员属性，不管修饰符   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">&quot;com.reflect.entity.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">Field field = cls1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(field);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>private java.lang.String com.reflect.entity.Person.name</p>
</blockquote>
<h4 id="2-2-获取构造方法"><a href="#2-2-获取构造方法" class="headerlink" title="2.2 获取构造方法"></a>2.2 获取构造方法</h4><h5 id="（1）-Constructor-lt-gt-getConstructors"><a href="#（1）-Constructor-lt-gt-getConstructors" class="headerlink" title="（1） Constructor&lt;?&gt;[] getConstructors()"></a>（1） Constructor&lt;?&gt;[] getConstructors()</h5><p>得到所有的由<code>public</code>声明的构造方法   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">&quot;com.reflect.entity.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">Constructor[] constructors = cls1.getConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor constructor : constructors)&#123;</span><br><span class="line">    System.out.println(constructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>public com.reflect.entity.Person()<br>public com.reflect.entity.Person(java.lang.String,java.lang.Integer,java.lang.String)</p>
</blockquote>
<h5 id="2-Constructor-getConstructor-Class-lt-gt-…-parameterTypes"><a href="#2-Constructor-getConstructor-Class-lt-gt-…-parameterTypes" class="headerlink" title="(2) Constructor getConstructor(Class&lt;?&gt;… parameterTypes)"></a>(2) Constructor<T> getConstructor(Class&lt;?&gt;… parameterTypes)</h5><p>得到某一个具体的由<code>public</code>声明的构造方法    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">&quot;com.reflect.entity.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">Constructor constructor = cls1.getConstructor(String.class, Integer.class, String.class);</span><br><span class="line">System.out.println(constructor);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>public com.reflect.entity.Person(java.lang.String,java.lang.Integer,java.lang.String)</p>
</blockquote>
<h5 id="（3）-Constructor-getDeclaredConstructor-Class-lt-gt-…-parameterTypes"><a href="#（3）-Constructor-getDeclaredConstructor-Class-lt-gt-…-parameterTypes" class="headerlink" title="（3） Constructor getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)"></a>（3） Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</h5><p>得到某一个具体的类中已经声明的任意构造方法，无论用什么修饰符修饰的都可以      </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">&quot;com.reflect.entity.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">Constructor constructor = cls1.getDeclaredConstructor(String.class,String.class);</span><br><span class="line">System.out.println(constructor);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>private com.reflect.entity.Person(java.lang.String,java.lang.String)</p>
</blockquote>
<h5 id="（4）-Constructor-lt-gt-getDeclaredConstructors"><a href="#（4）-Constructor-lt-gt-getDeclaredConstructors" class="headerlink" title="（4） Constructor&lt;?&gt;[] getDeclaredConstructors()"></a>（4） Constructor&lt;?&gt;[] getDeclaredConstructors()</h5><p>得到所有类中已经声明的构造方法，不管修饰符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">&quot;com.reflect.entity.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">Constructor[] constructors = cls1.getDeclaredConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor constructor : constructors)&#123;</span><br><span class="line">    System.out.println(constructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>public com.reflect.entity.Person()<br>private com.reflect.entity.Person(java.lang.String,java.lang.String)<br>public com.reflect.entity.Person(java.lang.String,java.lang.Integer,java.lang.String)   </p>
</blockquote>
<h4 id="2-3-获取成员方法"><a href="#2-3-获取成员方法" class="headerlink" title="2.3 获取成员方法"></a>2.3 获取成员方法</h4><h5 id="（1）Method-getMethods"><a href="#（1）Method-getMethods" class="headerlink" title="（1）Method[] getMethods()"></a>（1）Method[] getMethods()</h5><p>只能得到所有由<code>public</code>修饰的成员方法   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">&quot;com.reflect.entity.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">Method[] methods = cls1.getMethods();</span><br><span class="line"><span class="keyword">for</span> (Method method : methods)&#123;</span><br><span class="line">    System.out.println(method + <span class="string">&quot;    &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>public java.lang.String com.reflect.entity.Person.toString()<br>public void com.reflect.entity.Person.eat()<br>public final void java.lang.Object.wait() throws java.lang.InterruptedException<br>public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException<br>public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException<br>public boolean java.lang.Object.equals(java.lang.Object)<br>public native int java.lang.Object.hashCode()<br>public final native java.lang.Class java.lang.Object.getClass()<br>public final native void java.lang.Object.notify()<br>public final native void java.lang.Object.notifyAll()    </p>
</blockquote>
<h5 id="（2）Method-getMethod-String-name-Class-lt-gt-…-parameterTypes"><a href="#（2）Method-getMethod-String-name-Class-lt-gt-…-parameterTypes" class="headerlink" title="（2）Method getMethod(String name, Class&lt;?&gt;… parameterTypes)"></a>（2）Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</h5><p>只能得到某一个由<code>public</code>修饰的方法   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">&quot;com.reflect.entity.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">Method method = cls1.getMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">System.out.println(method + <span class="string">&quot;    &quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>public void com.reflect.entity.Person.eat()    </p>
</blockquote>
<h5 id="（3）-Method-getDeclaredMethods"><a href="#（3）-Method-getDeclaredMethods" class="headerlink" title="（3） Method[] getDeclaredMethods()"></a>（3） Method[] getDeclaredMethods()</h5><p>可以获取类中所有声明的方法   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">&quot;com.reflect.entity.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">Method[] methods = cls1.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">    System.out.println(method + <span class="string">&quot;    &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>public java.lang.String com.reflect.entity.Person.toString()<br>private void com.reflect.entity.Person.laugh()<br>public void com.reflect.entity.Person.eat()  </p>
</blockquote>
<h5 id="（4）Method-getDeclaredMethod-String-name-Class-lt-gt-…-parameterTypes"><a href="#（4）Method-getDeclaredMethod-String-name-Class-lt-gt-…-parameterTypes" class="headerlink" title="（4）Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)"></a>（4）Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</h5><p>得到一个指定的类中声明的任何方法    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cls1 = Class.forName(<span class="string">&quot;com.reflect.entity.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">Method method = cls1.getDeclaredMethod(<span class="string">&quot;laugh&quot;</span>);</span><br><span class="line">System.out.println(method + <span class="string">&quot;    &quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>private void com.reflect.entity.Person.laugh()   </p>
</blockquote>
<h3 id="3-用java反射机制写框架"><a href="#3-用java反射机制写框架" class="headerlink" title="3 用java反射机制写框架"></a>3 用java反射机制写框架</h3><p>框架功能介绍：</p>
<ul>
<li>通过修改配置文件，修改要运行的类和类中的方法</li>
<li>当写好配置文件之后，将配置文件配置好的类和类中的方法运行</li>
</ul>
<h4 id="3-1-项目结构目录"><a href="#3-1-项目结构目录" class="headerlink" title="3.1 项目结构目录"></a>3.1 项目结构目录</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200409211817.png" alt="结构目录"></p>
<h4 id="3-2-具体代码"><a href="#3-2-具体代码" class="headerlink" title="3.2 具体代码"></a>3.2 具体代码</h4><h5 id="（1）Person-java"><a href="#（1）Person-java" class="headerlink" title="（1）Person.java"></a>（1）Person.java</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.reflect.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gend;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age, String gend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gend = gend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, gend=&#x27;&quot;</span> + gend + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGend</span><span class="params">(String gend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gend = gend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="（2）Student-java"><a href="#（2）Student-java" class="headerlink" title="（2）Student.java"></a>（2）Student.java</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.reflect.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gend;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, Integer age, String gend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gend = gend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, gend=&#x27;&quot;</span> + gend + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGend</span><span class="params">(String gend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gend = gend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生在学习...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="（3）pro-properties"><a href="#（3）pro-properties" class="headerlink" title="（3）pro.properties"></a>（3）pro.properties</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">className=com.reflect.entity.Student</span> <span class="comment"># 要运行的类</span></span><br><span class="line"><span class="string">methodName=study</span> <span class="comment">#要运行的该类中的方法</span></span><br></pre></td></tr></table></figure>

<h5 id="（4）ReflectTest-java"><a href="#（4）ReflectTest-java" class="headerlink" title="（4）ReflectTest.java"></a>（4）ReflectTest.java</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.reflect.entity.Person;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        利用反射机制，编写一个框架</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//创建一个配置文件的接收者</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//获取配置文件</span></span><br><span class="line">        ClassLoader classLoader = ReflectTest.class.getClassLoader();</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">&quot;pro.properties&quot;</span>);</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        pro.load(is);</span><br><span class="line">        <span class="comment">//得到配置文件中的配置信息</span></span><br><span class="line">        String className = pro.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        String methodName = pro.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类加载</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取class类的方法有三种：</span></span><br><span class="line"><span class="comment">            1.Class.forName(&quot;全类名&quot;)</span></span><br><span class="line"><span class="comment">            2.类名.getClass()</span></span><br><span class="line"><span class="comment">            3.类名.class</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class cls = Class.forName(className);</span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line">        Method method = cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
      </tags>
  </entry>
  <entry>
    <title>java从键盘输入，scanner细节</title>
    <url>/java-scanner/</url>
    <content><![CDATA[<h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1 需求"></a>1 需求</h3><p>当我们需要使用<code>java</code>从键盘输入数据时，使用到<code>Scanner</code>进行输入字符串时，可能会遇到一些小<code>bug</code>，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Input</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age = scanner.nextInt();</span><br><span class="line">        String name = scanner.nextLine();</span><br><span class="line">        String sex = scanner.nextLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>输出：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200426220841912.jpg" alt=""></p>
</blockquote>
<p>为什么会这样呢？</p>
<h3 id="2-原因解释"><a href="#2-原因解释" class="headerlink" title="2 原因解释"></a>2 原因解释</h3><p>因为<code>scanner.nextLine()</code>会接收一行数据，而<code>scanner.next()</code>是接收有效字符（除空格和<code>enter</code>等之外的所有字符）之前的数据，所以当输入完<code>age</code>值后，按下<code>enter</code>键之后，这个<code>enter</code>被<code>scanner.nextLine()</code>给吸收了，也就被其当做一个值给接收了，所以就自动跳过了中间的<code>name</code>，所以会导致出现<code>bug</code>。</p>
<p>不过没关系，解决办法就是在需要真正接收的变量前加一个空的<code>scanner.nextLine()</code>，将上一个输入的<code>enter</code>给接收了，这样就不会出<code>bug</code>了。</p>
<p>改正代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age = scanner.nextInt();</span><br><span class="line">String _ = scanner.nextLine();</span><br><span class="line">String name = scanner.nextLine();</span><br><span class="line">String sex = scanner.nextLine();</span><br></pre></td></tr></table></figure>



<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol>
<li><a href="http://blog.sina.com.cn/s/blog_93dc666c0101h00f.html">http://blog.sina.com.cn/s/blog_93dc666c0101h00f.html</a></li>
</ol>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>program language</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中string和stringBuffer以及stringBuilder的区别？</title>
    <url>/java-string-stringbuffer-builder/</url>
    <content><![CDATA[<h3 id="1-string"><a href="#1-string" class="headerlink" title="1 string"></a>1 string</h3><p>Java中的<code>string</code>是字符串的基本数据类型，但是我们在<a href="https://jums.club/java-class-base-datatype/">Java中基本数据类型和包装类的区别？</a>中说到过，一般情况下，我们用到类对象的机会比较多，所以<code>string</code>的包装类是<code>String</code>，这是一个不可变数据类型，类似Python中的<a href="https://jums.club/basic-python-knowledge/#4-1-2-str">str</a>数据类型，一旦创建，数据值不能修改。</p>
<h3 id="2-stringBuffer"><a href="#2-stringBuffer" class="headerlink" title="2 stringBuffer"></a>2 stringBuffer</h3><p><code>stringBuffer</code>是Java中对于<code>string</code>的一个补充，上面说到string是一种不可变的字符串数据类型，但是我们大部分情况下，需要用到一种可变的字符串，比如在拼接<code>sql</code>语句时，我们大部分情况下都是使用的<code>stringBuffer</code>数据类型。在Java中，<code>stringBuffer</code>是线程安全的，也就是说我们可以进行异步I/O操作。</p>
<h3 id="3-stringBuilder"><a href="#3-stringBuilder" class="headerlink" title="3 stringBuilder"></a>3 stringBuilder</h3><p><code>stringBuilder</code>和<code>stringBuffer</code>类似，都是可变的字符串数据类型，但是由于<code>stringBuilder</code>不是线程安全的，即不能进行异步I/O，只能进行同步操作。但是<code>stringBuilder</code>的运行效率又比<code>stringBuffer</code>更快，因为<code>stringBuffer</code>的线程安全特性，使得其运行效率有所下降。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程安全的集合</title>
    <url>/java-thread-safe-set/</url>
    <content><![CDATA[<h3 id="1-线程安全的集合"><a href="#1-线程安全的集合" class="headerlink" title="1 线程安全的集合"></a>1 线程安全的集合</h3><ul>
<li><p>Vector</p>
<p>为什么<code>Vecter</code>是线程安全的呢？查看源代码：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200416164922.png" alt="Vector源码分析"></p>
<p>从上面的代码可以看到，每个方法都加上了<code>synchronized</code>关键字，所以它是线程安全的。但是因为它的所有方式都加上了<code>synchronized</code>关键字，那么无论你是否需要对其进行多线程访问时，它都会对其进行锁定，执行效率会很低。现在已经<strong>弃用</strong>。</p>
</li>
<li><p>HashTable</p>
<p><code>HashTable</code>和<code>Vector</code>类似，都是在每个方法上加上<code>synchronized</code>关键字来达到线程安全的目的。我们可以从下面的源代码可以看出：    </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200416165318.png" alt="HashTable源代码分析"></p>
</li>
</ul>
<h3 id="2-java-util-concurrent下的线程安全集合"><a href="#2-java-util-concurrent下的线程安全集合" class="headerlink" title="2 java.util.concurrent下的线程安全集合"></a>2 java.util.concurrent下的线程安全集合</h3><p><code>java.util</code>包下有一个<code>concurrent</code>包，下面的集合都是线程安全的集合，当需要使用线程来操作集合时，就调用该包下面的集合。下面看一段线程不安全的集合代码：    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Thread thread1 =<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                list.add(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                list.add(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200416170347.png" alt="运行结果"></p>
</blockquote>
<p>线程安全的集合：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        Thread thread1 =<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                list.add(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                list.add(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200416170604.png" alt="运行结果"></p>
</blockquote>
<h3 id="3-使用Collections包装成线程安全"><a href="#3-使用Collections包装成线程安全" class="headerlink" title="3 使用Collections包装成线程安全"></a>3 使用Collections包装成线程安全</h3><ul>
<li><p>包装列表list</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br></pre></td></tr></table></figure>
</li>
<li><p>包装集合set</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; set = Collections.synchronizedSet(<span class="keyword">new</span> HashSet&lt;&gt;());</span><br></pre></td></tr></table></figure>
</li>
<li><p>包装字典map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;&gt;());</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://blog.csdn.net/lixiaobuaa/article/details/79689338">https://blog.csdn.net/lixiaobuaa/article/details/79689338</a></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>program language</tag>
      </tags>
  </entry>
  <entry>
    <title>java内存模型</title>
    <url>/jmm/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/0d0af58df595">reference page</a></p>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/14923529-c0cbbccaa6858ca1.png" style="zoom:67%;" />

<p>java虚拟机的内存空间总共分成5个部分：</p>
<ul>
<li>本地方法栈（Native Method Stacks）</li>
<li>程序计数器（Program Counter Register）</li>
<li>虚拟机栈（JVM Stacks）</li>
<li>堆区（Heap）</li>
<li>方法区（Method Area）</li>
</ul>
<h2 id="1-1-Program-Counter-Register"><a href="#1-1-Program-Counter-Register" class="headerlink" title="1.1 Program Counter Register"></a>1.1 Program Counter Register</h2><h3 id="（1）定义"><a href="#（1）定义" class="headerlink" title="（1）定义"></a>（1）定义</h3><p>程序计数器是一块较小的内存空间，可以把它看作当前线程正在执行的字节码的信号指示器。<strong>程序计数器里面记录的是当前线程正在执行的那一条字节码指令的地址。</strong><br> <strong>注：如果当前线程正在执行的是一个本地方法，那么此时程序计数器为空。</strong></p>
<h3 id="（2）PCR的作用"><a href="#（2）PCR的作用" class="headerlink" title="（2）PCR的作用"></a>（2）PCR的作用</h3><ul>
<li>字节码解释器通过改变程序计数器来依次执行程序指令，从而实现代码的流程控制，如代码的顺序执行、循环、选择、异常处理等</li>
<li>在多线程情况下，程序计数器用于记录当前线程执行的位置，从而都能在线程被切换回来时能够知道上一次执行的位置，然后接着上一次的执行位置继续执行。</li>
</ul>
<h3 id="（3）PCR的特点"><a href="#（3）PCR的特点" class="headerlink" title="（3）PCR的特点"></a>（3）PCR的特点</h3><ul>
<li><code>JVM</code>中内存较小的一块区间</li>
<li>是<code>JVM</code>中唯一一个不抛出<code>OutOfMeneryError​</code>异常的区域</li>
<li>线程私有，每一个线程都有一个程序计数器</li>
<li>生命周期会随着线程的创建而创建，随着线程的死亡而死亡</li>
</ul>
<h2 id="1-2-JVM-Stacks"><a href="#1-2-JVM-Stacks" class="headerlink" title="1.2 JVM Stacks"></a>1.2 JVM Stacks</h2><h3 id="（1）定义-1"><a href="#（1）定义-1" class="headerlink" title="（1）定义"></a>（1）定义</h3><p><code>java</code>的虚拟机栈是描述<code>java</code>方法运行过程的内存模型。</p>
<p><code>java</code>虚拟机栈会为<code>java</code>中每一个即将运行的方法分配一个”栈帧“空间，用于存放该方法运行过程所需要的一些信息，包括局部变量、动态链接、操作数栈、方法出口信息等。</p>
<p>当方法执行完毕之后，“栈帧”中的信息出栈，且释放内存</p>
<blockquote>
<p><strong>注意：</strong>人们常说，Java的内存空间分为“栈”和“堆”，栈中存放局部变量，堆中存放对象。 这句话不完全正确！这里的“堆”可以这么理解，但这里的“栈”只代表了Java虚拟机栈中的<strong>局部变量表</strong>部分。<strong>真正的Java虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。</strong></p>
<p><strong>局部变量表和栈帧是两个概念。</strong></p>
</blockquote>
<h3 id="（2）JVM-Stacks的特点"><a href="#（2）JVM-Stacks的特点" class="headerlink" title="（2）JVM Stacks的特点"></a>（2）JVM Stacks的特点</h3><ul>
<li><p><strong>局部变量表</strong>的创建是在方法被执行的时候，随着栈帧的创建而创建，而且，局部变量表的大小在编译时期就确定下来了，在创建的时候，只需要为其分配内存即可。且，局部变量表的大小该方法<strong>执行过程中</strong>时不能被改变的。</p>
</li>
<li><p>JVM Stacks会抛出两种异常</p>
<ul>
<li><p>$StackOverFlowError$</p>
<p>若虚拟机栈的大小不支持动态扩展，那么当前的虚拟机栈就是一个固定的大小，如果当前线程在请求虚拟机栈的深度超多虚拟机栈的最大深度时，就会抛出$StackOverFlowError$异常</p>
</li>
<li><p>$OutOfMeneryError$</p>
<p>如果虚拟机栈的大小支持动态扩展，那么当前线程在请求虚拟机栈的深度超多当前的虚拟机栈的最大深度时，那么虚拟机栈会自动进行扩容，当不断扩展<strong>直到物理空间不够</strong>时，就会抛出$OutOfMeneryError$异常</p>
</li>
</ul>
</li>
<li><p>虚拟机栈是每个线程私有的，生命周期随着线程的创建而创建，随着随着线程的死亡而死亡</p>
</li>
</ul>
<h2 id="1-3-Native-Method-Stacks"><a href="#1-3-Native-Method-Stacks" class="headerlink" title="1.3 Native Method Stacks"></a>1.3 Native Method Stacks</h2><h3 id="（1）定义-2"><a href="#（1）定义-2" class="headerlink" title="（1）定义"></a>（1）定义</h3><ul>
<li>本地方法栈和java的虚拟机栈类似，只不过本地方法栈是本地方法运行的内存模型</li>
<li>本地方法在即将运行时，本地方法栈也会为该本地方法创建一个栈帧，栈帧中存放该方法的一些局部变量、动态链接、操作数栈、方法出口信息等</li>
<li>在本地方法执行完毕之后，本地方法栈中的栈帧会出栈，并释放内存</li>
<li>同样也会抛出连个异常，<code>StackOverFlowError​</code>和<code>OutOfMeneryError</code></li>
</ul>
<h2 id="1-4-Heap"><a href="#1-4-Heap" class="headerlink" title="1.4  Heap"></a>1.4  Heap</h2><h3 id="（1）定义-3"><a href="#（1）定义-3" class="headerlink" title="（1）定义"></a>（1）定义</h3><p>堆区是存放对象的内存区间，java中，<strong>几乎所有</strong>的对象都存放在内存中。</p>
<h3 id="（2）特点"><a href="#（2）特点" class="headerlink" title="（2）特点"></a>（2）特点</h3><ul>
<li>整个java虚拟机中只有一个堆，所有的线程都都访问同一个堆</li>
<li>堆区在JVM启动时被创建</li>
<li>堆区也是JVM中垃圾回收的主要场所</li>
<li>堆区中不同的区域会存放不同类型的对象，这样可以针对不同的区域使用不同的垃圾回收算法，这样可以让JVM更有针对性，更高效运行</li>
<li>堆的大小一般都是可扩展的（现在的主流的JVM都是支持可扩展的），当在使用过程中，堆区不断申请空间，且物理空间不足时，就会抛出<code>OutOfMeneryError​</code>异常</li>
</ul>
<h2 id="1-5-Method-Area"><a href="#1-5-Method-Area" class="headerlink" title="1.5 Method Area"></a>1.5 Method Area</h2><h3 id="（1）定义-4"><a href="#（1）定义-4" class="headerlink" title="（1）定义"></a>（1）定义</h3><p><code>java</code>虚拟机规范中规定方法区是堆（<code>Heap</code>）区中的一个逻辑部分</p>
<p>方法区中存放已经被JVM加载的类信息、常量、静态变量、即时编译器编译后的代码等</p>
<h3 id="（2）特点-1"><a href="#（2）特点-1" class="headerlink" title="（2）特点"></a>（2）特点</h3><ul>
<li><p>所有线程共享</p>
<p>因为方法区是堆区的一个逻辑部分，所以整个<code>JVM</code>中只有一个方法区</p>
</li>
<li><p>永久代</p>
<p>因为方法区需要在<code>JVM</code>长期存在，而且它有时堆的一个逻辑部分，所以使用堆的划分方法，把方法区成为老年代</p>
</li>
<li><p>内存回收效率很低</p>
<p>因为方法区中的对象一般都是长期存在，所以就算是对方法区进行垃圾回收，无效的对象也很少。<strong>对方法区的内存回收，主要是针对方法区中的常量进行回收，以及对类的卸载。</strong></p>
</li>
<li><p>方法区同样支持<strong>可扩展</strong>和<strong>不可扩展</strong>，还可以设定为<strong>不实现垃圾回收。</strong></p>
</li>
</ul>
<h3 id="（3）常量区"><a href="#（3）常量区" class="headerlink" title="（3）常量区"></a>（3）常量区</h3><p>上面说到，方法区中存放的信息包括<code>JVM</code>加载的类信息、常量、静态变量、即时编译器编译后的代码等，而常量信息则存放在方法区中的<strong>运行时常量池</strong>中。</p>
<p>在<code>java</code>编程中，一般声明常量使用<code>public static final</code>进行声明，这个类被编译之后转换成<code>class</code>文件，这个类的所有信息都存储在这个<code>class</code>文件中</p>
<p>当这个类被加载后，这个<code>class</code>文件中的常量信息就存放在方法区中的运行时常量池中，而且，在运行期间，还可以继续向运行时常量池中添加新的常量，<strong>如：String类的intern()方法就能在运行期间向常量池中添加字符串常量。</strong></p>
<p>当运行时常量池中的某些常量没有再被任何其他的变量或者对象引用时，那么在垃圾回收期间，这些常量就会被当成垃圾被回收掉。</p>
<h2 id="1-6-直接内存"><a href="#1-6-直接内存" class="headerlink" title="1.6 直接内存"></a>1.6 直接内存</h2><blockquote>
<p>直接内存是除Java虚拟机之外的内存，但也有可能被Java使用。</p>
<p>在NIO中引入了一种基于通道和缓冲的IO方式。它可以通过调用本地方法直接分配Java虚拟机之外的内存，然后通过一个存储在Java堆中的DirectByteBuffer对象直接操作该内存，而无需先将外面内存中的数据复制到堆中再操作，从而提升了数据操作的效率。</p>
<p>直接内存的大小不受Java虚拟机控制，但既然是内存，当内存不足时就会抛出OOM异常。</p>
</blockquote>
<h2 id="1-7-总结"><a href="#1-7-总结" class="headerlink" title="1.7 总结"></a>1.7 总结</h2><ul>
<li><p><strong><code>Java</code>虚拟机的内存模型中一共有两个“栈”，分别是：<code>Java</code>虚拟机栈和本地方法栈。</strong></p>
<p> 两个“栈”的功能类似，都是方法运行过程的内存模型。并且两个“栈”内部构造相同，都是线程私有。<br> 只不过<code>Java</code>虚拟机栈描述的是<code>Java</code>方法运行过程的内存模型，而本地方法栈是描述Java本地方法运行过程的内存模型。</p>
</li>
<li><p><strong><code>Java</code>虚拟机的内存模型中一共有两个“堆”，一个是原本的堆，一个是方法区。</strong></p>
<p> 方法区本质上是属于堆的一个逻辑部分。堆中存放对象，方法区中存放类信息、常量、静态变量、即时编译器编译的代码。</p>
</li>
<li><p><strong>堆是<code>Java</code>虚拟机中最大的一块内存区域，也是垃圾收集器主要的工作区域。</strong></p>
</li>
<li><p>程序计数器、<code>Java</code>虚拟机栈、本地方法栈是线程私有的，即每个线程都拥有各自的程序计数器、<code>Java</code>虚拟机栈、本地方法区。并且他们的生命周期和所属的线程一样。而堆、方法区是线程共享的，在<code>Java</code>虚拟机中只有一个堆、一个方法栈。并在<code>JVM</code>启动的时候就创建，<code>JVM</code>停止才销毁。</p>
</li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript教程</title>
    <url>/javascript-tutorials/</url>
    <content><![CDATA[<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM的内存结构简介</title>
    <url>/jvm-info/</url>
    <content><![CDATA[<h3 id="1-JVM结构图"><a href="#1-JVM结构图" class="headerlink" title="1 JVM结构图"></a>1 JVM结构图</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/331425-20160623115840235-1252768148.png" alt="">   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200415135013.png" alt="JVM内存结构"></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="具体结构图"></p>
<h3 id="2-栈内存"><a href="#2-栈内存" class="headerlink" title="2 栈内存"></a>2 栈内存</h3><blockquote>
<p>栈内存是由编译器自动分配的内存。栈内存在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配。当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。</p>
</blockquote>
<ol>
<li><p>每个<code>java</code>程序线程运行时，JVM都会给该java线程分配一个java栈，不同的java线程，会拥有不同的java栈。所以，栈是线程私有的，不同的线程之间中的栈的数据是不能共享的。   </p>
</li>
<li><p>栈中存放的数据包括：当前线程声明的基本数据变量，对象的引用变量等。如：<code>int a = 0;</code>，在例子中，变量名<code>a</code>就存放在栈中，数值<code>0</code>存放在常量池中。   </p>
</li>
</ol>
<p>栈内存溢出的情况：在java程序中，栈内存溢出，主要出现在递归程序中，如果递归结束的条件设置错误，那么就容易造成栈内存溢出。如下面这段代码：    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JvmTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(i++);</span><br><span class="line">		a();   <span class="comment">//递归调用本身，但是没有设置退出递归的条件</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		JvmTest j = <span class="keyword">new</span> JvmTest();</span><br><span class="line">		j.a();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>如上面的代码所示，<code>a()</code>调用本身，然而并没有退出递归，所以知道栈内存空间沾满，程序抛出异常，结束。如下面的错误：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414155411.png" alt="栈内存溢出">   </p>
<p>设置栈内存的大小   </p>
<ul>
<li>-Xss128k：在IDEA中，设置栈内存大小为128k，<strong>注意：字母和数字之间没有空格</strong></li>
</ul>
<h3 id="3-堆内存"><a href="#3-堆内存" class="headerlink" title="3 堆内存"></a>3 堆内存</h3><blockquote>
<p>堆内存是由程序员分配的内存。堆内存是区别于栈区、全局数据区和代码区的另一个内存区域。堆允许程序在运行时动态地申请某个大小的内存空间。</p>
</blockquote>
<p><code>java</code>中，堆内存中存放的程序员自己创建的数据，而栈内存中存放的是程序运行时，由编译器自动分配的内存。一般可以认为<code>new Object()</code>出来的对象，都会存放在堆内存中。所以一般情况下，对内存和物理机的内存差不多，但是也如果程序设计不当，也会出现堆内存溢出的情况，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _10M = <span class="number">1014</span> * <span class="number">1024</span> * <span class="number">10</span>;<span class="comment">//这是一个10M的字节空间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_10M]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序报的错误如下：    </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414160654.png" alt="堆内存溢出">   </p>
<p>设置堆内存：</p>
<ul>
<li>-Xmx200m：将当前运行环境的最大堆内存设置为200M，<strong>注意：字母和数字之间没有空格</strong></li>
<li>-Xms200m：将当前运行环境的最小堆内存设置为200M，可以和-Xmx设置为相同的数据值</li>
</ul>
<h3 id="4-常量池"><a href="#4-常量池" class="headerlink" title="4 常量池"></a>4 常量池</h3><h4 id="4-1-class文件常量池"><a href="#4-1-class文件常量池" class="headerlink" title="4.1 class文件常量池"></a>4.1 class文件常量池</h4><h4 id="4-2-运行时常量池"><a href="#4-2-运行时常量池" class="headerlink" title="4.2 运行时常量池"></a>4.2 运行时常量池</h4><h4 id="4-3-基本类型包装类对象常量池"><a href="#4-3-基本类型包装类对象常量池" class="headerlink" title="4.3 基本类型包装类对象常量池"></a>4.3 基本类型包装类对象常量池</h4><h4 id="4-4-全部字符串常量池"><a href="#4-4-全部字符串常量池" class="headerlink" title="4.4 全部字符串常量池"></a>4.4 全部字符串常量池</h4><h3 id="5-JVM参数介绍"><a href="#5-JVM参数介绍" class="headerlink" title="5 JVM参数介绍"></a>5 JVM参数介绍</h3><table>
<thead>
<tr>
<th align="left"><strong>参数名称</strong></th>
<th><strong>含义</strong></th>
<th><strong>默认值</strong></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">-Xms</td>
<td>初始堆大小</td>
<td>物理内存的1/64(&lt;1GB)</td>
<td>默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.</td>
</tr>
<tr>
<td align="left">-Xmx</td>
<td>最大堆大小</td>
<td>物理内存的1/4(&lt;1GB)</td>
<td>默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制</td>
</tr>
<tr>
<td align="left">-Xmn</td>
<td>年轻代大小(1.4or lator)</td>
<td></td>
<td><strong>注意</strong>：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。 整个堆大小=年轻代大小 + 年老代大小 + 持久代大小. 增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8</td>
</tr>
<tr>
<td align="left">-XX:NewSize</td>
<td>设置年轻代大小(for 1.3/1.4)</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">-XX:MaxNewSize</td>
<td>年轻代最大值(for 1.3/1.4)</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">-XX:PermSize</td>
<td>设置持久代(perm gen)初始值</td>
<td>物理内存的1/64</td>
<td></td>
</tr>
<tr>
<td align="left">-XX:MaxPermSize</td>
<td>设置持久代最大值</td>
<td>物理内存的1/4</td>
<td></td>
</tr>
<tr>
<td align="left">-Xss</td>
<td>每个线程的堆栈大小</td>
<td></td>
<td>JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.更具应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右 一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。（校长） 和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:”” -Xss is translated in a VM flag named ThreadStackSize” 一般设置这个值就可以了。</td>
</tr>
<tr>
<td align="left">-<em>XX:ThreadStackSize</em></td>
<td>Thread Stack Size</td>
<td></td>
<td>(0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.]</td>
</tr>
<tr>
<td align="left">-XX:NewRatio</td>
<td>年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</td>
<td></td>
<td>-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5 Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。</td>
</tr>
<tr>
<td align="left">-XX:SurvivorRatio</td>
<td>Eden区与Survivor区的大小比值</td>
<td></td>
<td>设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10</td>
</tr>
<tr>
<td align="left">-XX:LargePageSizeInBytes</td>
<td>内存页的大小不可设置过大， 会影响Perm的大小</td>
<td></td>
<td>=128m</td>
</tr>
<tr>
<td align="left">-XX:+UseFastAccessorMethods</td>
<td>原始类型的快速优化</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">-XX:+DisableExplicitGC</td>
<td>关闭System.gc()</td>
<td></td>
<td>这个参数需要严格的测试</td>
</tr>
<tr>
<td align="left">-XX:MaxTenuringThreshold</td>
<td>垃圾最大年龄</td>
<td></td>
<td>如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率 该参数只有在串行GC时才有效.</td>
</tr>
<tr>
<td align="left">-XX:+AggressiveOpts</td>
<td>加快编译</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">-XX:+UseBiasedLocking</td>
<td>锁机制的性能改善</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">-Xnoclassgc</td>
<td>禁用垃圾回收</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">-XX:SoftRefLRUPolicyMSPerMB</td>
<td>每兆堆空闲空间中SoftReference的存活时间</td>
<td>1s</td>
<td>softly reachable objects will remain alive for some amount of time after the last time they were referenced. The default value is one second of lifetime per free megabyte in the heap</td>
</tr>
<tr>
<td align="left">-XX:PretenureSizeThreshold</td>
<td>对象超过多大是直接在旧生代分配</td>
<td>0</td>
<td>单位字节 新生代采用Parallel Scavenge GC时无效 另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.</td>
</tr>
<tr>
<td align="left">-XX:TLABWasteTargetPercent</td>
<td>TLAB占eden区的百分比</td>
<td>1%</td>
<td></td>
</tr>
<tr>
<td align="left">-XX:+<em>CollectGen0First</em></td>
<td>FullGC时是否先YGC</td>
<td>false</td>
<td></td>
</tr>
</tbody></table>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://juejin.im/post/5d1efae26fb9a07ea6489355">JVM是什么？深入解析JVM原理！-掘金</a></p>
<p><a href="https://blog.csdn.net/u010758410/article/details/80315927">https://blog.csdn.net/u010758410/article/details/80315927</a></p>
<p><a href="http://www.51gjie.com/java/551.html">http://www.51gjie.com/java/551.html</a></p>
<p><a href="https://www.jianshu.com/p/cf78e68e3a99">https://www.jianshu.com/p/cf78e68e3a99</a></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM中的直接内存</title>
    <url>/jvm-of-direct-memery/</url>
    <content><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200415135013.png" alt="JVM内存结构图">   </p>
<p>直接内存并不属于JVM的内存结构，它是物理机的内存，但是JVM虚拟机可以调用该部分内存。</p>
</blockquote>
<p>直接内存的使用：</p>
<ul>
<li>常见于<code>NIO</code>，用于数据缓冲区</li>
<li>分配回收的代价较高，但是速度很快</li>
<li>不收<code>JVM</code>内存回收管理</li>
</ul>
<h3 id="2-正常IO读取"><a href="#2-正常IO读取" class="headerlink" title="2 正常IO读取"></a>2 正常IO读取</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200415135733.png" alt="正常IO读取结构图"></p>
<p>从上图的结构图中，我们可以看到，当<code>java</code>程序需要读取文件时，首先会在java堆内存中<code>new</code>一个缓冲区，然后系统内存从磁盘中读取文件，再然后在将系统缓冲区中的字节流复制到java堆内存的缓冲区中，然后在由java程序调用。    </p>
<p>这样做有一个缺点，就是需要开启两块内存，效率会很低。</p>
<h3 id="3-直接内存读取"><a href="#3-直接内存读取" class="headerlink" title="3 直接内存读取"></a>3 直接内存读取</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200415135919.png" alt="直接内存结构图">   </p>
<p>从图中可以看到，当java程序使用直接内存时，首先java程序在系统内存中分配一块直接内存块，这一内存块是系统内存和java堆内存可以共享的，那么系统内存读取到的磁盘文件就可以直接由java堆内存使用，这样就省去了复制的操作，大大节约了时间开销。</p>
<h3 id="4-直接内存分配内存"><a href="#4-直接内存分配内存" class="headerlink" title="4 直接内存分配内存"></a>4 直接内存分配内存</h3><p>通过<code>java</code>中的<code>unsafe</code>对象分配一块直接内存，直接内存大小在分配时指定。直接内存由于不受<code>JVM</code>的管理，所以直接内存的释放，必须主动调用<code>unsafe</code>对象进行释放，才能将直接内存释放。</p>
<p>这是<code>ByteBuffer</code>的分配直接内存的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DirectByteBuffer(<span class="keyword">int</span> cap) &#123;                   <span class="comment">// package-private</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>(-<span class="number">1</span>, <span class="number">0</span>, cap, cap);</span><br><span class="line">        <span class="keyword">boolean</span> pa = VM.isDirectMemoryPageAligned();</span><br><span class="line">        <span class="keyword">int</span> ps = Bits.pageSize();</span><br><span class="line">        <span class="keyword">long</span> size = Math.max(<span class="number">1L</span>, (<span class="keyword">long</span>)cap + (pa ? ps : <span class="number">0</span>));</span><br><span class="line">        Bits.reserveMemory(size, cap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> base = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            base = unsafe.allocateMemory(size); <span class="comment">//分配直接内存</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span><br><span class="line">            Bits.unreserveMemory(size, cap);</span><br><span class="line">            <span class="keyword">throw</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        unsafe.setMemory(base, size, (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (pa &amp;&amp; (base % ps != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">// Round up to page boundary</span></span><br><span class="line">            address = base + ps - (base &amp; (ps - <span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            address = base;</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="comment">/*</span></span><br><span class="line"><span class="comment">    	cleaner对象用来释放直接内存，cleaner对象关联了当前的ByteBuffer对象，因为ByteBuffer对象是受java虚拟机管理的，直接内存不受java虚拟机管理，所以这里的关联，就是为了在当ByteBuffer被释放的时候，直接内存也被释放，只不过是被unsafe对象释放的，并不是Java虚拟机释放的。</span></span><br><span class="line"><span class="comment">    	*/</span></span><br><span class="line">        cleaner = Cleaner.create(<span class="keyword">this</span>, <span class="keyword">new</span> Deallocator(base, size, cap));<span class="comment">//释放直接内存</span></span><br><span class="line">        att = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>cleaner = Cleaner.create(this, new Deallocator(base, size, cap));//释放直接内存</code><br><strong>解释：这里使用cleaner对象用来释放直接内存，cleaner对象关联了当前的ByteBuffer对象，因为ByteBuffer对象是受java虚拟机管理的，直接内存不受java虚拟机管理，所以这里的关联，就是为了在当ByteBuffer被释放的时候，直接内存也被释放，只不过是被unsafe对象释放的，并不是Java虚拟机释放的。</strong>        </p>
<p>cleaner对象是一个<a href="https://jums.club/jvm-reference/#4-虚引用-PhantomReference">虚引用</a>对象。</p>
<p>Deallocator类源码：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Deallocator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> address;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> size;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Deallocator</span><span class="params">(<span class="keyword">long</span> address, <span class="keyword">long</span> size, <span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> (address != <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">this</span>.address = address;</span><br><span class="line">            <span class="keyword">this</span>.size = size;</span><br><span class="line">            <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (address == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// Paranoia</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            unsafe.freeMemory(address);<span class="comment">//主动释放直接内存</span></span><br><span class="line">            address = <span class="number">0</span>;</span><br><span class="line">            Bits.unreserveMemory(size, capacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-直接内存回收"><a href="#5-直接内存回收" class="headerlink" title="5 直接内存回收"></a>5 直接内存回收</h3><p>从第4节我们可以看到，直接内存的会随着<code>ByteBuffer</code>对象的被回收，然后触发<code>cleaner</code>对象，调用<code>Unsafe</code>对象将直接内存回收，看起来也像是一种自动回收的方法。   </p>
<p>但是，由于<code>ByteBuffer</code>对象的回收，是遵循<code>JVM</code>回收机制的，也就是说，得达到一定的回收条件才会回收<code>ByteBuffer</code>对象。那么直接内存也不会被回收，这样就会导致内存不足。所以建议使用手动调用<code>Unsafe</code>的方法释放直接内存。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM虚拟机参数介绍</title>
    <url>/jvm-param-info/</url>
    <content><![CDATA[<h3 id="JVM参数大全"><a href="#JVM参数大全" class="headerlink" title="JVM参数大全"></a>JVM参数大全</h3><table>
<thead>
<tr>
<th align="left"><strong>参数名称</strong></th>
<th><strong>含义</strong></th>
<th><strong>默认值</strong></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">-Xms</td>
<td>初始堆大小</td>
<td>物理内存的1/64(&lt;1GB)</td>
<td>默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制.</td>
</tr>
<tr>
<td align="left">-Xmx</td>
<td>最大堆大小</td>
<td>物理内存的1/4(&lt;1GB)</td>
<td>默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制</td>
</tr>
<tr>
<td align="left">-Xmn</td>
<td>年轻代大小(1.4or lator)</td>
<td></td>
<td><strong>注意</strong>：此处的大小是（eden+ 2 survivor space).与jmap -heap中显示的New gen是不同的。 整个堆大小=年轻代大小 + 年老代大小 + 持久代大小. 增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8</td>
</tr>
<tr>
<td align="left">-XX:NewSize</td>
<td>设置年轻代大小(for 1.3/1.4)</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">-XX:MaxNewSize</td>
<td>年轻代最大值(for 1.3/1.4)</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">-XX:PermSize</td>
<td>设置持久代(perm gen)初始值</td>
<td>物理内存的1/64</td>
<td></td>
</tr>
<tr>
<td align="left">-XX:MaxPermSize</td>
<td>设置持久代最大值</td>
<td>物理内存的1/4</td>
<td></td>
</tr>
<tr>
<td align="left">-Xss</td>
<td>每个线程的堆栈大小</td>
<td></td>
<td>JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K.更具应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在3000~5000左右 一般小的应用， 如果栈不是很深， 应该是128k够用的 大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。（校长） 和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:”” -Xss is translated in a VM flag named ThreadStackSize” 一般设置这个值就可以了。</td>
</tr>
<tr>
<td align="left">-<em>XX:ThreadStackSize</em></td>
<td>Thread Stack Size</td>
<td></td>
<td>(0 means use default stack size) [Sparc: 512; Solaris x86: 320 (was 256 prior in 5.0 and earlier); Sparc 64 bit: 1024; Linux amd64: 1024 (was 0 in 5.0 and earlier); all others 0.]</td>
</tr>
<tr>
<td align="left">-XX:NewRatio</td>
<td>年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</td>
<td></td>
<td>-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5 Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。</td>
</tr>
<tr>
<td align="left">-XX:SurvivorRatio</td>
<td>Eden区与Survivor区的大小比值</td>
<td></td>
<td>设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10</td>
</tr>
<tr>
<td align="left">-XX:LargePageSizeInBytes</td>
<td>内存页的大小不可设置过大， 会影响Perm的大小</td>
<td></td>
<td>=128m</td>
</tr>
<tr>
<td align="left">-XX:+UseFastAccessorMethods</td>
<td>原始类型的快速优化</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">-XX:+DisableExplicitGC</td>
<td>关闭System.gc()</td>
<td></td>
<td>这个参数需要严格的测试</td>
</tr>
<tr>
<td align="left">-XX:MaxTenuringThreshold</td>
<td>垃圾最大年龄</td>
<td></td>
<td>如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代. 对于年老代比较多的应用,可以提高效率.如果将此值设置为一个较大值,则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活 时间,增加在年轻代即被回收的概率 该参数只有在串行GC时才有效.</td>
</tr>
<tr>
<td align="left">-XX:+AggressiveOpts</td>
<td>加快编译</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">-XX:+UseBiasedLocking</td>
<td>锁机制的性能改善</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">-Xnoclassgc</td>
<td>禁用垃圾回收</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">-XX:SoftRefLRUPolicyMSPerMB</td>
<td>每兆堆空闲空间中SoftReference的存活时间</td>
<td>1s</td>
<td>softly reachable objects will remain alive for some amount of time after the last time they were referenced. The default value is one second of lifetime per free megabyte in the heap</td>
</tr>
<tr>
<td align="left">-XX:PretenureSizeThreshold</td>
<td>对象超过多大是直接在旧生代分配</td>
<td>0</td>
<td>单位字节 新生代采用Parallel Scavenge GC时无效 另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.</td>
</tr>
<tr>
<td align="left">-XX:TLABWasteTargetPercent</td>
<td>TLAB占eden区的百分比</td>
<td>1%</td>
<td></td>
</tr>
<tr>
<td align="left">-XX:+<em>CollectGen0First</em></td>
<td>FullGC时是否先YGC</td>
<td>false</td>
<td></td>
</tr>
</tbody></table>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="http://www.51gjie.com/java/551.html">http://www.51gjie.com/java/551.html</a></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>jetbrain软件使用技巧</title>
    <url>/jetbrain-usages/</url>
    <content><![CDATA[<h1 id="一、常用快捷键"><a href="#一、常用快捷键" class="headerlink" title="一、常用快捷键"></a>一、常用快捷键</h1><h2 id="1-1-编辑"><a href="#1-1-编辑" class="headerlink" title="1.1 编辑"></a>1.1 编辑</h2><table>
<thead>
<tr>
<th>快捷键组合</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Space</td>
<td>代码自动完成提示（选择）</td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>显示意图动作和快速修复</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>参数信息（在调用方法参数忘记的时候，提示）</td>
</tr>
<tr>
<td>Ctrl + Q</td>
<td>快速查找文件，可以查找当前类定义的文件等</td>
</tr>
<tr>
<td>Ctrl + 鼠标滑过</td>
<td>基本信息</td>
</tr>
<tr>
<td>Alt + Insert</td>
<td>生成代码…(细节需要多次操作会发现很有意思)</td>
</tr>
<tr>
<td>Ctrl + O</td>
<td>重写方法（在PHPStorm中是重写父类方法，会有选择框）</td>
</tr>
<tr>
<td>Ctrl + I</td>
<td>实现方法（一般是指实现接口类或抽象类方法）</td>
</tr>
<tr>
<td>Ctrl + Alt + T</td>
<td>环绕代码块 (if..else, try..catch, for, 等)</td>
</tr>
<tr>
<td>Ctrl + /</td>
<td>单行注释(//)</td>
</tr>
<tr>
<td>Ctrl + Shift + /</td>
<td>块注释 (/**/)</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>选择依次递增的代码块，具体使用目前来看比较少</td>
</tr>
<tr>
<td>Ctrl + Shift + W</td>
<td>去掉当前选择返回上一个选择，类似于撤销选择，与上面的相反</td>
</tr>
<tr>
<td>Ctrl + Alt + L</td>
<td>格式化代码，一般来说，写的代码格式不整齐统一，这个很有用</td>
</tr>
<tr>
<td>Ctrl + Alt + I</td>
<td>自啮合线，这个解释不太好解释，测试结果就是会自动根据代码来进行对齐</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>复制当前行或选定的块</td>
</tr>
<tr>
<td>Ctrl + Y</td>
<td>删除插入符号所在行</td>
</tr>
<tr>
<td>Ctrl + Shift + J</td>
<td>智能线连接（HTML和JavaScript才有用）</td>
</tr>
<tr>
<td>Ctrl + Enter</td>
<td>智能分割线 (HTML 和 JavaScript 才有用)</td>
</tr>
<tr>
<td>Shift + Enter</td>
<td>开始新行，比如光标在当前行，不需要切换到行尾按Enter，直接按这个组合键即可</td>
</tr>
<tr>
<td>Ctrl + Shift + U</td>
<td>切换选中的英文文字的大小写，此处其实用到挺多的</td>
</tr>
<tr>
<td>Ctrl + Shift + ] 或 [</td>
<td>选择直到代码块的开始或结束，我之前不知道这个，其实很有用</td>
</tr>
<tr>
<td>Ctrl + Delete</td>
<td>删除从当前光标到当前单词结尾</td>
</tr>
<tr>
<td>Ctrl + Backspace</td>
<td>从光标位置删除到当前单词的开始</td>
</tr>
<tr>
<td>Ctrl + + 或 -</td>
<td>这里是ctrl和加号或者减号产生的组合，可以折叠或展开当前代码块</td>
</tr>
<tr>
<td>Ctrl + F4</td>
<td>关闭活动中的tab</td>
</tr>
<tr>
<td>Ctrl + Shift + V</td>
<td>从历史粘贴</td>
</tr>
</tbody></table>
<h2 id="1-3-调试"><a href="#1-3-调试" class="headerlink" title="1.3 调试"></a>1.3 调试</h2><table>
<thead>
<tr>
<th>快捷键组合</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>F8</td>
<td>跳过</td>
</tr>
<tr>
<td>F7</td>
<td>步进</td>
</tr>
<tr>
<td>Shift + F8</td>
<td>跳出</td>
</tr>
<tr>
<td>Alt + F8</td>
<td>表达式求值</td>
</tr>
<tr>
<td>F9</td>
<td>恢复程序</td>
</tr>
<tr>
<td>Ctrl + F8</td>
<td>切断断点</td>
</tr>
<tr>
<td>Ctrl+Shift+F8</td>
<td>查看断点</td>
</tr>
</tbody></table>
<h2 id="1-4-运行"><a href="#1-4-运行" class="headerlink" title="1.4 运行"></a>1.4 运行</h2><table>
<thead>
<tr>
<th>快捷键组合</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Shift + F10</td>
<td>运行</td>
</tr>
<tr>
<td>Shift + F9</td>
<td>调试</td>
</tr>
<tr>
<td>Ctrl + Shift + F10</td>
<td>从编辑器运行上下文配置（Run context configuration from editor），此处可能翻译不够准确</td>
</tr>
<tr>
<td>Ctrl + Shift + X</td>
<td>在命令行运行</td>
</tr>
</tbody></table>
<h2 id="1-5-搜索-替换"><a href="#1-5-搜索-替换" class="headerlink" title="1.5 搜索/替换"></a>1.5 搜索/替换</h2><table>
<thead>
<tr>
<th>快捷键组合</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + F/R</td>
<td>查找/替换</td>
</tr>
<tr>
<td>F3/Shift + F3</td>
<td>查找下一个/上一个</td>
</tr>
<tr>
<td>Ctrl + Shift + F/R</td>
<td>在目录中查找/替换</td>
</tr>
</tbody></table>
<h2 id="1-6-查找哪些地方使用"><a href="#1-6-查找哪些地方使用" class="headerlink" title="1.6 查找哪些地方使用"></a>1.6 查找哪些地方使用</h2><table>
<thead>
<tr>
<th>快捷键组合</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Alt + F7 / Ctrl + F7</td>
<td>当前文件查找被使用/在文件中查找哪些地方使用</td>
</tr>
<tr>
<td>Ctrl + Shift + F7</td>
<td>文件中搜索并在使用的地方高亮显示</td>
</tr>
<tr>
<td>Ctrl + Alt + F7</td>
<td>显示哪些地方被使用</td>
</tr>
</tbody></table>
<h2 id="1-7-导航"><a href="#1-7-导航" class="headerlink" title="1.7 导航"></a>1.7 导航</h2><table>
<thead>
<tr>
<th>快捷键组合</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + N</td>
<td>跳转到指定类</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td>跳转到文件</td>
</tr>
<tr>
<td>Ctrl + Alt + Shift + N</td>
<td>跳转到符号</td>
</tr>
<tr>
<td>Ctrl + G</td>
<td>跳转到第几行</td>
</tr>
<tr>
<td>Alt + Right/Left</td>
<td>切换编辑器活动窗</td>
</tr>
<tr>
<td>Esc</td>
<td>Go to editor (from tool window)</td>
</tr>
<tr>
<td>Ctrl + E</td>
<td>弹出最近编辑文件，我也是在写这文档才知道，太方便了</td>
</tr>
<tr>
<td>Ctrl + Alt + Left/Right</td>
<td>导航前进/后退</td>
</tr>
<tr>
<td>Ctrl + Shift + Backspace</td>
<td>跳转到最近编辑的代码位置</td>
</tr>
<tr>
<td>Alt + F1</td>
<td>在任何视图中选择当前文件或符号</td>
</tr>
<tr>
<td>Ctrl + B 或 Ctrl + Click</td>
<td>跳到申明（如跳转到当前函数声明的地方，这个很常用，可以实操一下）</td>
</tr>
<tr>
<td>Ctrl + Alt + B</td>
<td>与上面相反，跳到执行位置</td>
</tr>
<tr>
<td>Ctrl + Shift + I</td>
<td>打开快速定义查找</td>
</tr>
<tr>
<td>Ctrl + Shift + B</td>
<td>跳转到类型声明</td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>跳到超级方法(super-method)/超类 (super-class)</td>
</tr>
<tr>
<td>Alt + Up/Down</td>
<td>跳转到上一个或者下一个方法，在编辑一个类的时候，方便一个一个的方法进行查看</td>
</tr>
<tr>
<td>Ctrl + ] / [</td>
<td>跳转到代码块的开始或结束</td>
</tr>
<tr>
<td>F2 / Shift + F2</td>
<td>跳转到上一个或下一个高亮错误地方，这个检查代码语法错误很有用</td>
</tr>
<tr>
<td>F4 / Ctrl + Enter</td>
<td>编辑源代码/查看源代码</td>
</tr>
</tbody></table>
<h2 id="1-8-重构"><a href="#1-8-重构" class="headerlink" title="1.8 重构"></a>1.8 重构</h2><table>
<thead>
<tr>
<th>快捷键组合</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>F5/F6</td>
<td>复制/移动</td>
</tr>
<tr>
<td>Alt + Delete</td>
<td>安全删除</td>
</tr>
<tr>
<td>Shift + F6</td>
<td>重命名</td>
</tr>
<tr>
<td>Ctrl + Alt + N</td>
<td>内联变量</td>
</tr>
<tr>
<td>Ctrl + Alt + M/V/F/C</td>
<td>提取方法/变量/字段/常数(Method/Variable/Field/Constant)</td>
</tr>
<tr>
<td>Ctrl + Alt + Shift + T</td>
<td>重构这段代码（显示所有可用的重构），比如if else if 这种语句转switch语句</td>
</tr>
</tbody></table>
<h2 id="1-9-VCS-本地历史"><a href="#1-9-VCS-本地历史" class="headerlink" title="1.9 VCS/本地历史"></a>1.9 VCS/本地历史</h2><table>
<thead>
<tr>
<th>快捷键组合</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Alt + 反引号 (`)</td>
<td>‘VCS’ 快速弹出，此处需要注意这个反引号在最左上角，和那个~符号在一起的，ESC键下面</td>
</tr>
<tr>
<td>Ctrl + K</td>
<td>提交项目到VCS</td>
</tr>
<tr>
<td>Ctrl + T</td>
<td>从 VCS 更新项目</td>
</tr>
<tr>
<td>Alt + Shift + C</td>
<td>显示最近更改</td>
</tr>
</tbody></table>
<h2 id="1-10-常用操作"><a href="#1-10-常用操作" class="headerlink" title="1.10 常用操作"></a>1.10 常用操作</h2><table>
<thead>
<tr>
<th>快捷键组合</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>快速按两次 Shift</td>
<td>搜索任何一个地方</td>
</tr>
<tr>
<td>Ctrl + Shift + A</td>
<td>查找方法(Action)</td>
</tr>
<tr>
<td>Alt + #[0-9]</td>
<td>打开相应的工具窗口（这个我也没搞明白）</td>
</tr>
<tr>
<td>Ctrl + Alt + F11</td>
<td>开启或关闭全屏模式</td>
</tr>
<tr>
<td>Ctrl + Shift + F12</td>
<td>开启或关闭最大化编辑</td>
</tr>
<tr>
<td>Alt + Shift + F</td>
<td>添加到收藏列表（我觉得这个功能很神奇，不知道为啥要这么做）</td>
</tr>
<tr>
<td>Alt + Shift + I</td>
<td>检查当前文件以及当前配置文件</td>
</tr>
<tr>
<td>Ctrl + Alt + S</td>
<td>打开设置对话框（表示会与QQ默认快捷键冲突）</td>
</tr>
<tr>
<td>Ctrl + Tab</td>
<td>在 tabs 和工具窗口间切换</td>
</tr>
</tbody></table>
<h2 id="1-11-插入模板-片段-针对PHPstorm"><a href="#1-11-插入模板-片段-针对PHPstorm" class="headerlink" title="1.11 插入模板/片段(针对PHPstorm)"></a>1.11 插入模板/片段(针对PHPstorm)</h2><table>
<thead>
<tr>
<th>快捷键组合</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Alt + J</td>
<td>插入模板</td>
</tr>
<tr>
<td>eco</td>
<td>‘echo’ 语句</td>
</tr>
<tr>
<td>fore</td>
<td>foreach(iterable_expr as $value) {…}</td>
</tr>
<tr>
<td>forek</td>
<td>foreach(iterable_expr as $key =&gt; $value) {…}</td>
</tr>
<tr>
<td>inc/inco</td>
<td>‘include’/‘include_once’ 语句</td>
</tr>
<tr>
<td>prif</td>
<td>private function</td>
</tr>
<tr>
<td>prof</td>
<td>protected function</td>
</tr>
<tr>
<td>pubf</td>
<td>public function</td>
</tr>
<tr>
<td>rqr/rqro</td>
<td>‘require’/‘require_once’ 语句</td>
</tr>
<tr>
<td>更多…</td>
<td>其他自己尝试</td>
</tr>
</tbody></table>
<h1 id="二、下划线转驼峰"><a href="#二、下划线转驼峰" class="headerlink" title="二、下划线转驼峰"></a>二、下划线转驼峰</h1><p>IntelliJ IDEA下划线转驼峰及大小写转换插件和快捷键<br>idea带有快捷键ctrl+shift+u,来进行大小写的转换，这不能完全满足我们的需求。</p>
<p>IntelliJ IDEA提供了CamelCase很方便的工具插件，使用快捷键<code>shift+alt+u</code>。</p>
<p>按住shift+alt再不停的按U,会把选中内容的单词的下划线转驼峰转大写等，不停的转换，直到你想要的。</p>
<p>CamelCase插件：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211009103229.png" alt=""></p>
<p>1.安装方法：<br>idea菜单栏-<strong>file</strong>-<strong>settings</strong>-搜索”<strong>plugins</strong>“-点击下面按钮‘browse repositories‘-搜索“<strong>CamelCase</strong>”-点击安装<br>2.使用方法<br>安装后重新打开idea,选中内容，快捷键<code>shit+alt+u</code>，选中内容中的单词 就会变，直到变成你想要的。<br>这个真的很方便，特别是mysql数据库字段带下划线 直接复制字段到java，开发很快</p>
<h1 id="三、光标同时操作多行"><a href="#三、光标同时操作多行" class="headerlink" title="三、光标同时操作多行"></a>三、光标同时操作多行</h1><p>在ide编辑界面，按住<code>alt</code>键，然后使用鼠标左键点击不同的行，即可复制一个鼠标光标。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211126194309.png" alt=""></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://cloud.tencent.com/developer/article/1460576">总结IntelliJ IDEA 使用技巧大全，速度收藏！</a></li>
<li><a href="https://segmentfault.com/a/1190000007206543">JetBrains系列IDE快捷键大全</a></li>
<li><a href="https://blog.csdn.net/ZYC88888/article/details/87876390">https://blog.csdn.net/ZYC88888/article/details/87876390</a></li>
</ul>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>java中5种引用：强引用，弱引用，虚引用，软引用，终接器引用</title>
    <url>/jvm-reference/</url>
    <content><![CDATA[<p><a href="https://juejin.im/post/5b82c02df265da436152f5ad">参考文章</a></p>
<h3 id="1-强引用-StrongReference"><a href="#1-强引用-StrongReference" class="headerlink" title="1 强引用(StrongReference)"></a>1 强引用(StrongReference)</h3><blockquote>
<p><strong>强引用</strong>是使用最普遍的引用。如果一个对象具有强引用，那<strong>垃圾回收器</strong>绝不会回收它。</p>
</blockquote>
<p>在<code>java</code>程序中，一般由<code>Object object = new Object();</code>定义的<code>object</code>就是一个强引用，也就是说<code>object</code>强引用<code>new Object()</code>对象。这种情况下，也就是说明，该对象是程序中必不可少的一部分，当程序遇到内存不足时，<code>jvm</code>并不会将其释放，而是会抛出一个<code>OutOfMemoryError</code>异常。如下面这段代码：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _10M = <span class="number">1014</span> * <span class="number">1024</span> * <span class="number">10</span>;<span class="comment">//这是一个10M的字节空间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_10M]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由代码可以看出，<code>list</code>是一个对<code>new ArrayList&lt;&gt;()</code>的 强引用，所以在遇到内存不足时，就抛出了下面的异常：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414170211.png" alt=""></p>
<h4 id="1-1-什么情况下，强引用会被垃圾回收掉？"><a href="#1-1-什么情况下，强引用会被垃圾回收掉？" class="headerlink" title="1.1 什么情况下，强引用会被垃圾回收掉？"></a>1.1 什么情况下，强引用会被垃圾回收掉？</h4><p>当java程序中所有的引用对象都断开了对该强引用的引用，那么<code>JVM</code>就认为该对象没有使用价值了，也就被垃圾回收掉了。</p>
<h3 id="2-软引用-SoftReference"><a href="#2-软引用-SoftReference" class="headerlink" title="2 软引用(SoftReference)"></a>2 软引用(SoftReference)</h3><blockquote>
<p>如果一个java对象只具有软引用，那么当内存充足时，java的垃圾回收机制不会回收当前对象；然而，当内存不足时，java垃圾回收机制会回收当前的软引用对象。只要当前软引用没有被垃圾回收掉，那么java程序就可以调用该软引用对象。</p>
</blockquote>
<ul>
<li>软引用和强引用的区别：<ul>
<li>当该软引用对象没有被强引用对象直接引用时，<strong>那么当前内存不足时</strong>，软引用引用的对象就会被<code>JVM</code>垃圾回收掉。</li>
<li>强引用之后<strong>当所有的<code>gc root</code>对象没有引用当前强引用对象时，且当内存不足时</strong>，才会被垃圾回收掉。</li>
</ul>
</li>
<li>软引用和弱引用的区别：<ul>
<li>弱引用被垃圾回收的条件相对软引用更加宽松，也就是说，只要发生了垃圾回收，<strong>那么不管当前内存是否充足</strong>，弱引用对象都会被垃圾回收掉。</li>
</ul>
</li>
</ul>
<p>看下面这段软引用代码了解一下软引用的具体应用：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _10M = <span class="number">1014</span> * <span class="number">1024</span> * <span class="number">10</span>;<span class="comment">//这是一个10M的字节空间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        soft();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">soft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SoftReference&lt;<span class="keyword">byte</span>[]&gt; softReference;</span><br><span class="line">        ReferenceQueue&lt;SoftReference&gt; referenceQueue;</span><br><span class="line">        List&lt;SoftReference&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;------当前为软引用------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            softReference = <span class="keyword">new</span> SoftReference&lt;&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[_10M]);</span><br><span class="line">            list.add(softReference);</span><br><span class="line">            System.out.println(list.size());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------下面是输出-------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SoftReference&lt;<span class="keyword">byte</span>[]&gt; ref : list )&#123;</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序运行结果如下，并没有像强引用那样，报一个内存不足的错误：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414202517.png" alt="软引用运行结果"></p>
<p>从运行结果可以看出，使用软引用去引用<code>10M</code>的字节块，程序没有出错，但是可以看出，前三个块都没系统释放了，也就是说当成垃圾给回收掉了，只有最后一个被保留了下来。使用这种方式，可以使得系统在引用一些资源时，即使资源过多，也不会导致程序崩溃。</p>
<p>软引用使用场景：</p>
<ul>
<li>当我们需要调用一些图片信息等资源时，可以使用这种引用方式，因为这不是程序所必须的资源，当需要时，可以在临时加载，这样就大大节约了系统的资源。</li>
</ul>
<h3 id="3-弱引用-WeakReference"><a href="#3-弱引用-WeakReference" class="headerlink" title="3 弱引用(WeakReference)"></a>3 弱引用(WeakReference)</h3><blockquote>
<p>在<a href="https://zh.wikipedia.org/wiki/计算机程序设计">计算机程序设计</a>中，<strong>弱引用</strong>与强引用相对，是指不能确保其引用的<a href="https://zh.wikipedia.org/wiki/对象_(计算机科学)">对象</a>不会被<a href="https://zh.wikipedia.org/wiki/垃圾回收器">垃圾回收器</a>回收的引用。一个对象若只被弱引用所引用，则被认为是<a href="https://zh.wikipedia.org/wiki/不可访问内存">不可访问</a>（或弱可访问）的，并因此可能在任何时刻被回收。一些配有垃圾回收机制的语言，如<a href="https://zh.wikipedia.org/wiki/Java">Java</a>、<a href="https://zh.wikipedia.org/wiki/C♯">C#</a>、<a href="https://zh.wikipedia.org/wiki/Python">Python</a>、<a href="https://zh.wikipedia.org/wiki/Perl">Perl</a>、<a href="https://zh.wikipedia.org/wiki/Lisp">Lisp</a>等都在不同程度上支持弱引用。</p>
<p>from wikipedia</p>
</blockquote>
<p><strong>弱引用</strong>与<strong>软引用</strong>的区别在于：只具有<strong>弱引用</strong>的对象拥有<strong>更短暂</strong>的<strong>生命周期</strong>。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有<strong>弱引用</strong>的对象，不管当前<strong>内存空间足够与否</strong>，都会<strong>回收</strong>它的内存。不过，由于垃圾回收器是一个<strong>优先级很低的线程</strong>，因此<strong>不一定</strong>会<strong>很快</strong>发现那些只具有<strong>弱引用</strong>的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _10M = <span class="number">1014</span> * <span class="number">1024</span> * <span class="number">10</span>;<span class="comment">//这是一个10M的字节空间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WeakReference&lt;<span class="keyword">byte</span>[]&gt; bytes;</span><br><span class="line">        List&lt;WeakReference&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            bytes = <span class="keyword">new</span> WeakReference&lt;<span class="keyword">byte</span>[]&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[_10M]);</span><br><span class="line">            list.add(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序运行没有报错：   </p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414170630.png" alt=""></p>
<h4 id="引用队列"><a href="#引用队列" class="headerlink" title="引用队列"></a>引用队列</h4><p>由于软引用和弱引用本身也会占用一定的内存，所以当软引用或者弱引用被垃圾回收掉之后，<code>JVM</code>会将软引用本身或者弱引用本身放到引用队列中，当我们需要释放这一段内存时，需要遍历引用队列中的所有对象并将其释放。</p>
<p><strong>软引用和弱引用都可以配合使用引用队列来释放引用自身所占用的内存。</strong>   </p>
<p>代码示例：这里还是以上面的软引用为例，但是这里配合了引用队列，将已经回收掉的软引用本身释放掉。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _10M = <span class="number">1014</span> * <span class="number">1024</span> * <span class="number">10</span>;<span class="comment">//这是一个10M的字节空间</span></span><br><span class="line">    <span class="comment">//堆内存大小设置为30m  -Xmx30m</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            soft();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">soft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SoftReference&lt;<span class="keyword">byte</span>[]&gt; softReference;</span><br><span class="line">        ReferenceQueue&lt;SoftReference&gt; referenceQueue;</span><br><span class="line">        ReferenceQueue&lt;<span class="keyword">byte</span>[]&gt; queue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;SoftReference&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;------当前为软引用------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//当软引用被垃圾回收时，当前软引用就会被加入到引用队列中去</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[_10M];</span><br><span class="line">            System.out.println(bytes);</span><br><span class="line">            softReference = <span class="keyword">new</span> SoftReference&lt;&gt;(bytes, queue);</span><br><span class="line">            list.add(softReference);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放引用队列中的软引用对象</span></span><br><span class="line">        Reference ref0 = queue.poll();</span><br><span class="line">        <span class="keyword">while</span> (ref0 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            list.remove(ref0);</span><br><span class="line">            ref0 = queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------下面是输出-------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SoftReference&lt;<span class="keyword">byte</span>[]&gt; ref : list )&#123;</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200414204340.png" alt="引用队列运行结果"></p>
<p>从运行结果可以看出，前面的三个<code>null</code>对象已经被释放掉了，就剩下最后一个。弱引用配合引用队列和软引用类似。</p>
<h3 id="4-虚引用-PhantomReference"><a href="#4-虚引用-PhantomReference" class="headerlink" title="4 虚引用(PhantomReference)"></a>4 虚引用(PhantomReference)</h3><blockquote>
<p>虚引用，其前几种引用不同，当一个对象被虚引用时，那么说明该对象，在任何时候都可以被垃圾回收，不需要考虑当前内存是否充足。且虚引用必须配合引用队列才能使用。</p>
</blockquote>
<p>虚引用和软引用、弱引用的区别在于，虚引用和终接器引用在使用时需要关联一个引用队列(<code>ReferenceQueue</code>)才能使用，而软引用和弱引用则不需要。</p>
<p>代码示例：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _10M = <span class="number">1014</span> * <span class="number">1024</span> * <span class="number">10</span>;<span class="comment">//这是一个10M的字节空间</span></span><br><span class="line">    <span class="comment">//堆内存大小设置为30m  -Xmx30m</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            phantom();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">phantom</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ReferenceQueue&lt;<span class="keyword">byte</span>[]&gt; referenceQueue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">        PhantomReference&lt;<span class="keyword">byte</span>[]&gt; phantomReference;</span><br><span class="line">        List&lt;PhantomReference&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;------当前为虚引用------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            phantomReference = <span class="keyword">new</span> PhantomReference&lt;&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[_10M],referenceQueue);</span><br><span class="line">            list.add(phantomReference);</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;</span><br><span class="line">        Reference reference = referenceQueue.poll();</span><br><span class="line">        <span class="keyword">while</span> (reference != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(reference.get());</span><br><span class="line">            reference = referenceQueue.poll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="G:%5CcodeFolder%5Cblog%5Csource%5Cimages%5Carticle%5CQQ%E6%88%AA%E5%9B%BE20200415134623.png" alt="运行结果"></p>
<h4 id="疑问？"><a href="#疑问？" class="headerlink" title="疑问？"></a>疑问？</h4><p>这里一个小疑问，就是我用的虚引用去引用对象，但是报错了，说堆内存溢出，我的堆内存设置的30M，软引用都会自动回收内存。</p>
<h3 id="5-终接器引用"><a href="#5-终接器引用" class="headerlink" title="5 终接器引用"></a>5 终接器引用</h3><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 54. 二叉搜索树的第 k 大节点</title>
    <url>/kthlargest/</url>
    <content><![CDATA[<h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1 题目"></a>1 题目</h2><blockquote>
<p>给定一棵二叉搜索树，请找出其中第k大的节点。<br>示例 1:</p>
<p>输入: root = [3,1,4,null,2], k = 1<br>&nbsp;  &nbsp; 3<br>&nbsp;  / &nbsp; \<br>1 &nbsp; &nbsp;   4<br>&nbsp;    \<br>  &nbsp; &nbsp;    2<br>输出: 4<br>示例2:</p>
<p>输入: root = [5,3,6,2,4,null,null,1], k = 3<br>&nbsp;    &nbsp;  5<br>&nbsp;    / &nbsp; \<br>  &nbsp; 3  &nbsp;  6<br> &nbsp; / \<br>2 &nbsp;   4<br>    /<br>   1<br> 输出: 4  </p>
<p>限制：</p>
<p>1 ≤ k ≤ 二叉搜索树元素个数</p>
<p>作者：画手大鹏<br>链接：<a href="https://leetcode-cn.com/leetbook/read/illustrate-lcof/xspy85/">https://leetcode-cn.com/leetbook/read/illustrate-lcof/xspy85/</a><br>来源：力扣（LeetCode） 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h2 id="2-中序遍历"><a href="#2-中序遍历" class="headerlink" title="2 中序遍历"></a>2 中序遍历</h2><p>该方法为先使用一个集合类容器放置该树的中序遍历的结果序列，因为二叉搜索树的中序遍历是一个升序的序列，那么第$k$大的数则为第$list.size()-k$个数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthLargest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        inOrder(root, res);</span><br><span class="line">        <span class="keyword">return</span> res.get(res.size() - k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        inOrder(root.left, res);</span><br><span class="line">        res.add(root.val);</span><br><span class="line">        inOrder(root.right, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种算法的时间复杂度和空间复杂度都是$O(n)$，其中$n$是二叉搜索树的节点个数，那么这种方法并没有利用二叉搜索树的性质。</p>
<h2 id="3-改进版"><a href="#3-改进版" class="headerlink" title="3 改进版"></a>3 改进版</h2><p>我们知道二叉搜索树的左子树的所有值都小于根节点的值，右子树的所有值都大于根节点的值。且中序遍历的序列是一个升序的序列，那么中序遍历的顺序是<code>left</code>-&gt;<code>root</code>-&gt;<code>right</code>。这种遍历方式决定了中序遍历的结果是一个升序的序列，题目中要求返回第$k$大的数，那么就是中序遍历序列从后往后算起第$k$个数。<br>我们可以不用遍历完这棵树，只需要遍历$k$次即可，我们修改树的遍历次序，改为<code>right</code>-&gt;<code>root</code>-<code>left</code>。那么遍历的最终的结果就是一个降序的序列。我们定义一个全局的索引，判断当前遍历到了第几个节点，当遍历到第$k$个节点时，我们就可以结束遍历返回结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthLargest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.index = k;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        dfs(root.right);</span><br><span class="line">        index--;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            res = root.val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>tree</tag>
        <tag>simple</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel教程</title>
    <url>/laravel/</url>
    <content><![CDATA[<h2 id="1-创建laravel项目"><a href="#1-创建laravel项目" class="headerlink" title="1 创建laravel项目"></a>1 创建laravel项目</h2><p>创建<code>laravel</code>项目，需要使用<code>composer</code>工具，所以需要先安装<code>composer</code>，<a href="https://getcomposer.org/">composer官网</a>。</p>
<p>然后使用命令行进行安装，安装命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer create-project laravel/laravel &#123;project-name&#125; &#123;laravel version&#125; --prefer-dist &#123;project-path&#125;</span><br><span class="line"><span class="comment"># ex. composer create-project laravel/laravel myBlog --prefer-dist</span></span><br></pre></td></tr></table></figure>

<p>其中，</p>
<ul>
<li><p><code>&#123;project-name&#125;</code>表示你创建的laravel项目名</p>
</li>
<li><p><code>&#123;laravel version&#125;</code>表示<code>laravel</code>项目的版本号，默认是最新的版本</p>
</li>
<li><p><code>&#123;project-path&#125;</code>表示项目创建的地址，默认是命令行存在的那个目录下，这个可以不用写。</p>
</li>
</ul>
<h2 id="2-启动laravel项目"><a href="#2-启动laravel项目" class="headerlink" title="2 启动laravel项目"></a>2 启动laravel项目</h2><h3 id="2-1-方式1"><a href="#2-1-方式1" class="headerlink" title="2.1 方式1"></a>2.1 方式1</h3><p>在项目的根目录下，使用以下命令进行启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php artisan serve</span><br></pre></td></tr></table></figure>

<p>使用这个命令需要先将<code>php</code>添加环境变量中：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211023160711.png" alt=""></p>
<p>这种方式有一个缺点，就是如果关掉了这个命令行界面，那么<code>laravel</code>项目也就关掉了。</p>
<h3 id="2-2-方式2"><a href="#2-2-方式2" class="headerlink" title="2.2 方式2"></a>2.2 方式2</h3><p>将项目放到<code>nginx</code>或者<code>apache</code>服务器中，这里以<code>nginx</code>为例。</p>
<p>首先在<code>Windows</code>电脑上安装<a href="https://www.xp.cn/">phpstudy</a>工具。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211023160904.png" alt=""></p>
<p>点击右侧的【网站】添加一个新的网站域名，这个域名是本地的域名，可以是任意的字符串，但是需要注意，如果自己创建了多个网站服务，端口号不能重复，否则会访问不到服务。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211023161010.png" alt=""></p>
<p>如果你的<code>laravel</code>是要给前后端分离的项目，也就是说前端是通过接口访问你提供的服务，你还需要在<code>nginx</code>的配置文件添加一个配置，才能访问，先找到<code>nginx</code>的配置文件的存放地址，按照下面的方式进入到<code>nginx</code>的根目录。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211023161219.png" alt=""></p>
<p>进入nginx的<code>vhost</code>目录下，找到自己的vhost配置文件：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211023161341.png" alt=""></p>
<p>打开配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen        81;</span><br><span class="line">        server_name  www.zhgblog.com;</span><br><span class="line">        root   &quot;E:/software/phpstudy_pro/WWW/myBlog/public&quot;;</span><br><span class="line">        location / &#123;</span><br><span class="line">            index index.php index.html error/index.html;</span><br><span class="line">            try_files $uri $uri/ /index.php?$query_string;   ## 添加这一行即可</span><br><span class="line">            error_page 400 /error/400.html;</span><br><span class="line">            error_page 403 /error/403.html;</span><br><span class="line">            error_page 404 /error/404.html;</span><br><span class="line">            error_page 500 /error/500.html;</span><br><span class="line">            error_page 501 /error/501.html;</span><br><span class="line">            error_page 502 /error/502.html;</span><br><span class="line">            error_page 503 /error/503.html;</span><br><span class="line">            error_page 504 /error/504.html;</span><br><span class="line">            error_page 505 /error/505.html;</span><br><span class="line">            error_page 506 /error/506.html;</span><br><span class="line">            error_page 507 /error/507.html;</span><br><span class="line">            error_page 509 /error/509.html;</span><br><span class="line">            error_page 510 /error/510.html;</span><br><span class="line">            include E:/software/phpstudy_pro/WWW/myBlog/public/nginx.htaccess;</span><br><span class="line">            autoindex  off;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ \.php(.*)$ &#123;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_split_path_info  ^((?U).+\.php)(/?.+)$;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            fastcgi_param  PATH_INFO  $fastcgi_path_info;</span><br><span class="line">            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后重启<code>nginx</code>服务器就可以了。</p>
<h2 id="3-编写接口文件"><a href="#3-编写接口文件" class="headerlink" title="3 编写接口文件"></a>3 编写接口文件</h2><p>在写测试接口的时候，提示找不到指定的<code>class</code>文件：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211023161724.png" alt=""></p>
<p>这个问题可以解决，找到<code>app\Providers\RouteServiceProvider.php</code>文件，然后将其中一行的注释给取消掉就可以了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Cache</span>\<span class="title">RateLimiting</span>\<span class="title">Limit</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Support</span>\<span class="title">Providers</span>\<span class="title">RouteServiceProvider</span> <span class="title">as</span> <span class="title">ServiceProvider</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">RateLimiter</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Route</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouteServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The path to the &quot;home&quot; route for your application.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This is used by Laravel authentication to redirect users after login.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> HOME = <span class="string">&#x27;/home&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The controller namespace for the application.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * When present, controller route declarations will automatically be prefixed with this namespace.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    protected $namespace = &#x27;App\\Http\\Controllers&#x27;;   //这一行默认是被注释的，只要取消注释就可以了，如果没有这一行也可以加上</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="variable">$namespace</span> = <span class="string">&#x27;App\\Http\\Controllers&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Define your route model bindings, pattern filters, etc.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;configureRateLimiting();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;routes(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            Route::prefix(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">                -&gt;middleware(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">                -&gt;namespace(<span class="keyword">$this</span>-&gt;namespace)</span><br><span class="line">                -&gt;group(base_path(<span class="string">&#x27;routes/api.php&#x27;</span>));</span><br><span class="line"></span><br><span class="line">            Route::middleware(<span class="string">&#x27;web&#x27;</span>)</span><br><span class="line">                -&gt;namespace(<span class="keyword">$this</span>-&gt;namespace)</span><br><span class="line">                -&gt;group(base_path(<span class="string">&#x27;routes/web.php&#x27;</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Configure the rate limiters for the application.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">configureRateLimiting</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        RateLimiter::for(<span class="string">&#x27;api&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Request <span class="variable">$request</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Limit::perMinute(<span class="number">60</span>)-&gt;by(optional(<span class="variable">$request</span>-&gt;user())-&gt;id ?: <span class="variable">$request</span>-&gt;ip());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-Laravel-不同环境加载不同的-env文件"><a href="#4-Laravel-不同环境加载不同的-env文件" class="headerlink" title="4 Laravel 不同环境加载不同的.env文件"></a>4 Laravel 不同环境加载不同的.env文件</h2><p>假设有4个.env文件，分别为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.env.local</span><br><span class="line">.env.dev</span><br><span class="line">.env.test</span><br><span class="line">.env.prd</span><br></pre></td></tr></table></figure>

<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>第一步：<code>[pro_name]\bootstrap\app.php</code> 加入代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$envs</span> = [<span class="string">&#x27;local&#x27;</span>,<span class="string">&#x27;dev&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;prd&#x27;</span>];</span><br><span class="line"><span class="variable">$env</span> = get_cfg_var(<span class="string">&#x27;env&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$env</span>) || !in_array(<span class="variable">$env</span>, <span class="variable">$envs</span>))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;no env files&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$env</span> = <span class="string">&#x27;.env.&#x27;</span>.<span class="variable">$env</span>;</span><br><span class="line"><span class="variable">$app</span>-&gt;loadEnvironmentFrom(<span class="variable">$env</span>);</span><br></pre></td></tr></table></figure>

<p>第二步：<code>php.ini</code>文件中添加一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">env = local</span><br></pre></td></tr></table></figure>

<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>假设不同环境域名分别为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local-domain.com</span><br><span class="line">dev-domain.com</span><br><span class="line">test-domain.com</span><br><span class="line">domain.com</span><br></pre></td></tr></table></figure>

<p>在 <code>[pro_name]\bootstrap\app.php</code> 加入代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="variable">$app</span>-&gt;runningInConsole()) &#123;<span class="comment">//HTTP形式</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;[error] no host&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$app_env</span> = substr(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>],<span class="number">0</span>,strpos(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>],<span class="string">&#x27;-&#x27;</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//其它形式</span></span><br><span class="line">    <span class="variable">$app_env</span> = <span class="variable">$app</span>-&gt;detectEnvironment(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;prd&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$app_env</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;[error] no environment&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写入环境配置</span></span><br><span class="line"><span class="comment">//Dotenv::setEnvironmentVariable(&#x27;APP_ENV&#x27;, $app_env);</span></span><br><span class="line"><span class="variable">$app</span>-&gt;loadEnvironmentFrom(<span class="string">&#x27;.env.&#x27;</span> . <span class="variable">$app_env</span>);</span><br><span class="line"><span class="comment">//    -&gt;useEnvironmentPath(base_path(&#x27;env&#x27;));</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/DXsunrise/article/details/101089200">https://blog.csdn.net/DXsunrise/article/details/101089200</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>用TensorFlow实现线性回归</title>
    <url>/liner-regression-writen-by-tensorflow/</url>
    <content><![CDATA[<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h3><p>利用TensorFlow做一个线性回归的案例，我们需要知道我们要干一些什么？我们要的干的活：   </p>
<ul>
<li>1 准备数据</li>
<li>2 构造模型<ul>
<li>weights</li>
<li>bias</li>
</ul>
</li>
<li>3 构造损失函数</li>
<li>4 优化损失</li>
<li>5 运行代码（session）</li>
</ul>
<h3 id="2-开始写代码"><a href="#2-开始写代码" class="headerlink" title="2 开始写代码"></a>2 开始写代码</h3><ul>
<li>1 准备数据<br>X = tf.random_normal(shape=[100, 1],mean=0.0,stddev=1.0,name=”feature”) # 用高斯分布生成随机值，<br>  y_true =  tf.matmul( X, [[0.8]]) + 0.7 # 用高斯分布生成随机值， 默认均值是0 方差是1</li>
<li>2 构造模型<ul>
<li>weights<br>weights = tf.Variable(initial_value=tf.random_normal(shape=[1,1]),name=”weights”)</li>
<li>bias<br>bias = tf.Variable(initial_value=tf.random_normal(shape=[1, 1]),name=”bias”)</li>
<li>构造模型<br>y_predict = tf.matmul(X,weights) + bias</li>
</ul>
</li>
<li>3 构造损失函数<br>loss = tf.reduce_mean(tf.square(y_true - y_predict))</li>
<li>4 优化损失<br>optimaizer = tf.train.GradientDescentOptimizer(learning_rate=0.01).minimize(loss)</li>
<li>5 运行代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显式的初始化变量</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"><span class="comment"># 开启会话</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练前</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练前参数：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;weights:&#123;0&#125;|bias:&#123;1&#125;|loss:&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(weights.<span class="built_in">eval</span>(),bias.<span class="built_in">eval</span>(),loss.<span class="built_in">eval</span>()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">10</span> + <span class="string">&quot;我是分割线&quot;</span> + <span class="string">&quot;-&quot;</span>*<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始训练</span></span><br><span class="line">    count = <span class="number">0</span> <span class="comment"># 训练次数</span></span><br><span class="line">    <span class="comment"># 这里我们认为误差小于e^-9时，为合格</span></span><br><span class="line">    <span class="keyword">while</span> loss.<span class="built_in">eval</span>() &gt; np.exp(-<span class="number">9</span>):</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        sess.run(optimaizer)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练后</span></span><br><span class="line">        <span class="comment"># print()</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第&#123;3&#125;次训练后参数：weights:&#123;0&#125;|bias:&#123;1&#125;|loss:&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(weights.<span class="built_in">eval</span>(),bias.<span class="built_in">eval</span>(),loss.<span class="built_in">eval</span>(),count))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-搜集变量并显示tensorboard"><a href="#3-搜集变量并显示tensorboard" class="headerlink" title="3 搜集变量并显示tensorboard"></a>3 搜集变量并显示tensorboard</h3><p>步骤：</p>
<ul>
<li>1 创建事件<br>file_writer = tf.summary.FileWriter(graph=sess.graph,logdir=”./temp”)</li>
<li>2 收集变量<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tf.summary.scalar(&quot;loss&quot;,loss) # 标量</span><br><span class="line">tf.summary.histogram(&quot;weights&quot;,weights)</span><br><span class="line">tf.summary.histogram(&quot;bias&quot;,bias) # 收集高维变量</span><br></pre></td></tr></table></figure></li>
<li>3 合并变量<br>merged = tf.summary.merge_all()</li>
<li>4 运行合并后的变量<br>summary = sess.run(merged)<br>file_writer.add_summary(summary,count)</li>
</ul>
<h3 id="4-运行效果"><a href="#4-运行效果" class="headerlink" title="4 运行效果"></a>4 运行效果</h3><h4 id="4-1-迭代回归"><a href="#4-1-迭代回归" class="headerlink" title="4.1 迭代回归"></a>4.1 迭代回归</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191127142245.png" alt="liner regression">   </p>
<h4 id="4-2-显示TensorBoard"><a href="#4-2-显示TensorBoard" class="headerlink" title="4.2 显示TensorBoard"></a>4.2 显示TensorBoard</h4><p>进入到TensorBoard的目录，输入下面的命令<code>tensorboard --logdir=&quot;./&quot;</code>，如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191127142429.png" alt="TensorBoard command"><br>然后在浏览器输入<a href="http://127.0.0.1:6006" title="http://127.0.0.1:6006">http://127.0.0.1:6006</a>访问，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191127142847.png" alt="train result"><br>如损失函数的图像吐如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191127142947.png" alt="loss image"></p>
<h3 id="5-增加命名空间"><a href="#5-增加命名空间" class="headerlink" title="5 增加命名空间"></a>5 增加命名空间</h3><h4 id="5-1-怎么增加命名空间？"><a href="#5-1-怎么增加命名空间？" class="headerlink" title="5.1 怎么增加命名空间？"></a>5.1 怎么增加命名空间？</h4><p>给我们需要添加命名空间的地方加上如下语句：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这里以准备数据为例</span><br><span class="line"># 1 准备数据</span><br><span class="line">    with tf.variable_scope(&quot;prepare_date&quot;):</span><br><span class="line">        X = tf.random_normal(shape=[100, 1],mean=0.0,stddev=1.0,name=&quot;feature&quot;) # 用高斯分布生成随机值，</span><br><span class="line">        y_true =  tf.matmul( X, [[0.8]]) + 0.7 # 用高斯分布生成随机值， 默认均值是0 方差是1</span><br></pre></td></tr></table></figure>

<p>增加完命名空间之后的TensorBoard显示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191127144028.png" alt="name space">   </p>
<h3 id="7-模型的保存与加载"><a href="#7-模型的保存与加载" class="headerlink" title="7 模型的保存与加载"></a>7 模型的保存与加载</h3><h4 id="7-1-为什么要是用这个功能？"><a href="#7-1-为什么要是用这个功能？" class="headerlink" title="7.1 为什么要是用这个功能？"></a>7.1 为什么要是用这个功能？</h4><p>这里使用的线性回归只有几个参数，假如我们使用深度学习算法对模型进行训练时，可能会用到很多参数，假如中间有意外发生，比如说断电等，那么我们的训练就相当于白训练了。所以这里引入模型的保存与加载功能。</p>
<h4 id="7-2-如何使用"><a href="#7-2-如何使用" class="headerlink" title="7.2 如何使用"></a>7.2 如何使用</h4><p>首先定义一个保存器<code>saver</code>:   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义保存模型的保存器</span></span><br><span class="line">saver = tf.train.Saver()</span><br></pre></td></tr></table></figure>
<p>然后在训练时保存模型，当断电发生时，我们在加载模型。   </p>
<ul>
<li>保存模型<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if count % 10 == 0:</span><br><span class="line">	saver.save(sess,&quot;./temp/model.ckpt&quot;)</span><br></pre></td></tr></table></figure></li>
<li>加载模型<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if os.path.exists(&quot;./temp/checkpoint&quot;):</span><br><span class="line">    saver.restore(sess,&quot;./temp/model.ckpt&quot;)</span><br><span class="line">    print(&quot;第&#123;3&#125;次训练后参数：weights:&#123;0&#125;|bias:&#123;1&#125;|loss:&#123;2&#125;&quot;.format(weights.eval(), bias.eval(), loss.eval(), count))</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="8-添加命令行参数"><a href="#8-添加命令行参数" class="headerlink" title="8 添加命令行参数"></a>8 添加命令行参数</h3><h4 id="8-1-定义命令参数"><a href="#8-1-定义命令参数" class="headerlink" title="8.1 定义命令参数"></a>8.1 定义命令参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 定义命令行参数</span><br><span class="line">FLGAS = tf.flags.FLAGS</span><br><span class="line">dirc = tf.flags.DEFINE_string(&quot;dirc&quot;,&quot;./temp&quot;,&quot;模型保存的路径&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="8-2-使用命令行参数"><a href="#8-2-使用命令行参数" class="headerlink" title="8.2 使用命令行参数"></a>8.2 使用命令行参数</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191127152307.png" alt="command parameter"></p>
<h4 id="8-3-tf-app-run的使用"><a href="#8-3-tf-app-run的使用" class="headerlink" title="8.3 tf.app.run的使用"></a>8.3 <code>tf.app.run</code>的使用</h4><p>首先定义个<code>main</code>函数，该<code>main</code>函数必须带参数<code>argv</code>，否则会报错<br>如下：   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    <span class="comment"># liner_regression()</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dirc:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(FLGAS.dirc))</span><br></pre></td></tr></table></figure>
<p>然后在<code>if __name__ == &#39;__main__&#39;:</code>中使用即可：   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure>


<h3 id="9-完整代码"><a href="#9-完整代码" class="headerlink" title="9 完整代码"></a>9 完整代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">os.environ[<span class="string">&quot;TF_CPP_MIN_LOG_LEVEL&quot;</span>]=<span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义命令行参数</span></span><br><span class="line">FLGAS = tf.flags.FLAGS</span><br><span class="line">dirc = tf.flags.DEFINE_string(<span class="string">&quot;dirc&quot;</span>,<span class="string">&quot;./temp&quot;</span>,<span class="string">&quot;模型保存的路径&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">liner_regression</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    自实现一个线性回归</span></span><br><span class="line"><span class="string">    y_true = 0.8X + 0.7</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1 准备数据</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&quot;prepare_date&quot;</span>):</span><br><span class="line">        X = tf.random_normal(shape=[<span class="number">100</span>, <span class="number">1</span>],mean=<span class="number">0.0</span>,stddev=<span class="number">1.0</span>,name=<span class="string">&quot;feature&quot;</span>) <span class="comment"># 用高斯分布生成随机值，</span></span><br><span class="line">        y_true =  tf.matmul( X, [[<span class="number">0.8</span>]]) + <span class="number">0.7</span> <span class="comment"># 用高斯分布生成随机值， 默认均值是0 方差是1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2 构造模型</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&quot;create_model&quot;</span>):</span><br><span class="line">        <span class="comment"># 模型构造用TensorFlow中的变量进行定义</span></span><br><span class="line">        <span class="comment"># 2.1 weights</span></span><br><span class="line">        weights = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">1</span>,<span class="number">1</span>]),name=<span class="string">&quot;weights&quot;</span>)</span><br><span class="line">        <span class="comment"># 2.2 bias</span></span><br><span class="line">        bias = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]),name=<span class="string">&quot;bias&quot;</span>)</span><br><span class="line">        <span class="comment"># 2.3 构建模型</span></span><br><span class="line">        y_predict = tf.matmul(X,weights) + bias</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3 构造损失函数</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&quot;create_loss_function&quot;</span>):</span><br><span class="line">        loss = tf.reduce_mean(tf.square(y_true - y_predict))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4 优化损失 梯度下降算法</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&quot;loss_optimizer&quot;</span>):</span><br><span class="line">        optimizer = tf.train.GradientDescentOptimizer(learning_rate=<span class="number">0.01</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显式的初始化变量</span></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2) 收集变量</span></span><br><span class="line">    tf.summary.scalar(<span class="string">&quot;loss&quot;</span>,loss) <span class="comment"># 标量</span></span><br><span class="line">    tf.summary.histogram(<span class="string">&quot;weights&quot;</span>,weights)</span><br><span class="line">    tf.summary.histogram(<span class="string">&quot;bias&quot;</span>,bias) <span class="comment"># 收集高维变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3) 合并变量</span></span><br><span class="line">    merged = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义保存模型的保存器</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启会话</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(init)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1) 创建事件</span></span><br><span class="line">        file_writer = tf.summary.FileWriter(graph=sess.graph,logdir=<span class="string">&quot;./temp&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练前</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;训练前参数：&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;weights:&#123;0&#125;|bias:&#123;1&#125;|loss:&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(weights.<span class="built_in">eval</span>(),bias.<span class="built_in">eval</span>(),loss.<span class="built_in">eval</span>()))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">10</span> + <span class="string">&quot;我是分割线&quot;</span> + <span class="string">&quot;-&quot;</span>*<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始训练</span></span><br><span class="line">        count = <span class="number">0</span> <span class="comment"># 训练次数</span></span><br><span class="line">        <span class="comment"># 这里我们认为误差小于e^-9时，为合格</span></span><br><span class="line">        <span class="comment"># while loss.eval() &gt; np.exp(-9):</span></span><br><span class="line">        <span class="comment">#     count += 1</span></span><br><span class="line">        <span class="comment">#     sess.run(optimizer)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#     # 训练后</span></span><br><span class="line">        <span class="comment">#     # print()</span></span><br><span class="line">        <span class="comment">#     print(&quot;第&#123;3&#125;次训练后参数：weights:&#123;0&#125;|bias:&#123;1&#125;|loss:&#123;2&#125;&quot;.format(weights.eval(),bias.eval(),loss.eval(),count))</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#     # 4) 运行合并后的变量</span></span><br><span class="line">        <span class="comment">#     summary = sess.run(merged)</span></span><br><span class="line">        <span class="comment">#     file_writer.add_summary(summary,count)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#     # 开始保存模型</span></span><br><span class="line">        <span class="comment">#     if count % 10 == 0:</span></span><br><span class="line">        <span class="comment">#         saver.save(sess,&quot;./temp/model.ckpt&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 检验一下模型是否保存成功</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">&quot;./temp/checkpoint&quot;</span>):</span><br><span class="line">            saver.restore(sess,<span class="string">&quot;./temp/model.ckpt&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第&#123;3&#125;次训练后参数：weights:&#123;0&#125;|bias:&#123;1&#125;|loss:&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(weights.<span class="built_in">eval</span>(), bias.<span class="built_in">eval</span>(), loss.<span class="built_in">eval</span>(), count))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    <span class="comment"># liner_regression()</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dirc:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(FLGAS.dirc))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tf.app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux定时任务教程</title>
    <url>/linux-cron-tutorials/</url>
    <content><![CDATA[<h2 id="1-教程"><a href="#1-教程" class="headerlink" title="1 教程"></a>1 教程</h2><h3 id="1-1-安装crontabs"><a href="#1-1-安装crontabs" class="headerlink" title="1.1 安装crontabs"></a>1.1 安装crontabs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install contabs  <span class="comment">#通过yum安装</span></span><br><span class="line">systemctl <span class="built_in">enable</span> crond  <span class="comment">#设置开机启动</span></span><br><span class="line">systemctl start crond   <span class="comment">#启动</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-查看crontab服务的状态："><a href="#1-2-查看crontab服务的状态：" class="headerlink" title="1.2 查看crontab服务的状态："></a>1.2 查看crontab服务的状态：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service crond status</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210908165057.png" alt=""></p>
<h3 id="1-3-查看crontab的日志信息"><a href="#1-3-查看crontab的日志信息" class="headerlink" title="1.3 查看crontab的日志信息"></a>1.3 查看crontab的日志信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/cron  <span class="comment">#crontab的日志信息放在/var/log文件夹中</span></span><br><span class="line">cat  /vat/<span class="built_in">log</span>/cron</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210908165524.png" alt=""></p>
<blockquote>
<p>在crontab定时执行脚本的过程中，可能会有文件权限的问题，比如：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210908165556.png" alt=""></p>
<p>这个时候，需要给定时任务执行的脚本一个可执行的权限，修改权限的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 777 /home/centos/sh/test.sh  <span class="comment">#给所有权限</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="1-4-配置定时任务"><a href="#1-4-配置定时任务" class="headerlink" title="1.4 配置定时任务"></a>1.4 配置定时任务</h3><p>crontab的定时任务文件放在<code>/etc/crontab</code>文件中，直接使用<code>vim</code>修改即可：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210908165920.png" alt=""></p>
<p><code>/etc/crontab</code>文件默认内容如下，其中也解释了每个符号代表什么意思：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=HOME=/</span><br><span class="line"># run-parts</span><br><span class="line">51 * * * * root run-parts /etc/cron.hourly</span><br><span class="line">24 7 * * * root run-parts /etc/cron.daily</span><br><span class="line">22 4 * * 0 root run-parts /etc/cron.weekly</span><br><span class="line">42 4 1 * * root run-parts /etc/cron.monthly</span><br></pre></td></tr></table></figure>

<p>前四行是用来配置crond任务运行的环境变量，第一行<code>SHELL</code>变量指定了系统要使用哪个<code>shell</code>，这里是<code>bash</code>，第二行<code>PATH</code>变量指定了系统执行 命令的路径，第三行<code>MAILTO</code>变量指定了<code>crond</code>的任务执行信息将通过电子邮件发送给<code>root</code>用户，如果<code>MAILTO</code>变量的值为空，则表示不发送任务 执行信息给用户，第四行的<code>HOME</code>变量指定了在执行命令或者脚本时使用的主目录。第六至九行表示的含义将在下个小节详细讲述。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在以上各个字段中，还可以使用以下特殊字符：</span><br><span class="line">星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</span><br><span class="line">逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</span><br><span class="line">中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</span><br><span class="line">正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件：</span><br><span class="line">/etc/cron.deny</span><br><span class="line">说明：</span><br><span class="line">该文件中所列用户不允许使用crontab命令</span><br><span class="line"></span><br><span class="line">文件：</span><br><span class="line">/etc/cron.allow</span><br><span class="line">说明：</span><br><span class="line">该文件中所列用户允许使用crontab命令</span><br><span class="line"></span><br><span class="line">文件：</span><br><span class="line">/var/spool/cron/</span><br><span class="line">说明：</span><br><span class="line">所有用户crontab文件存放的目录,以用户名命名</span><br><span class="line"></span><br><span class="line">crontab文件的含义：</span><br><span class="line">用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：</span><br><span class="line">minute hour day month week command</span><br><span class="line"></span><br><span class="line">其中：</span><br><span class="line">minute： 表示分钟，可以是从0到59之间的任何整数。</span><br><span class="line">hour：表示小时，可以是从0到23之间的任何整数。</span><br><span class="line">day：表示日期，可以是从1到31之间的任何整数。</span><br><span class="line">month：表示月份，可以是从1到12之间的任何整数。</span><br><span class="line">week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。</span><br><span class="line">command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210908165951.png" alt=""></p>
<ul>
<li>第一个位置：分钟（0-59）</li>
<li>第二个位置：小时（0-23）</li>
<li>第三个位置：天（1-31）</li>
<li>第四个位置：月（1-12）</li>
<li>第五个位置：星期（0-6）</li>
<li>第六个位置：用户名</li>
<li>第七个位置：需要定时执行的脚本或者命令</li>
</ul>
<h4 id="（1）修改定时任务："><a href="#（1）修改定时任务：" class="headerlink" title="（1）修改定时任务："></a>（1）修改定时任务：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e  <span class="comment">#该命令等同于  vim /etc/crontab</span></span><br></pre></td></tr></table></figure>

<h4 id="（2）查看定时任务"><a href="#（2）查看定时任务" class="headerlink" title="（2）查看定时任务"></a>（2）查看定时任务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -l  <span class="comment">#该命令等同于 cat /etc/crontab</span></span><br></pre></td></tr></table></figure>

<h4 id="（3）删除定时任务"><a href="#（3）删除定时任务" class="headerlink" title="（3）删除定时任务"></a>（3）删除定时任务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -r [user]  <span class="comment">#如果指定[user]，则默认删除当前用户的定时任务</span></span><br><span class="line"><span class="comment"># 其实是删除了/var/spool/cron目录下的定时任务文件，这个文件以当前用户命令</span></span><br><span class="line"><span class="comment"># 谨慎使用该命令</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-crontab命令详解"><a href="#1-5-crontab命令详解" class="headerlink" title="1.5 crontab命令详解"></a>1.5 crontab命令详解</h3><h4 id="1-5-1-命令格式"><a href="#1-5-1-命令格式" class="headerlink" title="1.5.1 命令格式"></a>1.5.1 命令格式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab [-u user] file</span><br><span class="line">crontab [-u user] [ -e | -l | -r ]</span><br></pre></td></tr></table></figure>

<h4 id="1-5-2-命令功能"><a href="#1-5-2-命令功能" class="headerlink" title="1.5.2 命令功能"></a>1.5.2 命令功能</h4><p>通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常设合周期性的日志分析或数据备份等工作。</p>
<h4 id="1-5-3-命令参数"><a href="#1-5-3-命令参数" class="headerlink" title="1.5.3 命令参数"></a>1.5.3 命令参数</h4><ul>
<li><p><code>-u user</code>：用来设定某个用户的crontab服务，例如，“-u ixdba”表示设定ixdba用户的crontab服务，此参数一般有root用户来运行。</p>
</li>
<li><p><code>file</code>：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。</p>
</li>
<li><p><code>-e</code>：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。</p>
</li>
<li><p><code>-l</code>：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。</p>
</li>
<li><p><code>-r</code>：从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。</p>
</li>
<li><p><code>-i</code>：在删除用户的crontab文件时给确认提示。</p>
</li>
</ul>
<h4 id="1-5-4-常用方法"><a href="#1-5-4-常用方法" class="headerlink" title="1.5.4 常用方法"></a>1.5.4 常用方法</h4><ol>
<li><p>创建一个新的crontab文件</p>
<p>在 考虑向cron进程提交一个crontab文件之前，首先要做的一件事情就是设置环境变量EDITOR。cron进程根据它来确定使用哪个编辑器编辑 crontab文件。99%的UNIX和LINUX用户都使用vi，如果你也是这样，那么你就编辑$ HOME目录下的<code>.profile</code>文件，在其 中加入这样一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EDITOR=vi; <span class="built_in">export</span> EDITOR</span><br></pre></td></tr></table></figure>

<p>然后保存并退出。不妨创建一个名为cron的文件，其中是用户名，例如， davecron。在该文件中加入如下的内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (put your own initials here)echo the date to the console every</span></span><br><span class="line"><span class="comment"># 15minutes between 6pm and 6am</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0,15,30,45 18-06 * /bin/<span class="built_in">echo</span> ‘date’ &gt; /dev/console</span><br></pre></td></tr></table></figure>

<p>保存并退出。确信前面5个域用空格分隔。</p>
<p>在 上面的例子中，系统将每隔15分钟向控制台输出一次当前时间。如果系统崩溃或挂起，从最后所显示的时间就可以一眼看出系统是什么时间停止工作的。在有些 系统中，用<code>tty1</code>来表示控制台，可以根据实际情况对上面的例子进行相应的修改。为了提交你刚刚创建的crontab文件，可以把这个新创建的文件作为cron命令的参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab davecron</span><br></pre></td></tr></table></figure>

<p>现在该文件已经提交给cron进程，它将每隔15分钟运行一次。</p>
<p>同时，新创建文件的一个副本已经被放在<code>/var/spool/cron</code>目录中，文件名就是用户名(即dave)。</p>
</li>
<li><p>列出crontab文件</p>
<p>为了列出crontab文件，可以用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab -l</span><br><span class="line">0,15,30,45,18-06 * * * /bin/<span class="built_in">echo</span>`date`&gt; dev/tty1</span><br></pre></td></tr></table></figure>

<p>你将会看到和上面类似的内容。可以使用这种方法在$ H O M E目录中对crontab文件做一备份：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab -l &gt; <span class="variable">$HOME</span>/mycron</span><br></pre></td></tr></table></figure>

<p>这样，一旦不小心误删了crontab文件，可以用上一节所讲述的方法迅速恢复。</p>
</li>
<li><p>编辑crontab文件</p>
<p>如果希望添加、删除或编辑crontab文件中的条目，而E D I TO R环境变量又设置为<code>vi</code>，那么就可以用<code>vi</code>来编辑crontab文件，相应的命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab -e</span><br></pre></td></tr></table></figure>

<p>可以像使用v i编辑其他任何文件那样修改crontab文件并退出。如果修改了某些条目或添加了新的条目，那么在保存该文件时， <code>cron</code>会对其进行必要的完整性检查。如果其中的某个域出现了超出允许范围的值，它会提示你。</p>
<p>我们在编辑crontab文件时，没准会加入新的条目。例如，加入下面的一条：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">30 3 1,7,14,21,26 /bin/find -name “core’ -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>现在保存并退出。最好在crontab文件的每一个条目之上加入一条注释，这样就可以知道它的功能、运行时间，更为重要的是，知道这是哪位用户的作业。</p>
<p>现在让我们使用前面讲过的<code>crontab -l</code>命令列出它的全部信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab -l</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># (crondave installed on Tue May 4 13:07:43 1999)</span><br><span class="line"># DT:ech the date to the console every 30 minites</span><br><span class="line">0,15,30,45 18-06 * * * /bin/echo`date`&gt; /dev/tty1</span><br><span class="line"># DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month</span><br><span class="line">30 3 1,7,14,21,26 * * /bin/find -name “core’ -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除crontab文件</p>
<p>要删除crontab文件，可以用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ crontab -r</span><br></pre></td></tr></table></figure>
</li>
<li><p>恢复丢失的crontab文件</p>
<p>如果不小心误删了crontab文件，假设你在自己的<code>$HOME</code>目录下还有一个备份，那么可以将其拷贝到<code>/var/spool/cron/</code>，其中是用户名。如果由于权限问题无法完成拷贝，可以用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab</span><br></pre></td></tr></table></figure>

<p>其中，是你在<code>$HOME</code>目录中副本的文件名。</p>
<p>我建议你在自己的<code>$HOME</code>目录中保存一个该文件的副本。我就有过类似的经历，有数次误删了crontab文件（因为<code>r键</code>紧挨在<code>e键</code>的右边）。这就是为什么有些系统文档建议不要直接编辑crontab文件，而是编辑该文件的一个副本，然后重新提交新的文件。</p>
<p>有些crontab的变体有些怪异，所以在使用crontab命令时要格外小心。如果遗漏了任何选项，crontab可能会打开一个空文件，或者看起来像是个空文件。这时敲<code>delete</code>键退出，不要按，否则你将丢失crontab文件。</p>
</li>
</ol>
<h2 id="2-案例"><a href="#2-案例" class="headerlink" title="2 案例"></a>2 案例</h2><h3 id="（1）每5秒执行一次任务"><a href="#（1）每5秒执行一次任务" class="headerlink" title="（1）每5秒执行一次任务"></a>（1）每5秒执行一次任务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*/1 * * * * /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">*/1 * * * * sleep 5  &amp;&amp; /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">*/1 * * * * sleep 10 &amp;&amp; /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">*/1 * * * * sleep 15 &amp;&amp; /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">*/1 * * * * sleep 20 &amp;&amp; /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">*/1 * * * * sleep 25 &amp;&amp; /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">*/1 * * * * sleep 30 &amp;&amp; /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">*/1 * * * * sleep 35 &amp;&amp; /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">*/1 * * * * sleep 40 &amp;&amp; /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">*/1 * * * * sleep 45 &amp;&amp; /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">*/1 * * * * sleep 50 &amp;&amp; /bin/date &gt;&gt;/tmp/date.txt</span><br><span class="line">*/1 * * * * sleep 55 &amp;&amp; /bin/date &gt;&gt;/tmp/date.txt</span><br></pre></td></tr></table></figure>

<h3 id="（2）更多案例"><a href="#（2）更多案例" class="headerlink" title="（2）更多案例"></a>（2）更多案例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">实例1：每1分钟执行一次<span class="built_in">command</span></span><br><span class="line">命令：</span><br><span class="line">* * * * * <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">实例2：每小时的第3和第15分钟执行</span><br><span class="line">命令：</span><br><span class="line">3,15 * * * * <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">实例3：在上午8点到11点的第3和第15分钟执行</span><br><span class="line">命令：</span><br><span class="line">3,15 8-11 * * * <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">实例4：每隔两天的上午8点到11点的第3和第15分钟执行</span><br><span class="line">命令：</span><br><span class="line">3,15 8-11 */2 * * <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">实例5：每个星期一的上午8点到11点的第3和第15分钟执行</span><br><span class="line">命令：</span><br><span class="line">3,15 8-11 * * 1 <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">实例6：每晚的21:30重启smb</span><br><span class="line">命令：</span><br><span class="line">30 21 * * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例7：每月1、10、22日的4 : 45重启smb</span><br><span class="line">命令：</span><br><span class="line">45 4 1,10,22 * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例8：每周六、周日的1 : 10重启smb</span><br><span class="line">命令：</span><br><span class="line">10 1 * * 6,0 /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb</span><br><span class="line">命令：</span><br><span class="line">0,30 18-23 * * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例10：每星期六的晚上11 : 00 pm重启smb</span><br><span class="line">命令：</span><br><span class="line">0 23 * * 6 /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例11：每一小时重启smb</span><br><span class="line">命令：</span><br><span class="line">* */1 * * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例12：晚上11点到早上7点之间，每隔一小时重启smb</span><br><span class="line">命令：</span><br><span class="line">* 23-7/1 * * * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例13：每月的4号与每周一到周三的11点重启smb</span><br><span class="line">命令：</span><br><span class="line">0 11 4 * mon-wed /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例14：一月一号的4点重启smb</span><br><span class="line">命令：</span><br><span class="line">0 4 1 jan * /etc/init.d/smb restart</span><br><span class="line"></span><br><span class="line">实例15：每小时执行/etc/cron.hourly目录内的脚本</span><br><span class="line">命令：</span><br><span class="line">01 * * * * root run-parts /etc/cron.hourly</span><br><span class="line">说明：</span><br><span class="line">run-parts这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是目录名了</span><br></pre></td></tr></table></figure>

<h2 id="3-使用注意"><a href="#3-使用注意" class="headerlink" title="3 使用注意"></a>3 使用注意</h2><p>注意环境变量问题<br>有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。</p>
<p>在 crontab文件中定义多个调度任务时，需要特别注意的一个问题就是环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的，程 序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这 样，系统执行任务调度时就没有问题了。</p>
<p>不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下3点：</p>
<ol>
<li><p>脚本中涉及文件路径时写全局路径；</p>
</li>
<li><p>脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat start_cbp.sh</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="built_in">export</span> RUN_CONF=/home/d139/conf/platform/cbp/cbp_jboss.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/jboss-4.0.5/bin/run.sh -c mev &amp;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题。如：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh</span><br></pre></td></tr></table></figure>

<p>注意清理系统用户的邮件日志<br>每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。</p>
<p>例如，可以在crontab文件中设置如下形式，忽略日志输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 */3* /usr/<span class="built_in">local</span>/apache2/apachectl restart &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p><code>/dev/null 2&gt;&amp;1</code>表示先将标准输出重定向到/dev/null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了<code>/dev/null</code>，因此标准错误也会重定向到<code>/dev/null</code>，这样日志输出问题就解决了。</p>
<p>系统级任务调度与用户级任务调度<br>系 统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（不建议这么 做），但是反过来却不行，root用户的任务调度操作可以通过<code>crontab –uroot –e</code>来设置，也可以将调度任务直接写入<code>/etc /crontab</code>文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到<code>/etc/crontab</code>文件，即使在root用户下创建一个 定时重启系统的任务也是无效的。</p>
<p>其他注意事项<br>新创建的<code>cron job</code>，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。</p>
<p>当crontab突然失效时，可以尝试<code>/etc/init.d/crond restart</code>解决问题。或者查看日志看某个job有没有执行/报错<code>tail -f /var/log/cron</code>。</p>
<p>千万别乱运行<code>crontab -r</code>。它从Crontab目录（<code>/var/spool/cron</code>）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。</p>
<p>在crontab中<code>%</code>是有特殊含义的，表示换行的意思。如果要用的话必须进行转义<code>\%</code>，如经常用的<code>date &#39;+%Y%m%d&#39;</code>在crontab里是不会执行的，应该换成<code>date &#39;+\%Y\%m\%d&#39;</code>。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/miracle-luna/p/11832609.html">Linux crontab 每5秒钟执行一次 shell 脚本 的方法</a></li>
<li><a href="https://www.huaweicloud.com/articles/56b23efe03dc97883ccef09c6fe7e5c1.html">Linux定时任务Crontab命令详解</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>linux中的各个目录的作用</title>
    <url>/linux-dir-usage/</url>
    <content><![CDATA[<h1 id="1-var"><a href="#1-var" class="headerlink" title="1 /var"></a>1 /var</h1><p>/var 包括系统运行时要改变的数据。其中包括每个系统是特定的，即不能够与其他计算机共享的目录，如/var/log，/var/lock，/var/run。有些目录还是可以与其他系统共享，如/var/mail, /var/cache/man, /var/cache/fonts,/var/spool/news。var目录存在的目的是把usr目录在运行过程中需要更改的文件或者临时生成的文件及目录提取出来，由此可以使usr目录挂载为只读的方式。隐含要求var目录必须挂载为可以读写的方式。</p>
<p>通过对于该目录的分析注意如下的需要</p>
<p>1） 各个目录存在的目的以及作用。</p>
<p>2） 通过目录中的信息能够获得什么信息，如何对于该信息进行访问。</p>
<p>3） 对于目录中的文件操作是否安全。</p>
<h2 id="var-account-pact"><a href="#var-account-pact" class="headerlink" title="/var/account/pact"></a>/var/account/pact</h2><p>目的：该目录保存系统中使用的进程记录。当一个进程终止时，把每个进程向统计文件（pacct或acct）中写一个纪录。进程统计的目的是为系统中的基本服务提供命令使用统计。该文件可以通过数据的工具(sa，ac)进行分析。</p>
<p>使用：进程统计子系统缺省不激活，它必须启动。在Linux系统中启动进程统计使用accton命令，必须 用root身份来运行。accton命令的形式accton file，file必须先存在。如果不存在则先使用touch命令来创建pacct文件：touch /var/log/pacct，然后运行accton： accton /var/account/pacct。一旦accton被激活，就可以使用lastcomm命令监测系统中任何时候执行的命令。若要关闭统计，可以使用不带任何参数的accton命令。</p>
<p>pact文件不可用cat直接读取其中的内容。</p>
<p>注意：该文件会大量增长，需要注意维护（删除，转储）</p>
<h2 id="var-crash"><a href="#var-crash" class="headerlink" title="/var/crash"></a>/var/crash</h2><p>目的：系统崩溃时转储的文件，可以通过该文件分析down机的原因。</p>
<p>使用： crash工具对于该目录中的文件进行分析。参考文档linux-2.6.20.6/Documentation/kdump/kdump.txt</p>
<p>crash -S /boot/System.map-2.6.18-53.el5PAE /boot/vmlinuz-2.6.18-53.el5PAE /var/crash/xxxx</p>
<h2 id="var-cache"><a href="#var-cache" class="headerlink" title="/var/cache"></a>/var/cache</h2><p>目的：存放应用程序的缓存数据，保存在该目录中的数据应用程序可以再生成，所以该目录中的数据丢失后不会影响系统。</p>
<h2 id="var-empty"><a href="#var-empty" class="headerlink" title="/var/empty"></a>/var/empty</h2><h2 id="var-games"><a href="#var-games" class="headerlink" title="/var/games"></a>/var/games</h2><h2 id="var-lib"><a href="#var-lib" class="headerlink" title="/var/lib"></a>/var/lib</h2><p>该目录保存系统或者某个应用程序运行过程中的状态信息。用户不允许更改该目录下的文件。</p>
<h2 id="var-mail"><a href="#var-mail" class="headerlink" title="/var/mail"></a>/var/mail</h2><p>邮件存储文件的目录，在CGS中链接到/var/spool/mail。在fhs文档中明确提出把它从/var/spool/mail提取出来以便于多主机多个应用程序共同使用。</p>
<h2 id="var-opt"><a href="#var-opt" class="headerlink" title="/var/opt"></a>/var/opt</h2><p>add-on application在该目录下存放变量，在/opt下存放静态变量。</p>
<h2 id="var-tmp"><a href="#var-tmp" class="headerlink" title="/var/tmp"></a>/var/tmp</h2><p>应用程序产生的临时文件，可以定时整理。/usr/tmp -&gt; ../var/tmp。</p>
<h2 id="var-lock"><a href="#var-lock" class="headerlink" title="/var/lock"></a>/var/lock</h2><p>  许多程序遵循在/var/lock 中产生一个锁定文件的约定，以支持他们正在使用某个特定的设备或文件。其他程序注意到这个锁定文件，将不试图使用这个设备或文件。注意该目录不可以随便更改。</p>
<h2 id="var-run"><a href="#var-run" class="headerlink" title="/var/run"></a>/var/run</h2><p>保存着自系统启动后的在该系统中正在运行的进程pid号，并非所有的进程都在该目录下存在pid文件。每个pid文件的作用与其应用程序相关，基本的作用就是标志该进程已经运行，且标志出该进程的pid号。在/var/run/subsys/目录中有对应的文件。当系统启动后不用删除其中的文件，系统启动后会清除该目录中的文件。/var/run/utmp是一个二进制文件，记录当前登录系统的用户信息。可用如who、w、users、finger命令显示当中的内容。该日志文件并不能包括所有精确的信息，因为某些突发错误会终止用户登录会话，而系统没有及时更新utmp记录，因此该日志文件的记录不是百分之百值得信赖的。</p>
<p>/etc/init.d/sendmail文件对于/var/run和/var/lock/subsys目录中的文件的有使用事例</p>
<h2 id="var-spool"><a href="#var-spool" class="headerlink" title="/var/spool"></a>/var/spool</h2><p>保存某些需要后续进程继续处理的数据。当进程处理完成保存的数据文件后，会把该文件删除。该目录中的数据不要人工进行删除。</p>
<p>查找给目录中各个子目录的归属方法（以目录/var/spool/voice为例）：</p>
<p>[root@localhost spool]# rpm -qf /var/spool/voice</p>
<p>mgetty-voice-1.1.33-9.fc6</p>
<p>由此可以找出/var/spool/voice目录与mgetty-voice包相关，从而可以使用如下命令来分析mgetty-voice包的命令及其作用。</p>
<h2 id="var-local"><a href="#var-local" class="headerlink" title="/var/local"></a>/var/local</h2><p>存放/usr/local 中安装的程序的可变数据(即系统管理员安装的程序)。</p>
<h2 id="var-preserve"><a href="#var-preserve" class="headerlink" title="/var/preserve"></a>/var/preserve</h2><p>编辑器存放的临时文件</p>
<h2 id="var-log"><a href="#var-log" class="headerlink" title="/var/log"></a>/var/log</h2><h3 id="var-log-boot-log"><a href="#var-log-boot-log" class="headerlink" title="/var/log/boot.log"></a>/var/log/boot.log</h3><p>该文件记录了系统在引导过程中发生的事件，就是Linux系统开机自检过程显示的信息。Redhat决定淘汰对initlog的使用，所以在/etc/init.d/functions中将所有调用initlog的命令给注释起来了，由此该文件为空。</p>
<h3 id="var-log-cron"><a href="#var-log-cron" class="headerlink" title="/var/log/cron"></a>/var/log/cron</h3><p>该日志文件记录crontab守护进程crond所派生的子进程的动作。格式如下：</p>
<p>Aug 17 07:40:01 localhost crond[9434]: (root) CMD (/usr/lib/sa/sa1 1 1)</p>
<h3 id="var-log-maillog"><a href="#var-log-maillog" class="headerlink" title="/var/log/maillog"></a>/var/log/maillog</h3><p>该日志文件记录了每一个发送到系统或从系统发出的电子邮件的活动。它可以用来查看用户使用哪个系统发送工具或把数据发送到哪个系统。</p>
<h3 id="var-log-syslog"><a href="#var-log-syslog" class="headerlink" title="/var/log/syslog"></a>/var/log/syslog</h3><p>​    默认RedHatLinux不生成该日志文件，但可以配置/etc/syslog.conf让系统生成该日志文件。它和/etc/log/messages日志文件不同，它只记录警告信息，常常是系统出问题的信息，所以更应该关注该文件。要让系统生成该日志文件，在/etc/syslog.conf文件中加上：*.warning /var/log/syslog该日志文件能记录当用户登录时login记录下的错误口令、Sendmail的问题、su命令执行失败等信息。</p>
<h3 id="var-log-lastlog"><a href="#var-log-lastlog" class="headerlink" title="/var/log/lastlog"></a>/var/log/lastlog</h3><p>​    该日志文件记录最近成功登录的事件和最后一次不成功的登录事件，由login生成。在每次用户登录时被查询，该文件是二进制文件，需要使用lastlog命令查看，根据UID排序显示登录名、端口号和上次登录时间。如果某用户从来没有登录过，就显示为”<strong>Neverloggedin</strong>“。该命令只能以root权限执行。</p>
<h3 id="var-log-wtmp"><a href="#var-log-wtmp" class="headerlink" title="/var/log/wtmp"></a>/var/log/wtmp</h3><p>​    该日志文件永久记录每个用户登录、注销及系统的启动、停机的事件。因此随着系统正常运行时间的增加，该文件的大小也会越来越大，增加的速度取决于系统用户登录的次数。该日志文件可以用来查看用户的登录记录，last命令就通过访问这个文件获得这些信息，并以反序从后向前显示用户的登录记录，last也能根据用户、终端tty或时间显示相应的记录。</p>
<p>​    /var/run/utmp 见/var/run目录</p>
<p>​    以上提及的3个文件（/var/log/wtmp、/var/run/utmp、/var/log/lastlog）是日志子系统的关键文件，都记录了用户登录的情况。这些文件的所有记录都包含了时间戳。这些文件是按二进制保存的，故不能用less、cat之类的命令直接查看这些文件，而是需要使用相关命令通过这些文件而查看。</p>
<h3 id="var-log-xferlog"><a href="#var-log-xferlog" class="headerlink" title="/var/log/xferlog"></a>/var/log/xferlog</h3><p>​    该日志文件记录FTP会话，可以显示出用户向FTP服务器或从服务器拷贝了什么文件。该文件会显示用户拷贝到服务器上的用来入侵服务器的恶意程序，以及该用户拷贝了哪些文件供他使用。</p>
<p>​    该文件的格式为：第一个域是日期和时间，第二个域是下载文件所花费的秒数、远程系统名称、文件大小、本地路径名、传输类型（a：ASCII，b：二进制）、与压缩相关的标志或tar，或”_”（如果没有压缩的话）、传输方向（相对于服务器而言：i代表进，o代表出）、访问模式（a：匿名，g：输入口令，r：真实用户）、用户名、服务名（通常是ftp）、认证方法（l：RFC931，或0），认证用户的ID或”*”。</p>
<h3 id="var-log-Xfree86-x-log"><a href="#var-log-Xfree86-x-log" class="headerlink" title="/var/log/Xfree86.x.log"></a>/var/log/Xfree86.x.log</h3><p>​    该日志文件记录了X-Window启动的情况。</p>
<h1 id="2-usr"><a href="#2-usr" class="headerlink" title="2 /usr"></a>2 /usr</h1><h2 id="usr目录的来源"><a href="#usr目录的来源" class="headerlink" title="/usr目录的来源"></a>/usr目录的来源</h2><p>在 linux 文件结构中，有一个很神奇的目录 —— /usr。</p>
<p>讨论中，大部分观点认为：</p>
<ul>
<li>usr 是 unix system resources 的缩写；</li>
<li>usr 是 user 的缩写；</li>
<li>usr 是 unix software resources 的缩写。</li>
</ul>
<blockquote>
<p>/usr usually contains by far the largest share of data on a system. Hence, this is one of the most important directories in the system as it contains all the user binaries, their documentation, libraries, header files, etc…. X and its supporting libraries can be found here. User programs like telnet, ftp, etc…. are also placed here. In the original Unix implementations, /usr was where the home directories of the users were placed (that is to say, /usr/someone was then the directory now known as /home/someone). In current Unices, /usr is where user-land programs and data (as opposed to ’system land’ programs and data) are. The name hasn’t changed, but it’s meaning has narrowed and lengthened from “everything user related” to “user usable programs and data”. As such, some people may now refer to this directory as meaning ‘User System Resources’ and not ‘user’ as was originally intended.（via 1,2）</p>
</blockquote>
<p>根据资料显示，/usr目录是<strong>Unix系统资源目录</strong>的缩写。</p>
<h2 id="usr目录结构"><a href="#usr目录结构" class="headerlink" title="/usr目录结构"></a>/usr目录结构</h2><ol>
<li>/usr/bin : 所有可执行文件，如 gcc，firefox 等（指不包含在 /sbin 和 /bin 内的）；</li>
<li>/usr/include : 各种头文件，编译文件等时需要使用；</li>
<li>/usr/include/’package-name’ : 程序特定的头文件；</li>
<li>/usr/lib : 所以可执行文件所需要的库文件；</li>
<li>/usr/local : /usr 通常只包含系统发行时自带的程序，而 /usr/local 则是本地系统管理员用来自由添加程序的目录；</li>
<li>/usr/X11R6 : x 系统的二进制文件，库文件，文档，字体等。它不等同于 /usr 的作用，只有 x 才能调用这些库文件等，其他程序不读取或者使用。因为 linux 没有原生图形界面，而且 linux 大部分情况下是 for server 的，所以图形界面没有意义；其中 X11R6 代表 version 11 release 6；</li>
<li>/usr/X11R6/bin : x 的二进制文件，包含运行 x 的必须文件；</li>
<li>/usr/X11R6/include : x 相关的头文件；</li>
<li>/usr/X11R6/lib : x 库文件；</li>
<li>/usr/X11R6/lib/modules : x 的模块，启动时加载。缺少 video4linux, DRI and GLX 和 输入输出设备 模块，将工作不正常；</li>
<li>/usr/X11R6/lib/X11/fonts : x font server 的字体文件；</li>
<li>/usr/doc : 文档。实际是 /usr/share/doc 的软链接；</li>
<li>/usr/etc : 一个极少用到的配置文件存放地；</li>
<li>/usr/games : 曾经包含游戏等文件，现在很少用到；</li>
<li>/usr/info : 系统相关信息，是 /usr/share/info 的软链接；</li>
<li>/usr/man : man 手册，已经移至 /usr/share/man；</li>
<li>/usr/sbin : 类似 /sbin，root 可以执行。但此目录不包含在环境变量 $PATH 中，它包含的程序类似于 chroot, useradd, in.tftpd and pppconfig；</li>
<li>/usr/share : 它包含了各种程序间的共享文件，如字体，图标，文档等。（/usr/local 对应的目录是  /usr/loca/share）;</li>
<li>/usr/share/doc : 类似应用程序的 man 手册。它包含程序的说明文件，默认配置文件等；</li>
<li>/usr/share/info : 不常用，已经被 man 代替；</li>
<li>/usr/share/man : app 的 manual；</li>
<li>/usr/share/icons : 应用程序的图标等文件，分为 png，svg 等多种格式；</li>
<li>/usr/share/fonts : 字体文件，系统范围内可使用，~/.fonts 仅当前用户可用；</li>
<li>/usr/src : linux 内核的源码和说明文档等；</li>
<li>/usr/src/linux : linux 源代码；</li>
<li>/usr/src/linux/.config : 内核编译过程产生的文件；通常由命令 ‘make config’ ， ‘make menuconfig’ 或 ‘make xconfig’ 执行后产生；</li>
<li>/usr/src/linux/.depend, /usr/src/linux/.hdepend : ‘make dep’ 检测编译依赖时需要的文件，由 /usr/src/linux/.config 产生；</li>
<li>/usr/src/linux/COPYING : GNU license；</li>
<li>/usr/src/linux/Makefile : 编译内核所需的 Makefile；</li>
<li>/usr/src/linux/Rules.make : 当有多个 Makefile 时，根据它的规则执行 make；</li>
<li>/usr/tmp : 已经被众多发行版抛弃的临时文件夹。</li>
</ol>
<h1 id="3-etc"><a href="#3-etc" class="headerlink" title="3 /etc"></a>3 /etc</h1><h1 id="4-home"><a href="#4-home" class="headerlink" title="4 /home"></a>4 /home</h1><h1 id="5-bin"><a href="#5-bin" class="headerlink" title="5 /bin"></a>5 /bin</h1><h1 id="6-sbin"><a href="#6-sbin" class="headerlink" title="6 /sbin"></a>6 /sbin</h1><h1 id="7-lib"><a href="#7-lib" class="headerlink" title="7 /lib"></a>7 /lib</h1><h1 id="8-lib64"><a href="#8-lib64" class="headerlink" title="8 /lib64"></a>8 /lib64</h1><h1 id="9-mnt"><a href="#9-mnt" class="headerlink" title="9 /mnt"></a>9 /mnt</h1><h1 id="10-opt"><a href="#10-opt" class="headerlink" title="10 /opt"></a>10 /opt</h1><h1 id="11-tmp"><a href="#11-tmp" class="headerlink" title="11 /tmp"></a>11 /tmp</h1><h1 id="12-run"><a href="#12-run" class="headerlink" title="12 /run"></a>12 /run</h1><h1 id="13-proc"><a href="#13-proc" class="headerlink" title="13 /proc"></a>13 /proc</h1><h1 id="14-sys"><a href="#14-sys" class="headerlink" title="14 /sys"></a>14 /sys</h1><h1 id="15-dev"><a href="#15-dev" class="headerlink" title="15 /dev"></a>15 /dev</h1><h1 id="16-boot"><a href="#16-boot" class="headerlink" title="16 boot"></a>16 boot</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.cnblogs.com/zhouhbing/p/4516522.html">Linux下var目录介绍</a></li>
<li><a href="https://www.runoob.com/linux/linux-system-contents.html">https://www.runoob.com/linux/linux-system-contents.html</a></li>
</ul>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在centos中安装LNMP开发环境</title>
    <url>/linux-for-lnmp/</url>
    <content><![CDATA[<h2 id="1-安装nginx"><a href="#1-安装nginx" class="headerlink" title="1 安装nginx"></a>1 安装nginx</h2><h3 id="1-1-安装步骤"><a href="#1-1-安装步骤" class="headerlink" title="1.1 安装步骤"></a>1.1 安装步骤</h3><p>nginx的源码下载地址：<a href="https://nginx.org/download/nginx-1.20.1.tar.gz"> https://nginx.org/download/nginx-1.20.1.tar.gz</a></p>
<h4 id="第一步：下载nginx源码包。"><a href="#第一步：下载nginx源码包。" class="headerlink" title="第一步：下载nginx源码包。"></a>第一步：下载nginx源码包。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.20.1.tar.gz</span><br><span class="line">yum install make gcc wget pcre-devel openssl openssl-devel -y  <span class="comment"># 安装前置依赖包</span></span><br></pre></td></tr></table></figure>

<h4 id="第二步：解压"><a href="#第二步：解压" class="headerlink" title="第二步：解压"></a>第二步：解压</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.20.1.tar.gz  <span class="comment">#  先解压，然后进入解压后的目录</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.20.1   <span class="comment">#目录中的内容如下</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210905193248.png" alt=""></p>
<h4 id="第三步：安装"><a href="#第三步：安装" class="headerlink" title="第三步：安装"></a>第三步：安装</h4><p>其中configure是一个可执行文件，执行如下命令，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/l   <span class="comment">## 执行该配置文件</span></span><br><span class="line">make    <span class="comment"># 执行完成之后，会产生对应的makefile文件</span></span><br><span class="line">make install  <span class="comment">## 然后再安装</span></span><br><span class="line">whereis nginx  <span class="comment">## 使用该命令测试nginx是否安装成功</span></span><br></pre></td></tr></table></figure>

<h4 id="第四步：启动nginx"><a href="#第四步：启动nginx" class="headerlink" title="第四步：启动nginx"></a>第四步：启动nginx</h4><p>使用<code>whereis nginx</code>命令可以知道nginx安装在哪个目录，然后到nginx的目录中的<code>sbin</code>目录下执行nginx的可执行文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx   <span class="comment">#启动nginx</span></span><br><span class="line">ps -ef | grep nginx  <span class="comment"># 查看nginx进程</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-设置nginx开机启动"><a href="#1-2-设置nginx开机启动" class="headerlink" title="1.2 设置nginx开机启动"></a>1.2 设置nginx开机启动</h3><h4 id="第一步：进入到-lib-systemd-system-目录"><a href="#第一步：进入到-lib-systemd-system-目录" class="headerlink" title="第一步：进入到/lib/systemd/system/目录"></a>第一步：进入到/lib/systemd/system/目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /lib/systemd/system/</span><br></pre></td></tr></table></figure>

<h4 id="第二步：创建nginx-service文件，并编辑"><a href="#第二步：创建nginx-service文件，并编辑" class="headerlink" title="第二步：创建nginx.service文件，并编辑"></a>第二步：创建nginx.service文件，并编辑</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim nginx.service</span><br></pre></td></tr></table></figure>

<p>内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>Description:描述服务</li>
<li>After:描述服务类别</li>
<li>[Service]服务运行参数的设置</li>
<li>Type=forking是后台运行的形式</li>
<li>ExecStart为服务的具体运行命令</li>
<li>ExecReload为重启命令</li>
<li>ExecStop为停止命令</li>
<li>PrivateTmp=True表示给服务分配独立的临时空间</li>
</ul>
<p><strong>注意：[Service]的启动、重启、停止命令全部要求使用绝对路径</strong><br><strong>[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</strong></p>
<p>最后保存退出。</p>
<h4 id="第三步：加入开机自启动"><a href="#第三步：加入开机自启动" class="headerlink" title="第三步：加入开机自启动"></a>第三步：加入开机自启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl enable nginx</span></span><br></pre></td></tr></table></figure>

<p>如果不想开机自启动了，可以使用下面的命令取消开机自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl disable nginx</span></span><br></pre></td></tr></table></figure>

<h4 id="第四步：服务的启动-停止-刷新配置文件-查看状态"><a href="#第四步：服务的启动-停止-刷新配置文件-查看状态" class="headerlink" title="第四步：服务的启动/停止/刷新配置文件/查看状态"></a>第四步：服务的启动/停止/刷新配置文件/查看状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl start nginx.service          启动nginx服务</span></span><br><span class="line"><span class="comment"># systemctl stop nginx.service           停止服务</span></span><br><span class="line"><span class="comment"># systemctl restart nginx.service        重新启动服务</span></span><br><span class="line"><span class="comment"># systemctl list-units --type=service     查看所有已启动的服务</span></span><br><span class="line"><span class="comment"># systemctl status nginx.service          查看服务当前状态</span></span><br><span class="line"><span class="comment"># systemctl enable nginx.service          设置开机自启动</span></span><br><span class="line"><span class="comment"># systemctl disable nginx.service         停止开机自启动</span></span><br></pre></td></tr></table></figure>

<h4 id="命令行启动"><a href="#命令行启动" class="headerlink" title="命令行启动"></a>命令行启动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动nginx</span><br><span class="line">/usr/sbin/nginx</span><br><span class="line"># 检查nginx配置语法</span><br><span class="line">/usr/sbin/nginx -t</span><br><span class="line"># 重启nginx</span><br><span class="line">/usr/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<h3 id="1-3-nginx配置及说明"><a href="#1-3-nginx配置及说明" class="headerlink" title="1.3 nginx配置及说明"></a>1.3 nginx配置及说明</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">######Nginx配置文件nginx.conf中文详解#####</span><br><span class="line"></span><br><span class="line">#定义Nginx运行的用户和用户组</span><br><span class="line">user www www;</span><br><span class="line"></span><br><span class="line">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class="line">worker_processes 8;</span><br><span class="line"> </span><br><span class="line">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class="line">error_log /usr/local/nginx/logs/error.log info;</span><br><span class="line"></span><br><span class="line">#进程pid文件</span><br><span class="line">pid /usr/local/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#指定进程可以打开的最大描述符：数目</span><br><span class="line">#工作模式与连接数上限</span><br><span class="line">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class="line">#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span><br><span class="line">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span><br><span class="line">    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">    #补充说明：</span><br><span class="line">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><br><span class="line">    #A）标准事件模型</span><br><span class="line">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class="line">    #B）高效事件模型</span><br><span class="line">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class="line">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class="line">    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class="line">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br><span class="line">    use epoll;</span><br><span class="line"></span><br><span class="line">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class="line">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span><br><span class="line">    worker_connections 65535;</span><br><span class="line"></span><br><span class="line">    #keepalive超时时间。</span><br><span class="line">    keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><br><span class="line">    #分页大小可以用命令getconf PAGESIZE 取得。</span><br><span class="line">    #[root@web001 ~]# getconf PAGESIZE</span><br><span class="line">    #4096</span><br><span class="line">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><br><span class="line">    client_header_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class="line">    open_file_cache max=65535 inactive=60s;</span><br><span class="line"></span><br><span class="line">    #这个是指多长时间检查一次缓存的有效信息。</span><br><span class="line">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><br><span class="line">    open_file_cache_valid 80s;</span><br><span class="line"></span><br><span class="line">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class="line">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><br><span class="line">    open_file_cache_min_uses 1;</span><br><span class="line">    </span><br><span class="line">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span><br><span class="line">    open_file_cache_errors on;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    #文件扩展名与文件类型映射表</span><br><span class="line">    include /etc/nginx/mime.types;</span><br><span class="line"></span><br><span class="line">    #默认文件类型</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #默认编码</span><br><span class="line">    #charset utf-8;</span><br><span class="line"></span><br><span class="line">    #服务器名字的hash表大小</span><br><span class="line">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br><span class="line">    server_names_hash_bucket_size 128;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class="line">    client_header_buffer_size 32k;</span><br><span class="line"></span><br><span class="line">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br><span class="line">    large_client_header_buffers 4 64k;</span><br><span class="line"></span><br><span class="line">    #设定通过nginx上传文件的大小</span><br><span class="line">    client_max_body_size 8m;</span><br><span class="line"></span><br><span class="line">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="line">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br><span class="line">    sendfile on;</span><br><span class="line"></span><br><span class="line">    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line">    autoindex on;</span><br><span class="line"></span><br><span class="line">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">     </span><br><span class="line">    tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">    #长连接超时时间，单位是秒</span><br><span class="line">    keepalive_timeout 120;</span><br><span class="line"></span><br><span class="line">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class="line">    fastcgi_connect_timeout 300;</span><br><span class="line">    fastcgi_send_timeout 300;</span><br><span class="line">    fastcgi_read_timeout 300;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">    #gzip模块设置</span><br><span class="line">    gzip on; #开启gzip压缩输出</span><br><span class="line">    gzip_min_length 1k;    #最小压缩文件大小</span><br><span class="line">    gzip_buffers 4 16k;    #压缩缓冲区</span><br><span class="line">    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    gzip_comp_level 2;    #压缩等级</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    #开启限制IP连接数的时候需要使用</span><br><span class="line">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #负载均衡配置</span><br><span class="line">    upstream piao.jd.com &#123;</span><br><span class="line">     </span><br><span class="line">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class="line">        server 192.168.80.121:80 weight=3;</span><br><span class="line">        server 192.168.80.122:80 weight=2;</span><br><span class="line">        server 192.168.80.123:80 weight=3;</span><br><span class="line"></span><br><span class="line">        #nginx的upstream目前支持4种方式的分配</span><br><span class="line">        #1、轮询（默认）</span><br><span class="line">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line">        #2、weight</span><br><span class="line">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class="line">        #例如：</span><br><span class="line">        #upstream bakend &#123;</span><br><span class="line">        #    server 192.168.0.14 weight=10;</span><br><span class="line">        #    server 192.168.0.15 weight=10;</span><br><span class="line">        #&#125;</span><br><span class="line">        #2、ip_hash</span><br><span class="line">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="line">        #例如：</span><br><span class="line">        #upstream bakend &#123;</span><br><span class="line">        #    ip_hash;</span><br><span class="line">        #    server 192.168.0.14:88;</span><br><span class="line">        #    server 192.168.0.15:80;</span><br><span class="line">        #&#125;</span><br><span class="line">        #3、fair（第三方）</span><br><span class="line">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class="line">        #upstream backend &#123;</span><br><span class="line">        #    server server1;</span><br><span class="line">        #    server server2;</span><br><span class="line">        #    fair;</span><br><span class="line">        #&#125;</span><br><span class="line">        #4、url_hash（第三方）</span><br><span class="line">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class="line">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class="line">        #upstream backend &#123;</span><br><span class="line">        #    server squid1:3128;</span><br><span class="line">        #    server squid2:3128;</span><br><span class="line">        #    hash $request_uri;</span><br><span class="line">        #    hash_method crc32;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        #tips:</span><br><span class="line">        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span><br><span class="line">        #    ip_hash;</span><br><span class="line">        #    server 127.0.0.1:9090 down;</span><br><span class="line">        #    server 127.0.0.1:8080 weight=2;</span><br><span class="line">        #    server 127.0.0.1:6060;</span><br><span class="line">        #    server 127.0.0.1:7070 backup;</span><br><span class="line">        #&#125;</span><br><span class="line">        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><br><span class="line"></span><br><span class="line">        #每个设备的状态设置为:</span><br><span class="line">        #1.down表示单前的server暂时不参与负载</span><br><span class="line">        #2.weight为weight越大，负载的权重就越大。</span><br><span class="line">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class="line">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class="line">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class="line"></span><br><span class="line">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class="line">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class="line">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class="line">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-模块化配置"><a href="#1-4-模块化配置" class="headerlink" title="1.4 模块化配置"></a>1.4 模块化配置</h3><p><code>nginx</code>配置可以使用<code>include</code>导入，在企业开发过程中，可能会有很多网站，一个网站对应一个<code>nginx</code>配置，所以我们希望<code>nginx</code>配置添加或删除能够遵循开闭原则，因为nginx配置使用的配置文件是<code>etc/nginx/nginx.conf</code>，所以可以在此文件中添加一个导入的语句，在<code>server</code>标签下面添加如下语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /etc/nginx/include/*.conf;  </span><br></pre></td></tr></table></figure>

<p>该语句的意思为：在配置文件目录下在创建一个文件夹，然后导入该文件夹下所有以conf结尾的文件，而这个文件就是开启一个新的nginx域名的基础配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># For more information on configuration, see:</span><br><span class="line">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class="line">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 4096;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class="line">    # for more information.</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        listen       [::]:80;</span><br><span class="line">        server_name  _;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">        location = /404.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    include /etc/nginx/include/*.conf;  # 在配置文件目录下在创建一个文件夹，然后导入该文件夹下所有以conf结尾的文件，而这个文件就是开启一个新的nginx域名的基础配置</span><br><span class="line"># Settings for a TLS enabled server.</span><br><span class="line">#</span><br><span class="line">#    server &#123;</span><br><span class="line">#        listen       443 ssl http2;</span><br><span class="line">#        listen       [::]:443 ssl http2;</span><br><span class="line">#        server_name  _;</span><br><span class="line">#        root         /usr/share/nginx/html;</span><br><span class="line">#</span><br><span class="line">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class="line">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class="line">#        ssl_session_cache shared:SSL:1m;</span><br><span class="line">#        ssl_session_timeout  10m;</span><br><span class="line">#        ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">#        ssl_prefer_server_ciphers on;</span><br><span class="line">#</span><br><span class="line">#        # Load configuration files for the default server block.</span><br><span class="line">#        include /etc/nginx/default.d/*.conf;</span><br><span class="line">#</span><br><span class="line">#        error_page 404 /404.html;</span><br><span class="line">#            location = /40x.html &#123;</span><br><span class="line">#        &#125;</span><br><span class="line">#</span><br><span class="line">#        error_page 500 502 503 504 /50x.html;</span><br><span class="line">#            location = /50x.html &#123;</span><br><span class="line">#        &#125;</span><br><span class="line">#    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>include</code>文件夹下的所有以<code>.conf</code>结尾的文件都会被导入到<code>nginx.conf</code>配置中，该文件夹下的配置模板如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        # 这里改动了，也可以写你的域名</span><br><span class="line">        server_name  zhg.com;</span><br><span class="line"></span><br><span class="line">        # 默认网站根目录（www目录）</span><br><span class="line">        root         /home/centos/www;</span><br><span class="line"> </span><br><span class="line">        access_log /data/nginx/logs/zhg.com/access.log;  #访问日志</span><br><span class="line">        error_log /data/nginx/logs/zhg.com/error.log;  #错误日志</span><br><span class="line"></span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            # 这里改动了 定义首页索引文件的名称</span><br><span class="line">            index index.php index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 这里新加的</span><br><span class="line">        # PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI协议默认配置.</span><br><span class="line">        # Fastcgi服务器和程序(PHP,Python)沟通的协议.</span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            # 设置监听端口</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            # 设置nginx的默认首页文件(上面已经设置过了，可以删除)</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            # 设置脚本文件请求的路径</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            # 引入fastcgi的配置文件</span><br><span class="line">            include        /etc/nginx/fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-用nginx区分测试和线上环境"><a href="#1-5-用nginx区分测试和线上环境" class="headerlink" title="1.5 用nginx区分测试和线上环境"></a>1.5 用nginx区分测试和线上环境</h3><p>设置格式：</p>
<p>在fastcgi_params文件中配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastcgi_param RUNTIME_ENVIROMENT &#x27;DEV&#x27;;</span><br></pre></td></tr></table></figure>

<ul>
<li>其中，<code>RUNTIME_ENVIROMENT</code>是自定义的名字，可以根据需要自己定义</li>
</ul>
<p>在nginx.conf中配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    root /var/www;</span><br><span class="line">    index index.php;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    location /</span><br><span class="line">    &#123;</span><br><span class="line">    	index index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(php|php5)?$ &#123;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi_params;  #需要在fastcgi_params文件中定义环境变量</span><br><span class="line">        #或者</span><br><span class="line">        #fastcgi_param RUNTIME_ENVIROMENT &#x27;DEV&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在PHP中有两个调用方式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env</span> = getenv(<span class="string">&#x27;RUNTIME_ENVIROMENT&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>还有超全局变量方式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;RUNTIME_ENVIROMENT&#x27;</span>];</span><br></pre></td></tr></table></figure>

<h2 id="2-安装PHP"><a href="#2-安装PHP" class="headerlink" title="2 安装PHP"></a>2 安装PHP</h2><h3 id="2-1-yum安装"><a href="#2-1-yum安装" class="headerlink" title="2.1 yum安装"></a>2.1 yum安装</h3><p>配置yum源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br></pre></td></tr></table></figure>

<p>安装命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install php71w-devel php71w-fpm</span><br></pre></td></tr></table></figure>

<p>安装完成之后，然后通过<code>whereis</code>命令查看安装地址：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211113230517.png" alt=""></p>
<p>因为<code>nginx</code>服务器是不能执行<code>php</code>代码的，也就是说<code>nginx</code>服务器是将<code>php</code>代码转发给<code>php-fpm</code>进行处理，由<code>php-fpm</code>处理完之后将结果返回给<code>nginx</code>渲染返回给客户端，所以，如果需要nginx能够解析出php页面，则必须在服务器开启<code>php-fpm</code>，开启命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/sbin/php-fpm</span><br></pre></td></tr></table></figure>

<p>查看是否开启成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]# ps -ef | grep php</span><br><span class="line">root      50519      1  0 23:02 ?        00:00:00 php-fpm: master process (/etc/php-fpm.conf)</span><br><span class="line">apache    50520  50519  0 23:02 ?        00:00:00 php-fpm: pool www</span><br><span class="line">apache    50521  50519  0 23:02 ?        00:00:00 php-fpm: pool www</span><br><span class="line">apache    50522  50519  0 23:02 ?        00:00:00 php-fpm: pool www</span><br><span class="line">apache    50523  50519  0 23:02 ?        00:00:00 php-fpm: pool www</span><br><span class="line">apache    50524  50519  0 23:02 ?        00:00:00 php-fpm: pool www</span><br><span class="line">root      50531  21468  0 23:02 pts/1    00:00:00 grep --color=auto php</span><br></pre></td></tr></table></figure>

<p>常见错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2021/11/13 22:54:13 [error] 49804#49804: *54 connect() failed (111: Connection refused) while connecting to upstream, client: 192.168.1.17, server: zhg.com, request: &quot;GET /1.php HTTP/1.1&quot;, upstream: &quot;fastcgi://127.0.0.1:9000&quot;, host: &quot;zhg.com&quot;</span><br></pre></td></tr></table></figure>

<p>遇到这种错误，首先检查<code>nginx</code>配置是否正确，检查发现<code>nginx</code>配置正确之后，在检查是否开启了<code>php-fpm</code>。我的错误原因是没有开启<code>php-fpm</code>。开启就能正常显示了。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211113231342.png" alt=""></p>
<h3 id="2-2-前置安装"><a href="#2-2-前置安装" class="headerlink" title="2.2 前置安装"></a>2.2 前置安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 根据需要选择版本</span></span><br><span class="line">yum install gcc-c++ -y   <span class="comment">#编译需要</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 要安装PHP 7，您必须使用以下命令在CentOS 7系统上安装和启用EPEL和Remi存储库。</span></span><br><span class="line">yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 您需要安装yum-utils，这是一组用于管理yum存储库和包的有用程序。它有基本上扩展yum默认功能的工具。</span></span><br><span class="line">yum -y install yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 yum-utils提供的程序之一是yum-config-manager，您可以使用它来启用Remi存储库作为安装不同PHP版本的默认存储库，如图所示。</span></span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> remi-php71 [ 安装PHP 7.1 ]</span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> remi-php72 [ 安装PHP 7.2 ]</span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> remi-php73 [ 安装PHP 7.3 ]</span><br></pre></td></tr></table></figure>

<p>为了方便运行，将上述的前置安装整理成一条安装命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc-c++ https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm http://rpms.remirepo.net/enterprise/remi-release-7.rpm yum-utils</span><br><span class="line"><span class="comment"># 这里以php7.3为例</span></span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> remi-php73</span><br></pre></td></tr></table></figure>

<h4 id="2-2-1-安装PHP及依赖包"><a href="#2-2-1-安装PHP及依赖包" class="headerlink" title="2.2.1 安装PHP及依赖包"></a>2.2.1 安装PHP及依赖包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install php php-mcrypt php-devel php-cli php-gd php-pear php-curl php-fpm php-mysql php-ldap php-zip php-fileinfo --skip-broken</span><br></pre></td></tr></table></figure>

<h3 id="2-3-nginx支持PHP"><a href="#2-3-nginx支持PHP" class="headerlink" title="2.3 nginx支持PHP"></a>2.3 nginx支持PHP</h3><p>修改nginx的配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/loca/nginx/conf/nginx.conf.default   <span class="comment"># 注意，这里修改的是默认配置文件，如果不修改这个，是不会生效的</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.php index.html index.htm;    //在这里添加一个index.php 用空格隔开</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            root           /usr/local/nginx/html;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;   //将/scripts改成$document_root</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>访问php文件、不显示、直接下载的原因：</strong></p>
<p>看题主配置里面有laravel,看来是跟php有关,如果是php,那么题主你应该先去下载php5-fpm才对,因为nginx本身不像apache一样会执行php程序,而是交给php5-fpm执行.</p>
<p>所以,题主你的步骤应该如下 :</p>
<ul>
<li>下载php5-fpm</li>
<li>配置nginx,使nginx跟fpm通信,网上有很多配置方法,我不重复,这里指提醒一点 : nginx跟fpm通信方式有两种,一个是通过ip,一个是通过socket.fpm跟nginx里面要配置成同一种通信方式!!</li>
<li>最后测试是否成功.当然有可能到了这里还会出现访问页面下载下来的情况,如果遇到这个情况就需要再排查了,但是题主先搞定fpm比较稳妥.</li>
</ul>
</blockquote>
<h2 id="3-安装MySQL"><a href="#3-安装MySQL" class="headerlink" title="3 安装MySQL"></a>3 安装MySQL</h2><p>更新yum源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Uvh  http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>安装MySQL：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>



<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/supiaopiao/p/12160541.html">设置nginx开机自启动（centos7.x）</a></li>
<li><a href="https://help.aliyun.com/document_detail/97251.html">https://help.aliyun.com/document_detail/97251.html</a></li>
<li><a href="https://www.jianshu.com/p/8490cdfbafb0">yum 安装PHP</a></li>
<li><a href="https://learnku.com/articles/48720">“File not found.”错误解决</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux中批量替换目录下所有文件内容的方法</title>
    <url>/linux-replace-folder-file/</url>
    <content><![CDATA[<h2 id="method1"><a href="#method1" class="headerlink" title="method1"></a>method1</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&quot;s/oldString/newString/g&quot;</span>  `grep oldString -rl /path`</span><br><span class="line">sed -i <span class="string">&quot;s/oss_room_v2/oss_bi_all_room/g&quot;</span>  `grep oss_room_v2 -rl /home/hadoop/nisj/automationDemand/idfaQuery`</span><br></pre></td></tr></table></figure>

<h2 id="method2"><a href="#method2" class="headerlink" title="method2"></a>method2</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep oldString -rl /path | xargssed -i <span class="string">&quot;s/oldString/newString/g&quot;</span></span><br><span class="line">grep data_chushou_pay_info -rl /home/hadoop/nisj/automationDemand/idfaQuery | xargs sed -i <span class="string">&quot;s/data_chushou_pay_info/oss_bi_all_chushou_pay_info/g&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>也可以在grep子句中添加过滤，如：【grep oss_room_v2 -rl /home/hadoop/nisj/automationDemand/idfaQuery/*.py】</p>
</blockquote>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于局部响应归一化层（LRN），了解一下</title>
    <url>/lrn/</url>
    <content><![CDATA[<h3 id="局部响应归一化层（Local-Response-Normalization）"><a href="#局部响应归一化层（Local-Response-Normalization）" class="headerlink" title="局部响应归一化层（Local Response Normalization）"></a>局部响应归一化层（Local Response Normalization）</h3><p>本篇博客参考自：<a href="https://note.youdao.com/">https://www.jianshu.com/p/c014f81242e7</a></p>
<p>局部响应归一化层简称LRN，<strong>是在深度学习中提高准确度的技术方法</strong>。一般是在激活、池化后进行的一种处理方法，因在<a href="https://note.youdao.com/">Alexnet</a>中运用到，故做一下整理。   </p>
<blockquote>
<p><strong>为什么要引入LRN层？</strong><br>首先要引入一个神经生物学的概念：侧抑制（lateral inhibitio），即指被激活的神经元抑制相邻的神经元。归一化（normaliazation）的目的就是“抑制”,LRN就是借鉴这种侧抑制来实现局部抑制，尤其是我们使用RELU的时候，这种“侧抑制”很有效 ，因而在alexnet里使用有较好的效果。</p>
<p><strong>归一化有什么好处？</strong><br>1.归一化有助于快速收敛；<br>2.对局部神经元的活动创建竞争机制，使得其中响应比较大的值变得相对更大，并抑制其他反馈较小的神经元，增强了模型的泛化能力。<br>【补充：神经网络学习过程本质就是为了学习数据分布，一旦训练数据与测试数据的分布不同，那么网络的泛化能力也大大降低；另外一方面，一旦每批训练数据的分布各不相同(batch 梯度下降)，那么网络就要在每次迭代都去学习适应不同的分布，这样将会大大降低网络的训练速度，这也正是为什么我们需要对数据都要做一个归一化预处理的原因。<br>深度网络的训练是复杂的过程，只要网络的前面几层发生微小的改变，那么后面几层就会被累积放大下去。一旦网络某一层的输入数据的分布发生改变，那么这一层网络就需要去适应学习这个新的数据分布，所以如果训练过程中，训练数据的分布一直在发生变化，那么将会影响网络的训练速度。】</p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux服务器监控以及查日志教程</title>
    <url>/linux-search-logs/</url>
    <content><![CDATA[<h2 id="bash快捷键"><a href="#bash快捷键" class="headerlink" title="bash快捷键"></a>bash快捷键</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>crtl+A</td>
<td>把光标移动到命令行开头，如果我们输入的命令过长，想要把光标移动到命令行开头时使用</td>
</tr>
<tr>
<td>crtl+E</td>
<td>把光标移动到命令行结尾</td>
</tr>
<tr>
<td>crtl+C</td>
<td>强制终止当前的命令</td>
</tr>
<tr>
<td>crtl+L</td>
<td>清屏，相当于clear命令</td>
</tr>
<tr>
<td>crtl+U</td>
<td>删除或剪切光标之前的命令，加入输入了一串很长的命令，不用使用退格键一个一个字符的删除，使用这个命令更加方便</td>
</tr>
<tr>
<td>crtl+K</td>
<td>删除或剪切光标之后的命令</td>
</tr>
<tr>
<td>crtl+Y</td>
<td>粘贴ctrl+U或crtl+K剪切的内容</td>
</tr>
<tr>
<td>crtl+R</td>
<td>在历史命令中搜索，按下crtl+R键之后，就会出现搜索界面，只要输入搜索内容，就会从历史命令中搜索</td>
</tr>
<tr>
<td>crtl+D</td>
<td>推出当前终端</td>
</tr>
<tr>
<td>crtl+Z</td>
<td>暂停，并放入后台，这个快捷键牵扯到工作管理的内容</td>
</tr>
<tr>
<td>crtl+S</td>
<td>暂停屏幕输出</td>
</tr>
<tr>
<td>crtl+Q</td>
<td>恢复屏幕输出</td>
</tr>
</tbody></table>
<h2 id="1-查看服务器日志"><a href="#1-查看服务器日志" class="headerlink" title="1 查看服务器日志"></a>1 查看服务器日志</h2><h3 id="1-1-统计业务接口调用的次数"><a href="#1-1-统计业务接口调用的次数" class="headerlink" title="1.1 统计业务接口调用的次数"></a>1.1 统计业务接口调用的次数</h3><h4 id="1-grep-c"><a href="#1-grep-c" class="headerlink" title="(1) grep -c"></a>(1) <a href="https://www.linuxcool.com/grep">grep</a> -c</h4><p>格式：grep -c {关键词} {日志文件}</p>
<p><code>-c</code>会把所有符合要求的文件都统计出数量结果，不会将所有的日志的数量进行汇总，所以这个命令执行完之后，会得到所有符合要求的文件以及该文件中符合要求的数量，如下所示：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210728162441.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -c getInfo /data/nginx/logs/info-2021-07-*</span><br></pre></td></tr></table></figure>

<p>grep正则表达式：</p>
<table>
<thead>
<tr>
<th><strong>元数据</strong></th>
<th><strong>意义和范例</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong><code>^word</code></strong></td>
<td>搜寻以word开头的行。 例如：搜寻以#开头的脚本注释行 <strong><code>grep –n ‘^#’ regular.txt</code></strong></td>
</tr>
<tr>
<td><strong><code>word$</code></strong></td>
<td>搜寻以word结束的行</td>
</tr>
<tr>
<td><strong><code>.</code></strong></td>
<td>匹配任意一个字符。 例如：<strong><code>grep –n ‘e.e’ regular.txt</code></strong> 匹配e和e之间有任意一个字符，可以匹配eee，eae，eve，但是不匹配ee。</td>
</tr>
<tr>
<td><strong><code>\</code></strong></td>
<td>转义字符。 例如：搜寻’，’是一个特殊字符，在正则表达式中有特殊含义。必须要先转义。<strong><code>grep –n ‘\,” regular.txt</code></strong></td>
</tr>
<tr>
<td><strong><code>\*</code></strong></td>
<td>前面的字符重复0到多次。 例如匹配gle，gogle，google，gooogle等等 <strong><code>grep –n ‘go\*gle’ regular.txt</code></strong></td>
</tr>
<tr>
<td><strong><code>[list]</code></strong></td>
<td>匹配一系列字符中的一个。 例如：匹配gl，gf。<strong><code>grep –n ‘g[lf]’ regular.txt</code></strong></td>
</tr>
<tr>
<td><strong><code>[n1-n2]</code></strong></td>
<td>匹配一个字符范围中的一个字符。 例如：匹配数字字符 <strong><code>grep –n ‘[0-9]’ regular.txt</code></strong></td>
</tr>
<tr>
<td><strong><code>[^list]</code></strong></td>
<td>匹配字符集以外的字符 例如：<strong><code>grep –n ‘[^o]‘ regular.txt</code></strong> 匹配非o字符</td>
</tr>
<tr>
<td><strong><code>\&lt;word</code></strong></td>
<td>单词是的开头。 例如：匹配以g开头的单词 <strong><code>grep –n ‘\&lt;g’ regular.txt</code></strong></td>
</tr>
<tr>
<td><strong><code>word\&gt;</code></strong></td>
<td>前面的字符重复n1，n2次 例如：匹配google，gooogle。<strong><code>grep –n ‘go\&#123;2,3\&#125;gle’ regular.txt</code></strong></td>
</tr>
<tr>
<td><strong><code>\&lt;word</code></strong></td>
<td>匹配单词结尾 例如：匹配以tion结尾的单词 <strong><code>grep –n ‘tion\&gt;’ regular.txt</code></strong></td>
</tr>
<tr>
<td><strong><code>word\&#123;n1\&#125;</code></strong></td>
<td>前面的字符重复n1 例如：匹配google。 <strong><code>grep –n ‘go\&#123;2\&#125;gle’ regular.txt</code></strong></td>
</tr>
<tr>
<td><strong><code>word\&#123;n1,\&#125;</code></strong></td>
<td>前面的字符至少重复n1 例如：匹配google，gooogle。 <strong><code>grep –n ‘go\&#123;2\&#125;gle’ regular.txt</code></strong></td>
</tr>
<tr>
<td><strong><code>word\&#123;n1,n2\&#125;</code></strong></td>
<td>前面的字符重复n1，n2次 例如：匹配google，gooogle。 <strong><code>grep –n ‘go\&#123;2,3\&#125;gle’ regular.txt</code></strong></td>
</tr>
</tbody></table>
<h4 id="2-grep与wc-l结合"><a href="#2-grep与wc-l结合" class="headerlink" title="(2) grep与wc -l结合"></a>(2) <a href="https://www.linuxcool.com/grep">grep</a>与<a href="https://www.linuxcool.com/wc">wc</a> -l结合</h4><p>格式：grep {关键词} {日志文件} | wc -l</p>
<p>这个命令会把所有符合要求的文件中的统计数量进行汇总求和，所有这个命令执行完之后，会得到一个数字。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep getInfo /data/nginx/logs/info-2021-07-* | wc -l</span><br></pre></td></tr></table></figure>

<h4 id="3-zgrep"><a href="#3-zgrep" class="headerlink" title="(3) zgrep"></a>(3) <a href="https://www.linuxcool.com/zgrep">zgrep</a></h4><p>格式：zgrep {关键词} {日志文件} | wc -l</p>
<p>由于日志文件可能会很大，很多公司会每天按照大小进行切分，并以压缩格式保存，这类文件就需要使用zgrep命令进行统计。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@iZbp1crt1zqre1ar8:/HD/logs/punchout<span class="comment"># zgrep -c &#x27;TraceLogProviderFilter&#x27; punchout.2020-02-23_1.log.gz </span></span><br><span class="line">274647</span><br><span class="line">root@iZbp1crt1zqre1ar8:/HD/logs/punchout<span class="comment"># zgrep -c &#x27;TraceLogProviderFilter&#x27; punchout.2020-02-23_*.log.gz </span></span><br><span class="line">punchout.2020-02-23_1.log.gz:274647</span><br><span class="line">punchout.2020-02-23_2.log.gz:274995</span><br></pre></td></tr></table></figure>

<h4 id="4-按照正则匹配所有接口形式的调用"><a href="#4-按照正则匹配所有接口形式的调用" class="headerlink" title="(4) 按照正则匹配所有接口形式的调用"></a>(4) 按照正则匹配所有接口形式的调用</h4><p>正则表达式形式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;match($0, /\/[a-zA-Z]+\/[a-zA-Z]+/, a); print a[0];&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat log.2021081916 | awk <span class="string">&#x27;&#123;match($0, /\/[a-zA-Z]+\/[a-zA-Z]+/, a); print a[0];&#125;&#x27;</span> | sort | uniq -c | sort -n -r</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210819201224.png" alt=""></p>
<h4 id="5-统计调用次数大于n的接口"><a href="#5-统计调用次数大于n的接口" class="headerlink" title="(5) 统计调用次数大于n的接口"></a>(5) 统计调用次数大于<code>n</code>的接口</h4><p>先整理出所有接口被调用的次数，然后再使用<code>awk</code>对所有接口和调用次数进行遍历，筛选出所有调用次数大于<code>n</code>的接口即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat log.20210819 | awk <span class="string">&#x27;&#123;match($0, /\/[a-zA-Z]+\/[a-zA-Z]+/, a); print a[0];&#125;&#x27;</span> | sort | uniq -c | sort -n -r | awk -F <span class="string">&quot; &quot;</span> <span class="string">&#x27;&#123;if ($1&gt;100) print $1, $2&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210819202734.png" alt=""></p>
<h3 id="1-2-统计访问IP的次数"><a href="#1-2-统计访问IP的次数" class="headerlink" title="1.2 统计访问IP的次数"></a>1.2 统计访问IP的次数</h3><p>首先查看日志的格式，可以按照空格进行切割，然后对切割完的结果进行排序，使用<code>sort</code>命令，最后在使用uniq命令，去除一些重复的行</p>
<blockquote>
<ul>
<li><p><a href="https://www.linuxcool.com/sort">sort</a></p>
<p>sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。sort命令既可以从特定的文件，也可以从stdin中获取输入。</p>
<p><strong>语法格式：</strong>sort [参数] [文件]</p>
<p><strong>常用参数：</strong></p>
<table>
<thead>
<tr>
<th>-b</th>
<th>忽略每行前面开始出的空格字符</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>检查文件是否已经按照顺序排序</td>
</tr>
<tr>
<td>-d</td>
<td>排序时，处理英文字母、数字及空格字符外，忽略其他的字符</td>
</tr>
<tr>
<td>-f</td>
<td>排序时，将小写字母视为大写字母</td>
</tr>
<tr>
<td>-i</td>
<td>排序时，除了040至176之间的ASCII字符外，忽略其他的字符</td>
</tr>
<tr>
<td>-m</td>
<td>将几个排序号的文件进行合并</td>
</tr>
<tr>
<td>-M</td>
<td>将前面3个字母依照月份的缩写进行排序</td>
</tr>
<tr>
<td>-n</td>
<td>依照数值的大小排序</td>
</tr>
<tr>
<td>-o &lt;输出文件&gt;</td>
<td>将排序后的结果存入制定的文件</td>
</tr>
<tr>
<td>-r</td>
<td>以相反的顺序来排序</td>
</tr>
<tr>
<td>-t &lt;分隔字符&gt;</td>
<td>指定排序时所用的栏位分隔字符</td>
</tr>
<tr>
<td>-k</td>
<td>指定需要排序的栏位</td>
</tr>
</tbody></table>
</li>
<li><p><a href="https://www.linuxcool.com/uniq">uniq</a></p>
<p>uniq命令全称是“unique”，中文释义是“独特的，唯一的”。该命令的作用是用来去除文本文件中连续的重复行，中间不能夹杂其他文本行。去除了重复的，保留的都是唯一的，也就是独特的，唯一的了。</p>
<p>我们应当注意的是，它和sort的区别，sort只要有重复行，它就去除，而uniq重复行必须要连续，也可以用它忽略文件中的重复行。</p>
<p><strong>语法格式：</strong>uniq [参数] [文件]</p>
<p><strong>常用参数：</strong></p>
<table>
<thead>
<tr>
<th>-c</th>
<th>打印每行在文本中重复出现的次数</th>
</tr>
</thead>
<tbody><tr>
<td>-d</td>
<td>只显示有重复的纪录，每个重复纪录只出现一次</td>
</tr>
<tr>
<td>-u</td>
<td>只显示没有重复的纪录</td>
</tr>
</tbody></table>
</li>
</ul>
</blockquote>
<ul>
<li><p>知道IP在哪个位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat log.2021073016-20210730 | awk -F<span class="string">&#x27; &#x27;</span> <span class="string">&#x27;&#123;print $4&#125;&#x27;</span> |  sort | uniq -c</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210731145140.png" alt=""></p>
</li>
<li><p>不知道IP在哪个位置，采用正则匹配</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat log.2021073016-20210730 | awk --re-interval <span class="string">&#x27;&#123;match($0, /([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;/, a); print a[0]&#125;&#x27;</span> |  sort | uniq -c | sort -n -r</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210819103826.png" alt=""></p>
</li>
</ul>
<h2 id="2-查看服务器负载"><a href="#2-查看服务器负载" class="headerlink" title="2 查看服务器负载"></a>2 查看服务器负载</h2><p>服务器负载一般指的是Linux服务器的<strong>CPU</strong>、<strong>内存</strong>、<strong>IO</strong>等的负载。</p>
<h3 id="1-uptime-查看系统负载"><a href="#1-uptime-查看系统负载" class="headerlink" title="(1) uptime-查看系统负载"></a>(1) <a href="https://www.linuxcool.com/uptime">uptime</a>-查看系统负载</h3><blockquote>
<p>Linux系统中的uptime命令主要用于获取主机运行时间和查询Linux系统负载等信息。</p>
<p>uptime命令可以显示系统已经运行了多长时间，信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登录用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。 uptime命令用法十分简单，直接输入uptime即可查看系统负载情况。</p>
</blockquote>
<p><strong>语法格式</strong>：uptime [参数]</p>
<p><strong>常用参数</strong>:</p>
<table>
<thead>
<tr>
<th>-p</th>
<th>以漂亮的格式显示机器正常运行的时间</th>
</tr>
</thead>
<tbody><tr>
<td>-s</td>
<td>系统自开始运行时间，格式为yyyy-mm-dd hh:mm:ss</td>
</tr>
<tr>
<td>-h</td>
<td>显示帮助信息</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># uptime </span></span><br><span class="line"> 01:46:16 up 9 days,  2:47,  3 users,  load average: 0.00, 0.01, 0.05</span><br><span class="line">[root@localhost ~]<span class="comment"># uptime -p</span></span><br><span class="line">up 1 week, 2 days, 2 hours, 48 minutes</span><br><span class="line">[root@localhost ~]<span class="comment"># uptime -s</span></span><br><span class="line">2021-07-18 22:58:18</span><br></pre></td></tr></table></figure>

<h3 id="2-w-显示已登录用户"><a href="#2-w-显示已登录用户" class="headerlink" title="(2) w-显示已登录用户"></a>(2) <a href="https://www.linuxcool.com/w">w</a>-显示已登录用户</h3><blockquote>
<p>w命令用于显示已经登陆系统的用户列表，并显示用户正在执行的指令。执行这个命令可得知目前登入系统的用户有哪些人，以及他们正在执行的程序。单独执行w命令会显示所有的用户，您也可指定用户名称，仅显示某位用户的相关信息。</p>
</blockquote>
<p><strong>语法格式：</strong>w [参数]</p>
<p><strong>常用参数：</strong>﻿</p>
<table>
<thead>
<tr>
<th>-h/–no-header</th>
<th>不打印头信息</th>
</tr>
</thead>
<tbody><tr>
<td>-u/–no-current</td>
<td>当显示当前进程和cpu时间时忽略用户名</td>
</tr>
<tr>
<td>-s/–short</td>
<td>使用短输出格式</td>
</tr>
<tr>
<td>-f/–from</td>
<td>显示用户从哪登录</td>
</tr>
<tr>
<td>-o/–old-style</td>
<td>老式输出</td>
</tr>
<tr>
<td>-i/–ip-addr</td>
<td>显示IP地址而不是主机名（如果可能）</td>
</tr>
<tr>
<td>–help</td>
<td>显示此帮助并退出</td>
</tr>
<tr>
<td>-V/–version</td>
<td>显示版本信息</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># w</span></span><br><span class="line"> 01:50:46 up 9 days,  2:52,  4 users,  load average: 0.14, 0.08, 0.07</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts/0    192.168.10.1     Tue04    5:50m  0.22s  0.16s redis-cli -h 10.18.243.168 -p 6379</span><br><span class="line">root     pts/3    192.168.10.1     Tue04    1:18   0.36s  0.36s -bash</span><br><span class="line">root     pts/4    192.168.10.1     Tue04    6.00s  0.11s  0.11s -bash</span><br><span class="line">centos   pts/5    192.168.10.1     01:49   46.00s  0.09s  0.01s mysql -uroot -px xxxxxxxxx</span><br></pre></td></tr></table></figure>

<h3 id="3-top-实时显示进程动态"><a href="#3-top-实时显示进程动态" class="headerlink" title="(3) top-实时显示进程动态"></a>(3) <a href="https://www.linuxcool.com/top">top</a>-实时显示进程动态</h3><blockquote>
<p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，常用于服务端性能分析。</p>
<p>在top命令中按f按可以查看显示的列信息，按对应字母来开启/关闭列，大写字母表示开启，小写字母表示关闭。带*号的是默认列。</p>
</blockquote>
<p><strong>语法格式：</strong>top [参数]</p>
<p><strong>常用参数：</strong></p>
<table>
<thead>
<tr>
<th>-d</th>
<th>改变显示的更新速度，或是在交谈式指令列( interactive command)按 s</th>
</tr>
</thead>
<tbody><tr>
<td>-q</td>
<td>没有任何延迟的显示速度，如果使用者是有 superuser 的权限，则 top 将会以最高的优先序执行</td>
</tr>
<tr>
<td>-c</td>
<td>切换显示模式</td>
</tr>
<tr>
<td>-s</td>
<td>安全模式，将交谈式指令取消, 避免潜在的危机</td>
</tr>
<tr>
<td>-i</td>
<td>不显示任何闲置 (idle) 或无用 (zombie) 的行程</td>
</tr>
<tr>
<td>-n</td>
<td>更新的次数，完成后将会退出 top</td>
</tr>
<tr>
<td>-b</td>
<td>批次档模式，搭配 “n” 参数一起使用，可以用来将 top 的结果输出到档案内</td>
</tr>
</tbody></table>
<blockquote>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article2/微信截图_20210802145432.png" style="zoom:75%;" />

<p>其中，统计信息区前五行是系统整体的统计信息。第一行是任务队列信息，同 uptime 命令的执行结果。其内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01:06:48    当前时间</span><br><span class="line">up 1:22    系统运行时间，格式为时:分</span><br><span class="line">1 user    当前登录用户数</span><br><span class="line">load average: 0.06, 0.60, 0.48    系统负载，即任务队列的平均长度。三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。</span><br></pre></td></tr></table></figure>

<p>第二、三行为进程和CPU的信息。当有多个CPU时，这些内容可能会超过两行。内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">total 进程总数</span><br><span class="line">running 正在运行的进程数</span><br><span class="line">sleeping 睡眠的进程数</span><br><span class="line">stopped 停止的进程数</span><br><span class="line">zombie 僵尸进程数</span><br><span class="line">Cpu(s): </span><br><span class="line">0.3% us 用户空间占用CPU百分比</span><br><span class="line">1.0% sy 内核空间占用CPU百分比</span><br><span class="line">0.0% ni 用户进程空间内改变过优先级的进程占用CPU百分比</span><br><span class="line">98.7% id 空闲CPU百分比</span><br><span class="line">0.0% wa 等待输入输出的CPU时间百分比</span><br><span class="line">0.0%hi：硬件CPU中断占用百分比</span><br><span class="line">0.0%si：软中断占用百分比</span><br><span class="line">0.0%st：虚拟机占用百分比</span><br></pre></td></tr></table></figure>

<p>最后两行为内存信息，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mem:</span><br><span class="line">191272k total    物理内存总量</span><br><span class="line">173656k used    使用的物理内存总量</span><br><span class="line">17616k free    空闲内存总量</span><br><span class="line">22052k buffers    用作内核缓存的内存量</span><br><span class="line">Swap: </span><br><span class="line">192772k total    交换区总量</span><br><span class="line">0k used    使用的交换区总量</span><br><span class="line">192772k free    空闲交换区总量</span><br><span class="line">123988k cached    缓冲的交换区总量,内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，该数值即为这些内容已存在于内存中的交换区的大小,相应的内存再次被换出时可不必再对交换区写入。</span><br></pre></td></tr></table></figure>

<p>进程信息区统计信息区域的下方显示了各个进程的详细信息。各列的含义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">序号  列名    含义</span><br><span class="line">a    PID     进程id</span><br><span class="line">b    PPID    父进程id</span><br><span class="line">c    RUSER   Real user name</span><br><span class="line">d    UID     进程所有者的用户id</span><br><span class="line">e    USER    进程所有者的用户名</span><br><span class="line">f    GROUP   进程所有者的组名</span><br><span class="line">g    TTY     启动进程的终端名。不是从终端启动的进程则显示为 ?</span><br><span class="line">h    PR      优先级</span><br><span class="line">i    NI      nice值。负值表示高优先级，正值表示低优先级</span><br><span class="line">j    P       最后使用的CPU，仅在多CPU环境下有意义</span><br><span class="line">k    %CPU    上次更新到现在的CPU时间占用百分比</span><br><span class="line">l    TIME    进程使用的CPU时间总计，单位秒</span><br><span class="line">m    TIME+   进程使用的CPU时间总计，单位1/100秒</span><br><span class="line">n    %MEM    进程使用的物理内存百分比</span><br><span class="line">o    VIRT    进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</span><br><span class="line">p    SWAP    进程使用的虚拟内存中，被换出的大小，单位kb。</span><br><span class="line">q    RES     进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</span><br><span class="line">r    CODE    可执行代码占用的物理内存大小，单位kb</span><br><span class="line">s    DATA    可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb</span><br><span class="line">t    SHR     共享内存大小，单位kb</span><br><span class="line">u    nFLT    页面错误次数</span><br><span class="line">v    nDRT    最后一次写入到现在，被修改过的页面数。</span><br><span class="line">w    S       进程状态(D=不可中断的睡眠状态,R=运行,S=睡眠,T=跟踪/停止,Z=僵尸进程)</span><br><span class="line">x    COMMAND 命令名/命令行</span><br><span class="line">y    WCHAN   若该进程在睡眠，则显示睡眠中的系统函数名</span><br><span class="line">z    Flags   任务标志，参考 sched.h</span><br></pre></td></tr></table></figure>

<p>默认情况下仅显示比较重要的 PID、USER、PR、NI、VIRT、RES、SHR、S、%CPU、%MEM、TIME+、COMMAND 列。可以通过下面的快捷键来更改显示内容。 </p>
<p>更改显示内容通过 <strong>f</strong> 键可以选择显示的内容。按 f 键之后会显示列的列表，按 a-z 即可显示或隐藏对应的列，最后按回车键确定。<br>按 <strong>o</strong> 键可以改变列的显示顺序。按小写的 a-z 可以将相应的列向右移动，而大写的 A-Z 可以将相应的列向左移动。最后按回车键确定。<br>按大写的 <strong>F</strong> 或 <strong>O</strong> 键，然后按 a-z 可以将进程按照相应的列进行排序。而大写的 <strong>R</strong> 键可以将当前的排序倒转。</p>
<p><strong>其他实用命令：</strong></p>
<p>下面介绍在top命令执行过程中可以使用的一些交互命令。从使用角度来看，熟练的掌握这些命令比掌握选项还重要一些。这些命令都是单字母的，如果在命令行选项中使用了s选项，则可能其中一些命令会被屏蔽掉：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+L 擦除并且重写屏幕。 </span><br><span class="line">h或者? 显示帮助画面，给出一些简短的命令总结说明。 </span><br><span class="line">k       终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号；如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽。 </span><br><span class="line">i 忽略闲置和僵死进程。这是一个开关式命令。 </span><br><span class="line">q 退出程序。 </span><br><span class="line">r 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10。 </span><br><span class="line">S 切换到累计模式。 </span><br><span class="line">s 改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加。 </span><br><span class="line">f或者F 从当前显示中添加或者删除项目。 </span><br><span class="line">o或者O 改变显示项目的顺序。 </span><br><span class="line">l 切换显示平均负载和启动时间信息。 </span><br><span class="line">m 切换显示内存信息。 </span><br><span class="line">t 切换显示进程和CPU状态信息。 </span><br><span class="line">c 切换显示命令名称和完整命令行。 </span><br><span class="line">M 根据驻留内存大小进行排序。 </span><br><span class="line">P 根据CPU使用百分比大小进行排序。 </span><br><span class="line">T 根据时间/累计时间进行排序。 </span><br><span class="line">W 将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。</span><br></pre></td></tr></table></figure>

<p><strong>top命令常用操作：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top   //每隔5秒显式所有进程的资源占用情况</span><br><span class="line">top -d 2  //每隔2秒显式所有进程的资源占用情况</span><br><span class="line">top -c  //每隔5秒显式进程的资源占用情况，并显示进程的命令行参数(默认只有进程名)</span><br><span class="line">top -p 12345 -p 6789//每隔5秒显示pid是12345和pid是6789的两个进程的资源占用情况</span><br><span class="line">top -d 2 -c -p 123456 //每隔2秒显示pid是12345的进程的资源使用情况，并显式该进程启动的命令行参数</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><p>查看CPU个数</p>
<p>在top界面下，按下1，即可查看cpu个数。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/20140809122649921.png" alt=""></p>
</li>
</ul>
<h3 id="4-iostat-监视系统输入输出设备和CPU的使用情况"><a href="#4-iostat-监视系统输入输出设备和CPU的使用情况" class="headerlink" title="(4) iostat-监视系统输入输出设备和CPU的使用情况"></a>(4) <a href="https://www.linuxcool.com/iostat">iostat</a>-监视系统输入输出设备和CPU的使用情况</h3><blockquote>
<p>iostat被用于监视系统输入输出设备和CPU的使用情况。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。</p>
</blockquote>
<p><strong>语法格式：</strong> iostat [参数] [设备]</p>
<p><strong>常用参数：</strong></p>
<table>
<thead>
<tr>
<th>-c</th>
<th>仅显示CPU使用情况</th>
</tr>
</thead>
<tbody><tr>
<td>-d</td>
<td>仅显示设备利用率</td>
</tr>
<tr>
<td>-k</td>
<td>显示状态以千字节每秒为单位，而不使用块每秒</td>
</tr>
<tr>
<td>-m</td>
<td>显示状态以兆字节每秒为单位</td>
</tr>
<tr>
<td>-p</td>
<td>仅显示块设备和所有被使用的其他分区的状态</td>
</tr>
<tr>
<td>-t</td>
<td>显示每个报告产生时的时间</td>
</tr>
</tbody></table>
<h3 id="5-mpstat"><a href="#5-mpstat" class="headerlink" title="(5) mpstat"></a>(5) <a href="https://www.linuxcool.com/mpstat">mpstat</a></h3><p>mpstat mpstat是MultiProcessor Statistics的缩写，是实时系统监控工具。其报告与CPU的一些统计信息，这些信息存放在/proc/stat文件中。在多CPUs系统里，其不但能查看所有CPU的平均状况信息，而且能够查看特定CPU的信息。</p>
<p>再来看看 oschina 上的 mpstat 命令执行结果：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/121212.PNG" alt=""></p>
<h3 id="6-netstat"><a href="#6-netstat" class="headerlink" title="(6) netstat"></a>(6) <a href="https://www.linuxcool.com/netstat">netstat</a></h3><p>Netstat 和 ps 命令类似，是 Linux 管理员基本上每天都会用的工具，它显示了大量跟网络相关的信息，例如 socket 的使用、路由、接口、协议、网络等等，下面是一些常用的参数：</p>
<ul>
<li><code>-a</code> Show all socket information</li>
<li>-<code>r</code> Show routing information</li>
<li><code>-i</code> Show network interface statistics</li>
<li><code>-s</code> Show network protocol statistics</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210728223119.png" alt=""></p>
<h3 id="7-nmon"><a href="#7-nmon" class="headerlink" title="(7) nmon"></a>(7) <a href="http://nmon.sourceforge.net/pmwiki.php">nmon</a></h3><p>Nmon, 是 Nigel’s Monitor 的缩写，是一个使用很普遍的开源工具，用以监控 Linux 系统的性能。Nmon 监控多个子系统的性能数据，例如处理器的使用率、内存使用率、队列、磁盘I/O统计、网络I/O统计、内存页处理和进程信息。Nmon 也提供了一个图形化的工具。</p>
<p>要运行 nmon，你可以在命令行中启动它，然后选择要监控的子系统，这些子系统都对应有一个快捷键，例如输入 c 可查看 CPU 信息，m用于查看内存，d用来查看磁盘信息等，你也可以使用 -f 命令将 nmon 的执行结果保存到一个 CSV 文件中，便于日后分析。在每日的监控工作中，我发现 nmon 是我最常用的工具。</p>
<p>nmon不是Linux系统自带的命令，需要进行安装，安装命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nmon</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210728223221.png" alt=""></p>
<h3 id="8-ps-pstree"><a href="#8-ps-pstree" class="headerlink" title="(8) ps|pstree"></a>(8) <a href="https://www.linuxcool.com/ps">ps</a>|<a href="https://www.linuxcool.com/pstree">pstree</a></h3><p>ps 和 pstree 命令是 Linux 系统管理员最好的朋友，都可以用来列表正在运行的所有进程。ps 告诉你每个进程占用的内存和 CPU 处理时间，而 pstree 显示的信息没那么详细，但它以树形结构显示进程之间的依赖关系，包括子进程信息。一旦发现某个进程有问题，你可以使用 kill 来杀掉它。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> pid  <span class="comment"># kill a process</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210728223655.png" alt=""></p>
<h3 id="9-sar-系统运行状态统计"><a href="#9-sar-系统运行状态统计" class="headerlink" title="(9) sar-系统运行状态统计"></a>(9) <a href="https://www.linuxcool.com/sar">sar</a>-系统运行状态统计</h3><p>该命令号称系统监控的瑞士军刀，目前Linux上最为全面的系统性能分析工具之一，可以从14个大方面对系统的活动进行报告，包括文件的读写情况、系统调用的使用情况、串口、CPU效率、内存使用状况、进程活动及IPC有关的活动等，使用也是较为复杂。</p>
<p>sar 默认显示的是从零点开始每隔十分钟到现在的CPU情况，如果是查看之前的报告，需要指定日志报告，sar -f /var/log/sysstat/sa25 。</p>
<p>解释下各列的指标：</p>
<p>%user 用户模式下消耗的CPU时间的比例；</p>
<p>%nice 通过nice改变了进程调度优先级的进程，在用户模式下消耗的CPU时间的比例</p>
<p>%system 系统模式下消耗的CPU时间的比例；</p>
<p>%iowait CPU等待磁盘I/O导致空闲状态消耗的时间比例；</p>
<p>%steal 利用Xen等操作系统虚拟化技术，等待其它虚拟CPU计算占用的时间比例；</p>
<p>%idle CPU空闲时间比例；</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210728223935.png" alt=""></p>
<ul>
<li><p>查看内存使用情况：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sar -r</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210728224316.png" alt=""></p>
</li>
<li><p>查看带宽</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sar -n DEV</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210728224423.png" alt=""></p>
</li>
<li><p>tips</p>
<blockquote>
<p>要判断系统瓶颈问题，有时需几个 sar 命令选项结合起来；</p>
<p>怀疑CPU存在瓶颈，可用 sar -u 和 sar -q 等来查看</p>
<p>怀疑内存存在瓶颈，可用sar -B、sar -r 和 sar -W 等来查看</p>
<p>怀疑I/O存在瓶颈，可用 sar -b、sar -u 和 sar -d 等来查看</p>
</blockquote>
</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/pjx827480541/article/details/104457511">https://blog.csdn.net/pjx827480541/article/details/104457511</a></li>
<li><a href="https://blog.csdn.net/szchtx/article/details/38455385">Linux查看机器负载</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1533965">https://cloud.tencent.com/developer/article/1533965</a></li>
<li><a href="https://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316399.html">https://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316399.html</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习和机器学习的区别？</title>
    <url>/machine-learning-different-from-deep-learning/</url>
    <content><![CDATA[<p>关于深度学习和机器学习，他们有如下几点不同之处：</p>
<h3 id="1-特征提取方面"><a href="#1-特征提取方面" class="headerlink" title="1 特征提取方面"></a>1 特征提取方面</h3><ul>
<li>机器学习必须通过人工特征提取之后，才能进行后续的识别等操作</li>
<li>深度学习则不同，深度学习深刻网络框架可以不需要人工进行特征提取，而是通过网络自动进行提取，那么深度学习就显得更加强大了</li>
</ul>
<h3 id="2-数据量和计算性能方面"><a href="#2-数据量和计算性能方面" class="headerlink" title="2 数据量和计算性能方面"></a>2 数据量和计算性能方面</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191121140526768.jpg" alt="数据量和计算性能方面">   </p>
<h3 id="算法代表"><a href="#算法代表" class="headerlink" title="算法代表"></a>算法代表</h3><p>机器学习：</p>
<ul>
<li>素朴贝叶斯</li>
<li>决策树<br>…   </li>
</ul>
<p>深度学习</p>
<ul>
<li>神经网络</li>
</ul>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>一些比较优秀的机器学习算法的汇总</title>
    <url>/machine-learning-project/</url>
    <content><![CDATA[<p><a href="https://github.com/crazyjums/awesome-ml-summary/blob/master/README.en.MD">English Version</a>   </p>
<h1 id="机器学习项目"><a href="#机器学习项目" class="headerlink" title="机器学习项目"></a><center>机器学习项目</center></h1><h2 id="1-预测"><a href="#1-预测" class="headerlink" title="1 预测"></a>1 预测</h2><h3 id="1-1-时间序列预测"><a href="#1-1-时间序列预测" class="headerlink" title="1.1 时间序列预测"></a>1.1 时间序列预测</h3><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目介绍</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/crazyjums/LSTM">LSTM</a></td>
<td>使用LSTM神经网络进行时间序列数据预测分析, 基于Tensorflow框架、Kerase接口开发网络模型</td>
</tr>
<tr>
<td><a href="https://github.com/VivekPa/AIAlpha">AIAlpha</a></td>
<td>该项目是堆叠神经网络预测股票回报的高级实现。</td>
</tr>
<tr>
<td><a href="https://github.com/634671436/Air_Pollution_Forcast_Beijing">Air_Pollution_Forcast_Beijing</a></td>
<td>基于Keras的LSTM多变量时间序列预测</td>
</tr>
<tr>
<td><a href="https://github.com/jeurtr/TimeSeries_Predict">TimeSeries_Predict</a></td>
<td>客流量时间序列预测</td>
</tr>
<tr>
<td><a href="https://github.com/wikke/TimeSeriesPrediction">TimeSeriesPrediction</a></td>
<td>洗发水、股票预测等</td>
</tr>
<tr>
<td><a href="https://github.com/huang027/ARIMA">ARIMA</a></td>
<td>基于<code>ARIMA</code>的预测</td>
</tr>
<tr>
<td><a href="https://github.com/yangwohenmai/TimeSeriesForecasting">TimeSeriesForecasting</a></td>
<td>基于统计学的时间序列预测</td>
</tr>
<tr>
<td><a href="https://github.com/Clearfk/lstm-rnn-stock-predict">lstm-rnn-stock-predict</a></td>
<td>这是一个基于LSTM-RNN算法的线上金融股票价格走势预测的小项目，使用tensorflow框架实现。</td>
</tr>
<tr>
<td><a href="https://github.com/coder17173/TripleExponentialSmoothing">TripleExponentialSmoothing</a></td>
<td>三阶指数平滑算法，对于带有趋势性及周期性的时间序列有不错的预测效果。</td>
</tr>
<tr>
<td><a href="https://github.com/mufeiandroid/ML_stock_qt">ML_stock_qt</a></td>
<td>基于机器学习算法的A股股票走势预测</td>
</tr>
<tr>
<td><a href="https://github.com/ZhouM1118/intelligentler-bp-ga">intelligentler-bp-ga</a></td>
<td>基于BP算法和遗传算法建立武汉市空气质量指数的预测模型，以武汉市8个监测站的1年的空气质量数据为训练数据进行神经网络的建模，近一个月的数据作为测试数据进行模型的准确性测试，平均准确率在75%左右。</td>
</tr>
<tr>
<td><a href="https://github.com/xiaoluchaotian/stock_simple_mlp_algorithm">stock_simple_mlp_algorithm</a></td>
<td>一个简单的股票预测算法，利用过去5天的涨幅，以及十余项市值因子和财务因子进行训练学习。</td>
</tr>
<tr>
<td><a href="https://github.com/maxiaozte/timeSeriesForecasting">timeSeriesForecasting</a></td>
<td>时间序列预测算法总结与整理</td>
</tr>
<tr>
<td><a href="https://github.com/tudoulei/forest-cover-type-prediction">forest-cover-type-prediction</a></td>
<td>kaggle比赛森林覆盖类型预测算法</td>
</tr>
<tr>
<td><a href="https://github.com/hangtongluo/ctrip001">ctrip001</a></td>
<td>机票航班延误预测算法大赛</td>
</tr>
<tr>
<td><a href="https://github.com/andinsbing/Analysis-of-College-Graduates-Employment-Orientation">Analysis-of-College-Graduates-Employment-Orientation</a></td>
<td>本项目旨在建立一个基于大数据处理的大学生就业方向分析预测系统，通过爬虫技术获取各大公司和著名招聘网站的大量招聘信息，然后将获取的数据进行清洗分类后储存在数据库中，最后从大学生的就业角度出发，通过算法分析数据，建立一个帮助大学生明确就业方向与社会需求的平台</td>
</tr>
<tr>
<td><a href="https://github.com/nik-niming/ARIMA">ARIMA</a></td>
<td>时序数据预测算法ARIMA Demo,基于航空乘客月度数据集</td>
</tr>
</tbody></table>
<h3 id="1-2-预测算法"><a href="#1-2-预测算法" class="headerlink" title="1.2 预测算法"></a>1.2 预测算法</h3><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目介绍</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/xiaoming-qxm/JData">JData</a></td>
<td>京东JData算法大赛-高潜用户购买意向预测入门程序</td>
</tr>
<tr>
<td><a href="https://github.com/HongZhaoHua/jstarcraft-rns">jstarcraft-rns</a></td>
<td>专注于解决推荐领域与搜索领域的两个核心问题:排序预测(Ranking)和评分预测(Rating). 为相关领域的研发人员提供完整的通用设计与参考实现. 涵盖了70多种排序预测与评分预测算法,是最快最全的Java推荐与搜索引擎.</td>
</tr>
<tr>
<td><a href="https://github.com/onion1003/JData_2018">JData_2018</a></td>
<td>京东2018算法大赛 如期而至-用户购买时间预测</td>
</tr>
</tbody></table>
<h3 id="1-3-推荐系统"><a href="#1-3-推荐系统" class="headerlink" title="1.3 推荐系统"></a>1.3 推荐系统</h3><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目介绍</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/crazyjums/RecommenderSystem-Paper">RecommenderSystem-Paper</a></td>
<td>For the convenience of reading, I collect some basic and important papers about recommender system.</td>
</tr>
<tr>
<td><a href="https://github.com/apachecn/RecommenderSystems">RecommenderSystems</a></td>
<td>介绍推荐系统基本知识，相关算法以及实现。</td>
</tr>
<tr>
<td><a href="https://github.com/LABELNET/YuanNews">YuanNews</a></td>
<td>基于用户兴趣标签的新闻推荐系统</td>
</tr>
<tr>
<td><a href="https://github.com/zhaozhiyong19890102/Recommender-System">Recommender-System</a></td>
<td>推荐系统综述</td>
</tr>
<tr>
<td><a href="https://github.com/jasonTangxd/recommendSys">recommendSys</a></td>
<td>实时推荐和离线推荐</td>
</tr>
</tbody></table>
<h3 id="机器学习相关文档"><a href="#机器学习相关文档" class="headerlink" title="机器学习相关文档"></a>机器学习相关文档</h3><table>
<thead>
<tr>
<th>项目名称</th>
<th>项目介绍</th>
<th>GitHub</th>
<th>官网</th>
</tr>
</thead>
<tbody><tr>
<td>numpy-cn</td>
<td><code>Numpy</code>教程中文版，</td>
<td><a href="https://github.com/teadocs/numpy-cn">numpy-cn</a></td>
<td><a href="https://www.numpy.org.cn/">numpy-cn</a></td>
</tr>
<tr>
<td>pandas-cn</td>
<td><code>pandas</code>教程中文版</td>
<td><a href="https://github.com/teadocs/pandas-cn">pandas-cn</a></td>
<td><a href="https://www.pypandas.cn/">pandas-cn</a></td>
</tr>
<tr>
<td>matplotlib-cn</td>
<td><code>matplotlib</code>教程中文版</td>
<td><a href="https://www.matplotlib.org.cn/">matplotlib-cn</a></td>
<td><a href="https://www.matplotlib.org.cn/">matplotlib-cn</a></td>
</tr>
<tr>
<td>TensorFlow-cn</td>
<td><code>TensorFlow</code>教程中文版</td>
<td><a href="https://github.com/xitu/tensorflow-docs">TensorFlow-cn</a></td>
<td><a href="https://tensorflow.juejin.im/get_started/">TensorFlow-cn</a></td>
</tr>
<tr>
<td>sklearn-cn</td>
<td><code>sklearn</code>教程中文版</td>
<td><a href="https://github.com/apachecn/sklearn-doc-zh">sklearn-cn</a></td>
<td><a href="https://sklearn.apachecn.org/">sklearn-cn</a></td>
</tr>
</tbody></table>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>全面解析RNN,LSTM,Seq2Seq,Attention注意力机制</title>
    <url>/lstm-gru-rnn/</url>
    <content><![CDATA[<blockquote>
<p>本文将会使用大量的图片和公式推导通俗易懂地讲解RNN,LSTM,Seq2Seq和attention注意力机制（结合colah’s blog 和CS583），希望帮助初学者更好掌握且入门，若有已经掌握RNN，LSTM的读者自行跳过阅读即可,更详细的讲解在Seq2Seq,Attention那。</p>
</blockquote>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><ul>
<li><strong>RNN</strong></li>
<li><strong>LSTM</strong></li>
<li><strong>Seq2Seq</strong></li>
<li><strong>注意力机制</strong></li>
<li><strong>参考</strong></li>
</ul>
<h2 id="1-RNN（递归神经网络）"><a href="#1-RNN（递归神经网络）" class="headerlink" title="1 RNN（递归神经网络）"></a><strong>1 RNN（递归神经网络）</strong></h2><p>我们知道人类并不是从零开始思考东西，就像你读这篇文章的时候，你对每个字的理解都是建立在前几个字上面。你读完每个字后并不是直接丢弃然后又从零开始读下一个字，因为你的思想是具有持续性的，很多东西你要通过上下文才能理解。</p>
<p>然而传统的神经网络并不能做到持续记忆理解这一点，这是传统神经网络的主要缺点。举个例子，你打算使用传统的神经网络去对电影里每个时间点发生的事情进行分类的时候，传统的神经网络先让不能使用前一个事件去推理下一个事件。</p>
<p>RNN（递归神经网络）可以解决这个问题。他们是带有循环的神经网络，允许信息在其中保留。</p>
<p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-f6d91e2e4b918295023bb490793057ef_720w.jpg" alt="img"></p>
<p>在上图中，A代表神经网络主体，<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=X_t" alt="[公式]">)表示网络的输入，<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=h_t" alt="[公式]">表示网络的输出。循环结构允许信息从当前输出传递到下一次（下个时间点）的网络输入。</p>
<p>这些循环让递归神经网络看起来有点神秘，然而如果你再思考一下，RNN其实和传统的神经网络并没有太多的不同。RNN可以看作是一个网络的多次拷贝，其中每次网络的输出都是下一次的输入。我们可以思考一下我们如果展开这个循环结构会是什么样的：</p>
<p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-b0326c567c7ea8ccea0f66a9bcbee133_720w.jpg" alt="img"></p>
<p>这种像是链状的网络结构表明RNN和序列以及列表有着天然的联系，他们是处理这些序列数据的天然的神经网络。而且很明显我们可以看出，输入输出的序列是具有相同的时间长度的，其中的每一个权值都是共享的（不要被链式形状误导，本质上只有一个cell）。</p>
<p>在最近的几年，RNN在很多问题上都取得了成功：比如语音识别，语音模型，翻译，图片注释等等，但是RNN存在着梯度消息/爆炸以及对长期信息不敏感的问题，所以LSTM就被提出来了。现在很多问题的成功都必须归功于LSTM，它是递归神经网络的一种，它在许多的任务中表现都比普通的RNN更好，所以接下来我们来探索一下这个神奇的网络。</p>
<h2 id="2-LSTM"><a href="#2-LSTM" class="headerlink" title="2 LSTM"></a><strong>2 LSTM</strong></h2><h3 id="2-1-长期依赖问题"><a href="#2-1-长期依赖问题" class="headerlink" title="2.1 长期依赖问题"></a><strong>2.1 长期依赖问题</strong></h3><p>人们希望RNN可以将一些之前的信息连接到当前的任务中来，比如使用之前的视频帧来帮助理解当前帧。如果RNN可以做到将会非常有用。那实际RNN能做到吗？这要视情况而定。</p>
<p>有时候，我们只需要当前的信息来完成当前的任务。举个例子，一个语音模型试图基于之前的单词去预测下一个单词。如果我们尝试预测“the clouds are in the sky”，我们不需要太多的上下文信息——很明显最后一个单词会是sky。在像这样不需要太多的相关信息的场合下，RNN可以学习到之前使用的信息。</p>
<p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-e943f02c5db894b9d5003673fde883fd_720w.jpg" alt="img"></p>
<p>但是我们要注意，也有很多场景需要使用更多的上下文。当我们试图去预测“I grew up in France… I speak fluent French”这句话的最后一个单词，最近的信息会表明这应该是一种语言的名字，但是如果我们需要知道具体是哪一种语语言，我们需要France这个在句子中比较靠前的上下文信息，相关信息和需要预测的点的间隔很大的情况是经常发生的。</p>
<p>不幸的是，随着间隔变大，RNN变得无法连接到太前的信息。</p>
<p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/v2-b8207cc9e994f629c1fdafa1463cd27e_720w.jpg" alt="img"></p>
<p>理论上RNN完全可以处理这种长期依赖（long-term dependencies）的问题。人们可以通过小心地选择参数来解决这个问题。令人悲伤的是，实践表明RNN并不能很好地解决这个问题，Hochreiter (1991) [German] and Bengio, et al. (1994)发现了RNN为什么在这些问题上学习很困难的原因。</p>
<p>而LSTM则没有这个问题。</p>
<h3 id="2-2-LSTM网络"><a href="#2-2-LSTM网络" class="headerlink" title="2.2 LSTM网络"></a><strong>2.2 LSTM网络</strong></h3><p>长期短期记忆网络-通常叫做LSTM-是一种特殊结构的RNN，它能够学习长期依赖。它在大量的问题有惊人的效果，现在已经被广泛使用。</p>
<p>LSTM被明确设计来避免长期依赖问题，记住长时间的信息对LSTM来说只是常规操作，不像RNN那样费力不讨好。</p>
<p>所有的RNN都有不断重复网络本身的链式形式。在标准的RNN中，这个重复复制的模块只有一个非常简单的结果。例如一个tanh层：</p>
<p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/v2-113963429a1e8a55da3a2b5f567619de_720w.jpg" alt="img"></p>
<p>LSTM也有这样的链式结构，但是这个重复的模块和上面RNN重复的模块结构不同：LSTM并不是只是增加一个简单的神经网络层，而是四个，他们以一种特殊的形式进行交互：</p>
<p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-f22c8c19679af32a976c0a1d012e3361_720w.jpg" alt="img"></p>
<p>读者不需要担心看不懂，接下来我们将会一步步理解这个LSTM图。首先我们先了解一下图中的符号：</p>
<p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-e62577dc9d77f353c14940f244f38c41_720w.jpg" alt="img"></p>
<p>在上图中，每条线表示一个向量，从一个输出节点到其他节点的输入节点。粉红色的圆圈表示逐点式操作，就像向量加法。黄色的盒子是学习好的神经网络层。线条合代表联结，线条分叉则表示内容被复制到不同的地方。</p>
<h3 id="2-3-LSTM背后的核心思想"><a href="#2-3-LSTM背后的核心思想" class="headerlink" title="2.3 LSTM背后的核心思想"></a><strong>2.3 LSTM背后的核心思想</strong></h3><p>LSTM的核心之处就是它的cell state(神经元状态)，在下图中就是那条贯穿整个结果的水平线。这个cell state就像是一个传送带，他只有很小的线性作用，但却贯穿了整个链式结果。信息很容易就在这个传送带上流动但是状态却不会改变。cell state上的状态相当于长期记忆，而下面的<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=h_t" alt="[公式]">则代表短期记忆。</p>
<p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-2b145c5aee8def6d7522081767d59191_720w.jpg" alt="img"></p>
<p>LSTM有能力删除或者增加cell state中的信息，这一个机制是由被称为门限的结构精心设计的。</p>
<p>门限是一种让信息选择性通过的方式，它们是由sigmoid神经网络层和逐点相乘器做成的。</p>
<p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/v2-d160b6fdd11dba4d15675d55348c3d66_720w.png" alt="img"></p>
<p>sigmoid层输出0和1之间的数字来描述一个神经元有多少信息应该被通过。输出0表示这些信息全部不能通过，而输出1则表示让所有信息都通过。</p>
<p>一个LSTM有三个这样的门限，去保护和控制神经元的状态。</p>
<h3 id="2-4-一步步推导LSTM"><a href="#2-4-一步步推导LSTM" class="headerlink" title="2.4 一步步推导LSTM"></a><strong>2.4 一步步推导LSTM</strong></h3><p>LSTM的第一步就是决定什么信息应该被神经元遗忘。这是一个被称为“遗忘门层”的sigmod层组成。他输入<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=h_%7Bt-1%7D" alt="[公式]">)和<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=X_t" alt="[公式]">)（上一次的输出以及这轮的输入），然后在<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=C_%7Bt-1%7D" alt="[公式]">的每个神经元状态输出0和1之间的数字。同理1表示完全保留这些信息，0表示完全遗忘这个信息。</p>
<p>让我们再次回到一开始举的例子：根据之前的词语去预测下一个单词的语言模型。在这个问题中，cell state或许包括当前主语中的性别信息，所以我们可以使用正确的代词。而当我们看到一个新的主语（输入），我们会去遗忘之前的性别信息。我们使用下图中的公式计算我们的“遗忘系数”<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=f_t" alt="[公式]"></p>
<p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-5d4abda673fb23a704284d995543b397_720w.jpg" alt="img"></p>
<p>下一步就是决定我们要在cell state中保留什么信息。这包括两个部分。首先，一个被称为“输入门层”的sigmoid层会决定我们要更新的数值。然后一个tanh层生成一个新的候选数值<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=C_t%5E%EF%BD%9E" alt="[公式]">，它会被增加到cell state中。在下一步中，我们将会组合这两步去生成一个新的更新状态值。</p>
<p>在那个语言模型例子中，我们想给cell state增加主语的性别，来替换我们将要遗忘的旧的主语。</p>
<p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/v2-6f3cad9392530f19ca22f78efea9de92_720w.jpg" alt="img"></p>
<p>现在是时候去更新旧的神经元状态<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=C_%7Bt-1%7D" alt="[公式]">)到新的神经元状态<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=C_t" alt="[公式]">。之前我们已经决定了要做什么，下一步我们就去做。</p>
<p>我们给旧的状态乘一个遗忘系数<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=f_t" alt="[公式]">)，来遗忘掉我们之前决定要遗忘的信息，然后我们增加<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=i_t+%2A+C_t" alt="[公式]">。这是新的候选值，由我们想多大程度更新每个状态的值决定。</p>
<p>在语言模型中，就像上面描述的，这是我们实际上要丢弃之前主语的性别信息，增加新的主语的性别信息的地方。</p>
<p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-f8f689f92b88d144ab9d8f47d3364dad_720w.jpg" alt="img"></p>
<p>最后，我们需要决定我们要输出什么。这个输出是建立在我们的cell state的基础上，但是这里会有一个滤波器。首先，我们使用sigmoid层决定哪一部分的神经元状态需要被输出；然后我们让cell state经过tanh(让输出值变成-1到1之间)层并且乘上sigmod门限的输出，这样我们就只输出我们想要输出的。</p>
<p>对于那个语言模型的例子，当我们看到一个新的主语的时候，或许我们想输出相关动词的信息，因为动词是跟在主语后面的。例如，它或许要输出主语是单数还是复数的，然后我们就知道主语后动词的语态了。</p>
<h3 id="2-5-LSTM的一些变体"><a href="#2-5-LSTM的一些变体" class="headerlink" title="2.5 LSTM的一些变体"></a><strong>2.5 LSTM的一些变体</strong></h3><p>上面讲的都是一些常规的LSTM，但并不是所有的LSTM都是上面这种形式。实际上现在很多包含LSTM的论文都有小的差异，但是它值得一提。</p>
<p><strong><a href="https://zhuanlan.zhihu.com/p/135970560/[ftp://ftp.idsia.ch/pub/juergen/TimeCount-IJCNN2000.pdf](ftp://ftp.idsia.ch/pub/juergen/TimeCount-IJCNN2000.pdf)">Gers &amp; Schmidhuber (2000)</a></strong>引入了一个流行的LSTM变体，它增加了一个窥视孔连接。这意味着我们让门限层监视cell state的状态。</p>
<p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-e3e0ab13b034d6f52b693b99f7532673_720w.jpg" alt="img"></p>
<p>上图中给每一个门限都增加了窥视孔，但是有些论文只是给一部分的门限增加窥视孔，并不是全部都加上。</p>
<p>另外一个变体是使用组合遗忘和输入门，而不是分开决定哪些神经元需要遗忘信息，哪些需要增加新的信息，我们组合起来决定。我们只遗忘那些需要被放入新信息的状态，同样我们旨在旧信息被遗忘之后才输入新的信息。</p>
<p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-8e39e0e291ff9802a872e7771a2b7fa4_720w.jpg" alt="img"></p>
<p>一个更神奇的LSTM变体是门递归单元（也就是大家常说的GRU），它组合遗忘门和输入门为一个更新门，它合并了cell state和隐层状态，并且做了一些其他的改变。最终这个模型比标准的LSTM更简单，并且变得越来越流行。</p>
<p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-c310b7d10cb11b3cdf5860cea677e299_720w.jpg" alt="img"></p>
<p>这里只介绍了几个最有名的LSTM的变体，还有更多变体没有介绍，就像Yao, et al.(2015)深度门递归神经网络(Depth Gated RNNs)。这里也有一些处理长期依赖问题问题的完全不同的方法，就像Koutnik, et al(2014)提出的时钟机递归神经网络（Clockwork RNNs）。</p>
<h3 id="2-6-结论"><a href="#2-6-结论" class="headerlink" title="2.6 结论"></a><strong>2.6 结论</strong></h3><p>我们一开始提到人们使用RNN取得了卓越的成果，但其实本质上都是使用LSTM取得的，他们的确在多数任务上表现得更好。</p>
<p>写下来一系列等式以后，LSTM看起来挺吓人，但在文中一步步解释后它变得可以理解了。我们不禁想问：是否有比LSTM更好的模型？学者一致认为：那就是attention注意力机制。核心观点就是让RNN每一步都监视一个更大的信息集合并从中挑选信息。例如：如果你使用RNN去为一个图像生成注释，它会从图像中挑选一部分去预测输出的单词。接下来在讲解attention之前，我们会先聊聊Seq2Seq。</p>
<h2 id="3-Seq2Seq"><a href="#3-Seq2Seq" class="headerlink" title="3 Seq2Seq"></a><strong>3 Seq2Seq</strong></h2><p>我将会结合一个机器翻译的例子来给大家形象地介绍Seq2Seq。</p>
<p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-e16b362762cedcfd7da43cc8453dc158_720w.jpg" alt="img"></p>
<p>在这个例子中，我们试图将英语转换为德语，这里要注意这里是一个多对多的模型，而且输入和输出的长度都不固定。</p>
<h3 id="3-1-准备数据"><a href="#3-1-准备数据" class="headerlink" title="3.1 准备数据"></a><strong>3.1 准备数据</strong></h3><p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-f2054949f0b8b253907df10d4ab82fb0_720w.jpg" alt="img"></p>
<p>因为只是做一个例子，所以我们在<a href="https://link.zhihu.com/?target=http%3A//www.manythings.org/anki/">http://www.manythings.org/anki/</a>这个网站选一个小规模的数据来训练一个简单的Seq2Seq即可，我们可以看到左边是英语句子，右边则是翻译的德语句子。</p>
<p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-f6ce5b60a450e4cf4a19a640c6022efc_720w.jpg" alt="img"></p>
<p>我们先进行一下预处理，比如把大写字母变成小写，把标点符号去掉等等。</p>
<p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-a7e3592a72ba04e85cf99ed17ffd5645_720w.jpg" alt="img"></p>
<p>预处理完之后我们要做tokenization，即把一句话分成很多个单词或者字符，这里要注意做tokenization的时候要用两个tokenization，英语用一个，德语用一个；tokenization之后要建立两个字典，一个英语字典，一个德语字典，后面会解释我为什么要这么做。</p>
<p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-7c8e857a458ba06a87db6953c6a0f697_720w.jpg" alt="img"></p>
<p>tokenization可以是char-level，也可以是word-level，顾名思义前者就是会把一句话分为一个个字符，而后者则会把一句话分成一个个单词，为了简单方便，我们使用char-level来说明。</p>
<p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-0ead3b1abd0ba397554f4b9f872312f4_720w.jpg" alt="img"></p>
<p>经过tokenization之后一句话变成了一个list，每个元素都是一个字符，但实际中一般都使用word-level，因为他们的数据集足够大，这在之后会解释。</p>
<p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-894740bcc20244a4ebc930c5f3f5fc3f_720w.jpg" alt="img"></p>
<p>我们前面说了tokenization要用两个不同的字典，这是因为不同的语言它的字母表不同，无法进行统一的映射，如上图所示。</p>
<p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-cecb10d70bb98fe0cce4ef0d7f0e54cf_720w.jpg" alt="img"></p>
<p>如果你使用word-level，那就更有必要使用两个不同的字典，比如很多德语单词在英语字典中是找不到的，而且不同语言分词方便也是不一样的。</p>
<p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-f3cbee2f32494e4ced4d1e02e83b669c_720w.jpg" alt="img"></p>
<p>左边是英语字典，包括26个字母和一个空格符，德语字典删去了一些不常用字母后再加入空格符，另外可以发现德语字典多了一个起始符和一个终止符，这里用什么都行，只要别跟字典字符冲突就可以，后面大家就知道这两个符号的作用。</p>
<p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-31490bde1eb57e2264879d43200832b4_720w.jpg" alt="img"></p>
<p>tokenization结束之后每句话就变成了一个字符字典，然后原字符经过字典映射后就变成了下面这个序列，对于德语也是一样。</p>
<p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-72d1547efd4b5f44801a0cc6fd42fe79_720w.jpg" alt="img"></p>
<p>接下来我们还可以把这些数字变成One-hot向量表示，黑色表示1，白色表示0。经过One-hot每个字符就变成了一个向量，每句话就变成了一个矩阵，这就是我们的输入，现在数组准备好了，我们来搭建我们的Seq2Seq模型。</p>
<h3 id="3-2-搭建并训练Seq2Seq模型"><a href="#3-2-搭建并训练Seq2Seq模型" class="headerlink" title="3.2 搭建并训练Seq2Seq模型"></a><strong>3.2 搭建并训练Seq2Seq模型</strong></h3><p>Seq2Seq有一个编码器和一个解码器，编码器一般是LSTM或者其他模型用于提取特征，它的最后一个输出就是从这句话得出的最后的特征，而其他的隐层输出都被丢弃。</p>
<p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-fa481324e8de44a7cbaba0bf4f829820_720w.jpg" alt="img"></p>
<p>编码器提取特征之后就到了解码器，解码器靠编码器最后输出的特征也就是<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%28h%2Cc%29" alt="[公式]">来知道这句话是”go away”，这里要强调一下Decoder的初始状态就是Encoder的最后一个状态，现在Decoder开始输出德语字母，这里Decoder也是一个LSTM模型，他每次接受一个输入然后输出下一个字母的概率，第一个输入必须是起始符，这就是我们为什么要在德语字典中要加入起始符的原因。Decoder会输出一个概率分布p向量，起始符后面的第一个字母是m，我们将m做一个one-hot编码作为y标签，用标签y和预测p做一个CrossEntropy来作为我们的损失函数优化，梯度从Decoder传回Encoder。</p>
<p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-456ac28a08fd696ae5b16d853ce8fe0d_720w.jpg" alt="img"></p>
<p>然后输入是两个字符，起始符和m，下一个字母是a，我们将a做one-hot编码作为y标签，将它与我们输出的概率分布做一个CrossEntropy来作为损失函数，一直进行这个循环，应该就很好理解了。</p>
<p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-0285b36667a84460d05485d92b22ca88_720w.jpg" alt="img"></p>
<p>最后一轮将整句德语作为输入，将停止符做标签y，再进行CrossEntropy，拿所有的英语和德语来训练我们的编码器和解码器，这就是我们的训练过程了。</p>
<p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-2ae2904095d5a5b53fb2c3b418282058_720w.jpg" alt="img"></p>
<p>总结一下，我们使用英语句子的one-hot矩阵作为encoder的输入，encoder网络由LSTM组成来提取特征，它的输出是最后一个状态<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=h" alt="[公式]">)和传送带<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=c" alt="[公式]">)，decoder网络的初始状态是<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%28h%2Cc%29" alt="[公式]">)，decoder网络的输入是德语句子，decoder输出当前状态<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=h%5E%60" alt="[公式]">`,然后全连接层输出下一个字符的预测，这样我们的训练阶段就结束了。</p>
<p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-1944794b64645d28a95d2cb2e85be95f_720w.jpg" alt="img"></p>
<h3 id="3-3-预测阶段"><a href="#3-3-预测阶段" class="headerlink" title="3.3 预测阶段"></a><strong>3.3 预测阶段</strong></h3><p>同样，我们先把句子输入到我们的Encoder里面，Encoder会输入最后状态<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%28h_0%2Cc_0%29" alt="[公式]">，作为这句话的特征送给Decoder。</p>
<p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/v2-b04b4e5aa671501918c6490c2c061c6e_720w.jpg" alt="img"></p>
<p><img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%28h_0%2Cc_0%29" alt="[公式]">作为Decoder的初始状态，这样解码器就知道这句话是go away，首先把起始符输入，有了新的状态解码器就会把状态更新为<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%28h_1%2Cc_1%29" alt="[公式]">并且预测下一个字符，decoder输出的是每个字符的概率值，我们可以根据这个概率值进行预测，比如我们可以选取概率值最大的字符，也可以对概率进行随机抽样，我可能会得到字符m，于是我把m记录下来。</p>
<p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-0885c1045a6203ce71e9d45f29ae569c_720w.jpg" alt="img"></p>
<p>现在状态是<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%28h_1%2Cc_1%29" alt="[公式]">)，把新生成的字符m作为LSTM的输入，接下来再更新状态为<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%28h_2%2Cc_2%29" alt="[公式]">,并且输出一个概率分布，根据概率分布抽样我们得到字符a，记录下字符a，并一直进行这个循环。</p>
<p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/v2-ab0a601a28bd791980a7e2590a7b4b56_720w.jpg" alt="img"></p>
<p>运行14轮了状态是<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%28h_%7B14%7D%2Cc_%7B14%7D%29" alt="[公式]">，再结合上一轮生成的字符e，根据decoder输出的概率分布抽样，我们抽到了终止符，一旦抽到了终止符，就终止文本生成，并返回记录下的字符串，德语也就被成功翻译了。</p>
<h3 id="3-4-总结"><a href="#3-4-总结" class="headerlink" title="3.4 总结"></a><strong>3.4 总结</strong></h3><p>Seq2Seq模型有一个encoder网络和一个Decoder网络，在我们的例子中encoder的输入是英语句子，每输入一个词RNN就会更新状态并记录下来，encoder最后一个状态就是这个句子的特征，并把之前的状态丢弃。把这个状态作为decoder的初始状态，初始化后decoder就知道这个句子了，首先把起始符作为decoder的输入，然后一步步更新，输出状态和概率分布预测下一个字符，再把预测的字符作为下一个输入，重复这个过程，最后直到预测终止符就返回输出的这个序列。</p>
<h3 id="3-5-如何提升？"><a href="#3-5-如何提升？" class="headerlink" title="3.5 如何提升？"></a><strong>3.5 如何提升？</strong></h3><p>我们的encoder和decoder都是LSTM，encoder把所有句子的特征压缩到最后一个状态，理想情况下encoder最后一个状态包含完整的信息，假如句子很长，那么句子有些信息就会被遗忘，那么Decoder就没有完整的句子信息，那decoder输出的德语句子就不完整。</p>
<p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-a937915c00b75b545bbb6cee598d4d9b_720w.jpg" alt="img"></p>
<p>一种简单方法就是使用双向LSTM，双向LSTM简单来说就是用两条链，从左到右这条链可能会遗忘最左边的信息，而从右往左的这条链可能会遗忘右边的信息，这样结合起来就不容易遗忘句子信息，这里要注意只是encoder用双向LSTM，decoder是单向LSTM，他要生成正确顺序的序列。</p>
<p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-fd186443cacf998d69a3d36052a17e18_720w.jpg" alt="img"></p>
<p>这次我们用的是char-level比较方便，但是最好还是使用word-level，因为用单词代替字母，序列就会短大概4.5倍，就不容易遗忘，但是用word-level需要大的数据集，得到的单词大概就是一万，one-hot之后向量的维度也就是一万，太大了，需要embedding进行降维，因为embedding参数很多，所以如果数据集不够很容易过拟合。</p>
<p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/v2-cf15fa6bce6b4fd06c09a1d6443fe206_720w.jpg" alt="img"></p>
<p>另外一种方法改进就是multi-Task learning，我们还可以多加入几个任务，比如让英语句子让他自己翻译成英语句子，这样encoder只有一个但是数据多了一倍，这样encoder就能被训练的更好，当然你还可以添加其他语言的任务，通过借助其他语言更好训练encoder，这样虽然decoder没有变得更好，但是因为encoder提取的更好最后效果也会变好。</p>
<p>当然还有一个方法就是使用注意力机制，这个对机器翻译提高作用很大，我们接下来就讲解这个注意力机制。</p>
<h2 id="4-注意力机制"><a href="#4-注意力机制" class="headerlink" title="4 注意力机制"></a><strong>4 注意力机制</strong></h2><p>我们知道Seq2Seq模型有一个缺点就是句子太长的话encoder会遗忘，那么decoder接受到的句子特征也就不完全，我们看一下下面这个图，纵轴BLUE是机器翻译的指标，横轴是句子的单词量，我们可以看出用了attention之后模型的性能大大提升。</p>
<p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-dc82591391379249e0e5f2cd6c5dc64f_720w.jpg" alt="img"></p>
<p>用了注意力机制，Decoder每次更新状态的时候都会再看一遍encoder所有状态，还会告诉decoder要更关注哪部分，这也是attention名字的由来。但是缺点就是计算量很大。</p>
<p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-707b8da8452d377f6604ee2f1e6b67d9_720w.jpg" alt="img"></p>
<h3 id="4-1-attention原理"><a href="#4-1-attention原理" class="headerlink" title="4.1 attention原理"></a><strong>4.1 attention原理</strong></h3><p>在encoder结束之后，attention和decoder同时工作，回忆一下，decoder的初始状态<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=s_0" alt="[公式]">)是encoder最后一个状态，不同于常规的Seq2Seq，encoder所有状态都要保留，这里需要计算<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=s_0" alt="[公式]">)与每个状态的相关性，我使用<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha_i+%3D+aligh%28h_i%2Cs_0%29" alt="[公式]">)这个公式表示计算两者相关性，把结果即为<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha_i" alt="[公式]">)，记做Weight，encoder有m个状态，所以一共有m个<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha" alt="[公式]">，这里所有的值都是介于0和1的实数，全部加起来为1。</p>
<p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/v2-f22774a0c56768176c88955405a0f642_720w.jpg" alt="img"></p>
<p>下面看一下怎么计算这个相似性。第一种方法是把<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=h_i" alt="[公式]">)和<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=S_o" alt="[公式]">)做concat得到更高的向量，然后求矩阵W与这个向量的乘积，得到一个向量，然后再将tanh作用于向量每一个元素，将他压到-1和1之间，最后计算向量V与刚才计算出来的向量的内积，这里的向量V和矩阵W都是参数，需要从训练数据里学习，算出m个<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha" alt="[公式]">)后，需要对他们做一个softmax变换，把输出结果记做<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha_1" alt="[公式]">)到<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha_m" alt="[公式]">，因为是softmax输出，所以他们都大于0相加为1，这是第一篇attention论文提出计算的方法，往后有很多其他计算的方法，我们来介绍一种更常用的方法。</p>
<p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-098bee41cda1fae3ec8d39e6a5726f98_720w.jpg" alt="img"></p>
<p>输入还是<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=h_i" alt="[公式]">)和<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=S_0" alt="[公式]">)，第一步是分别使用两个参数矩阵<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=W_k" alt="[公式]">)，<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=W_q" alt="[公式]">)做线性变换，得到<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=k_i" alt="[公式]">)和<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=q_0" alt="[公式]">)这两个向量，这两个参数矩阵要从训练数据中学习。第二步是计算<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=k_i" alt="[公式]">)与<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=q_0" alt="[公式]">)的内积，由于有m个K向量，所以得到L个<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha_i" alt="[公式]">)。第三步就是对这些值做一个softmax变换，<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha_1" alt="[公式]">)到<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha_m" alt="[公式]">，因为是softmax输出，所以他们都大于0相加为1。这种计算方法被Transformer模型采用，Transformer模型是当前很多nlp问题采用的先进模型。</p>
<p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/v2-b1d288f2fee3d112e5553ba789ed16da_720w.jpg" alt="img"></p>
<p>刚才讲了两种方法来计算<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=h_i" alt="[公式]">)和<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=S_0" alt="[公式]">)的相关性，现在我们得到了m个相关性<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha" alt="[公式]">)，每个<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha" alt="[公式]">)对应每个状态<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=h_i" alt="[公式]">)，有了这些权重<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha" alt="[公式]">我们可以对m个状态计算加权平均，得到一个Context vector <img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=C_0" alt="[公式]">。每一个Context vector都会对应一个decoder状态<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=s_i" alt="[公式]"></p>
<p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-845398014cd4b79e3a3b6cb0914c4e91_720w.jpg" alt="img"></p>
<p>接下来我们来看一下decoder是怎么计算新的状态的。我们来回顾一下，假如不用attention，我们是这样更新状态的，新的状态<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=S_1" alt="[公式]">)是旧状态<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=S_0" alt="[公式]">)与新输入<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=X_1%5E%60" alt="[公式]">`的函数，看一下下图左边的公式，将两者做concat，然后乘上权重矩阵加上偏置b，最后通过tanh就是我们的新状态，也就是说状态的更新仅仅是根据上一个状态，并不会看encoder的状态。用attention的话更新状态还要用到我们计算出的Context vector <img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=C_0" alt="[公式]">，把三个参数一起做concat后更新。</p>
<p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-791c535e2ab9fb17415f735bf0ddadf1_720w.jpg" alt="img"></p>
<p>回忆一下，<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=C_0" alt="[公式]">)是所有encoder状态<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=h_i" alt="[公式]">)的加权平均，所以<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=C_0" alt="[公式]">)知道输入<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=X_1" alt="[公式]">)到<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=X_m" alt="[公式]">)的完整信息，decoder新的状态<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=S_1" alt="[公式]">)依赖于<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=C_0" alt="[公式]">，这样RNN遗忘的问题就解决了。下一步则是计算context vector <img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=C_1" alt="[公式]">)，跟之前一样，先计算权重<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha_i" alt="[公式]">)，这里是计算<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=S_1" alt="[公式]">)跟之前encoder所有状态的相关性，得到了m个<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha" alt="[公式]">)，注意一下这里的权重也是要更新的，上一轮算的是跟<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=s_0" alt="[公式]">)的相关性现在算的是跟<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=S_1" alt="[公式]">)的相关性，这样就可以通过加权平均计算出新的<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=C_1" alt="[公式]">。</p>
<p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/v2-7e7a882f89f155ebed2953fecaa9fa5e_720w.jpg" alt="img"></p>
<p>Decoder接受新的输入<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=X_2" alt="[公式]">，还是用那个公式计算出新状态，然后一直循环下去直到结束。</p>
<p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-c00b6408124f4f5f55969c161acba423_720w.jpg" alt="img"></p>
<p>我们知道在这个过程中我们会计算出很多权重<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha_i" alt="[公式]">)，我们思考一下我们究竟计算了多少个<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha" alt="[公式]">?想要计算出一个context vector<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=C_j" alt="[公式]">)，我们要计算出m个相似性权重<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha" alt="[公式]">，所以每轮更新都需要计算m个权重，假如一共有t个state，那么一共就要计算m×t个权重，也就是encoder和decoder数量的乘积。attention为了不遗忘，代价就是高数量级的计算。</p>
<p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-10014a64ff992b46b67f82ad9df8fdbc_720w.jpg" alt="img"></p>
<h3 id="4-2-权重的实际意义"><a href="#4-2-权重的实际意义" class="headerlink" title="4.2 权重的实际意义"></a><strong>4.2 权重<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha" alt="[公式]">的实际意义</strong></h3><p>这张图下面是encoder，上面是decoder，attention会把decoder所有状态与encoder所有状态计算相似性，也就是<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha" alt="[公式]">).在这张图中每条线就对应一个<img src= "/img/loading.gif" data-src="https://www.zhihu.com/equation?tex=%5Calpha" alt="[公式]">，线越粗说明相关性越高。</p>
<p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/v2-9739f4ddbc3516519c6ce6dfa7bf319a_720w.jpg" alt="img"></p>
<p>比如下面，法语中的zone就是英语的Area，所以两者的线就很粗。</p>
<p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-2aa7a0aca4d473ff81a8ff6bb5f75659_720w.jpg" alt="img"></p>
<h3 id="4-3-总结"><a href="#4-3-总结" class="headerlink" title="4.3 总结"></a><strong>4.3 总结</strong></h3><p>这次仅仅是从机器翻译的角度介绍了attention的一个应用，attention在业界还是有很多应用的，比如self-attention,Transformer应用，希望以此为印子能够打开读者attention的大门。</p>
<h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5 参考"></a><strong>5 参考</strong></h2><p>1.colah’s blog<strong><a href="https://link.zhihu.com/?target=http%3A//colah.github.io/posts/2015-08-Understanding-LSTMs/">http://colah.github.io/posts/2015-08-Understanding-LSTMs/</a></strong></p>
<p>2.CS583 <strong><a href="https://link.zhihu.com/?target=https%3A//github.com/wangshusen/DeepLearning">https://github.com/wangshusen/DeepLearning</a></strong></p>
<h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p><a href="https://zhuanlan.zhihu.com/p/135970560">https://zhuanlan.zhihu.com/p/135970560</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>redis安装报错：zmalloc.h:50:31: 致命错误：jemalloc/jemalloc.h：没有那个文件或目录</title>
    <url>/make-redis-error/</url>
    <content><![CDATA[<h3 id="1-Linux下安装redis"><a href="#1-Linux下安装redis" class="headerlink" title="1 Linux下安装redis"></a>1 Linux下安装redis</h3><ol>
<li>wget <a href="http://download.redis.io/releases/redis-2.8.17.tar.gz">http://download.redis.io/releases/redis-2.8.17.tar.gz</a></li>
<li>tar xzf redis-2.8.17.tar.gz</li>
<li>cd redis-2.8.17.tar.gz</li>
<li>如果没有安装<code>gcc</code>,则使用该命令安装，<code>yum install gcc</code>,如果安装了<code>gcc</code>,执行第5步</li>
<li>make</li>
</ol>
<h3 id="2-错误"><a href="#2-错误" class="headerlink" title="2 错误"></a>2 错误</h3><p>在执行<code>make</code>命令时，出现下面的错误：<br><strong>zmalloc.h:50:31: 致命错误：jemalloc/jemalloc.h：没有那个文件或目录</strong>   </p>
<h3 id="3-原因分析"><a href="#3-原因分析" class="headerlink" title="3 原因分析"></a>3 原因分析</h3><blockquote>
<p>说关于分配器allocator， 如果有MALLOC  这个 环境变量， 会有用这个环境变量的 去建立Redis。<br>而且libc 并不是默认的 分配器， 默认的是 jemalloc, 因为 jemalloc 被证明 有更少的 fragmentation problems 比libc。<br>但是如果你又没有jemalloc 而只有 libc 当然 make 出错。 所以加这么一个参数。</p>
</blockquote>
<p>原文：<a href="https://blog.csdn.net/bugall/article/details/45914867">https://blog.csdn.net/bugall/article/details/45914867</a></p>
<h3 id="4-解决办法"><a href="#4-解决办法" class="headerlink" title="4 解决办法"></a>4 解决办法</h3><p>执行该命令：<code>make MALLOC=libc</code></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>python的matplotlib中给函数图像添加文字和箭头的注释</title>
    <url>/matplotlib-annotate/</url>
    <content><![CDATA[<h2 id="1-Annoate"><a href="#1-Annoate" class="headerlink" title="1 Annoate"></a>1 Annoate</h2><p>关于<a href="https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.annotate.html?highlight=annotate#matplotlib.pyplot.annotate">annotate</a>更多的参数解释可以查看官方文档的注释内容，写的很全面，这里给出几个常用的参数用法，能够更好的掌握<code>annotate</code>的用法。</p>
<blockquote>
<p>主要的参数：</p>
<p><strong>text</strong> : str</p>
<p>The text of the annotation. <em>s</em> is a deprecated synonym for this parameter.</p>
<p><strong>xy</strong> : (float, float)</p>
<p>The point <em>(x,y)</em> to annotate.</p>
<p><strong>xytext</strong> : (float, float), optional</p>
<p>The position <em>(x,y)</em> to place the text at. If <em>None</em>, defaults to <em>xy</em>.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">font = &#123;<span class="string">&#x27;family&#x27;</span>: <span class="string">&#x27;serif&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;darkred&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;weight&#x27;</span>: <span class="string">&#x27;normal&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;size&#x27;</span>: <span class="number">16</span>,</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">10000</span>)</span><br><span class="line">y = np.cos(<span class="number">2</span> * np.pi * x) * np.exp(-x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Damped exponential decay&#x27;</span>, fontdict=font)</span><br><span class="line">plt.text(<span class="number">2</span>, <span class="number">0.65</span>, <span class="string">r&#x27;$\cos(2 \pi t) \exp(-t)$&#x27;</span>, fontdict=font)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;time (s)&#x27;</span>, fontdict=font)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;voltage (mV)&#x27;</span>, fontdict=font)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tweak spacing to prevent clipping of ylabel</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.15</span>)</span><br><span class="line">plt.annotate(s=<span class="string">&quot;matplotlib annotate&quot;</span>, xy=(<span class="number">0.46</span>, -<span class="number">0.617</span>), xytext=(<span class="number">0.8</span>, -<span class="number">0.5</span>), arrowprops=&#123;<span class="string">&quot;arrowstyle&quot;</span>: <span class="string">&quot;-&gt;&quot;</span>&#125;, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>最终结果如下：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pltanno.png" alt="result"></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>教你如何用matplotlib画动态函数</title>
    <url>/matplotlib-draw-a-dymatic-func/</url>
    <content><![CDATA[<h3 id="1-直接上代码"><a href="#1-直接上代码" class="headerlink" title="1 直接上代码"></a>1 直接上代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> animation</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">fig,ax = plt.subplots()</span><br><span class="line">x = np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">0.01</span>)</span><br><span class="line">y, = ax.plot(x, np.sin(x))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">animate</span>(<span class="params">i</span>):</span></span><br><span class="line">    y.set_ydata(np.sin(x+i/<span class="number">10</span>))</span><br><span class="line">    <span class="keyword">return</span> y,</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>():</span></span><br><span class="line">    y.set_ydata(np.sin(x))</span><br><span class="line">    <span class="keyword">return</span> y,</span><br><span class="line">ani = animation.FuncAnimation(fig=fig,func=animate,init_func=init,interval=<span class="number">20</span>,blit=<span class="literal">False</span>,frames=<span class="number">100</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="2-效果"><a href="#2-效果" class="headerlink" title="2 效果"></a>2 效果</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/gif_1.gif" alt="result"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>根据给定的x和y的list值，如何利用matplotlib画曲线图？</title>
    <url>/matplotlib-draw-x-and-y/</url>
    <content><![CDATA[<h3 id="1-直接上代码："><a href="#1-直接上代码：" class="headerlink" title="1 直接上代码："></a>1 直接上代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">171</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">174</span>]</span><br><span class="line">y = [<span class="number">0.40080336</span>, <span class="number">0.18122306</span>, <span class="number">0.11608378</span>, <span class="number">0.085246064</span>, <span class="number">0.067357346</span>, <span class="number">0.05584076</span>, <span class="number">0.048002534</span>, <span class="number">0.042525064</span>, <span class="number">0.038574938</span>, <span class="number">0.035621416</span>, <span class="number">0.03338204</span>, <span class="number">0.031647287</span>, <span class="number">0.030285057</span>, <span class="number">0.029168924</span>, <span class="number">0.028247986</span>, <span class="number">0.027445659</span>, <span class="number">0.026728</span>, <span class="number">0.02609317</span>, <span class="number">0.025506902</span>, <span class="number">0.024962617</span>, <span class="number">0.024447303</span>, <span class="number">0.023959577</span>, <span class="number">0.023498517</span>, <span class="number">0.023054505</span>, <span class="number">0.022625549</span>, <span class="number">0.022211162</span>, <span class="number">0.021810282</span>, <span class="number">0.021432228</span>, <span class="number">0.021063045</span>, <span class="number">0.020712497</span>, <span class="number">0.020360101</span>, <span class="number">0.020022878</span>, <span class="number">0.019694053</span>, <span class="number">0.019373357</span>, <span class="number">0.01906368</span>, <span class="number">0.018753063</span>, <span class="number">0.018451815</span>, <span class="number">0.018151788</span>, <span class="number">0.017863901</span>, <span class="number">0.01758589</span>, <span class="number">0.017315051</span>, <span class="number">0.017052641</span>, <span class="number">0.0167941</span>, <span class="number">0.016545597</span>, <span class="number">0.016304683</span>, <span class="number">0.016069638</span>, <span class="number">0.015843071</span>, <span class="number">0.015622776</span>, <span class="number">0.015408098</span>, <span class="number">0.015201467</span>, <span class="number">0.014999273</span>, <span class="number">0.014799738</span>, <span class="number">0.014607553</span>, <span class="number">0.014421209</span>, <span class="number">0.014237016</span>, <span class="number">0.01405996</span>, <span class="number">0.013889065</span>, <span class="number">0.01372264</span>, <span class="number">0.013561665</span>, <span class="number">0.013405993</span>, <span class="number">0.013255149</span>, <span class="number">0.01310858</span>, <span class="number">0.012966299</span>, <span class="number">0.012828781</span>, <span class="number">0.012695071</span>, <span class="number">0.012564927</span>, <span class="number">0.012438651</span>, <span class="number">0.012316017</span>, <span class="number">0.0121963</span>, <span class="number">0.012079288</span>, <span class="number">0.011965559</span>, <span class="number">0.011855269</span>, <span class="number">0.011747791</span>, <span class="number">0.011642111</span>, <span class="number">0.011539488</span>, <span class="number">0.011439635</span>, <span class="number">0.011342728</span>, <span class="number">0.011248277</span>, <span class="number">0.011154905</span>, <span class="number">0.011062986</span>, <span class="number">0.010971966</span>, <span class="number">0.010883417</span>, <span class="number">0.010797163</span>, <span class="number">0.01071215</span>, <span class="number">0.010629218</span>, <span class="number">0.010548329</span>, <span class="number">0.010469904</span>, <span class="number">0.010393094</span>, <span class="number">0.010317826</span>, <span class="number">0.010242518</span>, <span class="number">0.010169022</span>, <span class="number">0.010097408</span>, <span class="number">0.010027456</span>, <span class="number">0.0099592498</span>, <span class="number">0.0098925503</span>, <span class="number">0.0098261852</span>, <span class="number">0.0097613446</span>, <span class="number">0.0096979076</span>, <span class="number">0.0096345283</span>, <span class="number">0.0095726168</span>, <span class="number">0.0095119048</span>, <span class="number">0.0094521083</span>, <span class="number">0.0093936995</span>, <span class="number">0.0093365302</span>, <span class="number">0.0092802895</span>, <span class="number">0.0092249271</span>, <span class="number">0.0091704614</span>, <span class="number">0.009116183</span>, <span class="number">0.009063093</span>, <span class="number">0.0090111429</span>, <span class="number">0.0089596966</span>, <span class="number">0.0089076869</span>, <span class="number">0.0088565396</span>, <span class="number">0.0088040177</span>, <span class="number">0.008752685</span>, <span class="number">0.0087024905</span>, <span class="number">0.0086534182</span>, <span class="number">0.0086054057</span>, <span class="number">0.0085583208</span>, <span class="number">0.008511561</span>, <span class="number">0.0084649771</span>, <span class="number">0.0084193265</span>, <span class="number">0.0083744535</span>, <span class="number">0.0083293486</span>, <span class="number">0.0082851406</span>, <span class="number">0.0082418155</span>, <span class="number">0.0081992391</span>, <span class="number">0.0081575019</span>, <span class="number">0.0081166346</span>, <span class="number">0.0080769779</span>, <span class="number">0.0080379881</span>, <span class="number">0.0079997359</span>, <span class="number">0.0079620024</span>, <span class="number">0.0079244887</span>, <span class="number">0.0078876605</span>, <span class="number">0.0078516454</span>, <span class="number">0.007816419</span>, <span class="number">0.0077818092</span>, <span class="number">0.0077477931</span>, <span class="number">0.0077139996</span>, <span class="number">0.0076794531</span>, <span class="number">0.0076455404</span>, <span class="number">0.0076120589</span>, <span class="number">0.0075790412</span>, <span class="number">0.0075465697</span>, <span class="number">0.0075146239</span>, <span class="number">0.0074832183</span>, <span class="number">0.0074517592</span>, <span class="number">0.0074201203</span>, <span class="number">0.0073890584</span>, <span class="number">0.0073586018</span>, <span class="number">0.0073286104</span>, <span class="number">0.0072990893</span>, <span class="number">0.007270053</span>, <span class="number">0.007241149</span>, <span class="number">0.007211627</span>, <span class="number">0.0071825711</span>, <span class="number">0.0071540326</span>, <span class="number">0.0071259094</span>, <span class="number">0.0070982124</span>, <span class="number">0.007070926</span>, <span class="number">0.0070439801</span>, <span class="number">0.0070169987</span>, <span class="number">0.0069893743</span>, <span class="number">0.0069620134</span>, <span class="number">0.0069348374</span>, <span class="number">0.0069080386</span>, <span class="number">0.006881624</span>, <span class="number">0.0068555735</span>, <span class="number">0.0068298364</span>, <span class="number">0.0068039694</span>, <span class="number">0.0067774798</span>, <span class="number">0.0067512975</span>, <span class="number">0.0067254645</span>]</span><br><span class="line">data_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(x,y):</span><br><span class="line">    data_dict[i] = j</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;loss function&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;running times&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;loss value&quot;</span>)</span><br><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> data_dict.keys()]</span><br><span class="line">y = [i <span class="keyword">for</span> i <span class="keyword">in</span> data_dict.values()]</span><br><span class="line"><span class="comment"># print(x)</span></span><br><span class="line"><span class="comment"># print(y)</span></span><br><span class="line">plt.plot(x, y, label=<span class="string">&quot;loss&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="2-运行结果"><a href="#2-运行结果" class="headerlink" title="2 运行结果"></a>2 运行结果</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200212231627909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNTIxMTg0,size_16,color_FFFFFF,t_70" alt=""></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>matplotlib基本用法介绍</title>
    <url>/matplotlib-usage/</url>
    <content><![CDATA[<h1 id="0-代码import的包"><a href="#0-代码import的包" class="headerlink" title="0 代码import的包"></a>0 代码import的包</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.pyplot <span class="keyword">import</span> savefig</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> statsmodels.graphics.tsaplots <span class="keyword">import</span> plot_acf</span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gs</span><br></pre></td></tr></table></figure>

<h1 id="1-散点图"><a href="#1-散点图" class="headerlink" title="1 散点图"></a>1 散点图</h1><h2 id="1-1-normal-scatter"><a href="#1-1-normal-scatter" class="headerlink" title="1.1 normal scatter"></a>1.1 normal scatter</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scatter</span>():</span></span><br><span class="line">    x = np.random.randint(<span class="number">1</span>,<span class="number">20</span>,<span class="number">10</span>)</span><br><span class="line">    y = np.random.randint(<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">    plt.scatter(x,y)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;x values&quot;</span>) <span class="comment"># 设置x轴的显示</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;y values&quot;</span>) <span class="comment"># 设置y轴的显示</span></span><br><span class="line">    plt.title(<span class="string">&quot;scatter test&quot;</span>) <span class="comment">#设置标题</span></span><br><span class="line">    savefig(<span class="string">&quot;img/scatter.png&quot;</span>) <span class="comment">#保存图片  该语句必须放在plt.show()之前，否则会是空白</span></span><br><span class="line">    plt.show() <span class="comment">#显示</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/scatter.png" alt=""></p>
</blockquote>
<h2 id="1-2-add-a-colorbar"><a href="#1-2-add-a-colorbar" class="headerlink" title="1.2 add a colorbar"></a>1.2 add a colorbar</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scatter</span>():</span></span><br><span class="line">    x = np.random.randint(<span class="number">1</span>,<span class="number">80</span>,<span class="number">40</span>)</span><br><span class="line">    y = np.random.randint(<span class="number">1</span>,<span class="number">100</span>,<span class="number">40</span>)</span><br><span class="line">    plt.scatter(x,y,c=y,cmap=<span class="string">&quot;Spectral&quot;</span>)  <span class="comment"># ket code</span></span><br><span class="line">    plt.colorbar() <span class="comment"># key codde</span></span><br><span class="line">    plt.xlabel(<span class="string">&quot;x values&quot;</span>) <span class="comment"># 设置x轴的显示</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;y values&quot;</span>) <span class="comment"># 设置y轴的显示</span></span><br><span class="line">    plt.title(<span class="string">&quot;scatter with colorbar&quot;</span>) <span class="comment">#设置标题</span></span><br><span class="line">    savefig(<span class="string">&quot;img/scatter_colorbar.png&quot;</span>) <span class="comment">#保存图片  该语句必须放在plt.show()之前，否则会是空白</span></span><br><span class="line">    plt.show() <span class="comment">#显示</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/scatter_colorbar.png" alt=""></p>
</blockquote>
<h1 id="2-折线图"><a href="#2-折线图" class="headerlink" title="2 折线图"></a>2 折线图</h1><h2 id="2-1-draw-a-function"><a href="#2-1-draw-a-function" class="headerlink" title="2.1 draw a function"></a>2.1 draw a function</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line</span>():</span></span><br><span class="line">    x = np.arange(-<span class="number">5</span>,<span class="number">5</span>,<span class="number">0.02</span>)</span><br><span class="line">    plt.plot(x,np.power(x,<span class="number">2</span>))</span><br><span class="line">    plt.xlabel(<span class="string">&quot;x values&quot;</span>)  <span class="comment"># 设置x轴的显示</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;y values&quot;</span>)  <span class="comment"># 设置y轴的显示</span></span><br><span class="line">    plt.title(<span class="string">&quot;line test&quot;</span>)  <span class="comment"># 设置标题</span></span><br><span class="line">    savefig(<span class="string">&quot;img/line.png&quot;</span>)  <span class="comment"># 保存图片  该语句必须放在plt.show()之前，否则会是空白</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/line.png" alt=""></p>
</blockquote>
<h2 id="2-2-draw-stuck-data"><a href="#2-2-draw-stuck-data" class="headerlink" title="2.2 draw stuck data"></a>2.2 draw stuck data</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line</span>():</span></span><br><span class="line">    data = pd.read_csv(<span class="string">&quot;data/000001.SZ.csv&quot;</span>)</span><br><span class="line">    x = pd.to_datetime([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">&quot;trade_date&quot;</span>].values])</span><br><span class="line">    y = data[<span class="string">&quot;close&quot;</span>]</span><br><span class="line">    plt.figure(figsize=(<span class="number">16</span>,<span class="number">12</span>))</span><br><span class="line">    plt.plot(x,y)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;year&quot;</span>)  <span class="comment"># 设置x轴的显示</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;close data&quot;</span>)  <span class="comment"># 设置y轴的显示</span></span><br><span class="line">    plt.title(<span class="string">&quot;stuck data chart&quot;</span>)  <span class="comment"># 设置标题</span></span><br><span class="line">    savefig(<span class="string">&quot;img/line-stuck.png&quot;</span>)  <span class="comment"># 保存图片  该语句必须放在plt.show()之前，否则会是空白</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/line-stuck.png" alt=""></p>
</blockquote>
<h2 id="2-3-marker"><a href="#2-3-marker" class="headerlink" title="2.3 marker"></a>2.3 marker</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">marker, 指定标签，相关标签样式见下表</span></span><br><span class="line"><span class="string">markevery, 指定间隔多少个值画一个标签</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">plt.plot([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>)], marker=<span class="string">&quot;x&quot;</span>, markevery=<span class="number">2</span>)</span><br><span class="line">plt.plot([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">32</span>)], marker=<span class="string">&quot;o&quot;</span>, markevery=<span class="number">2</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>marker</th>
<th>symbol</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td><code>&quot;.&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m00.png" alt="m00"></td>
<td>point</td>
</tr>
<tr>
<td><code>&quot;,&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m01.png" alt="m01"></td>
<td>pixel</td>
</tr>
<tr>
<td><code>&quot;o&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m02.png" alt="m02"></td>
<td>circle</td>
</tr>
<tr>
<td><code>&quot;v&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m03.png" alt="m03"></td>
<td>triangle_down</td>
</tr>
<tr>
<td><code>&quot;^&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m04.png" alt="m04"></td>
<td>triangle_up</td>
</tr>
<tr>
<td><code>&quot;&lt;&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m05.png" alt="m05"></td>
<td>triangle_left</td>
</tr>
<tr>
<td><code>&quot;&gt;&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m06.png" alt="m06"></td>
<td>triangle_right</td>
</tr>
<tr>
<td><code>&quot;1&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m07.png" alt="m07"></td>
<td>tri_down</td>
</tr>
<tr>
<td><code>&quot;2&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m08.png" alt="m08"></td>
<td>tri_up</td>
</tr>
<tr>
<td><code>&quot;3&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m09.png" alt="m09"></td>
<td>tri_left</td>
</tr>
<tr>
<td><code>&quot;4&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m10.png" alt="m10"></td>
<td>tri_right</td>
</tr>
<tr>
<td><code>&quot;8&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m11.png" alt="m11"></td>
<td>octagon</td>
</tr>
<tr>
<td><code>&quot;s&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m12.png" alt="m12"></td>
<td>square</td>
</tr>
<tr>
<td><code>&quot;p&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m13.png" alt="m13"></td>
<td>pentagon</td>
</tr>
<tr>
<td><code>&quot;P&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m23.png" alt="m23"></td>
<td>plus (filled)</td>
</tr>
<tr>
<td><code>&quot;*&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m14.png" alt="m14"></td>
<td>star</td>
</tr>
<tr>
<td><code>&quot;h&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m15.png" alt="m15"></td>
<td>hexagon1</td>
</tr>
<tr>
<td><code>&quot;H&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m16.png" alt="m16"></td>
<td>hexagon2</td>
</tr>
<tr>
<td><code>&quot;+&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m17.png" alt="m17"></td>
<td>plus</td>
</tr>
<tr>
<td><code>&quot;x&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m18.png" alt="m18"></td>
<td>x</td>
</tr>
<tr>
<td><code>&quot;X&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m24.png" alt="m24"></td>
<td>x (filled)</td>
</tr>
<tr>
<td><code>&quot;D&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m19.png" alt="m19"></td>
<td>diamond</td>
</tr>
<tr>
<td><code>&quot;d&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m20.png" alt="m20"></td>
<td>thin_diamond</td>
</tr>
<tr>
<td>`”</td>
<td>“`</td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m21.png" alt="m21"></td>
</tr>
<tr>
<td><code>&quot;_&quot;</code></td>
<td><img src= "/img/loading.gif" data-src="https://matplotlib.org/stable/_images/m22.png" alt="m22"></td>
<td>hline</td>
</tr>
</tbody></table>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/4314134132.png" alt=""></p>
<h1 id="3-柱状图"><a href="#3-柱状图" class="headerlink" title="3 柱状图"></a>3 柱状图</h1><h2 id="3-1-simple-bar-chart"><a href="#3-1-simple-bar-chart" class="headerlink" title="3.1 simple bar chart"></a>3.1 simple bar chart</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    y = [<span class="number">15</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">17</span>,<span class="number">12</span>]</span><br><span class="line">    plt.bar(x,y)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;x values&quot;</span>)  <span class="comment"># 设置x轴的显示</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;y values&quot;</span>)  <span class="comment"># 设置y轴的显示</span></span><br><span class="line">    plt.title(<span class="string">&quot;bar test&quot;</span>)  <span class="comment"># 设置标题</span></span><br><span class="line">    savefig(<span class="string">&quot;img/bar.png&quot;</span>)  <span class="comment"># 保存图片  该语句必须放在plt.show()之前，否则会是空白</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/bar.png" alt=""></p>
</blockquote>
<h2 id="3-2-add-color"><a href="#3-2-add-color" class="headerlink" title="3.2 add color"></a>3.2 add color</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    y = [<span class="number">15</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">17</span>,<span class="number">12</span>]</span><br><span class="line">    plt.bar(x,y,color=<span class="string">&quot;rgb&quot;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;x values&quot;</span>)  <span class="comment"># 设置x轴的显示</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;y values&quot;</span>)  <span class="comment"># 设置y轴的显示</span></span><br><span class="line">    plt.title(<span class="string">&quot;bar test&quot;</span>)  <span class="comment"># 设置标题</span></span><br><span class="line">    savefig(<span class="string">&quot;img/bar.png&quot;</span>)  <span class="comment"># 保存图片  该语句必须放在plt.show()之前，否则会是空白</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/bar_color.png" alt=""></p>
</blockquote>
<h2 id="3-3-add-target"><a href="#3-3-add-target" class="headerlink" title="3.3 add target"></a>3.3 add target</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    y = [<span class="number">15</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">17</span>,<span class="number">12</span>]</span><br><span class="line">    plt.bar(x,y,color=<span class="string">&quot;rgb&quot;</span>,tick_label=[<span class="string">&quot;mon&quot;</span>,<span class="string">&quot;thu&quot;</span>,<span class="string">&quot;wen&quot;</span>,<span class="string">&quot;tu&quot;</span>,<span class="string">&quot;fri&quot;</span>])</span><br><span class="line">    plt.xlabel(<span class="string">&quot;x values&quot;</span>)  <span class="comment"># 设置x轴的显示</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;y values&quot;</span>)  <span class="comment"># 设置y轴的显示</span></span><br><span class="line">    plt.title(<span class="string">&quot;bar test&quot;</span>)  <span class="comment"># 设置标题</span></span><br><span class="line">    savefig(<span class="string">&quot;img/bar_target.png&quot;</span>)  <span class="comment"># 保存图片  该语句必须放在plt.show()之前，否则会是空白</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/bar_target.png" alt=""></p>
</blockquote>
<h2 id="3-4-stack-bar"><a href="#3-4-stack-bar" class="headerlink" title="3.4 stack bar"></a>3.4 stack bar</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    y = [<span class="number">15</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">17</span>,<span class="number">12</span>]</span><br><span class="line">    y2 = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">    plt.bar(x,y,color=<span class="string">&quot;red&quot;</span>,label=<span class="string">&quot;money&quot;</span>)</span><br><span class="line">    plt.bar(x,y2,color=<span class="string">&quot;b&quot;</span>,bottom=y,label=<span class="string">&quot;cash&quot;</span>,tick_label=[<span class="string">&quot;mon&quot;</span>,<span class="string">&quot;thu&quot;</span>,<span class="string">&quot;wen&quot;</span>,<span class="string">&quot;tu&quot;</span>,<span class="string">&quot;fri&quot;</span>])</span><br><span class="line">    plt.legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;x values&quot;</span>)  <span class="comment"># 设置x轴的显示</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;y values&quot;</span>)  <span class="comment"># 设置y轴的显示</span></span><br><span class="line">    plt.title(<span class="string">&quot;bar test&quot;</span>)  <span class="comment"># 设置标题</span></span><br><span class="line">    savefig(<span class="string">&quot;img/bar_stack.png&quot;</span>)  <span class="comment"># 保存图片  该语句必须放在plt.show()之前，否则会是空白</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/bar_stack.png" alt=""></p>
</blockquote>
<h2 id="3-5-paralleling-bar"><a href="#3-5-paralleling-bar" class="headerlink" title="3.5 paralleling bar"></a>3.5 paralleling bar</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    y = [<span class="number">15</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">17</span>,<span class="number">12</span>]</span><br><span class="line">    y2 = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">    width = <span class="number">0.4</span></span><br><span class="line">    plt.bar(x,y,color=<span class="string">&quot;red&quot;</span>,label=<span class="string">&quot;money&quot;</span>,width=width)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">        x[i] += width <span class="comment">#增加X轴的距离</span></span><br><span class="line">    plt.bar(x,y2,color=<span class="string">&quot;b&quot;</span>, width=width,  label=<span class="string">&quot;cash&quot;</span>,tick_label=[<span class="string">&quot;mon&quot;</span>,<span class="string">&quot;thu&quot;</span>,<span class="string">&quot;wen&quot;</span>,<span class="string">&quot;tu&quot;</span>,<span class="string">&quot;fri&quot;</span>])</span><br><span class="line">    plt.legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;x values&quot;</span>)  <span class="comment"># 设置x轴的显示</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;y values&quot;</span>)  <span class="comment"># 设置y轴的显示</span></span><br><span class="line">    plt.title(<span class="string">&quot;bar test&quot;</span>)  <span class="comment"># 设置标题</span></span><br><span class="line">    savefig(<span class="string">&quot;img/bar_paralleling.png&quot;</span>)  <span class="comment"># 保存图片  该语句必须放在plt.show()之前，否则会是空白</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/bar_paralleling.png" alt=""></p>
</blockquote>
<h2 id="3-6-bar-type-bar-chart"><a href="#3-6-bar-type-bar-chart" class="headerlink" title="3.6 bar-type bar chart"></a>3.6 bar-type bar chart</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    y = [<span class="number">15</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">17</span>,<span class="number">12</span>]</span><br><span class="line">    y2 = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">    height = <span class="number">0.9</span></span><br><span class="line">    plt.barh(x,y,color=<span class="string">&quot;red&quot;</span>,label=<span class="string">&quot;money&quot;</span>,height=height,tick_label=[<span class="string">&quot;mon&quot;</span>,<span class="string">&quot;thu&quot;</span>,<span class="string">&quot;wen&quot;</span>,<span class="string">&quot;tu&quot;</span>,<span class="string">&quot;fri&quot;</span>])</span><br><span class="line">    plt.legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;y values&quot;</span>)  <span class="comment"># 设置x轴的显示</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;x values&quot;</span>)  <span class="comment"># 设置y轴的显示</span></span><br><span class="line">    plt.title(<span class="string">&quot;bar test&quot;</span>)  <span class="comment"># 设置标题</span></span><br><span class="line">    savefig(<span class="string">&quot;img/bar_type.png&quot;</span>)  <span class="comment"># 保存图片  该语句必须放在plt.show()之前，否则会是空白</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/bar_type.png" alt=""></p>
</blockquote>
<h1 id="4-饼图"><a href="#4-饼图" class="headerlink" title="4 饼图"></a>4 饼图</h1><h2 id="4-1-normal"><a href="#4-1-normal" class="headerlink" title="4.1 normal"></a>4.1 normal</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pie</span>():</span></span><br><span class="line">    x = [<span class="string">&quot;mon&quot;</span>,<span class="string">&quot;thu&quot;</span>,<span class="string">&quot;wen&quot;</span>,<span class="string">&quot;tu&quot;</span>,<span class="string">&quot;fri&quot;</span>]</span><br><span class="line">    y = [<span class="number">190</span>,<span class="number">180</span>,<span class="number">200</span>,<span class="number">222</span>,<span class="number">230</span>]</span><br><span class="line">    color = [<span class="string">&quot;cyan&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="string">&quot;red&quot;</span>,<span class="string">&quot;pink&quot;</span>,<span class="string">&quot;yellow&quot;</span>]</span><br><span class="line">    plt.pie(y,labels=x,colors=color,shadow=<span class="literal">True</span>,autopct=<span class="string">&quot;%1.2f%%&quot;</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;pie chart&quot;</span>)</span><br><span class="line">    savefig(<span class="string">&quot;img/pie.png&quot;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pie.png" alt=""></p>
</blockquote>
<h2 id="4-2-exploded"><a href="#4-2-exploded" class="headerlink" title="4.2 exploded"></a>4.2 exploded</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;Simsun&#x27;</span></span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">20</span></span><br><span class="line">x = [<span class="string">u&quot;交通事故&quot;</span>, <span class="string">u&quot;水灾事故&quot;</span>, <span class="string">u&quot;其他事故&quot;</span>]</span><br><span class="line">y = [<span class="number">4005</span>, <span class="number">3625</span>, <span class="number">1206</span>]</span><br><span class="line">color = [<span class="string">&quot;cyan&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;b&quot;</span>]</span><br><span class="line">exploed = (<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>)  <span class="comment">## 关键代码</span></span><br><span class="line">plt.pie(y, labels=x, colors=color, shadow=<span class="literal">True</span>, autopct=<span class="string">&quot;%1.2f%%&quot;</span>, explode=exploed)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.savefig(<span class="string">&quot;img/pie2.png&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/pie2.png" alt=""></p>
<h1 id="5-子图"><a href="#5-子图" class="headerlink" title="5 子图"></a>5 子图</h1><h2 id="5-1-subplot"><a href="#5-1-subplot" class="headerlink" title="5.1 subplot"></a>5.1 subplot</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subpl</span>():</span></span><br><span class="line">    plt.figure(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># sub 1</span></span><br><span class="line">    plt.subplot(<span class="number">221</span>)<span class="comment"># 将画面分成2行2列共4个plot，下面的数据显示在第一个plot中</span></span><br><span class="line">    data = pd.read_csv(<span class="string">&quot;data/000001.SZ.csv&quot;</span>)</span><br><span class="line">    x = pd.to_datetime([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">&quot;trade_date&quot;</span>].values])</span><br><span class="line">    y = data[<span class="string">&quot;close&quot;</span>]</span><br><span class="line">    plt.plot(x, y)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;year&quot;</span>)  <span class="comment"># 设置x轴的显示</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;close data&quot;</span>)  <span class="comment"># 设置y轴的显示</span></span><br><span class="line">    plt.title(<span class="string">&quot;stuck data chart&quot;</span>)  <span class="comment"># 设置标题</span></span><br><span class="line">    <span class="comment"># sub 2</span></span><br><span class="line">    plot_acf(y.diff().dropna(),ax=plt.subplot(<span class="number">222</span>))</span><br><span class="line">    <span class="comment"># sub 3</span></span><br><span class="line">    plt.subplot(<span class="number">223</span>)</span><br><span class="line">    x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    y = [<span class="number">15</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">12</span>]</span><br><span class="line">    y2 = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line">    height = <span class="number">0.4</span></span><br><span class="line">    labels = [<span class="string">&quot;mon&quot;</span>, <span class="string">&quot;thu&quot;</span>, <span class="string">&quot;wen&quot;</span>, <span class="string">&quot;tu&quot;</span>, <span class="string">&quot;fri&quot;</span>]</span><br><span class="line">    plt.bar(x, y, color=<span class="string">&quot;red&quot;</span>, label=<span class="string">&quot;money&quot;</span>, width=height, tick_label=labels)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">        x[i] += height</span><br><span class="line">    plt.bar(x,y2,width=height,color=<span class="string">&quot;pink&quot;</span>,label=<span class="string">&quot;cash&quot;</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;y values&quot;</span>)  <span class="comment"># 设置x轴的显示</span></span><br><span class="line">    plt.ylabel(<span class="string">&quot;x values&quot;</span>)  <span class="comment"># 设置y轴的显示</span></span><br><span class="line">    plt.title(<span class="string">&quot;bar test&quot;</span>)  <span class="comment"># 设置标题</span></span><br><span class="line">    <span class="comment"># sub 4</span></span><br><span class="line">    plt.subplot(<span class="number">224</span>)</span><br><span class="line">    y = [<span class="number">190</span>, <span class="number">180</span>, <span class="number">200</span>, <span class="number">222</span>, <span class="number">230</span>]</span><br><span class="line">    color = [<span class="string">&quot;cyan&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="string">&quot;yellow&quot;</span>]</span><br><span class="line">    plt.pie(y, labels=labels, colors=color, shadow=<span class="literal">True</span>, autopct=<span class="string">&quot;%1.2f%%&quot;</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;pie chart&quot;</span>)</span><br><span class="line">    savefig(<span class="string">&quot;img/subplot.png&quot;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/subplot.png" alt=""></p>
</blockquote>
<h2 id="5-2-subplots"><a href="#5-2-subplots" class="headerlink" title="5.2 subplots"></a>5.2 subplots</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subplots</span>():</span></span><br><span class="line">    <span class="comment"># subplots显示subplot的数据</span></span><br><span class="line">    fig, ax = plt.subplots(<span class="number">2</span>,<span class="number">2</span>) <span class="comment"># 画2行2列共4个plot，返回的是一个元组型的数据，fig是画布，ax是子图</span></span><br><span class="line">    data = pd.read_csv(<span class="string">&quot;data/000001.SZ.csv&quot;</span>)</span><br><span class="line">    x = pd.to_datetime([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">&quot;trade_date&quot;</span>].values])</span><br><span class="line">    y = data[<span class="string">&quot;close&quot;</span>]</span><br><span class="line">    <span class="comment"># sub 1</span></span><br><span class="line">    ax[<span class="number">0</span>][<span class="number">0</span>].plot(x, y)</span><br><span class="line">    ax[<span class="number">0</span>,<span class="number">0</span>].set_xlabel(<span class="string">&quot;year&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>,<span class="number">0</span>].set_ylabel(<span class="string">&quot;close&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>,<span class="number">0</span>].set_title(<span class="string">&quot;stuck data&quot;</span>)</span><br><span class="line">    <span class="comment"># sub 2</span></span><br><span class="line">    plot_acf(y.diff().dropna(),ax=ax[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">    ax[<span class="number">0</span>,<span class="number">1</span>].set_title(<span class="string">&quot;one diff&quot;</span>)</span><br><span class="line">    <span class="comment"># sub 3</span></span><br><span class="line">    x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    y = [<span class="number">15</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">12</span>]</span><br><span class="line">    y2 = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line">    height = <span class="number">0.4</span></span><br><span class="line">    labels = [<span class="string">&quot;mon&quot;</span>, <span class="string">&quot;thu&quot;</span>, <span class="string">&quot;wen&quot;</span>, <span class="string">&quot;tu&quot;</span>, <span class="string">&quot;fri&quot;</span>]</span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">0</span>].bar(x, y, color=<span class="string">&quot;red&quot;</span>, label=<span class="string">&quot;money&quot;</span>, width=height, tick_label=labels)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">        x[i] += height</span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">0</span>].bar(x, y2, width=height, color=<span class="string">&quot;pink&quot;</span>, label=<span class="string">&quot;cash&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">0</span>].legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">0</span>].set_xlabel(<span class="string">&quot;y values&quot;</span>)  <span class="comment"># 设置x轴的显示</span></span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">0</span>].set_ylabel(<span class="string">&quot;x values&quot;</span>)  <span class="comment"># 设置y轴的显示</span></span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">0</span>].set_title(<span class="string">&quot;bar test&quot;</span>)  <span class="comment"># 设置标题</span></span><br><span class="line">    <span class="comment"># sub 4</span></span><br><span class="line">    y = [<span class="number">190</span>, <span class="number">180</span>, <span class="number">200</span>, <span class="number">222</span>, <span class="number">230</span>]</span><br><span class="line">    color = [<span class="string">&quot;cyan&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="string">&quot;yellow&quot;</span>]</span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">1</span>].pie(y, labels=labels, colors=color, shadow=<span class="literal">True</span>, autopct=<span class="string">&quot;%1.2f%%&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>,<span class="number">1</span>].set_title(<span class="string">&quot;pie chart&quot;</span>)</span><br><span class="line">    savefig(<span class="string">&quot;img/subplots.png&quot;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/subplots.png" alt=""></p>
</blockquote>
<h2 id="5-3-subplot2gird"><a href="#5-3-subplot2gird" class="headerlink" title="5.3 subplot2gird"></a>5.3 subplot2gird</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subgrid</span>():</span></span><br><span class="line">    shape = (<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">    ax1 = plt.subplot2grid(shape,(<span class="number">0</span>,<span class="number">0</span>),rowspan=<span class="number">1</span>,colspan=<span class="number">3</span>)</span><br><span class="line">    data = pd.read_csv(<span class="string">&quot;data/000001.SZ.csv&quot;</span>)</span><br><span class="line">    year = pd.to_datetime([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">&quot;trade_date&quot;</span>].values])</span><br><span class="line">    clo = data[<span class="string">&quot;close&quot;</span>]</span><br><span class="line">    <span class="comment"># sub 1</span></span><br><span class="line">    ax1.plot(year,clo)</span><br><span class="line">    ax1.set_xlabel(<span class="string">&quot;year&quot;</span>)</span><br><span class="line">    ax1.set_ylabel(<span class="string">&quot;close&quot;</span>)</span><br><span class="line">    ax1.set_title(<span class="string">&quot;stuck data&quot;</span>)</span><br><span class="line">    <span class="comment"># sub 2</span></span><br><span class="line">    ax2 = plt.subplot2grid(shape,(<span class="number">1</span>,<span class="number">0</span>),rowspan=<span class="number">1</span>,colspan=<span class="number">2</span>)</span><br><span class="line">    plot_acf(clo.diff().dropna(),ax=ax2)</span><br><span class="line">    ax2.set_title(<span class="string">&quot;one diff&quot;</span>)</span><br><span class="line">    <span class="comment"># sub 3</span></span><br><span class="line">    ax3 = plt.subplot2grid(shape,(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">    x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    y = [<span class="number">15</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">12</span>]</span><br><span class="line">    height = <span class="number">0.4</span></span><br><span class="line">    labels = [<span class="string">&quot;mon&quot;</span>, <span class="string">&quot;thu&quot;</span>, <span class="string">&quot;wen&quot;</span>, <span class="string">&quot;tu&quot;</span>, <span class="string">&quot;fri&quot;</span>]</span><br><span class="line">    ax3.bar(x, y, color=<span class="string">&quot;red&quot;</span>, label=<span class="string">&quot;money&quot;</span>, width=height, tick_label=labels)</span><br><span class="line">    ax3.set_title(<span class="string">&quot;bar chart&quot;</span>)</span><br><span class="line">    ax3.set_xlabel(<span class="string">&quot;week&quot;</span>)</span><br><span class="line">    ax3.set_ylabel(<span class="string">&quot;money&quot;</span>)</span><br><span class="line">    <span class="comment">#sub 4</span></span><br><span class="line">    ax4 = plt.subplot2grid(shape,(<span class="number">2</span>,<span class="number">0</span>),rowspan=<span class="number">1</span>,colspan=<span class="number">3</span>)</span><br><span class="line">    ax4.plot(year,clo.diff())</span><br><span class="line">    ax4.set_title(<span class="string">&quot;one diff&quot;</span>)</span><br><span class="line">    ax4.set_xlabel(<span class="string">&quot;year&quot;</span>)</span><br><span class="line">    ax4.set_ylabel(<span class="string">&quot;close&quot;</span>)</span><br><span class="line">    savefig(<span class="string">&quot;img/subplot2grid.png&quot;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/subplot2grid.png" alt=""></p>
</blockquote>
<h2 id="5-4-gridspec"><a href="#5-4-gridspec" class="headerlink" title="5.4 gridspec"></a>5.4 gridspec</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gridspec</span>():</span></span><br><span class="line">    plt.figure(<span class="number">1</span>)</span><br><span class="line">    g = gs.GridSpec(<span class="number">3</span>,<span class="number">3</span>) <span class="comment"># 定义3行3列</span></span><br><span class="line">    ax1 = plt.subplot(g[<span class="number">0</span>,:]) <span class="comment"># 使用索引进行标记位置，第一个0表示第一行，第二个:号，表示所有列</span></span><br><span class="line">    data = pd.read_csv(<span class="string">&quot;data/000001.SZ.csv&quot;</span>)</span><br><span class="line">    year = pd.to_datetime([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> data[<span class="string">&quot;trade_date&quot;</span>].values])</span><br><span class="line">    clo = data[<span class="string">&quot;close&quot;</span>]</span><br><span class="line">    <span class="comment"># sub 1</span></span><br><span class="line">    ax1.plot(year, clo)</span><br><span class="line">    ax1.set_xlabel(<span class="string">&quot;year&quot;</span>)</span><br><span class="line">    ax1.set_ylabel(<span class="string">&quot;close&quot;</span>)</span><br><span class="line">    ax1.set_title(<span class="string">&quot;stuck data&quot;</span>)</span><br><span class="line">    <span class="comment"># sub 2</span></span><br><span class="line">    ax2 = plt.subplot(g[<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">    x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    y = [<span class="number">15</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">12</span>]</span><br><span class="line">    height = <span class="number">0.4</span></span><br><span class="line">    labels = [<span class="string">&quot;mon&quot;</span>, <span class="string">&quot;thu&quot;</span>, <span class="string">&quot;wen&quot;</span>, <span class="string">&quot;tu&quot;</span>, <span class="string">&quot;fri&quot;</span>]</span><br><span class="line">    ax2.bar(x, y, color=<span class="string">&quot;red&quot;</span>, label=<span class="string">&quot;money&quot;</span>, width=height, tick_label=labels)</span><br><span class="line">    ax2.set_title(<span class="string">&quot;bar chart&quot;</span>)</span><br><span class="line">    ax2.set_xlabel(<span class="string">&quot;week&quot;</span>)</span><br><span class="line">    ax2.set_ylabel(<span class="string">&quot;money&quot;</span>)</span><br><span class="line">    <span class="comment"># sub 3</span></span><br><span class="line">    ax3 = plt.subplot(g[<span class="number">1</span>,<span class="number">1</span>:])</span><br><span class="line">    plot_acf(clo.diff().dropna(), ax=ax3)</span><br><span class="line">    ax3.set_title(<span class="string">&quot;one diff&quot;</span>)</span><br><span class="line">    <span class="comment"># sub 4</span></span><br><span class="line">    ax4 = plt.subplot(g[<span class="number">2</span>,:])</span><br><span class="line">    ax4.plot(year, clo.diff())</span><br><span class="line">    ax4.set_title(<span class="string">&quot;one diff&quot;</span>)</span><br><span class="line">    ax4.set_xlabel(<span class="string">&quot;year&quot;</span>)</span><br><span class="line">    ax4.set_ylabel(<span class="string">&quot;close&quot;</span>)</span><br><span class="line">    savefig(<span class="string">&quot;img/gridspec.png&quot;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/gridspec.png" alt=""></p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法介绍</title>
    <url>/markdown-grammer/</url>
    <content><![CDATA[<h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1 标题"></a>1 标题</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 这是一级标题</span></span><br><span class="line"><span class="section">## 这是二级标题</span></span><br><span class="line"><span class="section">### 这是三级标题</span></span><br><span class="line"><span class="section">#### 这是四级标题</span></span><br><span class="line"><span class="section">##### 这是五级标题</span></span><br><span class="line"><span class="section">###### 这是六级标题</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h3 id="2-字体"><a href="#2-字体" class="headerlink" title="2 字体"></a>2 字体</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**这是加粗的文字**</span></span><br><span class="line"><span class="emphasis">*这是倾斜的文字*</span>`</span><br><span class="line"><span class="strong">**<span class="emphasis">*这是斜体加粗的文字<span class="strong">**<span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">~~这是加删除线的文字~~</span></span></span></span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p>
<h3 id="3-引用"><a href="#3-引用" class="headerlink" title="3 引用"></a>3 引用</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h3 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4 分割线"></a>4 分割线</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">---</span></span><br><span class="line">----</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="strong">****</span>*</span></span></span><br></pre></td></tr></table></figure>

<hr>
<hr>
<hr>
<hr>
<h3 id="5-图片"><a href="#5-图片" class="headerlink" title="5 图片"></a>5 图片</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片alt</span>](<span class="link">图片地址 &#x27;&#x27;图片title&#x27;&#x27;</span>)</span><br><span class="line">实例：</span><br><span class="line">![<span class="string">微信公众号</span>](<span class="link">https://jums.club/images/wechataccount.jpg</span>)</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
<h3 id="6-超链接"><a href="#6-超链接" class="headerlink" title="6 超链接"></a>6 超链接</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">显示的名字</span>](<span class="link">链接地址</span>)</span><br><span class="line">举例：</span><br><span class="line">[<span class="string">我的博客</span>](<span class="link">https://jums.club</span>)</span><br><span class="line">[<span class="string">我的github</span>](<span class="link">https://github.com/crazyjums</span>)</span><br></pre></td></tr></table></figure>

<hr>
<p><a href="https://jums.club">我的博客</a>     </p>
<p><a href="https://github.com/crazyjums">我的github</a></p>
<h3 id="7-列表"><a href="#7-列表" class="headerlink" title="7 列表"></a>7 列表</h3><h4 id="7-1-无序列表"><a href="#7-1-无序列表" class="headerlink" title="7.1 无序列表"></a>7.1 无序列表</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 列表内容</span><br><span class="line"><span class="bullet">  -</span> 这是二级列表</span><br><span class="line"><span class="bullet">  	-</span> 这是三级列表</span><br><span class="line"><span class="bullet">+</span> 列表内容</span><br><span class="line"><span class="bullet">*</span> 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + <span class="emphasis">* 跟内容之间都要有一个空格</span></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>列表内容<ul>
<li>这是二级列表<ul>
<li>这是三级列表</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<h4 id="7-2-有序列表"><a href="#7-2-有序列表" class="headerlink" title="7.2 有序列表"></a>7.2 有序列表</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 列表内容</span><br><span class="line"><span class="bullet">	1.</span> 这是二级有序列表</span><br><span class="line"><span class="bullet">2.</span> 列表内容</span><br><span class="line"><span class="bullet">3.</span> 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>

<ol>
<li>列表内容<ol>
<li>这是二级有序列表</li>
</ol>
</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<h3 id="8表格"><a href="#8表格" class="headerlink" title="8表格"></a>8表格</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line"><span class="bullet">-</span> 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>表头</th>
<th align="center">表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
<tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
</tbody></table>
<h3 id="9-代码"><a href="#9-代码" class="headerlink" title="9 代码"></a>9 代码</h3><h4 id="9-1-单行代码"><a href="#9-1-单行代码" class="headerlink" title="9.1 单行代码"></a>9.1 单行代码</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`这是单行代码`</span>  用两个反引号包起来</span><br></pre></td></tr></table></figure>

<p><code>这是单行代码</code></p>
<h4 id="9-2-多行代码"><a href="#9-2-多行代码" class="headerlink" title="9.2 多行代码"></a>9.2 多行代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入字符串，输入exit结束：&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            <span class="keyword">switch</span> (s)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;exit&quot;</span>: <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;abc&quot;</span>:</span><br><span class="line">                    System.out.println(s);</span><br><span class="line">                    System.out.print(<span class="string">&quot;请输入字符串，输入exit结束：&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: System.out.println(<span class="string">&quot;over&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-流程图"><a href="#10-流程图" class="headerlink" title="10 流程图"></a>10 流程图</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">​<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;flowchart-0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;flow-chart&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<div id="flowchart-1" class="flow-chart"></div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 11 选择框</span><br><span class="line"></span><br><span class="line">```markdown</span><br><span class="line">- [x] 选择1，已经选中</span><br><span class="line">- [ ] 选择2，没有选中   #[ ]中间要有一个空格</span><br></pre></td></tr></table></figure>

<ul>
<li><input checked="" disabled="" type="checkbox"> 选择1，已经选中</li>
<li><input disabled="" type="checkbox"> 选择2，没有选中</li>
</ul>
<h3 id="12-数学公式"><a href="#12-数学公式" class="headerlink" title="12 数学公式"></a>12 数学公式</h3><p><a href="https://juejin.im/post/5a6721bd518825733201c4a2">参考</a>   </p>
<p><a href="https://www.zybuluo.com/codeep/note/163962">cmdMarkdown数学语法介绍</a>   </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">行中数学公式：</span><br><span class="line">$ 数学公式 $</span><br><span class="line">独立数学系公式：</span><br><span class="line">$$ 数学公式 $$</span><br></pre></td></tr></table></figure>

<ul>
<li><p>行中数学公式：</p>
<p>这是行中数学公式：$ J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，行内公式示例} $</p>
</li>
<li><p>独立数学公式：</p>
<p>这是独立数学公式，单独换行：</p>
<p>$$ J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，独立公式示例} $$</p>
</li>
</ul>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始
op=>operation: My Operation
cond=>condition: Yes or No?
e=>end
st->op->cond
cond(yes)->e
cond(no)->op
&</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 开始
op=>operation: My Operation
cond=>condition: Yes or No?
e=>end
st->op->cond
cond(yes)->e
cond(no)->op
&</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script></p>
]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是内存泄漏？</title>
    <url>/memery-leak/</url>
    <content><![CDATA[<h3 id="1-内存泄漏的定义"><a href="#1-内存泄漏的定义" class="headerlink" title="1 内存泄漏的定义"></a>1 内存泄漏的定义</h3><blockquote>
<p><strong>内存泄漏</strong>（Memory leak）是在<a href="https://zh.wikipedia.org/wiki/计算机科学">计算机科学</a>中，由于疏忽或错误造成程序未能释放已经不再使用的<a href="https://zh.wikipedia.org/wiki/内存">内存</a>。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。</p>
<p>内存泄漏通常情况下只能由获得程序<a href="https://zh.wikipedia.org/wiki/源代码">源代码</a>的程序员才能分析出来。</p>
</blockquote>
<h3 id="2-内存泄漏导致的后果"><a href="#2-内存泄漏导致的后果" class="headerlink" title="2 内存泄漏导致的后果"></a>2 内存泄漏导致的后果</h3><p>内存泄漏会因为减少可用内存的数量从而降低计算机的性能。最终，在最糟糕的情况下，过多的可用内存被分配掉导致全部或部分设备停止正常工作，或者应用程序崩溃。</p>
<p>内存泄漏带来的后果可能是不严重的，有时甚至能够被常规的手段检测出来。在现代操作系统中，一个应用程序使用的常规内存在程序终止时被释放。这表示一个短暂运行的应用程序中的内存泄漏不会导致严重后果。</p>
<p>在以下情况，内存泄漏导致较严重的后果：</p>
<ul>
<li>程序运行后置之不理，并且随着时间的流逝消耗越来越多的内存（比如服务器上的后台任务，尤其是<a href="https://zh.wikipedia.org/wiki/嵌入式系统">嵌入式系统</a>中的后台任务，这些任务可能被运行后很多年内都置之不理）；</li>
<li>新的内存被频繁地分配，比如当显示电脑游戏或动画视频画面时；</li>
<li>程序能够请求即使在程序终止之后也不会被释放的内存（比如<a href="https://zh.wikipedia.org/wiki/共享内存">共享内存</a>）；</li>
<li>泄漏在操作系统内部发生；</li>
<li>泄漏在系统关键驱动中发生；</li>
<li>内存非常有限，比如在<a href="https://zh.wikipedia.org/wiki/嵌入式系统">嵌入式系统</a>或便携设备中；</li>
<li>当运行于一个程序终止时内存并不自动释放内存的操作系统（比如<a href="https://zh.wikipedia.org/wiki/AmigaOS">AmigaOS</a>）之上时。</li>
</ul>
<h3 id="3-内存泄漏的案例"><a href="#3-内存泄漏的案例" class="headerlink" title="3 内存泄漏的案例"></a>3 内存泄漏的案例</h3><h4 id="3-1-C语言"><a href="#3-1-C语言" class="headerlink" title="3.1 C语言"></a>3.1 C语言</h4><p>下面是一个C语言的例子，在函数f()中申请了内存却没有释放，导致内存泄漏。当程序不停地重复调用这个有问题的函数f，申请内存函数<code>malloc()</code>最后会在程序没有更多可用存储器可以申请时产生错误（函数输出为NULL）。但是，由于函数<code>malloc()</code>输出的结果没有加以出错处理，因此程序会不停地尝试申请存储器，并且在系统有新的空闲内存时，被该程序占用。注意，<code>malloc()</code>返回NULL的原因<strong>不一定</strong>是因为前述的<strong>没有更多可用存储器可以申请</strong>，也可能是逻辑地址空间耗尽，在<a href="https://zh.wikipedia.org/wiki/Linux">Linux</a>环境上测试的时候后者更容易发生。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span>* s;</span><br><span class="line">    s = <span class="built_in">malloc</span>(<span class="number">50</span>); <span class="comment">/* 申请内存空间 */</span></span><br><span class="line">    <span class="keyword">return</span>;  <span class="comment">/* 内在泄漏 - 参见以下资料 */</span> </span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * s 指向新分配的堆空间。</span></span><br><span class="line"><span class="comment">     * 当此函数返回，离开局部变量s的作用域后将无法得知s的值，</span></span><br><span class="line"><span class="comment">     * 分配的内存空间不能被释放。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如要「修复」这个问题，必须想办法释放分配的堆空间，</span></span><br><span class="line"><span class="comment">     * 也可以用alloca(3)代替malloc(3)。</span></span><br><span class="line"><span class="comment">     * （注意：alloca(3)既不是ANSI函数也不是POSIX函数）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 该函数是一个死循环函数 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) f(); <span class="comment">/* Malloc函数迟早会由于内存泄漏而返回NULL*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-C"><a href="#3-2-C" class="headerlink" title="3.2 C++"></a>3.2 C++</h4><p>以下例子中，存储了整数123的内存空间不能被删除，因为地址丢失了。这些空间已无法再使用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   <span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">123</span>);</span><br><span class="line">   cout &lt;&lt; *a &lt;&lt; endl;</span><br><span class="line">   <span class="comment">// We should write &quot;delete a;&quot; here</span></span><br><span class="line">   a = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">456</span>);</span><br><span class="line">   cout &lt;&lt; *a &lt;&lt; endl;</span><br><span class="line">   <span class="keyword">delete</span> a;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-Java"><a href="#3-3-Java" class="headerlink" title="3.3 Java"></a>3.3 Java</h4><p><code>Java</code>中的内存泄露，广义并通俗的说，就是：不再会被使用的对象的内存不能被回收，就是内存泄露。</p>
<p><code>Java</code>中的内存泄露与<code>C++</code>中的表现有所不同。</p>
<p>在<code>C++</code>中，所有被分配了内存的对象，不再使用后，都必须程序员手动的释放他们。所以，每个类，都会含有一个析构函数，作用就是完成清理工作，如果我们忘记了某些对象的释放，就会造成内存泄露。</p>
<p>但是在Java中，我们不用（也没办法）自己释放内存，无用的对象由<code>GC</code>自动清理，这也极大的简化了我们的编程工作。但，实际有时候一些不再会被使用的对象，在<code>GC</code>看来不能被释放，就会造成内存泄露。</p>
<p>对象都是有生命周期的，有的长，有的短，<strong><em>\</em>如果长生命周期的对象持有短生命周期的引用，就很可能会出现内存泄露**</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Simple</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    Object object;<span class="comment">//这是类中的属性，也是该类中的一个全局变量</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        object = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">//...其他代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析：在<code>method1</code>方法中，给类的属性赋了值，也就是在堆中创建一个对象，并将<code>object</code>指向该对象。但是当<code>method1</code>方法执行完之后，该<code>object</code>对象就不再被使用了。且<code>object</code>对象并没有直接被垃圾回收掉，只有等到<code>Simple</code>类创建的对象被释放之后，<code>object</code>才会被垃圾回收掉，所以这就有可能导致内存泄漏，也就是说：<code>object</code>这块内存地址不受程序控制了。</p>
<p>安全的写法：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Simple</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    Object object;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        object = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="comment">//...其他代码</span></span><br><span class="line">        object = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码中可以看到，当在局部方法中使用完全局变量之后，随即将其释放掉，这样<code>java</code>的<code>GC</code>就会将<code>object</code>对象给回收掉。</p>
<h3 id="4-内存泄漏的影响"><a href="#4-内存泄漏的影响" class="headerlink" title="4 内存泄漏的影响"></a>4 内存泄漏的影响</h3><p>如果一个程序存在内存泄漏并且它的内存使用量稳定增长，通常不会有很快的症状。每个物理系统都有一个较大的内存量，如果内存泄漏没有被中止（比如重启造成泄漏的程序）的话，它迟早会造成问题。</p>
<p>大多数的现代计算机<a href="https://zh.wikipedia.org/wiki/操作系统">操作系统</a>都有存储在<a href="https://zh.wikipedia.org/wiki/隨機存取記憶體">RAM</a>芯片中<a href="https://zh.wikipedia.org/wiki/主内存">主内存</a>和存储在次级存储设备如<a href="https://zh.wikipedia.org/wiki/硬盘">硬盘</a>中的<a href="https://zh.wikipedia.org/wiki/虚拟内存">虚拟内存</a>，内存分配是动态的——每个进程根据要求获得相应的内存。访问活跃的页面文件被转移到主内存以提高访问速度；反之，访问不活跃的页面文件被转移到次级存储设备。当一个简单的进程消耗大量的内存时，它通常占用越来越多的主内存，使其他程序转到次级存储设备，使系统的运行效率大大降低。甚至在有内存泄漏的程序终止后，其他程序需要相当长的时间才能切换到主内存，恢复原来的运行效率。</p>
<p>当系统所有的内存全部耗完后（包括主内存和虚拟内存，在嵌入式系统中，仅有主内存），所有申请内存的操作将失败。这通常导致程序试图申请内存来终止自己，或造成分段内存访问错误（segmentation fault）。现在有一些专门为修复这种情况而设计的程序，常用的办法是预留一些内存。值得注意的是，第一个遭遇得不到内存问题的程序有时候并不是有内存泄漏的程序。</p>
<p>一些多任务操作系统有特殊的机制来处理内存耗尽得情况，如随机终止一个进程（可能会终止一些正常的进程），或终止耗用内存最大的进程（很有可能是引起内存泄漏的进程）。另一些操作系统则有内存分配限制，这样可以防止任何一个进程耗用完整个系统的内存。这种设计的缺点是有时候某些进程确实需要较大数量的内存时，如一些处理图像，视频和科学计算的进程，操作系统需要重新配置。</p>
<p>如内存泄漏发生在<a href="https://zh.wikipedia.org/wiki/内核">内核</a>，表示操作系统自身发生了问题。那些没有完善的内存管理的计算机，如嵌入式系统，会因为一个长时间的内存泄漏而崩溃。</p>
<p>一些被公众访问的系统，如<a href="https://zh.wikipedia.org/wiki/网络服务器">网络服务器</a>或<a href="https://zh.wikipedia.org/wiki/路由器">路由器</a>很容易被<a href="https://zh.wikipedia.org/wiki/黑客">黑客</a>攻击，加入一段攻击代码，而产生内存泄漏。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>program language</tag>
      </tags>
  </entry>
  <entry>
    <title>java消息队列的作用</title>
    <url>/message-queue/</url>
    <content><![CDATA[<p>消息队列的使用场景：<strong>异步、削峰（负载均衡）、解耦</strong>。</p>
<h2 id="1-异步（提升系统相应速度）"><a href="#1-异步（提升系统相应速度）" class="headerlink" title="1 异步（提升系统相应速度）"></a>1 异步（提升系统相应速度）</h2><p>场景一：当电商购物的过程中，需要付款，那么付款就是一个简单的流程，假如说需要花费$100ms$。由于现在都是基于微服务开发的应用，那么每添加一个新的功能，就相应会多一个新的微服务系统，各个微服务系统之间的通信协作就会花费较多时间。那么当后期需要添加新功能时，可能会添加<strong>优惠券系统($100ms$)、积分系统($100ms$)</strong>等。可能一次付款成功的操作会有十几个相应的非主流业务也要执行，如果使用同步的方式那么会消耗很长的时间，所以这个时候使用消息中间件来进行异步执行各个非主流的业务。这样整个下单过程就会值消耗$100ms$的时间，而所有的非主流业务都执行了。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-78d930cb32bdde2112c5c0e70ddb1487_720w.jpg" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-f0f03f80551dabb7ba60367c25e4fb01_720w.jpg" alt=""></p>
<h2 id="2-削峰（负载均衡，抵抗请求高峰时期）"><a href="#2-削峰（负载均衡，抵抗请求高峰时期）" class="headerlink" title="2 削峰（负载均衡，抵抗请求高峰时期）"></a>2 削峰（负载均衡，抵抗请求高峰时期）</h2><p>假如某个服务器只能承受5000的访问量，那么当此时有8000的访问量时，那么当前的服务器一定会宕机，如果使用消息中间件，将所有的请求流量添加到消息中间件中，此时由服务器去消息中间件中取请求的事件，此时服务器可以根据当前的总请求数进行协调与均衡，不至于让服务器宕机。比如淘宝双十一凌晨12点时，此时流量会瞬间暴涨，但是淘宝的服务并没有挂掉，但是后有卡顿，等高峰过去之后，系统又可以恢复正常的运行。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-3a23d44b86a22ff42e33387b88433c6e_720w.jpg" alt=""></p>
<h2 id="3-解耦（降低系统耦合度）"><a href="#3-解耦（降低系统耦合度）" class="headerlink" title="3 解耦（降低系统耦合度）"></a>3 解耦（降低系统耦合度）</h2><p>正如之前所说，在订单付款时，可能伴随着很多的非主流业务的发生，但是这些业务之间应该解耦的，也就说各个业务之间的运行不能相互影响，当订单支付成功之后，将其支付成功的消息放到消息队列中， 各个非主流业务只要去监听消息队列中的支付成功的消息就可以了，如果监听到就执行相应的操作，就实现了各个功能的解耦。</p>
<h2 id="4-消息中间件的问题？"><a href="#4-消息中间件的问题？" class="headerlink" title="4 消息中间件的问题？"></a>4 <a href="https://juejin.im/post/6844903832074321927">消息中间件的问题？</a></h2><ul>
<li><p>重复消息（幂等性）</p>
<blockquote>
<p>首先你的明白重复消费会出现什么问题，为什么要保证幂等性。举个例子： 如果消费者干的事儿是拿一条数据就往数据库里写一条，你可能就把数据在数据库里插入了 2 次， 那么数据就错了。其实重复消费不可怕， 可怕的是你没考虑到重复消费之后，怎么保证幂等性。 解决： 每个消息加一个全局唯一的序号，根据序号判断这条消息是否处理过， 然后再根据自己的业务场景进行处理。或更新或丢弃。</p>
</blockquote>
</li>
<li><p>消息丢失</p>
<blockquote>
<ul>
<li><p>消息生产者把消息搞丢了： RabbitMQ开启 confirm 模式，如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 ack 消息， 告诉你说这个消息 ok 了。 如果 RabbitMQ 没能处理这个消息，会回调你的一个 nack 接口，告诉你这个消息接收失败，你可以重试。 而且你可以结合这个机制自己在内存里维护每个消息id的状态， 如果超过一定时间还没接收到这个消息的回调，那么你可以重发。</p>
</li>
<li><p>MQ自己搞丢了数据： RabbitMQ可以开启持久化</p>
</li>
<li><p>消费端丢失了数据： RabbitMQ默认是自动ack的，也就是说消息到了消费端，就会自动确认已经消费了这条消息， 这时候可能你消费端刚拿到数据，然后挂了，那这条消息不就丢失了。 关闭RabbitMQ的自动确认，每次消费端逻辑处理完的时候， 在程序里确认消费完成，通知MQ，这样就保证了在消费端不会丢失了</p>
</li>
</ul>
</blockquote>
</li>
<li><p>顺序消费</p>
<blockquote>
<ul>
<li><p>RabbitMQ： 拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点； 或者就一个 queue 但是对应一个 consumer</p>
</li>
<li><p>Kafka： 一个 topic，一个 partition，一个 consumer，内部单线程消费，单线程吞吐量太低， 一般不会用这个。 写 N 个内存 queue，具有相同 key 的数据都到同一个内存 queue；然后对于 N 个线程， 每个线程分别消费一个内存 queue 即可，这样就能保证顺序性。</p>
</li>
</ul>
</blockquote>
</li>
<li><p>系统复杂性</p>
<ul>
<li>使得原本的系统变得复杂，维护成本增加</li>
</ul>
</li>
<li><p>数据一致性：</p>
<ul>
<li>可以使用分布式事务解决该问题</li>
</ul>
</li>
<li><p>可用性：如果中间件挂了怎么办</p>
<ul>
<li>磁盘缓存，持久化</li>
</ul>
</li>
</ul>
<h2 id="5-不同消息中间件的对比、"><a href="#5-不同消息中间件的对比、" class="headerlink" title="5 不同消息中间件的对比、"></a>5 不同消息中间件的对比、</h2><p><strong>Kafka</strong>和<strong>RocketMQ</strong>一直在各自擅长的领域发光发亮，不过写这篇文章的时候我问了蚂蚁金服，字节跳动和美团的朋友，好像大家用的都有点不一样，应该都是各自的中间件，可能做过修改，也可能是<strong>自研</strong>的，大多<strong>没有开源</strong>。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-8234b69f5e46550bc5d95db96251d8b6_720w.jpg" alt=""></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是幂等性</title>
    <url>/midengxing/</url>
    <content><![CDATA[<h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p><strong>幂等性</strong>原本是数学上的概念，即使公式：$f(x)=f(f(x))$ 能够成立的数学性质。用在编程领域，则意为<code>对同一个系统，使用同样的条件，一次请求和重复的多次请求对系统资源的影响是一致的</code>。</p>
<p>幂等性是分布式系统设计中十分重要的概念，具有这一性质的接口在设计时总是秉持这样的一种理念：<code>调用接口发生异常并且重复尝试时，总是会造成系统所无法承受的损失，所以必须阻止这种现象的发生</code>。</p>
<p>幂等有两个维度：一是空间维度上的幂等，即幂等对象的范围，是个人还是机构，是某一次交易还是某种类型的交易…二是时间维度上的幂等，即幂等的保证时间，是几秒、几分钟还是永久性的…</p>
<p>不同的需求，会有不一样的解决方案，难度和成本也不一样。</p>
<h2 id="2、幂等性适用领域"><a href="#2、幂等性适用领域" class="headerlink" title="2、幂等性适用领域"></a>2、幂等性适用领域</h2><p>试想这样的一种场景：在电商平台上支付后，因为网络原因导致系统提示你支付失败，于是你又重新付款了一次，等完成后检查网银发现被系统扣了两次款，这是一种什么样的体验？</p>
<p>造成上述问题的原因可能有很多，比如第一次付款时实际支付成功，但是信息返回时网络中断导致系统误判；又比如第一次付款的确失败了，但第二次付款时发生意外，导致支付请求被重复发送等等。在一次支付的过程中，每个环节都有可能会发生问题，我们要如何规避这类问题引发的分险？</p>
<p>幂等性是解决这类问题的方案之一，所以在电商，银行，互联网金融等对数据准确性要求很高的领域中，这一特性具有十分重要的地位。</p>
<h2 id="3、幂等的常用思路"><a href="#3、幂等的常用思路" class="headerlink" title="3、幂等的常用思路"></a>3、幂等的常用思路</h2><h3 id="1-MVCC："><a href="#1-MVCC：" class="headerlink" title="1. MVCC："></a>1. MVCC：</h3><p>多版本并发控制，乐观锁的一种实现，在数据更新时需要去比较持有数据的版本号，版本号不一致的操作无法成功。例如博客点赞次数自动+1的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addCount</span><span class="params">(Long id, Long version)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">update blogTable <span class="keyword">set</span> count<span class="operator">=</span> count<span class="operator">+</span><span class="number">1</span>,version<span class="operator">=</span>version<span class="operator">+</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">321</span> and version<span class="operator">=</span><span class="number">123</span> </span><br></pre></td></tr></table></figure>

<p>每一个version只有一次执行成功的机会，一旦失败必须重新获取。</p>
<h3 id="2-去重表："><a href="#2-去重表：" class="headerlink" title="2. 去重表："></a>2. 去重表：</h3><p>利用数据库表单的特性来实现幂等，常用的一个思路是在表上构建唯一性索引，保证某一类数据一旦执行完毕，后续同样的请求再也无法成功写入。</p>
<p>例子还是上述的博客点赞问题，要想防止一个人重复点赞，可以设计一张表，将博客id与用户id绑定建立唯一索引，每当用户点赞时就往表中写入一条数据，这样重复点赞的数据就无法写入。</p>
<h3 id="3-TOKEN机制："><a href="#3-TOKEN机制：" class="headerlink" title="3. TOKEN机制："></a>3. TOKEN机制：</h3><p>这种机制就比较重要了，适用范围较广，有多种不同的实现方式。其核心思想是为每一次操作生成一个唯一性的凭证，也就是token。一个token在操作的每一个阶段只有一次执行权，一旦执行成功则保存执行结果。对重复的请求，返回同一个结果。</p>
<p>以电商平台为例子，电商平台上的订单id就是最适合的token。当用户下单时，会经历多个环节，比如生成订单，减库存，减优惠券等等。</p>
<p>每一个环节执行时都先检测一下该订单id是否已经执行过这一步骤，对未执行的请求，执行操作并缓存结果，而对已经执行过的id，则直接返回之前的执行结果，不做任何操作。这样可以在最大程度上避免操作的重复执行问题，缓存起来的执行结果也能用于事务的控制等。</p>
<h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>幂等性是分布式领域的一把利刃，每一个有志与分布式领域的程序员都应该熟悉它的设计思想。</p>
<h2 id="5、参考"><a href="#5、参考" class="headerlink" title="5、参考"></a>5、参考</h2><p><a href="https://www.jianshu.com/p/475589f5cd7b">简书</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>java interview</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 28. 对称的二叉树</title>
    <url>/mirror-tree/</url>
    <content><![CDATA[<h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1 题目"></a>1 题目</h2><blockquote>
<p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。<br>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。<br>1<br>/ \<br>2   2<br> / \ / \<br>3  4 4  3<br>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:<br>1<br>/ \<br>2    2<br>\     \<br>3    3<br>示例 1：<br>输入：root = [1,2,2,3,4,4,3]<br>输出：true<br>示例 2：<br>输入：root = [1,2,2,null,3,null,3]<br>输出：false<br>限制：<br>0 &lt;= 节点个数 &lt;= 1000<br>注意：本题与主站 101 题相同：<a href="https://leetcode-cn.com/problems/symmetric-tree/">https://leetcode-cn.com/problems/symmetric-tree/</a><br>作者：画手大鹏<br>链接：<a href="https://leetcode-cn.com/leetbook/read/illustrate-lcof/xsrxq1/">https://leetcode-cn.com/leetbook/read/illustrate-lcof/xsrxq1/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h2 id="2-深度优先搜索"><a href="#2-深度优先搜索" class="headerlink" title="2 深度优先搜索"></a>2 深度优先搜索</h2><p>有以下几种情况：</p>
<ul>
<li><p>左子树为空，右子树也为空  $true$</p>
</li>
<li><p>左子树为空，右子树不为空 $false$</p>
</li>
<li><p>左子树不为空，右子树为空，$false$</p>
</li>
<li><p>左子树不为空，右子树也不为空，进行进一步的判断</p>
<ul>
<li>左子树的值等于右子树的值，继续判断。如果所有的左右子树都满足这一条，则是$true$</li>
<li>左右子树的值不相等，$false$</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(root, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(TreeNode left, TreeNode right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="keyword">null</span> || right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//这里不能用else，如果用了else，那么后面的return语句就不能被执行</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (left.val == right.val) </span><br><span class="line">        &amp;&amp; dfs(left.left, right.right) </span><br><span class="line">        &amp;&amp; dfs(left.right, right.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-广度优先搜索"><a href="#3-广度优先搜索" class="headerlink" title="3 广度优先搜索"></a>3 广度优先搜索</h2><p>判断思路与上面的深度优先搜索的思路相同，只不过这里使用广度优先搜索的方法进行求解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || (root.left == <span class="keyword">null</span> &amp;&amp;root.right == <span class="keyword">null</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.add(root.left);</span><br><span class="line">        q.add(root.right);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            TreeNode l = q.poll();</span><br><span class="line">            TreeNode r = q.poll();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (l == <span class="keyword">null</span> &amp;&amp; r == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">//这里不能直接返回true，应该继续判断，知道整棵二叉树都满足该特点</span></span><br><span class="line">            <span class="keyword">if</span> (l == <span class="keyword">null</span> || r == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (l.val != r.val)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            </span><br><span class="line">            q.add(l.left);</span><br><span class="line">            q.add(r.right);</span><br><span class="line"></span><br><span class="line">            q.add(l.right);</span><br><span class="line">            q.add(r.left);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>tree</tag>
        <tag>simple</tag>
      </tags>
  </entry>
  <entry>
    <title>教你如何用Markdown引用网易云音乐</title>
    <url>/music-test/</url>
    <content><![CDATA[<h3 id="1-固定长度"><a href="#1-固定长度" class="headerlink" title="1 固定长度"></a>1 固定长度</h3><p>复制下面的代码，到你的Markdown中，就可以实现音乐播放的功能，音乐源引用自网易云音乐。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;yes&quot;</span> <span class="attr">border</span>=<span class="string">&quot;100&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;4&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">333</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=1295824647&amp;auto=1&amp;height=66&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=3932159&auto=1&height=66"></iframe> 

<p><strong>参数解释：</strong>  </p>
<ul>
<li>auto 1:自动播放 0:不自动播放</li>
<li>width 控制播放条的长度，默认是333px</li>
<li>height 控制播放条的高度，默认是86px(px是像素的单位)</li>
<li>src 歌曲的链接地址，可以在网页版的网易云平台搜索自己喜欢的歌曲查看，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1232314fdgdfsg.png" alt="image"></li>
</ul>
<h3 id="2-自适应长度"><a href="#2-自适应长度" class="headerlink" title="2 自适应长度"></a>2 自适应长度</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">100%</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=1295824647&amp;auto=0&amp;height=66&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=1295824647&auto=0&height=66"></iframe>


<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>play</tag>
        <tag>music</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql索引</title>
    <url>/mysql-index/</url>
    <content><![CDATA[<h2 id="1-索引"><a href="#1-索引" class="headerlink" title="1 索引"></a>1 索引</h2><p><code>MySQL</code>中的索引由<code>MySQL</code>来维护，不需要人为维护，<code>MySQL</code>中的索引分成5类：主键索引、唯一索引、普通索引、全文索引和组合索引。</p>
<ol>
<li>主键索引：主键是一种唯一索引，但它必须被指定为<code>primary key</code>，每个表只能有一个主键（主键并代表只有一列数据，因为主键也可以有联合主键，即多个列的唯一即可）</li>
<li>唯一索引：索引列的所有值都只能出现一次，即必须唯一，但是值也可以为空，空可以出现多次</li>
<li>普通索引：基本的索引，值可以为空，没有唯一性的限制</li>
<li>组合索引：表中的多个列组成一个索引，专门用于组合搜索</li>
<li>全文索引：全文索引的索引类型为<code>FULLEXT</code>，全文索引可以在<code>varchar</code>、<code>char</code>、<code>text</code>类型的列上创建。</li>
</ol>
<h2 id="2-MySQL存储引擎"><a href="#2-MySQL存储引擎" class="headerlink" title="2 MySQL存储引擎"></a>2 MySQL存储引擎</h2><p>MySQL有两种存储引擎，分别是<code>InnoDB</code>和<code>MyISAM</code>，他们的区别如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>MyISAN</th>
<th>InnoDB</th>
</tr>
</thead>
<tbody><tr>
<td>索引类型</td>
<td>非聚簇索引</td>
<td>聚簇索引</td>
</tr>
<tr>
<td>支持事务</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>支持表锁</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>支持行锁</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>支持外键</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>支持全文索引</td>
<td>是</td>
<td>是（5.6以后支持）</td>
</tr>
<tr>
<td>适合操作类型</td>
<td>大量<code>select</code></td>
<td>大量<code>insert</code>、<code>delete</code>、<code>update</code></td>
</tr>
</tbody></table>
<blockquote>
<p><strong><code>B-Tree</code>和<code>B+Tree</code>的区别？</strong></p>
<ul>
<li><code>B-Tree</code>的叶子节点和中间都存储数据</li>
<li><code>B+Tree</code>中间节点存索引的<code>key</code>，只有叶子节点才存储索引的<code>key</code>对应的记录值</li>
</ul>
<p><strong>注意：<code>B-Tree</code>的中文名称是<code>B树</code>，而不是<code>B减树</code>，这里需要注意一下。</strong></p>
</blockquote>
<h3 id="2-1-InnoDB–B-Tree"><a href="#2-1-InnoDB–B-Tree" class="headerlink" title="2.1 InnoDB–B+Tree"></a>2.1 InnoDB–B+Tree</h3><blockquote>
<p>注意：</p>
<ol>
<li><code>InnoDB</code>是通过<code>B+Tree</code>结构对主键创建索引，然后叶子节点存储记录，如果该表没有主键，那么会选唯一键当成创建索引的”主键“；如果没有唯一键，那么会生产一个6位的<code>row_id</code>来作为创建索引的”主键“。</li>
<li>如果创建索引的键是表中的其他字段，那么在叶子节点中存储的数据是该条记录的主键而不是整条记录的数据，然后再通过主键索引找到对应的记录。</li>
</ol>
</blockquote>
<p>举个例子，假如这里有一张<code>user</code>表，表中有三个字段，分别是<code>id</code>、<code>name</code>、<code>age</code>。其中<code>id</code>是主键，然后在<code>name</code>这一列上创建了一个索引。那么当在查询语句的条件中使用了<code>name</code>作为条件的话，此时在<code>MySQL</code>的底层会走两次<code>B+Tree</code>的索引树，这个过程也叫<strong>回表</strong>。具体流程如下：</p>
<ol>
<li><p>首先通过<code>name</code>的值在<code>name</code>的索引树进行查找，上面介绍过，如果创建索引的键是表中的其他字段，即不是主键，那么在索引树的叶子节点中存放的是该表的主键，而不是该条记录。那么此时使用<code>name</code>作为条件进行查找的时候，会先走<code>name</code>的索引树，如果在<code>name</code>索引树中找到了相应的值，那么此时就到了叶子节点，也就拿到了该条记录对应的主键的值，然后<code>MySQL</code>再拿着这个主键的值去以主键为索引的索引树中查找那条记录的值，也就是说走了两次<code>B+Tree</code>索引树。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210821212756.png" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210821212702.png" alt=""></p>
</li>
<li><p>也就是说如果使用的是非主键索引进行查找的时候，要比使用主键索引进行查找更慢，但是这个影响有限，因为每次<code>IO</code>从磁盘中读取的一个数据块的大小大概是<code>4KB</code>，这个大小对电脑的性能影响比较小。</p>
</li>
</ol>
<h3 id="2-2-MyISAM–B-Tree"><a href="#2-2-MyISAM–B-Tree" class="headerlink" title="2.2 MyISAM–B+Tree"></a>2.2 MyISAM–B+Tree</h3><blockquote>
<p>注意：</p>
<ol>
<li><p><code>MyISAM</code>引擎的索引结构和<code>InnoDB</code>类似，但是有区别，就是<code>InnoDB</code>会将主键索引所对应的那条记录的数据和索引值放在叶子节点，而<code>MyISAM</code>只是将该条记录存放的地址放在叶子节点，当通过索引找到对应的值之后，还需要根据这个地址去对应地址中取数据，这个过程需要耗费一定的时间，但是<code>MyISAM</code>创建的索引树会相比<code>InnoDB</code>创建的索引树更轻量。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210821212624.png" alt=""></p>
</li>
</ol>
</blockquote>
<h3 id="2-3-memory存储引擎"><a href="#2-3-memory存储引擎" class="headerlink" title="2.3 memory存储引擎"></a>2.3 memory存储引擎</h3><p>hash索引基于哈希表实现，只有精确匹配索引所有列的查询才有效。Memory引擎默认使用的是此种索引。</p>
<blockquote>
<p>存储引擎对所有的索引列计算出一个哈希码，将哈希码存储在索引中，同时哈希表中保存每个数据行的指针。这样，对于此种索引查找速度是非常快的。出现哈希值碰撞的话，索引会以链表的形式存放多个记录指针到同一个哈希条目中。</p>
</blockquote>
<p><strong>举个🌰：</strong></p>
<table>
<thead>
<tr>
<th align="center">name</th>
<th align="center">age</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Jane</td>
<td align="center">28</td>
</tr>
<tr>
<td align="center">Peter</td>
<td align="center">20</td>
</tr>
<tr>
<td align="center">David</td>
<td align="center">30</td>
</tr>
</tbody></table>
<p>假设使用假想的哈希函数f()，生成对应的设想值：</p>
<ul>
<li>f(‘Jane’) = 2323</li>
<li>f(‘Peter’) = 2456</li>
<li>f(‘David’) = 2400</li>
</ul>
<p>则哈希索引的数据结构如下：</p>
<table>
<thead>
<tr>
<th align="center">槽(slot)</th>
<th align="center">值(value)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2323</td>
<td align="center">指向第1行指针</td>
</tr>
<tr>
<td align="center">2400</td>
<td align="center">指向第3行指针</td>
</tr>
<tr>
<td align="center">2456</td>
<td align="center">指向第2行指针</td>
</tr>
</tbody></table>
<p>对于<code>select * from user where</code>name<code>= &#39;Jane&#39;</code>那么直接先算<code>Jane</code>的哈希值，然后根据<code>Jane</code>的hash值2323去找到对应的第一行数据，查询速度相对于<code>B-Tree</code>索引是要快，但是也有一些局限：</p>
<ul>
<li><code>hash</code>索引中只有<code>hash</code>值和行数的指针，因此无法直接使用索引来避免读取行，但是因为这种索引读取快，性能影响不明显。</li>
<li><code>hash</code>索引不是按照索引值顺序存储，无法使用于排序。</li>
<li>不支持部分列匹配查找，这里面是使用索引列的全部内容来计算哈希值，例如<code>(A,B)</code>两列一起建索引，单纯使用<code>A</code>一列，那么就无法使用索引，<code>B-Tree</code>索引的话，因为支持匹配最左前缀，所以这种情况适用性偏好。</li>
<li>哈希索引只支持等值查询，包括<code>=</code>、<code>in()</code>、<code>&lt;=&gt;</code>，不支持<code>where age &gt; 10</code> 这种范围查询。</li>
<li>哈希冲突很多的话，维护索引操作的代价也很高</li>
</ul>
<h2 id="3-索引的最左匹配原则"><a href="#3-索引的最左匹配原则" class="headerlink" title="3 索引的最左匹配原则"></a>3 索引的最左匹配原则</h2><p><strong>最左前缀匹配原则：</strong>在MySQL建立联合索引时会遵守最左前缀匹配原则，即最左优先，在检索数据时从联合索引的最左边开始匹配。</p>
<p>　　要想理解联合索引的最左匹配原则，先来理解下索引的底层原理。索引的底层是一颗B+树，那么联合索引的底层也就是一颗B+树，只不过联合索引的B+树节点中存储的是键值。由于构建一棵B+树只能根据一个值来确定索引关系，所以数据库依赖联合索引最左的字段来构建。</p>
<p>举例：创建一个（a,b）的联合索引，那么它的索引树就是下图的样子。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521182659976-48843100.png" alt="img-1"></p>
<p> 　可以看到a的值是有顺序的，1，1，2，2，3，3，而b的值是没有顺序的1，2，1，4，1，2。但是我们又可发现a在等值的情况下，b值又是按顺序排列的，但是这种顺序是相对的。这是因为MySQL创建联合索引的规则是首先会对联合索引的最左边第一个字段排序，在第一个字段的排序基础上，然后在对第二个字段进行排序。所以b=2这种查询条件没有办法利用索引。</p>
<p>　　由于整个过程是基于explain结果分析的，那接下来在了解下explain中的type字段和key_lef字段。</p>
<ol>
<li><blockquote>
<p><strong>type：联接类型。下面给出各种联接类型,按照从最佳类型到最坏类型进行排序:（重点看ref,rang,index）</strong></p>
<ol>
<li>system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现，可以忽略不计</li>
<li>const：表示通过索引一次就找到了，const用于比较primary key 或者 unique索引。因为只需匹配一行数据，所有很快。如果将主键置于where列表中，mysql就能将该查询转换为一个const</li>
<li>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键 或 唯一索引扫描。</li>
<li>注意：ALL全表扫描的表记录最少的表如t1表</li>
<li><strong>ref</strong>：非唯一性索引扫描，返回匹配某个单独值的所有行。本质是也是一种索引访问，它返回所有匹配某个单独值的行，然而他可能会找到多个符合条件的行，所以它应该属于查找和扫描的混合体。</li>
<li><strong>range</strong>：只检索给定范围的行，使用一个索引来选择行。key列显示使用了那个索引。一般就是在where语句中出现了bettween、&lt;、&gt;、in等的查询。这种索引列上的范围扫描比全索引扫描要好。只需要开始于某个点，结束于另一个点，不用扫描全部索引。</li>
<li><strong>index</strong>：Full Index Scan，index与ALL区别为index类型只遍历索引树。这通常为ALL块，应为索引文件通常比数据文件小。（Index与ALL虽然都是读全表，但index是从索引中读取，而ALL是从硬盘读取）</li>
<li>ALL：Full Table Scan，遍历全表以找到匹配的行</li>
</ol>
</blockquote>
</li>
<li><blockquote>
<p>key_len：显示MySQL实际决定使用的索引的长度。如果索引是NULL，则长度为NULL。如果不是NULL，则为使用的索引的长度。所以通过此字段就可推断出使用了那个索引。</p>
<p>计算规则：</p>
<ol>
<li>定长字段，int占用4个字节，date占用3个字节，char(n)占用n个字符。</li>
<li>变长字段varchar(n)，则占用n个字符+两个字节。</li>
<li>不同的字符集，一个字符占用的字节数是不同的。Latin1编码的，一个字符占用一个字节，gdk编码的，一个字符占用两个字节，utf-8编码的，一个字符占用三个字节。（由于我数据库使用的是Latin1编码的格式，所以在后面的计算中，一个字符按一个字节算）</li>
<li>对于所有的索引字段，如果设置为NULL，则还需要1个字节。</li>
</ol>
</blockquote>
</li>
</ol>
<p>示例：<br>首先创建一个表</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521193154655-543474107.png" alt="img-2"></p>
<p> 该表中对id列.name列.age列建立了一个联合索引 id_name_age_index，实际上相当于建立了三个索引（id）（id_name）（id_name_age）。</p>
<p>下面介绍下可能会使用到该索引的几种情况：</p>
<h3 id="3-1-全值匹配查询时"><a href="#3-1-全值匹配查询时" class="headerlink" title="3.1 全值匹配查询时"></a><strong>3.1 全值匹配查询时</strong></h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521202947593-2126832810.png" alt="img-3"></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521203003652-366842075.png" alt="img-4"></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521203020127-1655735915.png" alt="img-5"></p>
<p>　　通过观察上面的结果图可知，where后面的查询条件，不论是使用（id，age，name）（name，id，age）还是（age，name，id）顺序，在查询时都使用到了联合索引，可能有同学会疑惑，为什么底下两个的搜索条件明明没有按照联合索引从左到右进行匹配，却也使用到了联合索引？ 这是因为MySQL中有查询优化器explain，所以sql语句中字段的顺序不需要和联合索引定义的字段顺序相同，查询优化器会判断纠正这条SQL语句以什么样的顺序执行效率高，最后才能生成真正的执行计划，所以不论以何种顺序都可使用到联合索引。另外通过观察上面三个图中的key_len字段，也可说明在搜索时使用的联合索引中的（id_name_age）索引，因为id为int型，允许null，所以占5个字节，name为char(10)，允许null，又使用的是latin1编码，所以占11个字节，age为int型允许null，所以也占用5个字节，所以该索引长度为21（5+11+5），而上面key_len的值也正好为21，可证明使用的（id_name_age）索引。</p>
<h3 id="3-2-匹配最左边的列时"><a href="#3-2-匹配最左边的列时" class="headerlink" title="3.2 匹配最左边的列时"></a><strong>3.2 匹配最左边的列时</strong></h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521202447168-1029938685.png" alt="img-6"></p>
<p>　　该搜索是遵循最左匹配原则的，通过key字段也可知，在搜索过程中使用到了联合索引，且使用的是联合索引中的（id）索引，因为key_len字段值为5，而id索引的长度正好为5（因为id为int型，允许null，所以占5个字节）。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521202737461-1486677111.png" alt="img-7"></p>
<p>　　由于id到name是从左边依次往右边匹配，这两个字段中的值都是有序的，所以也遵循最左匹配原则，通过key字段可知，在搜索过程中也使用到了联合索引，但使用的是联合索引中的（id_name）索引，因为key_len字段值为16，而(id_name)索引的长度正好为16（因为id为int型，允许null，所以占5个字节，name为char(10)，允许null，又使用的是latin1编码，所以占11个字节）。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521202810363-1061003410.png" alt="img-8"></p>
<p>　　由于上面三个搜索都是从最左边id依次向右开始匹配的，所以都用到了id_name_age_index联合索引。</p>
<p>　　那如果不是依次匹配呢？</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521204203700-302471529.png" alt="img-9"></p>
<p>　　通过key字段可知，在搜索过程中也使用到了联合索引，但使用的是联合索引中的（id）索引，从key_len字段也可知。因为联合索引树是按照id字段创建的，但age相对于id来说是无序的，只有id只有序的，所以他只能使用联合索引中的id索引。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521203757147-65081383.png" alt="img-10"></p>
<p>　　通过观察发现上面key字段发现在搜索中也使用了id_name_age_index索引，可能许多同学就会疑惑它并没有遵守最左匹配原则，按道理会索引失效，为什么也使用到了联合索引？因为没有从id开始匹配，且name单独来说是无序的，所以它确实不遵循最左匹配原则，然而从type字段可知，它虽然使用了联合索引，但是它是对整个索引树进行了扫描，正好匹配到该索引，与最左匹配原则无关，一般只要是某联合索引的一部分，但又不遵循最左匹配原则时，都可能会采用index类型的方式扫描，但它的效率远不如最做匹配原则的查询效率高，index类型类型的扫描方式是从索引第一个字段一个一个的查找，直到找到符合的某个索引，与all不同的是，index是对所有索引树进行扫描，而all是对整个磁盘的数据进行全表扫描。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521203731486-172947522.png" alt="img-11"></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521203818877-809915868.png" alt="img-12"></p>
<p> 　这两个结果跟上面的是同样的道理，由于它们都没有从最左边开始匹配，所以没有用到联合索引，使用的都是index全索引扫描。</p>
<h3 id="3-3-匹配列前缀"><a href="#3-3-匹配列前缀" class="headerlink" title="3.3 匹配列前缀"></a><strong>3.3 匹配列前缀</strong></h3><p>　　如果id是字符型，那么前缀匹配用的是索引，中坠和后缀用的是全表扫描。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from staffs where id like &#x27;A%&#x27;;//前缀都是排好序的，使用的都是联合索引</span><br><span class="line">select * from staffs where id like &#x27;%A%&#x27;;//全表查询</span><br><span class="line">select * from staffs where id like &#x27;%A&#x27;;//全表查询</span><br></pre></td></tr></table></figure>

<h3 id="3-4-匹配范围值"><a href="#3-4-匹配范围值" class="headerlink" title="3.4 匹配范围值"></a><strong>3.4 匹配范围值</strong></h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521210125009-1177423028.png" alt="img-13"></p>
<p> 　在匹配的过程中遇到&lt;&gt;=号，就会停止匹配，但id本身就是有序的，所以通过possible_keys字段和key_len 字段可知，在该搜索过程中使用了联合索引的id索引（因为id为int型，允许null，所以占5个字节），且进行的是rang范围查询。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200522115901524-226070462.png" alt="img-14"></p>
<p>　　由于不遵循最左匹配原则，且在id&lt;4的范围中，age是无序的，所以使用的是index全索引扫描。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521210146172-1428008775.png" alt="img-15"></p>
<p> 　不遵循最左匹配原则，但在数据库中id&lt;2的只有一条（id），所以在id&lt;2的范围中，age是有序的，所以使用的是rang范围查询。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521210203002-1943736888.png" alt="img-16"></p>
<p> 　不遵循最左匹配原则，而age又是无序的，所以进行的全索引扫描。</p>
<h3 id="3-5-准确匹配第一列并范围匹配其他某一列"><a href="#3-5-准确匹配第一列并范围匹配其他某一列" class="headerlink" title="3.5 准确匹配第一列并范围匹配其他某一列"></a><strong>3.5 准确匹配第一列并范围匹配其他某一列</strong></h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1804577-20200521210726024-2037980339.png" alt="img-17"></p>
<p>　　由于搜索中有id=1，所以在id范围内age是无序的，所以只使用了联合索引中的id索引。</p>
<h2 id="4-相关名词"><a href="#4-相关名词" class="headerlink" title="4 相关名词"></a>4 相关名词</h2><h3 id="4-1-索引覆盖"><a href="#4-1-索引覆盖" class="headerlink" title="4.1 索引覆盖"></a>4.1 索引覆盖</h3><p>假设有一张<code>user</code>表，表中有4个字段，分别是<code>id</code>、<code>name</code>、<code>age</code>、<code>gender</code>，其中<code>id</code>是主键，由于大部分情况需要根据<code>name</code>进行查找，所以在name<code>这</code>一列上创建了一个索引，假如有以下两个SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name<span class="operator">=</span>&quot;lisi&quot;;</span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name<span class="operator">=</span>&quot;lisi&quot;;</span><br></pre></td></tr></table></figure>

<p>第一个<code>SQL</code>语句通过<code>name</code>进行查找，首先在<code>name</code>索引的<code>B+Tree</code>树中查找到对应的那条记录的主键<code>id</code>的值，但是由于这里查找的所有字段，但是在<code>name</code>索引树的叶子节点中只存放了主键的值，所以需要进行<strong>回表</strong>查找</p>
<p>第二个<code>SQL</code>语句中同样也是用<code>name</code>进行查找，但是这里查找的结果是<code>id</code>，由于<code>id</code>是主键，所以在<code>name</code>索引树的叶子节点就能直接拿到<code>id</code>的值，不再需要回表查询，这个动作叫做相关名词：</p>
<h3 id="4-2-索引下推"><a href="#4-2-索引下推" class="headerlink" title="4.2 索引下推"></a>4.2 索引下推</h3><blockquote>
<p>索引条件下推，<code>Index Condition Pushdown</code>，简称<code>ICP</code>，是<code>MySQL</code>内部通过索引查询数据的一种优化方法，简单来说就是将原本需要在Server层对数据进行过滤的条件下推到了引擎层去做，在引擎层过滤更多的数据，这样从引擎层发送到<code>Server</code>层的数据就会显著减少，从而优化性能。</p>
<p><strong>注意：只有组合索引中才会出现索引下推，否则不会使用到索引下推。</strong></p>
</blockquote>
<p>假设有这么个需求，查询表中<strong>“名字第一个字是张，性别男，年龄为10岁的所有记录”</strong>。那么，查询语句是这么写的：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tuser <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张 %&#x27;</span> <span class="keyword">and</span> age<span class="operator">=</span><span class="number">10</span> <span class="keyword">and</span> ismale<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>根据前面说的“最左前缀原则”，该语句在搜索索引树的时候，只能匹配到名字第一个字是‘张’的记录（即记录<code>ID3</code>），接下来是怎么处理的呢？当然就是从ID3开始，逐个回表，到主键索引上找出相应的记录，再比对<code>age</code>和<code>ismale</code>这两个字段的值是否符合。</p>
<p>但是！<code>MySQL 5.6</code>引入了索引下推优化，可以在索引遍历过程中，<strong>对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表字数</strong>。<br> 下面图1、图2分别展示这两种情况。</p>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article2/6271376-e4e98a8af8fc9ca8.png" alt="图1" style="zoom:67%;" />

<img src= "/img/loading.gif" data-src="https://jums.club/images/article2/6271376-53f9161adfddeb10.png" style="zoom:67%;" alt="图2"/>

<p>图 1 中，在 (name,age) 索引里面我特意去掉了 age 的值，<strong>这个过程 InnoDB 并不会去看 age 的值</strong>，只是按顺序把“<code>name</code> 第一个字是’张’”的记录一条条取出来回表。因此，需要回表 4 次。</p>
<p>图 2 跟图 1 的区别是，<code>InnoDB</code> 在 <code>(name,age)</code> 索引内部就判断了 <code>age</code> 是否等于 10，对于不等于 10 的记录，直接判断并跳过。在我们的这个例子中，只需要对 <code>ID4</code>、<code>ID5</code> 这两条记录回表取数据判断，就只需要回表 2 次。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/ljl150/p/12934071.html">https://www.cnblogs.com/ljl150/p/12934071.html</a></li>
<li><a href="https://www.jianshu.com/p/d0d3de6832b9">https://www.jianshu.com/p/d0d3de6832b9</a></li>
<li><a href="https://www.bilibili.com/video/BV1K64y1F76m?from=search&seid=9032653878359467248">由浅入深，透彻解析MySQL索引机制，MySQL索引优化——分类+储存引擎+实现原理+索引优化</a></li>
<li><a href="https://www.jianshu.com/p/1c307a1e17fd">https://www.jianshu.com/p/1c307a1e17fd</a></li>
<li><a href="https://blog.csdn.net/weixin_28909161/article/details/114897079">https://blog.csdn.net/weixin_28909161/article/details/114897079</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言自动化处理文件夹中的文件</title>
    <url>/markdown-format/</url>
    <content><![CDATA[<h3 id="0-功能"><a href="#0-功能" class="headerlink" title="0 功能"></a>0 功能</h3><p>将文件夹中的PDF文件，转化成<code>markdwon</code>格式的链接语法，即<code>[]()</code>格式，输入自己的<code>github</code>存放地址以及文件夹路径即可。</p>
<h3 id="1-代码"><a href="#1-代码" class="headerlink" title="1 代码"></a>1 代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _*_ coding=utf-8 _*_</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这个程序用来整理文件夹中的PDF文件，将其转化成Markdown格式的链接，即[]()的形式</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> os,re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_book_lists</span>():</span></span><br><span class="line">    root_dir = <span class="string">r&quot;J:\电子书&quot;</span></span><br><span class="line">    dir_tree = os.walk(root_dir)</span><br><span class="line">    sub_dir = dir_tree.__next__()[<span class="number">1</span>]</span><br><span class="line">    pdf_list = []</span><br><span class="line">    <span class="keyword">for</span> sub <span class="keyword">in</span> sub_dir:</span><br><span class="line">        <span class="keyword">for</span> _sub <span class="keyword">in</span> os.walk(root_dir + <span class="string">&quot;\\&quot;</span> + <span class="built_in">str</span>(sub)):</span><br><span class="line">            _book_list = _sub[-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> _sub[<span class="number">1</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">for</span> book <span class="keyword">in</span> _book_list:</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;.pdf&quot;</span> <span class="keyword">in</span> book:</span><br><span class="line">                        pdf_list.append(book)</span><br><span class="line">    <span class="keyword">return</span> pdf_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url_links</span>(<span class="params">book_list</span>):</span></span><br><span class="line">    urls = []</span><br><span class="line">    url = <span class="string">&quot;https://jums.club/images/article/pdf&quot;</span></span><br><span class="line">    <span class="keyword">for</span> book <span class="keyword">in</span> book_list:</span><br><span class="line">        book = re.sub(<span class="string">&quot; |:|：|，|,|（|）|\(|\)&quot;</span>,<span class="string">&quot;_&quot;</span>,book)</span><br><span class="line">        book = re.sub(<span class="string">&quot;《|》&quot;</span>,<span class="string">&quot;&quot;</span>,book)</span><br><span class="line">        _url = <span class="string">&quot;[&#123;&#125;](&#123;&#125;/&#123;&#125;)    &quot;</span>.<span class="built_in">format</span>(book[:-<span class="number">4</span>], url, book)</span><br><span class="line">        urls.append(_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_markdown_format</span>(<span class="params">book_list,urls,type_name</span>):</span></span><br><span class="line">    <span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> type_name:</span><br><span class="line">        <span class="built_in">dict</span>[i] = []</span><br><span class="line">    <span class="comment"># print(dict)</span></span><br><span class="line">    <span class="built_in">dict</span>[<span class="string">&quot;other&quot;</span>] = []</span><br><span class="line">    used = []</span><br><span class="line">    <span class="keyword">for</span> each_url <span class="keyword">in</span> urls:</span><br><span class="line">        <span class="keyword">for</span> each_name <span class="keyword">in</span> type_name:</span><br><span class="line">            <span class="keyword">if</span> each_name <span class="keyword">in</span> each_url:</span><br><span class="line">                _ = <span class="built_in">dict</span>[each_name]</span><br><span class="line">                _.append(each_url)</span><br><span class="line">                used.append(each_url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(urls))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(used))</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> type_name:</span><br><span class="line">        _<span class="built_in">list</span> = <span class="built_in">dict</span>[each]</span><br><span class="line">        <span class="built_in">print</span>(each + <span class="string">&quot;:   &quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> _url <span class="keyword">in</span> _<span class="built_in">list</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;- &#123;&#125;&quot;</span>.<span class="built_in">format</span>(_url))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;other:    &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> urls:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> used:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;- &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    book_list = get_book_lists()</span><br><span class="line">    urls = get_url_links(book_list)</span><br><span class="line">    type_name = [<span class="string">&quot;Python&quot;</span>,<span class="string">&quot;SQL&quot;</span>,<span class="string">&quot;TCP-IP详解&quot;</span>,<span class="string">&quot;Kali_Linux无线网络渗透测试&quot;</span>,<span class="string">&quot;HTTP&quot;</span>,<span class="string">&quot;Shell&quot;</span>,<span class="string">&quot;Linux&quot;</span>]</span><br><span class="line">    show_markdown_format(book_list,urls,type_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>program language</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题，文章链接是当前域名下的一个项目，并不是直接链接，修改版权部分信息</title>
    <url>/next-change-copyright/</url>
    <content><![CDATA[<h3 id="1-修改前部分"><a href="#1-修改前部分" class="headerlink" title="1 修改前部分"></a>1 修改前部分</h3><p>文件路径：<code>G:hexo-blog\lizhi\themes\next\layout\_macro\post-copyright.swg</code>   </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;ul</span> <span class="string">class=&quot;post-copyright&quot;&gt;</span></span><br><span class="line">  <span class="string">&lt;li</span> <span class="string">class=&quot;post-copyright-author&quot;&gt;</span></span><br><span class="line">    <span class="string">&lt;strong&gt;&#123;&#123;</span> <span class="string">__(&#x27;post.copyright.author&#x27;)</span> <span class="string">+</span> <span class="string">__(&#x27;symbol.colon&#x27;)</span> <span class="string">&#125;&#125;&lt;/strong&gt;</span></span><br><span class="line">    &#123;&#123; <span class="string">post.author</span> <span class="string">|</span> <span class="string">default(config.author)</span> &#125;&#125; </span><br><span class="line">  <span class="string">&lt;/li&gt;</span></span><br><span class="line">  <span class="string">&lt;li</span> <span class="string">class=&quot;post-copyright-link&quot;&gt;</span></span><br><span class="line">    <span class="string">&lt;strong&gt;&#123;&#123;</span> <span class="string">__(&#x27;post.copyright.link&#x27;)</span> <span class="string">+</span> <span class="string">__(&#x27;symbol.colon&#x27;)</span> <span class="string">&#125;&#125;&lt;/strong&gt;</span></span><br><span class="line">    <span class="string">&lt;a</span> <span class="string">href=&quot;&#123;&#123;</span> <span class="string">post.url</span> <span class="string">|</span> <span class="string">default(post.permalink)</span> <span class="string">&#125;&#125;&quot;</span> <span class="string">title=&quot;&#123;&#123;</span> <span class="string">post.title</span> <span class="string">&#125;&#125;&quot;&gt;&#123;&#123;</span> <span class="string">post.url</span>  <span class="string">|</span> <span class="string">default(post.permalink)</span> <span class="string">&#125;&#125;&lt;/a&gt;</span></span><br><span class="line">  <span class="string">&lt;/li&gt;</span></span><br><span class="line">  <span class="string">&lt;li</span> <span class="string">class=&quot;post-copyright-license&quot;&gt;</span></span><br><span class="line">    <span class="string">&lt;strong&gt;&#123;&#123;</span> <span class="string">__(&#x27;post.copyright.license_title&#x27;)</span> <span class="string">+</span> <span class="string">__(&#x27;symbol.colon&#x27;)</span> <span class="string">&#125;&#125;</span> <span class="string">&lt;/strong&gt;</span></span><br><span class="line">    &#123;&#123; <span class="string">__(&#x27;post.copyright.license_content&#x27;</span>, <span class="string">theme.post_copyright.license_url</span>, <span class="string">theme.post_copyright.license)</span> &#125;&#125;</span><br><span class="line">  <span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-修改后"><a href="#2-修改后" class="headerlink" title="2 修改后"></a>2 修改后</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;ul</span> <span class="string">class=&quot;post-copyright&quot;&gt;</span></span><br><span class="line">  <span class="string">&lt;li</span> <span class="string">class=&quot;post-copyright-author&quot;&gt;</span></span><br><span class="line">    <span class="string">&lt;strong&gt;&#123;&#123;</span> <span class="string">__(&#x27;post.copyright.author&#x27;)</span> <span class="string">+</span> <span class="string">__(&#x27;symbol.colon&#x27;)</span> <span class="string">&#125;&#125;&lt;/strong&gt;</span></span><br><span class="line">    &#123;&#123; <span class="string">post.author</span> <span class="string">|</span> <span class="string">default(config.author)</span> &#125;&#125; <span class="string">|</span> <span class="string">微信公众号：【麦田里的守望者zhg】</span></span><br><span class="line">  <span class="string">&lt;/li&gt;</span></span><br><span class="line">  <span class="string">&lt;li</span> <span class="string">class=&quot;post-copyright-link&quot;&gt;</span></span><br><span class="line">    <span class="string">&lt;strong&gt;&#123;&#123;</span> <span class="string">__(&#x27;post.copyright.link&#x27;)</span> <span class="string">+</span> <span class="string">__(&#x27;symbol.colon&#x27;)</span> <span class="string">&#125;&#125;&lt;/strong&gt;</span></span><br><span class="line">    <span class="string">&lt;a</span> <span class="string">href=&quot;https://jums.club/lizhi/&#123;&#123;</span> <span class="string">post.path</span> <span class="string">|</span> <span class="string">default(post.permalink)</span> <span class="string">&#125;&#125;&quot;</span> <span class="string">title=&quot;&#123;&#123;</span> <span class="string">post.title</span> <span class="string">&#125;&#125;&quot;&gt;https://jums.club/lizhi/&#123;&#123;</span> <span class="string">post.path</span>  <span class="string">|</span> <span class="string">default(post.permalink)</span> <span class="string">&#125;&#125;&lt;/a&gt;</span></span><br><span class="line">  <span class="string">&lt;/li&gt;</span></span><br><span class="line">  <span class="string">&lt;li</span> <span class="string">class=&quot;post-copyright-license&quot;&gt;</span></span><br><span class="line">    <span class="string">&lt;strong&gt;&#123;&#123;</span> <span class="string">__(&#x27;post.copyright.license_title&#x27;)</span> <span class="string">+</span> <span class="string">__(&#x27;symbol.colon&#x27;)</span> <span class="string">&#125;&#125;</span> <span class="string">&lt;/strong&gt;</span></span><br><span class="line">    &#123;&#123; <span class="string">__(&#x27;post.copyright.license_content&#x27;</span>, <span class="string">theme.post_copyright.license_url</span>, <span class="string">theme.post_copyright.license)</span> &#125;&#125;</span><br><span class="line">  <span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改部分：<br>在<code>post.url</code>前面加上你的项目域名地址，然后将<code>post.url</code>改成<code>post.path</code>。大功告成。<br>修改前的效果：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200515103043295.jpg" alt="修改前"><br>修改后的效果：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200515102826349.jpg" alt="修改后"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下，如何将MySQL从C盘迁移到其他盘以及解决MySQL迁移数据目录后不能启动服务</title>
    <url>/mysql-to-another-disk/</url>
    <content><![CDATA[<h3 id="1-关闭MySQL服务"><a href="#1-关闭MySQL服务" class="headerlink" title="1 关闭MySQL服务"></a>1 关闭MySQL服务</h3><p>右键点击【我的电脑】-》【管理】-》【服务和应用程序】-》【服务】-》关闭MySQL服务</p>
<h3 id="2-找到MySQL数据的存储位置"><a href="#2-找到MySQL数据的存储位置" class="headerlink" title="2 找到MySQL数据的存储位置"></a>2 找到MySQL数据的存储位置</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1240.jpg" alt="存储位置"></p>
<h3 id="3-修改MySQL的配置文件"><a href="#3-修改MySQL的配置文件" class="headerlink" title="3 修改MySQL的配置文件"></a>3 修改MySQL的配置文件</h3><p>找到<code>my.ini</code>配置文件，找到其中的<code>datadir</code>，如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/12401.jpg" alt="配置文件"><br>将路径修改为你想要修改的路径即可。</p>
<h3 id="4-修改文件夹的权限"><a href="#4-修改文件夹的权限" class="headerlink" title="4 修改文件夹的权限"></a>4 修改文件夹的权限</h3><p>找到新的路径文件夹，右键-》【安全】-【编辑】-》【添加】-》【高级】-》【立即查找】-》选择【NETWORK_SERVICE】<br>如下图所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/12401221.jpg" alt="权限"></p>
<hr>
<h3 id="可能会遇到的问题："><a href="#可能会遇到的问题：" class="headerlink" title="可能会遇到的问题："></a>可能会遇到的问题：</h3><p><strong>2003 - can’t connect to mysql server on ‘localhost’ (10061)</strong><br>出现这种错误，就是说明<code>mysql</code>服务没有启动，可以通过查看服务页面：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1240123123.jpg" alt="服务启动"></p>
<p>如果现实没有启动，那么有下面几种情况可以检查：   </p>
<h4 id="情况1"><a href="#情况1" class="headerlink" title="情况1"></a>情况1</h4><p>检查是不是新的<code>MySQL</code>目录没有<code>NETWORK SERVICE</code>权限，正确的权限应该如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1240sdfasdf.jpg" alt="正确权限"></p>
<p>如果你的新的MySQL目录没有所有权限，那么可能导入服务时出了错误，可以重新导入<code>NETWORK SERVICE</code>。如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/70.jpg" alt="授权"></p>
<h4 id="情况2"><a href="#情况2" class="headerlink" title="情况2"></a>情况2</h4><p>检查<code>MySQL</code>的配置文件的读取路径，如何查看读取路径，进入到【服务】窗口，查看<code>MySQL</code>的属性，可以看到如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1240fasdfasdf.jpg" alt="配置读取路径"><br>如果该路径下没有<code>my.ini</code>配置文件，那么我们有两种方法解决：</p>
<ul>
<li>将新目录下的配置文件拷贝到默认的路径下，不需要修改读取路径</li>
<li>修改配置文件的读取路径，不需要拷贝配置文件</li>
</ul>
<p>这里介绍如何修改读取路径，拷贝文件就不用介绍了吧。编辑新目录下的<code>my.ini</code>文件，修改这一部分，将路径修改成你的配置文件所在路径即可。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1240asdfas.jpg" alt="配置文件路径修改"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>MySQL</tag>
        <tag>Windows</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>next permutation 下一个全排列</title>
    <url>/next-permutation/</url>
    <content><![CDATA[<h2 id="1-31-下一个排列"><a href="#1-31-下一个排列" class="headerlink" title="1 31. 下一个排列"></a>1 <a href="https://leetcode-cn.com/problems/next-permutation/">31. 下一个排列</a></h2><blockquote>
<p>实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p>
<p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p>
<p>必须原地修改，只允许使用额外常数空间。</p>
<p>以下是一些例子，输入位于左侧列，其相应输出位于右侧列。<br>1,2,3 → 1,3,2<br>3,2,1 → 1,2,3<br>1,1,5 → 1,5,1</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/next-permutation">https://leetcode-cn.com/problems/next-permutation</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h2 id="2-解释思路"><a href="#2-解释思路" class="headerlink" title="2 解释思路"></a>2 解释思路</h2><p>从后往前遍历数组，找到第一个小于当前索引位置的数，假设当前索引是$i$，则找到$i-1$，有以下三种情况：</p>
<ol>
<li><p>$i==nums.length$，说明数组是一个升序数组，直接交换$nums[i]$和$nums[i-1]$的位置即可，如$123$-&gt;$132$</p>
</li>
<li><p>$0&lt;i&lt;nums.length$，说明这样的数在数组中间，直接从第$[i…nums.length]$的数中找到一个大于且仅大于$nums[i-1]$的数，即这个数是$[i…nums.length]$中大于$nums[i-1]$中最小的，假设该索引是$min$，然后交换$nums[i-1]$和$nums[min]$的值，并将$[i…nums.length]$中的所有数进行升序排序，便是最终答案</p>
</li>
<li><p>$i==0$，说明数组是一个倒序的数组，直接将数组$reverse$即可。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> i = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//12345 -&gt; 12354</span></span><br><span class="line">            <span class="keyword">if</span> (i == nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">                nums[i] = nums[i - <span class="number">1</span>] ^ nums[i];</span><br><span class="line">                nums[i - <span class="number">1</span>] = nums[i - <span class="number">1</span>] ^ nums[i];</span><br><span class="line">                nums[i] = nums[i - <span class="number">1</span>] ^ nums[i];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> min = i; <span class="comment">//从[i,nums.length-1]的闭区间中找到一个大于nums[i - 1]的最小的值，并与nums[i - 1]交换</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = nums.length - <span class="number">1</span>; j &gt;= i; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &gt; nums[i - <span class="number">1</span>] &amp;&amp; nums[j] &lt; nums[min])</span><br><span class="line">                    min = j;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            nums[i- <span class="number">1</span>] = nums[i - <span class="number">1</span>] ^ nums[min];</span><br><span class="line">            nums[min] = nums[i - <span class="number">1</span>] ^ nums[min];</span><br><span class="line">            nums[i- <span class="number">1</span>] = nums[i - <span class="number">1</span>] ^ nums[min];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将第i个位置以后的数字进行升序排序</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; nums.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; nums.length - <span class="number">1</span>; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[k] &gt; nums[k + <span class="number">1</span>]) &#123;</span><br><span class="line">                        nums[k] = nums[k] ^ nums[k + <span class="number">1</span>];</span><br><span class="line">                        nums[k + <span class="number">1</span>] = nums[k] ^ nums[k + <span class="number">1</span>];</span><br><span class="line">                        nums[k] = nums[k] ^ nums[k + <span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//倒序数组</span></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            nums[l] = nums[l] ^ nums[r];</span><br><span class="line">            nums[r] = nums[l] ^ nums[r];</span><br><span class="line">            nums[l] = nums[l] ^ nums[r];</span><br><span class="line">            l ++;</span><br><span class="line">            r --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>middle</tag>
      </tags>
  </entry>
  <entry>
    <title>markdownPad2下载以及破解</title>
    <url>/markdownPad2-break/</url>
    <content><![CDATA[<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h3><p>链接：<a href="https://pan.baidu.com/s/1vsP_eEaiepAzuJKYnfTvNg" title="https://pan.baidu.com/s/1vsP_eEaiepAzuJKYnfTvNg">https://pan.baidu.com/s/1vsP_eEaiepAzuJKYnfTvNg</a><br>提取码：3em7</p>
<h3 id="2-MarkdownPad2破解"><a href="#2-MarkdownPad2破解" class="headerlink" title="2 MarkdownPad2破解"></a>2 MarkdownPad2破解</h3><p>点击<code>Enter Key</code> 进入输入邮箱和<code>License key</code></p>
<p>Email address:<br><a href="mailto:Soar360@live.com">Soar360@live.com</a></p>
<p>License key :  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</span><br></pre></td></tr></table></figure>

<h3 id="3-HTML渲染器下载"><a href="#3-HTML渲染器下载" class="headerlink" title="3 HTML渲染器下载"></a>3 HTML渲染器下载</h3><p>链接：<a href="https://pan.baidu.com/s/1GULFGwC8yLKlYa-9CIjmSQ">https://pan.baidu.com/s/1GULFGwC8yLKlYa-9CIjmSQ</a><br>提取码：43ja</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>software cracking</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeError: imagemin.jpegtran is not a function</title>
    <url>/npm-error-imagemin/</url>
    <content><![CDATA[<h3 id="1-错误"><a href="#1-错误" class="headerlink" title="1 错误"></a>1 错误</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[22:39:01] Using gulpfile G:\codeFolder\hexo-blog\lizhi\gulpfile.js</span><br><span class="line">[22:39:01] Starting <span class="string">&#x27;default&#x27;</span>...</span><br><span class="line">[22:39:01] Starting <span class="string">&#x27;minify-html&#x27;</span>...</span><br><span class="line">[22:39:01] Starting <span class="string">&#x27;minify-css&#x27;</span>...</span><br><span class="line">[22:39:01] Starting <span class="string">&#x27;minify-js&#x27;</span>...</span><br><span class="line">[22:39:01] Starting <span class="string">&#x27;minify-images&#x27;</span>...</span><br><span class="line">[22:39:02] <span class="string">&#x27;minify-images&#x27;</span> errored after 86 ms</span><br><span class="line">[22:39:02] TypeError: imagemin.jpegtran is not a <span class="keyword">function</span></span><br><span class="line">    at G:\codeFolder\hexo-blog\lizhi\gulpfile.js:60:22</span><br><span class="line">    at minify-images (G:\codeFolder\hexo-blog\lizhi\node_modules\undertaker\lib\set-task.js:13:15)</span><br><span class="line">    at bound (domain.js:419:14)</span><br><span class="line">    at runBound (domain.js:432:12)</span><br><span class="line">    at asyncRunner (G:\codeFolder\hexo-blog\lizhi\node_modules\async-done\index.js:55:18)</span><br><span class="line">    at processTicksAndRejections (internal/process/task_queues.js:75:11)</span><br><span class="line">[22:39:02] <span class="string">&#x27;default&#x27;</span> errored after 90 ms</span><br><span class="line">[22:39:02] The following tasks did not complete: minify-html, minify-css, minify-js</span><br><span class="line">[22:39:02] Did you forget to signal async completion?</span><br></pre></td></tr></table></figure>

<h3 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2 解决方案"></a>2 解决方案</h3><p><a href="https://github.com/sindresorhus/gulp-imagemin/issues/340#issuecomment-586160290">github答案</a><br>Had the same problem. The issue is you’re still calling imagemin.jpegtran in your config, which was replaced by imagemin.mozjpeg in v7.0.0.</p>
<p>// old<br>imagemin.jpegtran({<br>    progressive: true,<br>}),</p>
<p>// new<br>imagemin.mozjpeg({<br>    progressive: true,<br>}),<br>See also: <a href="https://github.com/sindresorhus/gulp-imagemin/commit/279a91b61c208c0e2a18d3734e6073f5e1d283a2#diff-0730bb7c2e8f9ea2438b52e419dd86c9R36">279a91b#diff-0730bb7c2e8f9ea2438b52e419dd86c9R36</a></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>硕士论文笔记</title>
    <url>/note-master-1/</url>
    <content><![CDATA[<h3 id="1-《智能交通图像识别系统的研究》from"><a href="#1-《智能交通图像识别系统的研究》from" class="headerlink" title="1.《智能交通图像识别系统的研究》from"></a>1.《智能交通图像识别系统的研究》<a href="https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CMFD&dbname=CMFD9904&filename=2003041026.nh&uid=WEEvREdxOWJmbC9oM1NjYkZCbDdrNXcwaGROd1Z6Qmo3emF5S1A3SnV3QjE=$R1yZ0H6jyaa0en3RxVUd8df-oHi7XMMDo7mtKT6mSmEvTuk11l2gFA!!&v=MzA1NzVUcldNMUZyQ1VSTE9lWitWdUZpSGhVN3ZCVjEyN0hiTzhIOUhPcVpFYlBJUjhlWDFMdXhZUzdEaDFUM3E=">from</a></h3><h4 id="1-1人工神经网络进行字符识别"><a href="#1-1人工神经网络进行字符识别" class="headerlink" title="1.1人工神经网络进行字符识别"></a>1.1人工神经网络进行字符识别</h4><blockquote>
<p>主要有两种方法:<strong>一种方法</strong>是<strong>先对待识别字符进行特征提取</strong>,然后用所获得的特征来训练神经网络分类器。这种网络的识别效果与字符特征的提取有关,而字符的特征提取往往比较耗时。因此,字符特征的提取就成为研究的关键。文献四中使用由6个多层感知器构成的神经网络来进行车牌字符识别,在特征提取上提出二值线性变换方法以减少输入特征向量,另外改善网络结构以提高识别速度。另<strong>一种方法</strong>则充分利用神经网络的特点,直接把待处理图像输入网络,由网络自动实现特征提取直至识别。这种网络互连较多、待处理信息量大。</p>
</blockquote>
<p>神经网络在并行非线性处理及大容量计算方面存在着巨大潜力,<br>且神经元状态是二值的</p>
<h4 id="1-2图像预处理"><a href="#1-2图像预处理" class="headerlink" title="1.2图像预处理"></a>1.2图像预处理</h4><blockquote>
<p>预处理相当于对获取的原始图像数据进行整理加工、去伪存真的过程。由于原始图像信号中存在着许多噪声和畸变,一般要进行<strong>滤波、平滑、增强、复原、提取边缘、图像分割</strong>等预处理,以便提高图像质量,并<strong>为下一步特征提取提供必要的基础</strong>。</p>
</blockquote>
<p><strong>决策分类</strong><br>根据具体问题的性质,提出一个反映分类好坏的标准,从而找到最符合这一标准的分类方一法。  从数学观点来看,决策分类就是找出决策函数(边界函数)。</p>
<h5 id="1-2-1灰度图化"><a href="#1-2-1灰度图化" class="headerlink" title="1.2.1灰度图化"></a>1.2.1<a href="https://baike.baidu.com/item/%E7%81%B0%E5%BA%A6%E5%8C%96/3206969?fr=aladdin">灰度图化</a></h5><blockquote>
<p>灰度化，在RGB模型中，如果R=G=B时，则彩色表示一种灰度颜色，其中R=G=B的值叫灰度值，因此，灰度图像每个像素只需一个字节存放灰度值（又称强度值、亮度值），灰度范围为0-255。一般有分量法<br>最大值法平均值法加权平均法四种方法对彩色图像进行灰度化。</p>
</blockquote>
<p><a href="https://blog.csdn.net/saltriver/article/details/79677116">RGB图像如何转换成灰度图像</a></p>
<h6 id="1-2-1-1平均法"><a href="#1-2-1-1平均法" class="headerlink" title="1.2.1.1平均法"></a>1.2.1.1平均法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">lenna = cv2.imread(<span class="string">&quot;lenna.png&quot;</span>)</span><br><span class="line">row, col, channel = lenna.shape</span><br><span class="line">lenna_gray = np.zeros((row, col))</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(col):</span><br><span class="line">        lenna_gray[r, l] = <span class="number">1</span> / <span class="number">3</span> * lenna[r, l, <span class="number">0</span>] + <span class="number">1</span> / <span class="number">3</span> * lenna[r, l, <span class="number">1</span>] + <span class="number">1</span> / <span class="number">3</span> * lenna[r, l, <span class="number">2</span>]</span><br><span class="line">cv2.imshow(<span class="string">&quot;lenna_gray&quot;</span>, lenna_gray.astype(<span class="string">&quot;uint8&quot;</span>))</span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure>
<h6 id="1-2-1-2最大最小平均法"><a href="#1-2-1-2最大最小平均法" class="headerlink" title="1.2.1.2最大最小平均法"></a>1.2.1.2最大最小平均法</h6><blockquote>
<p>取同一个像素位置的RGB中亮度最大的和最小的进行平均</p>
</blockquote>
<h6 id="1-2-1-3加权平均法"><a href="#1-2-1-3加权平均法" class="headerlink" title="1.2.1.3加权平均法"></a>1.2.1.3加权平均法</h6><blockquote>
<p>I(x,y) = 0.3 * I_R(x,y) +0.59 * I_G(x,y)+ 0.11 * I_B(x,y)<br>这是最流行的方法。几个加权系数0.3,0.59,0.11是根据人的亮度感知系统调节出来的参数，是个广泛使用的标准化参数。</p>
</blockquote>
<h6 id="1-2-1-4二值图像"><a href="#1-2-1-4二值图像" class="headerlink" title="1.2.1.4二值图像"></a>1.2.1.4二值图像</h6><blockquote>
<p>图像二值化（ Image Binarization）就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的黑白效果的过程。<br>在数字图像处理中，二值图像占有非常重要的地位，图像的二值化使图像中数据量大为减少，从而能凸显出目标的轮廓。</p>
</blockquote>
<h6 id="1-2-1-4反转图像"><a href="#1-2-1-4反转图像" class="headerlink" title="1.2.1.4反转图像"></a>1.2.1.4反转图像</h6><blockquote>
<p>反转图像也很简单：s = 255-r。反转图像特别适用于<strong>增强暗色图像中的白色或灰色</strong>细节</p>
</blockquote>
<h5 id="1-2-2中值滤波"><a href="#1-2-2中值滤波" class="headerlink" title="1.2.2中值滤波"></a>1.2.2中值滤波</h5><blockquote>
<p><strong>中值滤波法</strong>是一种非线性平滑技术，它将每一像素点的灰度值设置为该点某邻域窗口内的所有像素点灰度值的中值.<br>中值滤波是基于排序统计理论的一种能有效抑制噪声的非线性信号处理技术，中值滤波的基本原理是把数字图像或数字序列中一点的值用该点的一个邻域中各点值的中值代替，让周围的像素值接近的真实值，从而消除孤立的噪声点。方法是用某种结构的二维滑动模板，将板内像素按照像素值的大小进行排序，生成单调上升（或下降）的为二维数据序列。二维中值滤波输出为g（x,y）=med{f(x-k,y-l),(k,l∈W)} ，其中，f(x,y)，g(x,y)分别为原始图像和处理后图像。W为二维模板，通常为3<em>3，5</em>5区域，也可以是不同的的形状，如线状，圆形，十字形，圆环形等。</p>
</blockquote>
<p><strong>中值滤波对于消除孤立点和线段的干扰十分有用,特别是对于二进噪声尤为有效,对于消除高斯噪声则效果不佳</strong></p>
<h5 id="1-2-3边缘检测"><a href="#1-2-3边缘检测" class="headerlink" title="1.2.3边缘检测"></a>1.2.3<a href="https://blog.csdn.net/tercel_zhang/article/details/79538317">边缘检测</a></h5><blockquote>
<p>边缘检测是图像处理和计算机视觉中的基本问题，边缘检测的目的是标识数字图像中亮度变化明显的点。图像属性中的显著变化通常反映了属性的重要事件和变化。 这些包括（i）深度上的不连续、（ii）表面方向不连续、（iii）物质属性变化和（iv）场景照明变化。 边缘检测是图像处理和计算机视觉中，尤其是特征提取中的一个研究领域。</p>
</blockquote>
<h6 id="1-2-3-1检测方法"><a href="#1-2-3-1检测方法" class="headerlink" title="1.2.3.1检测方法"></a>1.2.3.1检测方法</h6><p>有许多用于边缘检测的方法, 他们大致可分为两类：<strong>**基于搜索</strong>和基于<strong>零交叉</strong>。<br>基于搜索的边缘检测方法首先计算边缘强度， 通常用一阶导数表示， 例如梯度模，然后，用计算估计边缘的局部方向， 通常采用梯度的方向，并利用此方向找到局部梯度模的最大值。<br>基于零交叉的方法找到由图像得到的二阶导数的零交叉点来定位边缘。 通常用拉普拉斯算子或非线性微分方程的零交叉点。<br>滤波做为边缘检测的预处理通常是必要的，通常采用高斯滤波。<br>已发表的边缘检测方法应用计算边界强度的度量，这与平滑滤波有本质的不同。 正如许多边缘检测方法依赖于图像梯度的计算，他们用不同种类的滤波器来估计x-方向和y-方向的梯度。</p>
<h4 id="1-3车牌定位"><a href="#1-3车牌定位" class="headerlink" title="1.3车牌定位"></a>1.3车牌定位</h4><blockquote>
<p>车牌定位的主要方法可分为五种!:①直线边缘检测;②基于域值迭代的方法;③基于神经网络的车牌定位方法;④基于灰度的检测方法;均基于彩色图像的车牌分割方`法。</p>
</blockquote>
<p>利用BP神经网络在灰度图像中提取车牌。具体步骤为:先收集一定数量的车牌样本,用BP算法对其进行训练,达到一定正确率后,训练结束,得到一个对牌照敏感的神经网络,提取牌照时,对输入图像进行预处理,然后利用训练出的神经网络来搜索车牌。</p>
<h4 id="1-4改进之处"><a href="#1-4改进之处" class="headerlink" title="1.4改进之处"></a>1.4改进之处</h4><p>本轮文提出的有待改进的地方：</p>
<ul>
<li>目前的车牌号码自动识别系统只能处理单个车牌的汽车图像,对于一幅图像中多个车牌的识别则无能为力,</li>
<li>如何消除外界因素的干扰仍然是闯红灯系统需要解决的一个问题。</li>
</ul>
<h3 id="2-《基于卷积神经网络的无人机侦察图像识别》from"><a href="#2-《基于卷积神经网络的无人机侦察图像识别》from" class="headerlink" title="2.《基于卷积神经网络的无人机侦察图像识别》from"></a>2.《基于卷积神经网络的无人机侦察图像识别》<a href="https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CMFD&dbname=CMFD201902&filename=1019042269.nh&v=MjUxODFyQ1VSTE9lWnVkdEZ5bmdVYnZLVkYyNkY3TzhITlBLcHBFYlBJUjhlWDFMdXhZUzdEaDFUM3FUcldNMUY=">from</a></h3><h4 id="2-1特征降维"><a href="#2-1特征降维" class="headerlink" title="2.1特征降维"></a>2.1特征降维</h4><blockquote>
<p><a href="https://blog.csdn.net/qq_41455420/article/details/79859622">特征降维</a>，有时候也称之为特征抽取（用于降维的特征选择方法）或数据压缩，因为现实生活中产生的数据是越来越多，数据压缩技术可以帮助我们对数据进行存储和分析。<br>特征降维是无监督学习的另一个应用，目的有 2：（1）我们会经常在实际项目中遭遇特征维度非常之高的训练样本，而往往又无法借助自己的领域知识人工构建有效特征；（2）在数据表现方面，我们无法用肉眼观测超过三个维度的特征。因此，特征降维不仅仅重构了有效的低纬度特征，同时也为数据展现提供了可能。在特征降维技术中 PCA 主成分分析是最为经典和实用的特征降维技术，在图像识别方面表现的也很突出。</p>
</blockquote>
<h4 id="2-2灰度共生矩阵"><a href="#2-2灰度共生矩阵" class="headerlink" title="2.2灰度共生矩阵"></a>2.2灰度共生矩阵</h4><blockquote>
<p><a href="https://baike.baidu.com/item/%E7%81%B0%E5%BA%A6%E5%85%B1%E7%94%9F%E7%9F%A9%E9%98%B5/1498946?fr=aladdin">灰度共生矩阵</a>，指的是一种通过研究灰度的空间相关特性来描述纹理的常用方法。  1973年Harali width=”480” height=”720” 等人提出了用灰度共生矩阵来描述纹理特征。<br>由于纹理是由灰度分布在空间位置上反复出现而形成的，因而在图像空间中相隔某距离的两像素之间会存在一定的灰度关系，即图像中灰度的空间相关特性。</p>
</blockquote>
<h4 id="2-3特征抽取"><a href="#2-3特征抽取" class="headerlink" title="2.3特征抽取"></a>2.3特征抽取</h4><blockquote>
<p>特征抽取是将已有的特征变换成新的特征子集的方式，特征变换的方式多种多样，其中线性组合方式最受欢迎。线性组合不仅计算简单，并且解释性强，比如说主成分分析PCA。PCA通过线性变换的方式，将高维的特征映射到了低维空间。特征通过PCA降维后，特征子集可以一定程度的表示原始特征集［1４］，但是特征子集在用于特征分类里效果不一定最好，另一种更好的降维方法是线性判别分析(LDA)。</p>
</blockquote>
<h4 id="2-4激活函数"><a href="#2-4激活函数" class="headerlink" title="2.4激活函数"></a>2.4<a href="https://baike.baidu.com/item/激活函数/2520792?fr=aladdin">激活函数</a></h4><blockquote>
<p>实际上．激活函数也是在模拟神经元的特点。人体的祌经元不是接收到输入就会全部输出的，是当输入达到一定的阈值后，线性或非线性的将输入转化成输出，这也就是激活函数的原理,在人工神经网络中，<a href="https://blog.csdn.net/edogawachia/article/details/80043673">激活函数</a>就在神经元的连接形式中，以非线性的映射关系而存在，是神经网络能表达复杂非线性关系的关键所在。</p>
</blockquote>
<h5 id="2-4-1sigmoid函数"><a href="#2-4-1sigmoid函数" class="headerlink" title="2.4.1sigmoid函数"></a>2.4.1<a href="https://www.jianshu.com/p/506595ec4b58">sigmoid函数</a></h5><blockquote>
<p>Sigmoid函数是一个在生物学中常见的S型函数，也称为S型生长曲线。 在信息科学中，由于其单增以及反函数单增等性质，Sigmoid函数常被用作神经网络的激活函数，将变量映射到0,1之间<br>sigmoid公式如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/o_191114110431111.png" alt="image"><br>sigmoid函数图像如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/c9fcc3cec3fdfc03f23fbf16d73f8794a5c226dc.png" alt="image"></p>
</blockquote>
<p>sigmoid函数的Python实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span>/(<span class="number">1</span>+np.exp(-x))</span><br><span class="line"> </span><br><span class="line">sigmoid_inputs = np.arange(-<span class="number">10</span>,<span class="number">10</span>,<span class="number">0.1</span>)</span><br><span class="line">sigmoid_outputs = sigmoid(sigmoid_inputs)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Sigmoid Function Input :: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(sigmoid_inputs))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Sigmoid Function Output :: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(sigmoid_outputs))</span><br><span class="line"> </span><br><span class="line">plt.plot(sigmoid_inputs,sigmoid_outputs)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Sigmoid Inputs&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Sigmoid Outputs&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h5 id="2-4-2ReLU函数"><a href="#2-4-2ReLU函数" class="headerlink" title="2.4.2ReLU函数"></a>2.4.2<a href="https://www.cnblogs.com/adong7639/p/9213038.html">ReLU函数</a></h5><blockquote>
<p>ReLU函数：为了避免sigmoid函数梯度趋于0产生的梯度饱和问题，线性整流函数（Rectified Linear Unit, ReLU),被提出并在卷积神经网络中取得了不错的效果。<br>当输入取值小于0时ReLU不会被激活，特别是在后向传播计算中梯度很容易变为0，这是ReLU函数本身存在的硬饱和，又会带来梯度消失的问题。而且ReLU函数的输出值是不存在负数的，这代表了ReLU也不是以0为均值的函数<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/d788d43f8794a4c25b5e4dd902f41bd5ac6e39c6.png" alt="image"><br>CNN中常用。对正数原样输出，负数直接置零。在正数不饱和，在负数硬饱和。<strong>ReLU计算上比sigmoid或者tanh更省计算量</strong>，因为不用exp，因而收敛较快。但是还是非zero-centered。<br>ReLU在负数区域被kill的现象叫做dead ReLU，这样的情况下，有人通过初始化的时候用一个稍微大于零的数比如0.01来初始化神经元，从而使得ReLU更偏向于激活而不是死掉，但是这个方法是否有效有争议。</p>
</blockquote>
<h5 id="2-4-3LeakyReLU函数"><a href="#2-4-3LeakyReLU函数" class="headerlink" title="2.4.3LeakyReLU函数"></a>2.4.3LeakyReLU函数</h5><blockquote>
<p>为了解决上述的dead ReLU现象。这里选择一个数，让负数区域不在饱和死掉。这里的斜率都是确定的。<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20180422215128864.png" alt="image"></p>
</blockquote>
<h5 id="2-4-4PReLU函数"><a href="#2-4-4PReLU函数" class="headerlink" title="2.4.4PReLU函数"></a>2.4.4PReLU函数</h5><blockquote>
<p>PReLU(Parametric Rectified Linear Unit)顾名思义：带参数的ReLU,<a href="https://blog.csdn.net/shuzfan/article/details/51345832#prelu%E6%BF%80%E6%B4%BB">PReLU函数</a>是为了解决ReLU的硬饱和问题产生的激活函数，在LeakyReLU函数中，斜率是固定的，这里的PRelu函数的斜率a是不固定的一个值，这个值可以在运算过程中不算学习改变原来的值。<strong>计算量不是很大，因为不用计算exp</strong><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20160508143448263.jpg" alt="image"></p>
</blockquote>
<h5 id="2-4-5ELU函数"><a href="#2-4-5ELU函数" class="headerlink" title="2.4.5ELU函数"></a>2.4.5ELU函数</h5><blockquote>
<p>ELU函数是Sigmoid函数和ReLU函数的结合体，它的提出主要是为了解决ReLUＵ函数输入负值时陷入卡死的问题<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20180422215147575.png" alt="image"><br>具有ReLU的优势，且输出均值接近零，实际上PReLU和LeakyReLU都有这一优点。有负数饱和区域，从而对噪声有一些鲁棒性。可以看做是介于ReLU和LeakyReLU之间的一个东西。当然，这个函数也需要计算exp，从而<strong>计算量上更大一些</strong>。<br>ELU的优点：<br>和PReLU一样，ELU也引入了可学习的斜率a，使得激活函数在负半段是存在输出值的。但是和PReLU不一样的是，当输入值小于0时ELU的结构为非线性单元，这使得ELU具有良好的鲁棒性和抗干扰能力，但是还是具有一定程度的软饱和性</p>
</blockquote>
<h4 id="2-5卷积神经网络"><a href="#2-5卷积神经网络" class="headerlink" title="2.5卷积神经网络"></a>2.5卷积神经网络</h4><blockquote>
<p><a href="https://blog.csdn.net/weixin_41417982/article/details/81412076">一篇好的介绍卷积神经网络的博客</a></p>
</blockquote>
<h5 id="2-5-1池化层（pooling）"><a href="#2-5-1池化层（pooling）" class="headerlink" title="2.5.1池化层（pooling）"></a>2.5.1池化层（pooling）</h5><blockquote>
<p>当p=1时池化层所采用的方式是均值池化，而p=∞池化层则采用了最大池化操作。池化层和卷积层一样，也会通过非线性的激活函数来连接池化单元。按模型的泛化能力来看，随机池化的效果要好于最大池化和均值池化，其中均值池化的泛化能力最差<br><strong>池化的目的：</strong><br>最直接的目的，就是降低了下一层待处理的数据量。比如说，当卷积层的输出大小是32×32时，如果池化层过滤器的大小为2×2时，那么经过池化层处理后，输出数据的大小为16×16，也就是说现有的数据量一下子减少到池化前的1/4。当池化层最直接的目的达到了，那么它的间接目的也达到了：减少了参数数量，从而可以预防网络过拟合。</p>
</blockquote>
<h5 id="2-5-1全连接层"><a href="#2-5-1全连接层" class="headerlink" title="2.5.1全连接层"></a>2.5.1全连接层</h5><blockquote>
<p><a href="https://baike.baidu.com/item/%E5%85%A8%E8%BF%9E%E6%8E%A5%E5%B1%82/22689531?fr=aladdin"><strong>全连接层</strong></a>在卷积层和池化层之后，全连接层的神经元与所有输入神经元全部相连，这和多层感知机的结构是一样的。通常情况下卷积神经网络会有一到多个全连接层，他们每层之间也是全部相连，直到最后一层全连接层和输出层连接。卷积祌经网络的卷积层和池化层会提取图像的局部信息或区域信息，而全连接层会破坏原始数据的空间结构性，所以CNN采用了卷积池化在前，全连接在后的网络结构。利用全连接层将卷积和池化得到的高维局部特征整合，生成出可以提供给输出层的分类特征，所以全连接层和输出层的组合可以看做是CNN的分类器。<br><strong>全连接层概念：</strong><br>全连接层的每一个结点都与上一层的所有结点相连，用来把前边提取到的特征综合起来。由于其全相连的特性，一般全连接层的参数也是最多的。例如在<a href="https://www.cnblogs.com/lfri/p/10493408.html">VGG16</a>中，第一个全连接层FC1有4096个节点，上一层POOL2是7<em>7</em>512 = 25088个节点，则该传输需要4096*25088个权值，需要耗很大的内存。</p>
</blockquote>
<h4 id="2-6卷积神经网络的训练方法"><a href="#2-6卷积神经网络的训练方法" class="headerlink" title="2.6卷积神经网络的训练方法"></a>2.6卷积神经网络的训练方法</h4><blockquote>
<p>CNN的训练方法是通过前向传播计算出的样本值与样本的真实比较并计算出损失，再通过反向传播算法调整网络参数结构以最小化损失的有监督学习方法。CNN的优势在于，不需要用无监督学习的方式对网络进行初始化，直接进行有监督学习即可，因为CNN会在训练之前将整体的网络参数通过小随机数初始化。但是通常情况下为了减少网络的学习时间，会将CNN的网络结构按照当前的任务环境或者利用之前相同网络的模型的参数进行初始化。<br>所以CNN的训练分为前向传播和反向传播两个阶段，前向传播在上文的网络结构介绍中己经详细说明，输入层到卷积层的传递、卷积核卷积操作、激活函数计算值、池化操作和全连接计算等等都是属于前向传播。他们通过网络结构的参数将输入值计算为预测值，再将预测值交给BP算法去进行反向传播更新网络结构参数。反向传播算法是经典卷积祌经网络训练方式的核心，在反向传播阶段中，BP算法会与基于梯度的最优化算法相结合。卷积神经网络的误差或者损失会传递到网络各层，在每层网络通过计算梯度的方式迭代更新网络参数并逐层链式计算。<br>当反向传递到输入层时，才会重新开始前向传播计算，直到网络收敛或者达到了迭代轮数。</p>
</blockquote>
<h5 id="2-6-1最小均方误差"><a href="#2-6-1最小均方误差" class="headerlink" title="2.6.1最小均方误差"></a>2.6.1最小均方误差</h5><blockquote>
<p>最小均方差是损失函数的常见形式，在浅层网络中运用较多，能有效地衡量预测值和实际值之间的误差。均方差的计算方式简单，也容易让人理解，所以在较多模型中作为损失函数的一种简单形式</p>
</blockquote>
<h5 id="2-6-2最小分类误差"><a href="#2-6-2最小分类误差" class="headerlink" title="2.6.2最小分类误差"></a>2.6.2最小分类误差</h5><blockquote>
</blockquote>
<h4 id="2-7基于卷积神经网络的目标检测算法"><a href="#2-7基于卷积神经网络的目标检测算法" class="headerlink" title="2.7基于卷积神经网络的目标检测算法"></a>2.7基于卷积神经网络的目标检测算法</h4><blockquote>
<p>卷积神经网络对于图像特征的提取能力远远超过人为设计的目标特征提取，这是近年来卷积神经网络在图像领域飞速发展的关键</p>
</blockquote>
<h5 id="2-7-1R-CNN"><a href="#2-7-1R-CNN" class="headerlink" title="2.7.1R-CNN"></a>2.7.1R-CNN</h5><blockquote>
<p><a href="https://www.jianshu.com/p/381ffa6e525a">一篇好的解析R-CNN的博客</a><br><a href="https://baike.baidu.com/item/AlexNet/22689612?fr=aladdin">关于AlexNet</a><br>R-CNN网络于2014被Girshi width=”480” height=”720” 等人在论文中被提出，R-CNN的出现标志了目标检测任务从传统方式过渡到了深度学习阶段。<strong>在此之前的十多年内工业级的目标检测几乎都是采用了人工提取图像特征算子例如HOG和SIFT，再将特征输入到分类器进行识别的方式。传统的方式尽管在许多领域取得了不错的效果，但是很难有进一步的提升</strong>。当任务的场景变换时，又不得不去挖掘和发现一些新的特征，目标检测的相关研究进展十分缓慢。R-CNN在VOC2012上直接超越了之前传统方式检测识别最好结果的30%，这代表了CNN从目标识别到目标检测的领域跨越。   </p>
</blockquote>
<h6 id="2-7-1-1R-CNN工作原理"><a href="#2-7-1-1R-CNN工作原理" class="headerlink" title="2.7.1.1R-CNN工作原理"></a>2.7.1.1R-CNN工作原理</h6><blockquote>
<p>R-CNN利用网络将特征提取和特征分类合并到一起，大大提升了特征的提取效率。但是无论是传统方式还是R-CNN，目标检测和目标识别的最大区别就是需要提取候选区域（region proposals）<br>R-CNN采用选择性搜索（selective search）算法，又称区域合并算法，selective search会将对图片暴力生成多个候选区域<br>R-CNN算法的计算过程：<br>首先输入图像会被分为R个初始候选集，然后通过贪心策略去计算相邻候选集之前的相似度，通过相似度的大小去合并候选集，直到产生目标个数的候选集。候选集的相似度计算有多种方式，有颜色、纹理、而枳和吻合相似度计算。最后生成的L个Region Proposal与CNN相结合，这就是R-CNN名字的由来。<br>R-CNN作者证明了在当前任务下SVM的分类效果要比神经网络分类器好。最后每个SNM分类器都会得到图像对于该类别的得分和置信度，置信度最高的类别为改图像区域对应的预测类别。</p>
</blockquote>
<h5 id="2-7-2金字塔池化网络"><a href="#2-7-2金字塔池化网络" class="headerlink" title="2.7.2金字塔池化网络"></a>2.7.2金字塔池化网络</h5><blockquote>
<p><a href="https://blog.csdn.net/wsp_1138886114/article/details/81778202"><strong>金字塔池化网络</strong></a>(Spatial Pyramid Pooling Network)是为了解决R-CNN遗留问题诞生出来的网络模型。回顾一下R-CNN网络，首先R-CNN在生成了候选区域后，需要对每个区域进行统一尺寸的压缩或放大，当候选集的长与宽差别较大时强行压缩至比例为1会使图像产生变形和丢失图像的原始特征，SPPNet提出了…种解决方案可以不用压缩图像候选集而直接做为网络输入。另 外一点是R-CNN生成了多个候选集后需要全部输入到CNN中，当生成了2000个候选集时，就需要对图片进行2000次单模型特征提取，这无疑是效率低下的，同样SPPNet也完美解决了这个问题<br><strong>SPPNet的解决方案：</strong></p>
<ul>
<li>SPPNet网络结构图如下所示，在输入时直接输入整张图像，只需要对整张图像做一次卷积操作，同时会生成整张图像的候选集特征映射(Reature Map)，这样候选集对应的特征阁可以直接传递到下－层，这样…来对图像进行2000次的计算就变成了1次，大大增加了网络的效率。</li>
<li>SPPNet中另一关键模块就是金字塔池化层（Spatial Pyramid Pooling Layer），这一层的设计思路是通过池化操作将任意尺寸的输入都转换成固定大小输出，因为在池化层中只要池化的核结构不变，输入的维度就不会变化。Kaiming He等人正是利用了池化输出固定的原理避免了原始R-CNN模型中需要缩放图片候选集的操作   </li>
</ul>
<p><strong>SPPNet在R-CNN拥有的区域提取、卷积层、池化层、全连接层、SVM分 类器和Bounding-Box回归网络结构基础上，加入了候选集特征图映射和SPP Pooling层。将R-CNN网络的预测速度提升了数十倍，极大地优化了网络的计算 法复杂度</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20180817153030153.png" alt=""></p>
</blockquote>
<h5 id="2-7-3Fast-R-CNN"><a href="#2-7-3Fast-R-CNN" class="headerlink" title="2.7.3Fast R-CNN"></a>2.7.3Fast R-CNN</h5><blockquote>
<p>虽然SPPNet网路对R-CNN进行了改进，且效率有提升，但是R-CNN和SPPNet同时还是存在一些缺陷：==<em>网络模型分开训练会产生大量的中间计算量和缓存特征，同时各个模型的独立加大了在线训练的难度</em>==。针对R-CNN和SPPNet两个算法的共同缺陷，Girshi width=”480” height=”720” 提出的Fast R-CNN算法对上述缺陷进行了一些改进。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/o_1911140113383940902-7569280b566d0e58.png" alt=""><br>上图是Fast R-CNN的结构图，相比于R-CNN，Fast R-CNN有如下几点改进之处：</p>
<ul>
<li>加入了Feature Map，在这里Fast R-CNN和SPPNet的思路是一样的，利用候选集和特征图的映 射来对图像只做一次卷积就能得到所有候选集的特征图。</li>
<li>卷积后连接Rol Pooling Layer,Fast R-CNN借鉴了SPPNet的池化固定输出维度的思路，是SSP Pooling Layer的精简版，同样也不需要对候选集的尺寸进行缩放。</li>
<li>分类器和Bounding-Box Regression合并为Multi-Task结构。这是Fast R-CNN相比于SPPNet和R-CNN模型独立的重要改进，Fast R-CNN将<a href="https://baike.baidu.com/item/softmax%20%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/22689563?fr=aladdin">Softmax</a>作为网络的分类器，并将全连接输出的一部分输入到了Bounding-Box Regression中。不用像R-CNN一样将CNN、SVM分类器和Bounding-Box Regression中分开成独立的三部分，模型的在线预测成为了可能。  </li>
</ul>
</blockquote>
<blockquote>
<p>++在R-CNN中全连接层的计算特别耗时，Fast R-CNN对全连接层采用了SVD分解，全连接层拆分为两个简单公式计算，加快了计算速度。++</p>
</blockquote>
<blockquote>
<p>综上所述，Fast R-CNN在结合SPPNet的思想下针对R-CNN<strong>候选集统一尺度</strong>、<strong>候选集依次卷积</strong>和<strong>模型结构独立</strong>等问题下提出了诸多改进方式，并沿用了R-CNN的大部分结构。<strong>Fast R-CNN仅在运算速度上超越了R-CNN</strong>，模型<strong>的预测效果</strong>也得到了<strong>不少的提升</strong>。但是Fast R-CNN还是保留了一些<strong>缺陷</strong>，在<a href="https://blog.csdn.net/liuxiaoheng1992/article/details/81843363"><strong>Faster R-CNN</strong></a>中针对在这些问题得到了改善，为了解决这一问题，Faster R-CNN于2016年被提出，通过引入RPN模块快速完成了proposal的生成</p>
</blockquote>
<blockquote>
<p><strong>注意：</strong>Fast R-CNN在对原始图像卷积后，会串行的对原图进行候选集提取并映射，到特征图上生成多个大小不同的特征图候选集，而Faster R-CNN在卷积之后特征图会并行的进入两个通道，一个是Fast R-CNN的Rol Pooling层，另一个就是Faster R-CNN中引入的RPN结构，所以Faster R-CNN可以看作是RPN和Fast R-CNN的组合模式 </p>
</blockquote>
<blockquote>
<p><strong>softmax逻辑回归函数：</strong><br><a href="https://baike.baidu.com/item/softmax%20%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/22689563?fr=aladdin">Softmax</a>逻辑回归模型是logistic回归模型在多分类问题上的推广，在多分类问题中，类标签y可以取两个以上的值。 Softmax回归模型对于诸如MNIST手写数字分类等问题是很有用的，该问题的目的是辨识10个不同的单个数字。Softmax回归是有监督的，不过后面也会介绍它与深度学习无监督学习方法的结合。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/d62a6059252dd42af3835f580f3b5bb5c8eab8bf.jpg" alt=""></p>
</blockquote>
<h4 id="2-8对Faster-R-CNN目标检测算法的改进"><a href="#2-8对Faster-R-CNN目标检测算法的改进" class="headerlink" title="2.8对Faster R-CNN目标检测算法的改进"></a>2.8对Faster R-CNN目标检测算法的改进</h4><h5 id="2-8-1RPN网络"><a href="#2-8-1RPN网络" class="headerlink" title="2.8.1RPN网络"></a>2.8.1<a href="https://blog.csdn.net/qq_36269513/article/details/80421990">RPN网络</a></h5><blockquote>
<p>区域提名网络（RegionProposalNetworks，RPN）是Faster R-CNN中的重要 结构，其主要功能是生成带有坐标的感兴趣区域框，和R－CNN或FastR－CNN中 候选集生成算法的作用是一样的。<br><strong>视频介绍RPN</strong></p>
<iframe src="//player.bilibili.com/player.html?aid=29987414&cid=52249531&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"  width="720" height="480" > </iframe>
</blockquote>
<h5 id="2-8-2Fast-R-CNN-特征提取与-RolP"><a href="#2-8-2Fast-R-CNN-特征提取与-RolP" class="headerlink" title="2.8.2Fast R-CNN 特征提取与 RｏｌＰ"></a>2.8.2Fast R-CNN 特征提取与 RｏｌＰ</h5><blockquote>
<p>图像特征提取采用的卷积层是<a href="https://www.cnblogs.com/lfri/p/10493408.html">VGG1６</a>， </p>
</blockquote>
<h5 id="2-8-3基于Faster-R-CNN的航拍图像分析"><a href="#2-8-3基于Faster-R-CNN的航拍图像分析" class="headerlink" title="2.8.3基于Faster R-CNN的航拍图像分析"></a>2.8.3基于Faster R-CNN的航拍图像分析</h5><blockquote>
<p>航拍图像实例的特点：实例多数处于相对位置不变化的状态<br>航拍图像中的一大难点：</p>
<ul>
<li>也是基于航拍图像的目标检测研究面临的第一大难点。 </li>
<li>由于航拍图像拍摄的距离不同，同一类别物体在 不冋图像中的差别会很人</li>
</ul>
</blockquote>
<h5 id="2-8-4基于改进Faster-R-CNN算法的目标检测"><a href="#2-8-4基于改进Faster-R-CNN算法的目标检测" class="headerlink" title="2.8.4基于改进Faster R-CNN算法的目标检测"></a>2.8.4基于改进Faster R-CNN算法的目标检测</h5><blockquote>
<p>从网络结构出发优化目标可主要分为 CNN特征提取层、RPN结构和Fast R-CNN并行的OHEM算法嵌入三部分。<br>Faster R-CNN中的特征提取采用的是VGG1６网络，<br><strong>改论文创新点：本论文 基于ResNet－101的卷积神经网络设计出了一版Faster R-CNN框架</strong></p>
</blockquote>
<h5 id="2-8-6RPN网络改进"><a href="#2-8-6RPN网络改进" class="headerlink" title="2.8.6RPN网络改进"></a>2.8.6RPN网络改进</h5><blockquote>
<p>RPN网络是Faster R-CNN区别于Fast R-CNN的核心，高精度、准确的 Proposal是网络训练和预测的关键。<br>方法：</p>
<ul>
<li>调整RPN中Anchors</li>
<li>修改Proposal输出阈值</li>
<li>正负采样调整<br>改进结果：通过对RPN网络的优化对小目标的检测有不错提升，但是训练和预测速度 下降不少，在这里并没有对计算性能进行过多的优化</li>
</ul>
</blockquote>
<h5 id="2-8-7OHEM算法模型嵌入"><a href="#2-8-7OHEM算法模型嵌入" class="headerlink" title="2.8.7OHEM算法模型嵌入"></a>2.8.7<a href="https://blog.csdn.net/u012426298/article/details/81773319">OHEM</a>算法模型嵌入</h5><blockquote>
<p>OHEM（Online Hard Example Mining）算法在基于机器学习的任务中十分常见，通常用来解决正负样本不均衡的问题。</p>
</blockquote>
<h4 id="2-9本轮文的结构"><a href="#2-9本轮文的结构" class="headerlink" title="2.9本轮文的结构"></a>2.9本轮文的结构</h4><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191118093651.png" alt=""></p>
</blockquote>
<h4 id="2-10未来展望"><a href="#2-10未来展望" class="headerlink" title="2.10未来展望"></a>2.10未来展望</h4><blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191118093842.png" alt=""></p>
</blockquote>
<h3 id="3-《智能交通图像识别系统的研究》from"><a href="#3-《智能交通图像识别系统的研究》from" class="headerlink" title="3.《智能交通图像识别系统的研究》from"></a>3.《智能交通图像识别系统的研究》from</h3><h4 id="3-1人工神经网络进行字符识别"><a href="#3-1人工神经网络进行字符识别" class="headerlink" title="3.1人工神经网络进行字符识别"></a>3.1人工神经网络进行字符识别</h4><blockquote>
<p>主要有两种方法:一种方法是先对待识别字符进行特征提取,然后用所获得的特征来训练神经网络分类器。这种网络的识别效果与字符特征的提取有关,而字符的特征提取往往比较耗时。因此,字符特征的提取就成为研究的关键。文献四中使用由6个多层感知器构成的神经网络来进行车牌字符识别,在特征提取上提出二值线性变换方法以减少输入特征向量,另外改善网络结构以提高识别速度。另一种方法则充分利用神经网络的特点,直接把待处理图像输入网络,由网络自动实现特征提取直至识别。这种网络互连较多、待处理信息量大。<br>神经网络在并行非线性处理及大容量计算方面存在着巨大潜力, 且神经元状态是二值的</p>
</blockquote>
<h4 id="3-2图像预处理"><a href="#3-2图像预处理" class="headerlink" title="3.2图像预处理"></a>3.2图像预处理</h4><blockquote>
<p>预处理相当于对获取的原始图像数据进行整理加工、去伪存真的过程。由于原始图像信号中存在着许多噪声和畸变,一般要进行滤波、平滑、增强、复原、提取边缘、图像分割等预处理,以便提高图像质量,并为下一步特征提取提供必要的基础。<br>决策分类<br>根据具体问题的性质,提出一个反映分类好坏的标准,从而找到最符合这一标准的分类方一法。 从数学观点来看,决策分类就是找出决策函数(边界函数)。</p>
</blockquote>
<h5 id="3-2-1灰度图化"><a href="#3-2-1灰度图化" class="headerlink" title="3.2.1灰度图化"></a>3.2.1灰度图化</h5><p>灰度化，在RGB模型中，如果R=G=B时，则彩色表示一种灰度颜色，其中R=G=B的值叫灰度值，因此，灰度图像每个像素只需一个字节存放灰度值（又称强度值、亮度值），灰度范围为0-255。一般有分量法 最大值法平均值法加权平均法四种方法对彩色图像进行灰度化。<br>RGB图像如何转换成灰度图像</p>
<h6 id="3-2-1-1平均法"><a href="#3-2-1-1平均法" class="headerlink" title="3.2.1.1平均法"></a>3.2.1.1平均法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">lenna = cv2.imread(<span class="string">&quot;lenna.png&quot;</span>)</span><br><span class="line">row, col, channel = lenna.shape</span><br><span class="line">lenna_gray = np.zeros((row, col))</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(col):</span><br><span class="line">        lenna_gray[r, l] = <span class="number">1</span> / <span class="number">3</span> * lenna[r, l, <span class="number">0</span>] + <span class="number">1</span> / <span class="number">3</span> * lenna[r, l, <span class="number">1</span>] + <span class="number">1</span> / <span class="number">3</span> * lenna[r, l, <span class="number">2</span>]</span><br><span class="line">cv2.imshow(<span class="string">&quot;lenna_gray&quot;</span>, lenna_gray.astype(<span class="string">&quot;uint8&quot;</span>))</span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure>


<h6 id="3-2-1-2最大最小平均法"><a href="#3-2-1-2最大最小平均法" class="headerlink" title="3.2.1.2最大最小平均法"></a>3.2.1.2最大最小平均法</h6><blockquote>
<p>取同一个像素位置的RGB中亮度最大的和最小的进行平均</p>
</blockquote>
<h5 id="3-2-1-3加权平均法"><a href="#3-2-1-3加权平均法" class="headerlink" title="3.2.1.3加权平均法"></a>3.2.1.3加权平均法</h5><blockquote>
<p>I(x,y) = 0.3 * I_R(x,y) +0.59 * I_G(x,y)+ 0.11 * I_B(x,y) 这是最流行的方法。几个加权系数0.3,0.59,0.11是根据人的亮度感知系统调节出来的参数，是个广泛使用的标准化参数。</p>
</blockquote>
<h5 id="3-2-1-4二值图像"><a href="#3-2-1-4二值图像" class="headerlink" title="3.2.1.4二值图像"></a>3.2.1.4二值图像</h5><blockquote>
<p>图像二值化（ Image Binarization）就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的黑白效果的过程。 在数字图像处理中，二值图像占有非常重要的地位，图像的二值化使图像中数据量大为减少，从而能凸显出目标的轮廓。</p>
</blockquote>
<h5 id="3-2-1-5反转图像"><a href="#3-2-1-5反转图像" class="headerlink" title="3.2.1.5反转图像"></a>3.2.1.5反转图像</h5><blockquote>
<p>反转图像也很简单：s = 255-r。反转图像特别适用于增强暗色图像中的白色或灰色细节</p>
</blockquote>
<h4 id="3-2-2中值滤波"><a href="#3-2-2中值滤波" class="headerlink" title="3.2.2中值滤波"></a>3.2.2中值滤波</h4><blockquote>
<p>中值滤波法是一种非线性平滑技术，它将每一像素点的灰度值设置为该点某邻域窗口内的所有像素点灰度值的中值. 中值滤波是基于排序统计理论的一种能有效抑制噪声的非线性信号处理技术，中值滤波的基本原理是把数字图像或数字序列中一点的值用该点的一个邻域中各点值的中值代替，让周围的像素值接近的真实值，从而消除孤立的噪声点。方法是用某种结构的二维滑动模板，将板内像素按照像素值的大小进行排序，生成单调上升（或下降）的为二维数据序列。二维中值滤波输出为g（x,y）=med{f(x-k,y-l),(k,l∈W)} ，其中，f(x,y)，g(x,y)分别为原始图像和处理后图像。W为二维模板，通常为33，55区域，也可以是不同的的形状，如线状，圆形，十字形，圆环形等。<br>中值滤波对于消除孤立点和线段的干扰十分有用,特别是对于二进噪声尤为有效,对于消除高斯噪声则效果不佳</p>
</blockquote>
<h4 id="3-2-3边缘检测"><a href="#3-2-3边缘检测" class="headerlink" title="3.2.3边缘检测"></a>3.2.3边缘检测</h4><blockquote>
<p>边缘检测是图像处理和计算机视觉中的基本问题，边缘检测的目的是标识数字图像中亮度变化明显的点。图像属性中的显著变化通常反映了属性的重要事件和变化。 这些包括（i）深度上的不连续、（ii）表面方向不连续、（iii）物质属性变化和（iv）场景照明变化。 边缘检测是图像处理和计算机视觉中，尤其是特征提取中的一个研究领域。</p>
</blockquote>
<h5 id="3-2-3-1检测方法"><a href="#3-2-3-1检测方法" class="headerlink" title="3.2.3.1检测方法"></a>3.2.3.1检测方法</h5><blockquote>
<p>有许多用于边缘检测的方法, 他们大致可分为两类：基于搜索和基于零交叉**。 基于搜索的边缘检测方法首先计算边缘强度， 通常用一阶导数表示， 例如梯度模，然后，用计算估计边缘的局部方向， 通常采用梯度的方向，并利用此方向找到局部梯度模的最大值。 基于零交叉的方法找到由图像得到的二阶导数的零交叉点来定位边缘。 通常用拉普拉斯算子或非线性微分方程的零交叉点。 滤波做为边缘检测的预处理通常是必要的，通常采用高斯滤波。 已发表的边缘检测方法应用计算边界强度的度量，这与平滑滤波有本质的不同。 正如许多边缘检测方法依赖于图像梯度的计算，他们用不同种类的滤波器来估计x-方向和y-方向的梯度。</p>
</blockquote>
<h4 id="3-3车牌定位"><a href="#3-3车牌定位" class="headerlink" title="3.3车牌定位"></a>3.3车牌定位</h4><blockquote>
<p>车牌定位的主要方法可分为五种!:①直线边缘检测;②基于域值迭代的方法;③基于神经网络的车牌定位方法;④基于灰度的检测方法;均基于彩色图像的车牌分割方`法。<br>利用BP神经网络在灰度图像中提取车牌。具体步骤为:先收集一定数量的车牌样本,用BP算法对其进行训练,达到一定正确率后,训练结束,得到一个对牌照敏感的神经网络,提取牌照时,对输入图像进行预处理,然后利用训练出的神经网络来搜索车牌。</p>
</blockquote>
<h4 id="3-4改进之处"><a href="#3-4改进之处" class="headerlink" title="3.4改进之处"></a>3.4改进之处</h4><blockquote>
<p>本轮文提出的有待改进的地方：<br>目前的车牌号码自动识别系统只能处理单个车牌的汽车图像,对于一幅图像中多个车牌的识别则无能为力,<br>如何消除外界因素的干扰仍然是闯红灯系统需要解决的一个问题。</p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>npm/npmr文件的原始内容</title>
    <url>/npm-npmr-content/</url>
    <content><![CDATA[<h3 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1 发现问题"></a>1 发现问题</h3><p>今天我修改了node.js的安装路径下的一个文件的内容，后来发现不能npm运行了，然后无奈我就重新安装了一下，因为我要安装一个hexoEditer来编写我的hexo博客，因为采用git bash和Markdown编辑器太麻烦了，所以上GitHub上找到了hexo的编辑器，这里是下载安装地址：<a href="https://github.com/zhuzhuyule/HexoEditor">HexoEditor</a>。<br>该编辑器的界面如下，简洁大方：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/main.png" alt="HexoEditor main"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/side-menu.png" alt="HexoEditor side menu">   </p>
<p>在GitHub的readme中，有提到使用下面的语句进行配置全局变量：    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//if use Windows:</span><br><span class="line">npm config set prefix &quot;C:/Program Files/nodejs/npm_global&quot;</span><br><span class="line">npm config set cache &quot;C:/Program Files/nodejs/npm_cache&quot; </span><br><span class="line"></span><br><span class="line">//if use Linux\Mac:</span><br><span class="line">npm config set prefix &quot;~/nodejs/npm_global&quot;</span><br><span class="line">npm config set cache &quot;~/nodejs/npm_cache&quot; </span><br><span class="line"></span><br><span class="line">//If In China, China, China, you can set mirror to speed up !</span><br><span class="line">npm config set registry &quot;https://registry.npm.taobao.org/&quot;</span><br><span class="line">npm config set electron_mirror &quot;https://npm.taobao.org/mirrors/electron/&quot;</span><br><span class="line"></span><br><span class="line">git clone https://github.com/zhuzhuyule/HexoEditor.git</span><br><span class="line">cd HexoEditor</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
<p>我用的Windows，执行完命令之后，并没有效果，然后我就按照网上的教程，修改了我的nodejs文件夹下的npmrc文件，<a href="https://blog.csdn.net/carechere/article/details/51279789">参考博客</a>，此博客不可全信，只供参考。</p>
<h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>下面是<code>npm/npmrc</code>文件的原始内容，如果你修改了此文件，导致<code>npm</code>不能使用的话，那么可以修改回来,或者重新<a href="https://nodejs.org/en/">安装</a>，或者再想想别的办法。   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">prefix=$&#123;APPDATA&#125;\npm</span><br></pre></td></tr></table></figure>


<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>nsq入门，Java项目中使用nsq消息队列</title>
    <url>/nsq-and-java/</url>
    <content><![CDATA[<h2 id="1-windows命令行使用nsq"><a href="#1-windows命令行使用nsq" class="headerlink" title="1 windows命令行使用nsq"></a>1 windows命令行使用nsq</h2><p>到<a href="https://nsq.io/">nsq官网</a>选择<a href="https://github.com/nsqio/nsq">GitHub</a>下载相应的<a href="https://github.com/nsqio/nsq/releases">发行版本</a>，选择Windows发行版<a href="https://github.com/nsqio/nsq/releases/download/v1.2.0/nsq-1.2.0.windows-amd64.go1.12.9.tar.gz">下载</a>。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210811151456.png" alt=""></p>
<p>下载完成之后，解压并进入到<code>bin</code>目录，可以看到有如下的文件：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210811151651.png" alt=""></p>
<p>然后按照nsq官网的<a href="https://nsq.io/overview/quick_start.html">quick start</a>快速启动nsq，首先进入到<code>bin</code>目录：</p>
<ol>
<li><p>开启一个cmd窗口，开启<code>nsqlookupd</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nsqlookupd</span><br></pre></td></tr></table></figure>
</li>
<li><p>再开启一个cmd窗口，开启<code>nsqd</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nsqd --lookupd-tcp-address=127.0.0.1:4160</span><br></pre></td></tr></table></figure>
</li>
<li><p>再开启一个窗口，开启<code>nsqadmin</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nsqadmin --lookupd-http-address=127.0.0.1:4161</span><br></pre></td></tr></table></figure>

<p>此时，执行完上面的命令之后，你就可以到浏览器输入以下地址进入管理页面：<a href="http://127.0.0.1:4171/">http://127.0.0.1:4171/</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210811152106.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Topic：主题名称</span><br><span class="line">  empty Queue：清空队列</span><br><span class="line">  Delete Topic ： 删除主题</span><br><span class="line">  Pause Topic ： 暂停主题</span><br><span class="line">  Memory+Disk ： 内存和磁盘</span><br><span class="line">  Messages : 表示消息总数</span><br><span class="line">  channels : 消息通道</span><br><span class="line">  In-Flight :飞行中，即将消费的消息</span><br><span class="line">  Deferred : 延迟消息</span><br><span class="line">  Requeued : 已请求的消息</span><br><span class="line">  Time Out : 超时</span><br><span class="line">  Connections : 连接数</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>再重新开启cmd窗口，生产一个消息，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -d <span class="string">&#x27;hello world 1&#x27;</span> http://127.0.0.1:4151/pub?topic=<span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>这里需要注意，因为再Windows下使用<code>curl</code>命令的时候，网址不需要用单引号<code>&#39;</code>括起来，否则会报错，错误信息解决可参考<a href="https://jums.club/curl-error/">这里</a>。</p>
</li>
<li><p>然后再开启一个cmd窗口，你可以进行消费一个消息，使用<code>nsq_to_file</code>将某个topic的消息内容保存到文件中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nsq_to_file --topic=<span class="built_in">test</span> --output-dir=/tmp --lookupd-http-address=127.0.0.1:4161</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p><strong>注意：这些窗口都是持续监听的过程，不能关闭窗口，一旦有消息过来，消费者就会把消息写入文件。</strong></p>
</blockquote>
<h2 id="2-Java使用nsq"><a href="#2-Java使用nsq" class="headerlink" title="2 Java使用nsq"></a>2 Java使用nsq</h2><p>Java使用nsq，可以去<a href="https://nsq.io/">nsq官网</a>查看相应的<a href="https://nsq.io/clients/client_libraries.html">客户端库</a>，选择其中一个即可。这里以<a href="https://github.com/brainlag/JavaNSQClient">JavaNSQClient</a>为例。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210811153100.png" alt=""></p>
<ol>
<li><p>首先创建一个maven项目</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210811152806.png" alt=""></p>
<p>maven项目的目录结构一般是标准化的，大致如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a-maven-project</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java</span><br><span class="line">│   │   └── resources</span><br><span class="line">│   └── test</span><br><span class="line">│       ├── java</span><br><span class="line">│       └── resources</span><br><span class="line">└── target</span><br></pre></td></tr></table></figure>

<p>项目的根目录<code>a-maven-project</code>是项目名，它有一个项目描述文件<code>pom.xml</code>，存放Java源码的目录是<code>src/main/java</code>，存放资源文件的目录是<code>src/main/resources</code>，存放测试源码的目录是<code>src/test/java</code>，存放测试资源的目录是<code>src/test/resources</code>，最后，所有编译、打包生成的文件都放在<code>target</code>目录里。这些就是一个Maven项目的标准目录结构。</p>
</li>
<li><p>然后再<code>pom.xml</code>文件中指定相应的依赖包：</p>
<p>相关的maven依赖可以参考这个<a href="https://javalibs.com/artifact/com.github.brainlag/nsq-client">网址</a>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.brainlag<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nsq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0.RC4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后去到<a href="https://github.com/brainlag/JavaNSQClient">JavaNSQClient</a>的GitHub仓库下载源代码，该源码需要放到自己的项目目录中</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210811161857.png" alt=""></p>
</li>
<li><p>然后再写生产者和消费者代码：</p>
<ul>
<li><p>生产者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.brainlag.nsq.NSQProducer;</span><br><span class="line"><span class="keyword">import</span> com.github.brainlag.nsq.exceptions.NSQException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">nsqProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nsqProducer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NSQProducer producer = <span class="keyword">new</span> NSQProducer();</span><br><span class="line">        producer.addAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">4150</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">            sdf.applyPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss a&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                Date date = <span class="keyword">new</span> Date();</span><br><span class="line">                String message = <span class="string">&quot;message go go go, cur_time: &quot;</span> + sdf.format(date) + <span class="string">&quot;, cur_No: &quot;</span> + i;</span><br><span class="line">                producer.produce(<span class="string">&quot;test&quot;</span>, message.getBytes());</span><br><span class="line">                System.out.println(<span class="string">&quot;生产了一个消息---&gt; &quot;</span> + message);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException | InterruptedException | NSQException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>消费者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.brainlag.nsq.NSQConsumer;</span><br><span class="line"><span class="keyword">import</span> com.github.brainlag.nsq.NSQMessage;</span><br><span class="line"><span class="keyword">import</span> com.github.brainlag.nsq.callbacks.NSQMessageCallback;</span><br><span class="line"><span class="keyword">import</span> com.github.brainlag.nsq.lookup.DefaultNSQLookup;</span><br><span class="line"><span class="keyword">import</span> com.github.brainlag.nsq.lookup.NSQLookup;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">nsqConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nsqConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NSQLookup lookup = <span class="keyword">new</span> DefaultNSQLookup();</span><br><span class="line">        lookup.addLookupAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">4161</span>);</span><br><span class="line">        NSQConsumer consumer = <span class="keyword">new</span> NSQConsumer(lookup, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;nsq_to_file&quot;</span>, <span class="keyword">new</span> NSQMessageCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">(NSQMessage message)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">byte</span> b[] = message.getMessage();</span><br><span class="line">                String s = <span class="keyword">new</span> String(b);</span><br><span class="line">                System.out.println(<span class="string">&quot;消费了一个消息---&gt; &quot;</span> + s);</span><br><span class="line">                System.out.println(s);</span><br><span class="line">                message.finished();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        consumer.start();</span><br><span class="line">        <span class="comment">//线程睡眠，让程序执行完</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        consumer.setExecutor(<span class="keyword">new</span> Executor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消费者开始消费&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        nsqProducer producer = <span class="keyword">new</span> nsqProducer();</span><br><span class="line">        System.out.println(<span class="string">&quot;生产者开始运行。。。。&quot;</span>);</span><br><span class="line">        producer.nsqProducer();</span><br><span class="line">        System.out.println(<span class="string">&quot;生产者结束运行。。。。&quot;</span>);</span><br><span class="line"></span><br><span class="line">        nsqConsumer consumer = <span class="keyword">new</span> nsqConsumer();</span><br><span class="line">        consumer.nsqConsumer();</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者已经运行。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些代码能够正常运行的前提是nsq的监听程序已经开启。然后即可到相应的文件中查看是否有输出。</p>
</li>
</ul>
</li>
</ol>
<h2 id="3-nsq"><a href="#3-nsq" class="headerlink" title="3 nsq"></a>3 nsq</h2><h3 id="3-1-nsq四大组件与三大进程"><a href="#3-1-nsq四大组件与三大进程" class="headerlink" title="3.1 nsq四大组件与三大进程"></a>3.1 nsq四大组件与三大进程</h3><p>三大进行：</p>
<ul>
<li>nsqd是一个接收、排队、然后转发消息到客户端的进程。</li>
<li>nsqlookupd 管理拓扑信息并提供最终一致性的发现服务。</li>
<li>nsqadmin用于实时查看集群的统计数据（并且执行各种各样的管理任务）。</li>
</ul>
<p>四大组件：</p>
<ul>
<li>nsqlookupd：管理nsqd节点拓扑信息并提供最终一致性的发现服务的守护进程</li>
<li>nsqd：负责接收、排队、转发消息到客户端的守护进程，并且定时向nsqlookupd服务发送心跳</li>
<li>nsqadmin：nsq的web统计界面，可实时查看集群的统计数据和执行一些管理任务 </li>
<li>utilities：常见基础功能、数据流处理工具，如nsq_stat、nsq_tail、nsq_to_file、nsq_to_http、nsq_to_nsq、to_nsq</li>
</ul>
<p>各个组件之间的拓扑关系如下：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/20170323120148281.png" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/fasfasdfasdf.png" alt=""></p>
<h3 id="3-2-nsq数据流模型"><a href="#3-2-nsq数据流模型" class="headerlink" title="3.2 nsq数据流模型"></a>3.2 nsq数据流模型</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/13396ab6e2edbfbf5de98b54dd6324431603441443542.png" alt=""></p>
<h3 id="3-3-nsqd执行图"><a href="#3-3-nsqd执行图" class="headerlink" title="3.3 nsqd执行图"></a>3.3 nsqd执行图</h3><p>单个 nsqd 可以有多个 Topic，每个 Topic 又可以有多个 Channel。Channel 能够接收 Topic 所有消息的副本，从而实现了消息多播分发；而 Channel 上的每个消息被分发给它的订阅者，从而实现负载均衡，所有这些就组成了一个可以表示各种简单和复杂拓扑结构的强大框架。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/13cf706a2016db0e43a3c0aefcac0dab1603441443542.gif" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><p><a href="https://blog.csdn.net/fs_sky/article/details/65441918">https://blog.csdn.net/fs_sky/article/details/65441918</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/2b01403e3443">消息中间件NSQ深入与实践</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/37081073">分布式实时消息平台NSQ</a></p>
</li>
<li><p><a href="https://www.huaweicloud.com/articles/b116488b55c9a61db85c76e5fffe4fe7.html">NSQ使用详解 （MAC端 + Linux端）</a></p>
</li>
<li><p><a href="https://github.com/dachengzao/NSQ/blob/master/README.md">https://github.com/dachengzao/NSQ/blob/master/README.md</a></p>
</li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>入门教程</tag>
      </tags>
  </entry>
  <entry>
    <title>php数组教程</title>
    <url>/php-array/</url>
    <content><![CDATA[<h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1 数组"></a>1 数组</h1><p>php数组能够在单个变量中存储多个值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;I like &quot;</span> . <span class="variable">$cars</span>[<span class="number">0</span>] . <span class="string">&quot;, &quot;</span> . <span class="variable">$cars</span>[<span class="number">1</span>] . <span class="string">&quot; and &quot;</span> . <span class="variable">$cars</span>[<span class="number">2</span>] . <span class="string">&quot;.&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">I like Volvo, BMW <span class="keyword">and</span> Toyota.</span><br></pre></td></tr></table></figure>

<h2 id="1-1-创建数组"><a href="#1-1-创建数组" class="headerlink" title="1.1 创建数组"></a>1.1 创建数组</h2><p>在php中创建数组的方式有以下几种，由于php是一种弱类型的语言，所以不需要特别指明数组中存放的数据类型，一般php数组就相当于一个百宝箱，什么都可以放。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$arr</span> = <span class="keyword">array</span>();   <span class="comment">//1</span></span><br><span class="line">	<span class="variable">$arr2</span> = [];       <span class="comment">//2</span></span><br><span class="line">	<span class="variable">$arr3</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;23&#x27;</span>, <span class="variable">$arr</span>];   <span class="comment">//3</span></span><br><span class="line">	<span class="variable">$arr4</span> = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;23&#x27;</span>, <span class="variable">$arr3</span>);</span><br><span class="line">    <span class="comment">//以上的方式均为自动分配ID，也可以人工分配ID</span></span><br><span class="line">	<span class="variable">$arr5</span> = <span class="keyword">array</span>();  <span class="comment">//or $arr5 = [];</span></span><br><span class="line">	<span class="variable">$arr5</span>[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="variable">$arr5</span>[<span class="number">1</span>] = <span class="variable">$arr4</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span> (size=<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">empty</span></span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">empty</span></span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">4</span>)</span><br><span class="line">  <span class="number">0</span> =&gt; <span class="keyword">int</span> <span class="number">1</span></span><br><span class="line">  <span class="number">1</span> =&gt; <span class="keyword">int</span> <span class="number">2</span></span><br><span class="line">  <span class="number">2</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;23&#x27;</span> (length=<span class="number">2</span>)</span><br><span class="line">  <span class="number">3</span> =&gt; </span><br><span class="line">    <span class="keyword">array</span> (size=<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">empty</span></span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">4</span>)</span><br><span class="line">  <span class="number">0</span> =&gt; <span class="keyword">int</span> <span class="number">1</span></span><br><span class="line">  <span class="number">1</span> =&gt; <span class="keyword">int</span> <span class="number">2</span></span><br><span class="line">  <span class="number">2</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;23&#x27;</span> (length=<span class="number">2</span>)</span><br><span class="line">  <span class="number">3</span> =&gt; </span><br><span class="line">    <span class="keyword">array</span> (size=<span class="number">4</span>)</span><br><span class="line">      <span class="number">0</span> =&gt; <span class="keyword">int</span> <span class="number">1</span></span><br><span class="line">      <span class="number">1</span> =&gt; <span class="keyword">int</span> <span class="number">2</span></span><br><span class="line">      <span class="number">2</span> =&gt; <span class="keyword">string</span> <span class="string">&#x27;23&#x27;</span> (length=<span class="number">2</span>)</span><br><span class="line">      <span class="number">3</span> =&gt; </span><br><span class="line">        <span class="keyword">array</span> (size=<span class="number">0</span>)</span><br><span class="line">          <span class="keyword">empty</span></span><br></pre></td></tr></table></figure>

<h2 id="1-2-操作数据"><a href="#1-2-操作数据" class="headerlink" title="1.2 操作数据"></a>1.2 操作数据</h2><h3 id="1-2-1-获取数据的长度-count"><a href="#1-2-1-获取数据的长度-count" class="headerlink" title="1.2.1 获取数据的长度-count()"></a>1.2.1 获取数据的长度-count()</h3><p>使用php内置的函数获取数组的长度：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$arr</span> = <span class="keyword">array</span>();</span><br><span class="line">	<span class="variable">$len</span> = count(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-遍历数组-for"><a href="#1-2-2-遍历数组-for" class="headerlink" title="1.2.2 遍历数组-for"></a>1.2.2 遍历数组-for</h3><p>数组的遍历是一个很常见的操作，在php中有以下几种方式遍历数组：</p>
<ul>
<li><p>for循环</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$arr4</span> = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;23&#x27;</span>, <span class="variable">$arr3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$arr4</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        var_dump(<span class="variable">$arr4</span>[<span class="variable">$i</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>foreach</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$arr4</span> = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;23&#x27;</span>, <span class="variable">$arr3</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$arr4</span> <span class="keyword">as</span> <span class="variable">$each</span>) &#123;</span><br><span class="line">        var_dump(<span class="variable">$each</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="2-关联数组"><a href="#2-关联数组" class="headerlink" title="2 关联数组"></a>2 关联数组</h1><p>关联数组是使用程序员分配给数组的指定的键的数组，类似python中的字典，Java中的map，其实就是键值对映射。创建方式有以下几种方式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="variable">$age</span>=<span class="keyword">array</span>(<span class="string">&quot;Peter&quot;</span>=&gt;<span class="string">&quot;35&quot;</span>,<span class="string">&quot;Ben&quot;</span>=&gt;<span class="string">&quot;37&quot;</span>,<span class="string">&quot;Joe&quot;</span>=&gt;<span class="string">&quot;43&quot;</span>);  </span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="variable">$age</span>[<span class="string">&#x27;Peter&#x27;</span>]=<span class="string">&quot;35&quot;</span>;</span><br><span class="line">    <span class="variable">$age</span>[<span class="string">&#x27;Ben&#x27;</span>]=<span class="string">&quot;37&quot;</span>;</span><br><span class="line">    <span class="variable">$age</span>[<span class="string">&#x27;Joe&#x27;</span>]=<span class="string">&quot;43&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="2-1-关联数组遍历"><a href="#2-1-关联数组遍历" class="headerlink" title="2.1 关联数组遍历"></a>2.1 关联数组遍历</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$age</span> = <span class="keyword">array</span>(<span class="string">&quot;Peter&quot;</span> =&gt; <span class="string">&quot;35&quot;</span>, <span class="string">&quot;Ben&quot;</span> =&gt; <span class="string">&quot;37&quot;</span>, <span class="string">&quot;Joe&quot;</span> =&gt; <span class="string">&quot;43&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$age</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Key=&quot;</span> . <span class="variable">$k</span> . <span class="string">&quot;, Value=&quot;</span> . <span class="variable">$v</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Key=Peter, Value=<span class="number">35</span></span><br><span class="line">Key=Ben, Value=<span class="number">37</span></span><br><span class="line">Key=Joe, Value=<span class="number">43</span></span><br></pre></td></tr></table></figure>



<h1 id="3-常见php数组函数"><a href="#3-常见php数组函数" class="headerlink" title="3 常见php数组函数"></a>3 常见php数组函数</h1><ul>
<li><p><a href="https://www.php.net/manual/zh/function.is-array.php">is_array</a> — 检测变量是否是数组，</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">is_array(<span class="keyword">mixed</span> <span class="variable">$var</span>): <span class="keyword">bool</span></span><br></pre></td></tr></table></figure>

<p>如果 <code>var</code> 是 array，则返回 <strong><code>true</code></strong>，否则返回 <strong><code>false</code></strong>。</p>
</blockquote>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.explode.php">explode</a> — 使用一个字符串分割另一个字符串</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">explode(<span class="keyword">string</span> <span class="variable">$separator</span>, <span class="keyword">string</span> <span class="variable">$string</span>, <span class="keyword">int</span> <span class="variable">$limit</span> = PHP_INT_MAX): <span class="keyword">array</span></span><br></pre></td></tr></table></figure>

<p>此函数返回由字符串组成的数组，每个元素都是 <code>string</code> 的一个子串，它们被字符串 <code>separator</code> 作为边界点分割出来。</p>
</blockquote>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.implode.php">implode</a> — 将一个一维数组的值转化为字符串</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">implode(<span class="keyword">string</span> <span class="variable">$glue</span>, <span class="keyword">array</span> <span class="variable">$pieces</span>): <span class="keyword">string</span></span><br></pre></td></tr></table></figure>

<p>用 <code>glue</code> 将一维数组的值连接为一个字符串。</p>
<p><strong>注意</strong>:</p>
<p>因为历史原因，<strong>implode()</strong> 可以接收两种参数顺序，但是为了和 <a href="https://www.php.net/manual/zh/function.explode.php">explode()</a> 内的顺序保持一致，不按文档的方式已被<em>废弃</em>。</p>
</blockquote>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.preg-split.php">preg_split</a> — 通过一个正则表达式分隔字符串</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">preg_split(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$pattern</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$subject</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$limit</span> = -<span class="number">1</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$flags</span> = <span class="number">0</span></span><br><span class="line">): <span class="keyword">array</span></span><br></pre></td></tr></table></figure>

<p>返回一个使用 <code>pattern</code> 边界分隔 <code>subject</code> 后得到 的子串组成的数组， 或者在失败时返回 <strong><code>false</code></strong>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//使用逗号或空格(包含&quot; &quot;, \r, \t, \n, \f)分隔短语</span></span><br><span class="line"><span class="variable">$keywords</span> = preg_split(<span class="string">&quot;/[\s,]+/&quot;</span>, <span class="string">&quot;hypertext language, programming&quot;</span>);</span><br><span class="line">print_r(<span class="variable">$keywords</span>);<span class="comment">//array([0] =&gt; hypertext [1] =&gt; language [2] =&gt; programming)</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.unset.php">unset</a> — 释放给定的变量</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unset</span>(<span class="keyword">mixed</span> <span class="variable">$var</span>, <span class="keyword">mixed</span> $... = ?): <span class="keyword">void</span></span><br></pre></td></tr></table></figure>

<p><strong>unset()</strong> 销毁指定的变量。</p>
<p><strong>unset()</strong> 在函数中的行为会依赖于想要销毁的变量的类型而有所不同。</p>
<p>如果在函数中 <strong>unset()</strong> 一个全局变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用 <strong>unset()</strong> 之前一样的值</p>
</blockquote>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-change-key-case.php">array_change_key_case</a> — 将数组中的所有键名修改为全大写或小写</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-chunk.php">array_chunk</a> — 将一个数组分割成多个</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-column.php">array_column</a> — 返回输入数组中指定列的值</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-combine.php">array_combine</a> — 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-count-values.php">array_count_values</a> — 统计数组中所有的值</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-diff-assoc.php">array_diff_assoc</a> — 带索引检查计算数组的差集</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-diff-key.php">array_diff_key</a> — 使用键名比较计算数组的差集</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-diff-uassoc.php">array_diff_uassoc</a> — 用用户提供的回调函数做索引检查来计算数组的差集</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-diff-ukey.php">array_diff_ukey</a> — 用回调函数对键名比较计算数组的差集</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-diff.php">array_diff</a> — 计算数组的差集</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-fill-keys.php">array_fill_keys</a> — 使用指定的键和值填充数组</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-fill.php">array_fill</a> — 用给定的值填充数组</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-filter.php">array_filter</a> — 使用回调函数过滤数组的元素</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-flip.php">array_flip</a> — 交换数组中的键和值</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-intersect-assoc.php">array_intersect_assoc</a> — 带索引检查计算数组的交集</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-intersect-key.php">array_intersect_key</a> — 使用键名比较计算数组的交集</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-intersect-uassoc.php">array_intersect_uassoc</a> — 带索引检查计算数组的交集，用回调函数比较索引</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-intersect-ukey.php">array_intersect_ukey</a> — 在键名上使用回调函数来比较计算数组的交集</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-intersect.php">array_intersect</a> — 计算数组的交集</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-key-exists.php">array_key_exists</a> — 检查数组里是否有指定的键名或索引</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-key-first.php">array_key_first</a> — 获取指定数组的第一个键值</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-key-last.php">array_key_last</a> — 获取一个数组的最后一个键值</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-keys.php">array_keys</a> — 返回数组中部分的或所有的键名</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-map.php">array_map</a> — 为数组的每个元素应用回调函数</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-merge-recursive.php">array_merge_recursive</a> — 递归地合并一个或多个数组</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-merge.php">array_merge</a> — 合并一个或多个数组</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-multisort.php">array_multisort</a> — 对多个数组或多维数组进行排序</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-pad.php">array_pad</a> — 以指定长度将一个值填充进数组</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-pop.php">array_pop</a> — 弹出数组最后一个单元（出栈）</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-product.php">array_product</a> — 计算数组中所有值的乘积</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-push.php">array_push</a> — 将一个或多个单元压入数组的末尾（入栈）</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-rand.php">array_rand</a> — 从数组中随机取出一个或多个随机键</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-reduce.php">array_reduce</a> — 用回调函数迭代地将数组简化为单一的值</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-replace-recursive.php">array_replace_recursive</a> — 使用传递的数组递归替换第一个数组的元素</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-replace.php">array_replace</a> — 使用传递的数组替换第一个数组的元素</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-reverse.php">array_reverse</a> — 返回单元顺序相反的数组</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-search.php">array_search</a> — 在数组中搜索给定的值，如果成功则返回首个相应的键名</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-shift.php">array_shift</a> — 将数组开头的单元移出数组</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-slice.php">array_slice</a> — 从数组中取出一段</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_slice(</span><br><span class="line">    <span class="keyword">array</span> <span class="variable">$array</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$offset</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$length</span> = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">bool</span> <span class="variable">$preserve_keys</span> = <span class="literal">false</span></span><br><span class="line">): <span class="keyword">array</span></span><br></pre></td></tr></table></figure>

<ul>
<li>array:</li>
</ul>
<p>输入的数组。</p>
<ul>
<li>offset:</li>
</ul>
<p>如果 <code>offset</code> 非负，则序列将从 <code>array</code> 中的此偏移量开始。</p>
<p>如果 <code>offset</code> 为负，则序列将从 <code>array</code> 中距离末端这么远的地方开始。</p>
<blockquote>
<p><strong>注意</strong>:</p>
<p>参数 <code>offset</code> 标识的是数组中的位置，而不是键。</p>
</blockquote>
<ul>
<li>length:</li>
</ul>
<p>如果给出了 <code>length</code> 并且为正，则序列中将具有这么多的单元。</p>
<p>如果 array 比 <code>length</code> 要短，只会保留有效的数组单元。</p>
<p>如果给出了 <code>length</code> 并且为负，则序列将终止在距离数组末端这么远的地方。</p>
<p>如果省略，则序列将从 <code>offset</code> 开始一直到 <code>array</code> 的末端。</p>
<ul>
<li>preserve_keys:</li>
</ul>
<blockquote>
<p><strong>注意</strong>:</p>
<p>注意 <strong>array_slice()</strong> 默认会重新排序并重置数组的数字索引。你可以通过将 <code>preserve_keys</code> 设为 <strong><code>true</code></strong> 来改变此行为。 无论本参数如何设置，都会保留字符串的键。</p>
</blockquote>
</blockquote>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-splice.php">array_splice</a> — 去掉数组中的某一部分并用其它值取代</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-sum.php">array_sum</a> — 对数组中所有值求和</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-udiff-assoc.php">array_udiff_assoc</a> — 带索引检查计算数组的差集，用回调函数比较数据</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-udiff-uassoc.php">array_udiff_uassoc</a> — 带索引检查计算数组的差集，用回调函数比较数据和索引</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-udiff.php">array_udiff</a> — 用回调函数比较数据来计算数组的差集</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-uintersect-assoc.php">array_uintersect_assoc</a> — 带索引检查计算数组的交集，用回调函数比较数据</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-uintersect-uassoc.php">array_uintersect_uassoc</a> — 带索引检查计算数组的交集，用单独的回调函数比较数据和索引</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-uintersect.php">array_uintersect</a> — 计算数组的交集，用回调函数比较数据</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-unique.php">array_unique</a> — 移除数组中重复的值</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_unique(<span class="keyword">array</span> `<span class="variable">$array</span>`, <span class="keyword">int</span> `<span class="variable">$sort_flags</span>` = SORT_STRING): <span class="keyword">array</span></span><br></pre></td></tr></table></figure>

<p><strong>array_unique()</strong> 接受 <code>array</code> 作为输入并返回没有重复值的新数组。</p>
<p>注意键名保留不变。<strong>array_unique()</strong> 先将值作为字符串排序，然后对每个值只保留第一个遇到的键名，接着忽略所有后面的键名。这并不意味着在未排序的 <code>array</code> 中同一个值的第一个出现的键名会被保留。</p>
<p><strong>注意</strong>: 当且仅当 <code>(string) $elem1 === (string) $elem2</code> 时两个单元被认为相同。 例如，字符串表达一样时，会使用首个元素。</p>
</blockquote>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-unshift.php">array_unshift</a> — 在数组开头插入一个或多个单元</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-values.php">array_values</a> — 返回数组中所有的值</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_values(<span class="keyword">array</span> <span class="variable">$array</span>): <span class="keyword">array</span></span><br></pre></td></tr></table></figure>

<p><strong>array_values()</strong> 返回 <code>input</code> 数组中所有的值并给其建立数字索引。</p>
</blockquote>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-walk-recursive.php">array_walk_recursive</a> — 对数组中的每个成员递归地应用用户函数</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array-walk.php">array_walk</a> — 使用用户自定义函数对数组中的每个元素做回调处理</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myfunction</span>(<span class="params"><span class="variable">$value</span>,<span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    	<span class="keyword">echo</span> <span class="string">&quot;The key <span class="subst">$key</span> has the value <span class="subst">$value</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&quot;red&quot;</span>,<span class="string">&quot;b&quot;</span>=&gt;<span class="string">&quot;green&quot;</span>,<span class="string">&quot;c&quot;</span>=&gt;<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    array_walk(<span class="variable">$a</span>,<span class="string">&quot;myfunction&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The key a has the value red</span><br><span class="line">The key b has the value green</span><br><span class="line">The key c has the value blue</span><br></pre></td></tr></table></figure>

<p><strong>array_walk()</strong> 不会受到 <code>array</code> 内部数组指针的影响。<strong>array_walk()</strong> 会遍历整个数组而不管指针的位置。</p>
<p>array_walk() 函数对数组中的每个元素应用用户自定义函数。在函数中，数组的键名和键值是参数。</p>
<p><strong>注释：</strong>您可以通过把用户自定义函数中的第一个参数指定为引用：<code>&amp;$value</code>，来改变数组元素的值。</p>
<p><strong>提示：</strong>如需操作更深的数组（一个数组中包含另一个数组），请使用 <a href="https://www.php.net/manual/zh/function.array-walk-recursive.php">array_walk_recursive()</a> 函数。</p>
<p>在遍历数组的过程中，也可以改变原数组的值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$fruits</span> = <span class="keyword">array</span>(<span class="string">&quot;d&quot;</span> =&gt; <span class="string">&quot;lemon&quot;</span>, <span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;c&quot;</span> =&gt; <span class="string">&quot;apple&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_alter</span>(<span class="params">&amp;<span class="variable">$value</span>, <span class="variable">$key</span>, <span class="variable">$prefix</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$value</span> = <span class="string">&quot;<span class="subst">$prefix</span>: <span class="subst">$value</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_print</span>(<span class="params"><span class="variable">$value</span>, <span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$key</span>. <span class="subst">$value</span>&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Before ...:&lt;br&gt;&#x27;</span>;</span><br><span class="line">array_walk(<span class="variable">$fruits</span>, <span class="string">&#x27;test_print&#x27;</span>);</span><br><span class="line">array_walk(<span class="variable">$fruits</span>, <span class="string">&#x27;test_alter&#x27;</span>, <span class="string">&#x27;fruit&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;... and after:&lt;br&gt;&quot;</span>;</span><br><span class="line">array_walk(<span class="variable">$fruits</span>, <span class="string">&#x27;test_print&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Before ...:</span><br><span class="line">d. lemon</span><br><span class="line">a. orange</span><br><span class="line">b. banana</span><br><span class="line">c. apple</span><br><span class="line">... and after:</span><br><span class="line">d. fruit: lemon</span><br><span class="line">a. fruit: orange</span><br><span class="line">b. fruit: banana</span><br><span class="line">c. fruit: apple</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.array.php">array</a> — 新建一个数组</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.arsort.php">arsort</a> — 对数组进行降向排序并保持索引关系</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.asort.php">asort</a> — 对数组进行升序排序并保持索引关系</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.compact.php">compact</a> — 建立一个数组，包括变量名和它们的值</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.count.php">count</a> — 计算数组中的单元数目，或对象中的属性个数</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.current.php">current</a> — 返回数组中的当前值</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.each.php">each</a> — 返回数组中当前的键／值对并将数组指针向前移动一步</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.end.php">end</a> — 将数组的内部指针指向最后一个单元</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.extract.php">extract</a> — 从数组中将变量导入到当前的符号表</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.in-array.php">in_array</a> — 检查数组中是否存在某个值</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.key-exists.php">key_exists</a> — 别名 array_key_exists</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.key.php">key</a> — 从关联数组中取得键名</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.krsort.php">krsort</a> — 对数组按照键名逆向排序</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.ksort.php">ksort</a> — 对数组根据键名升序排序</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.list.php">list</a> — 把数组中的值赋给一组变量</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.natcasesort.php">natcasesort</a> — 用“自然排序”算法对数组进行不区分大小写字母的排序</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.natsort.php">natsort</a> — 用“自然排序”算法对数组排序</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.next.php">next</a> — 将数组中的内部指针向前移动一位</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.pos.php">pos</a> — current 的别名</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.prev.php">prev</a> — 将数组的内部指针倒回一位</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.range.php">range</a> — 根据范围创建数组，包含指定的元素</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.reset.php">reset</a> — 将数组的内部指针指向第一个单元</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.rsort.php">rsort</a> — 对数组降序排序</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.shuffle.php">shuffle</a> — 打乱数组</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.sizeof.php">sizeof</a> — count 的别名</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.sort.php">sort</a> — 对数组升序排序</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.uasort.php">uasort</a> — 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.uksort.php">uksort</a> — 使用用户自定义的比较函数对数组中的键名进行排序</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.usort.php">usort</a> — 使用用户自定义的比较函数对数组中的值进行排序</p>
</li>
</ul>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>入门教程</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo个人博客绑定个人域名</title>
    <url>/personal-domain-for-github-page/</url>
    <content><![CDATA[<h3 id="1-注册个人域名"><a href="#1-注册个人域名" class="headerlink" title="1 注册个人域名"></a>1 注册个人域名</h3><p>进入到腾讯云平台，自己注册一个账号（微信登录即可），下面是网址：<br><a href="https://cloud.tencent.com/act/domainsales?from=dnspodqcloud">https://cloud.tencent.com/act/domainsales?from=dnspodqcloud</a><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191123125246.png" alt="">   </p>
<h3 id="2-开始域名解析"><a href="#2-开始域名解析" class="headerlink" title="2 开始域名解析"></a>2 开始域名解析</h3><p>自己按照步骤购买域名，第一年是1元，然后进入到控制台，进入域名解析界面，如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191123125742.png" alt=""><br>点击【解析】进入到域名解析界面，如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191123125952.png" alt="">   </p>
<h3 id="3-创建CNAME文件"><a href="#3-创建CNAME文件" class="headerlink" title="3 创建CNAME文件"></a>3 创建CNAME文件</h3><p>创建一个CNAME文件：   </p>
<ul>
<li>这几个字母必须是大写</li>
<li>没有后缀名</li>
<li>用记事本打开将自己的域名写在里面，如：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191123130306.png" alt="">   </li>
</ul>
<h3 id="4-部署到GitHub"><a href="#4-部署到GitHub" class="headerlink" title="4 部署到GitHub"></a>4 部署到GitHub</h3><p>将CNAME文件放到publics文件夹里面，然后上传到GitHub，命令如下：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Notice: Undefined index: ZZZZZZWTF? [duplicate]</title>
    <url>/php-error-reporting/</url>
    <content><![CDATA[<h2 id="1-Notice-Undefined-index-ZZZZZZWTF-duplicate"><a href="#1-Notice-Undefined-index-ZZZZZZWTF-duplicate" class="headerlink" title="1 Notice: Undefined index: ZZZZZZWTF? [duplicate]"></a>1 Notice: Undefined index: ZZZZZZWTF? [duplicate]</h2><p>再运行PHP脚本的时候，明明脚本语法什么的都没有问题，但是却有如下的提示信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Notice: Undefined index: submit in C:\xampp\htdocs\globalautoparts\register.php on line 36</span><br><span class="line">Notice: Undefined index: fullname in C:\xampp\htdocs\globalautoparts\register.php on line 40</span><br><span class="line">Notice: Undefined index: username in C:\xampp\htdocs\globalautoparts\register.php on line 41</span><br><span class="line">Notice: Undefined index: password in C:\xampp\htdocs\globalautoparts\register.php on line 42</span><br><span class="line">Notice: Undefined index: repeatpassword in C:\xampp\htdocs\globalautoparts\register.php on line 43</span><br><span class="line">Notice: Undefined index: email in C:\xampp\htdocs\globalautoparts\register.php on line 45</span><br></pre></td></tr></table></figure>

<p>遇到这种情况，应该如何解决。</p>
<h2 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h2><p>修改PHP的日志提示等级，忽略这些提示信息即可。再脚本最上面添加如下语句，然后问题解决。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">error_reporting(E_ALL ^ E_NOTICE);</span><br></pre></td></tr></table></figure>

<h2 id="3-error-reporting-函数"><a href="#3-error-reporting-函数" class="headerlink" title="3 error_reporting()函数"></a>3 error_reporting()函数</h2><h3 id="3-1-定义和用法"><a href="#3-1-定义和用法" class="headerlink" title="3.1 定义和用法"></a>3.1 定义和用法</h3><blockquote>
<p>error_reporting() 函数规定报告哪个错误。</p>
<p>该函数设置当前脚本的错误报告级别。</p>
<p>该函数返回旧的错误报告级别。</p>
</blockquote>
<h3 id="3-2-error-reporting-中常用的几种写法"><a href="#3-2-error-reporting-中常用的几种写法" class="headerlink" title="3.2 error_reporting()中常用的几种写法"></a>3.2 error_reporting()中常用的几种写法</h3><ul>
<li><code>error_reporting(E_ALL ^ E_NOTICE ^ E_WARNING)</code>: 这种方式代表报告除了<code>E_NOTICE</code>, <code>E_WARNING</code> 之外的所有错误</li>
<li><code>error_reporting(E_WARNING | E_ERROR)</code>: 这种方式代表只报告<code>E_ERROR</code> 和 <code>E_WARNING</code> 这两个级别的错误</li>
<li><code>error_reporting(E_ALL &amp; ~E_NOTICE)</code> : 同<code>^</code> 代表报告除了<code>E_NOTICE</code>之外的所有错误</li>
</ul>
<h3 id="3-3-PHP中的日志级别"><a href="#3-3-PHP中的日志级别" class="headerlink" title="3.3 PHP中的日志级别"></a>3.3 PHP中的日志级别</h3><table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">常量</th>
<th align="left">说明</th>
<th align="left">备注(版本要求)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">E_ERROR</td>
<td align="left">致命的运行时错误。这类错误一般是不可恢复的情况，例如内存分配导致的问题。后果是导致脚本终止不再继续运行。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">E_WARNING</td>
<td align="left">运行时警告 (非致命错误)。仅给出提示信息，但是脚本不会终止运行。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">E_PARSE</td>
<td align="left">编译时语法解析错误。解析错误仅仅由分析器产生。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">E_NOTICE</td>
<td align="left">运行时通知。表示脚本遇到可能会表现为错误的情况，但是在可以正常运行的脚本里面也可能会有类似的通知。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">16</td>
<td align="left">E_CORE_ERROR</td>
<td align="left">在PHP初始化启动过程中发生的致命错误。该错误类似 E_ERROR，但是是由PHP引擎核心产生的。</td>
<td align="left">since PHP 4</td>
</tr>
<tr>
<td align="left">32</td>
<td align="left">E_CORE_WARNING</td>
<td align="left">PHP初始化启动过程中发生的警告 (非致命错误) 。类似 E_WARNING，但是是由PHP引擎核心产生的。</td>
<td align="left">since PHP 4</td>
</tr>
<tr>
<td align="left">64</td>
<td align="left">E_COMPILE_ERROR</td>
<td align="left">致命编译时错误。类似E_ERROR, 但是是由Zend脚本引擎产生的。</td>
<td align="left">since PHP 4</td>
</tr>
<tr>
<td align="left">128</td>
<td align="left">E_COMPILE_WARNING</td>
<td align="left">编译时警告 (非致命错误)。类似 E_WARNING，但是是由Zend脚本引擎产生的。</td>
<td align="left">since PHP 4</td>
</tr>
<tr>
<td align="left">256</td>
<td align="left">E_USER_ERROR</td>
<td align="left">用户产生的错误信息。类似 E_ERROR, 但是是由用户自己在代码中使用PHP函数 trigger_error()来产生的。</td>
<td align="left">since PHP 4</td>
</tr>
<tr>
<td align="left">512</td>
<td align="left">E_USER_WARNING</td>
<td align="left">用户产生的警告信息。类似 E_WARNING, 但是是由用户自己在代码中使用PHP函数 trigger_error()来产生的。</td>
<td align="left">since PHP 4</td>
</tr>
<tr>
<td align="left">1024</td>
<td align="left">E_USER_NOTICE</td>
<td align="left">用户产生的通知信息。类似 E_NOTICE, 但是是由用户自己在代码中使用PHP函数 trigger_error()来产生的。</td>
<td align="left">since PHP 4</td>
</tr>
<tr>
<td align="left">2048</td>
<td align="left">E_STRICT</td>
<td align="left">启用 PHP 对代码的修改建议，以确保代码具有最佳的互操作性和向前兼容性。</td>
<td align="left">since PHP 5</td>
</tr>
<tr>
<td align="left">4096</td>
<td align="left">E_RECOVERABLE_ERROR</td>
<td align="left">可被捕捉的致命错误。 它表示发生了一个可能非常危险的错误，但是还没有导致PHP引擎处于不稳定的状态。 如果该错误没有被用户自定义句柄捕获 (参见</td>
<td align="left"><code>set_error_handler()</code>，将成为一个 E_ERROR　从而脚本会终止运行。 since PHP 5.2.0</td>
</tr>
<tr>
<td align="left">8192</td>
<td align="left">E_DEPRECATED</td>
<td align="left">运行时通知。启用后将会对在未来版本中可能无法正常工作的代码给出警告。</td>
<td align="left">since PHP 5.3.0</td>
</tr>
<tr>
<td align="left">16384</td>
<td align="left">E_USER_DEPRECATED</td>
<td align="left">用户产少的警告信息。 类似 E_DEPRECATED, 但是是由用户自己在代码中使用PHP函数 trigger_error()来产生的</td>
<td align="left">since PHP 5.3.0</td>
</tr>
<tr>
<td align="left">32767</td>
<td align="left">E_ALL</td>
<td align="left">E_STRICT出外的所有错误和警告信息。</td>
<td align="left">32767 in PHP 5.4.x, 30719 in PHP 5.3.x, 6143 in PHP 5.2.x, 2047 previously</td>
</tr>
</tbody></table>
<h3 id="3-4-关于-E-ALL-和-E-STRICT"><a href="#3-4-关于-E-ALL-和-E-STRICT" class="headerlink" title="3.4 关于 E_ALL 和 E_STRICT"></a>3.4 关于 E_ALL 和 E_STRICT</h3><p>在上面的表格中可以看到 ， 在<code>php5.3</code>及以下的版本中， <code>E_ALL</code>的值都是<code>30719</code>, 这是因为<code>php5.3</code>的 <code>E_ALL</code>并不包含<code>E_STRICT</code>级别的错误, 但是在<code>php5.4</code>之中， <code>E_ALL</code>已经默认将<code>E_STRICT</code>包含进去了</p>
<blockquote>
<p>这是因为PHP版本的升级过程，E_STRICT是一个严格模式，比如大家都知道类中的静态方法按理应该只能静态调用、非静态方法则需要实例化类后调用，但PHP也支持用::静态方式调用一个非静态方法，不过此时如果开启了严格模式E_STRICT；则会导致一个E_STRICT级别的错误</p>
</blockquote>
<p>如下代码， 在<code>php5.3</code>中运行没有问题， 但是在<code>php5.4</code>中就会报错</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="number">1111</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">a::test();</span><br></pre></td></tr></table></figure>

<p>上面的代码， 如果在<code>php5.3</code>中运行，那么没有问题，如果在<code>php5.4</code>及以上的版本中运行， 将会报出下面的错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Strict standards: Non-static method a::test() should not be called statically in ....</span><br></pre></td></tr></table></figure>

<p>所以在一些低版本的php代码中 会见到 <code>error_reporting(E_ALL | E_STRICT)</code> 这种写法</p>
<h3 id="3-5-PHP中错误级别原理"><a href="#3-5-PHP中错误级别原理" class="headerlink" title="3.5 PHP中错误级别原理"></a>3.5 PHP中错误级别原理</h3><p>php的错误级别本质上是采用<code>位图法</code>来存储的, 使用二进制的每一个位代表一种状态， 比如1个字节有8个bit，通过对这8个big的每一个位区分01， 可以代表8种状态。回到php，我们来拆解一下php的error方式，看下面的图片↓↓↓</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/399f65cd16e6fccdda543e70bf0a4b5f.png" alt=""></p>
<p>我们修改<code>errorlevel</code>的值，也就是修改对应位的状态。</p>
<h4 id="3-5-1-或运算方式-，-使不同的错误级别累加"><a href="#3-5-1-或运算方式-，-使不同的错误级别累加" class="headerlink" title="3.5.1 或运算方式 |， 使不同的错误级别累加"></a>3.5.1 或运算方式 <code>|</code>， 使不同的错误级别累加</h4><p><strong>或运算的规则为 一方为1， 结果为1，两者都为0， 结果才为0</strong></p>
<p>这里我们设置只开启 <code>E_ERROR</code> 和 <code>E_NOTICE</code> 这两个级别的错误</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$errorLevel</span> = E_ERROR | E_NOTICE;</span><br><span class="line">error_reporting(<span class="variable">$errorLevel</span>);</span><br><span class="line"><span class="comment">// 打印下 $errorLevle 的值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$errorLevel</span>; <span class="comment">// 9</span></span><br></pre></td></tr></table></figure>

<p>上面的代码， 我们设置的错误级别值为9, php将只报出<code>E_ERROR</code> 和 <code>E_NOTICE</code>这两个级别的错误， 其他的都会屏蔽， 那么php内部是通过怎样的机制实现的呢， 一起来看一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    E_ERROR的值  = 1; 对应的二进制为 0000 0001</span></span><br><span class="line"><span class="comment">    E_NOTICE的值 = 8; 对应的二进制为 0000 1000</span></span><br><span class="line"><span class="comment">         当这两个值进行按位或运算之后 ---------</span></span><br><span class="line"><span class="comment">                            结果为  0000 1001</span></span><br><span class="line"><span class="comment">                            转化为10进制对应的数字就是9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    在php内部， 判断是否是对应的错误级别， 只需要使用 [对应的错误级别] &amp; [设置的错误级别]</span></span><br><span class="line"><span class="comment">    下面我们假设php在运行中出现了一个NOTICE级别的错误，判断是否开启了该错误级别</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">if</span> (E_NOTICE &amp; <span class="variable">$errorLevel</span>) &#123;</span><br><span class="line">        <span class="comment">// 开启了 NOTICE级别， 处理错误</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    上面的代码中， 只要使用 按位&amp;， 就可以判断</span></span><br><span class="line"><span class="comment">    E_NOTICE    的值 = 8; 对应的二进制为 0000 1000</span></span><br><span class="line"><span class="comment">    $errorLevel 的值 = 9; 对应的二进制为 0000 1001</span></span><br><span class="line"><span class="comment">                                       ---------</span></span><br><span class="line"><span class="comment">                      运算之后的结果为8  0000 1000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    那如果使用 E_WARNING 来判断呢， 请看下面</span></span><br><span class="line"><span class="comment">    E_WARNING   的值 = 2; 对应的二进制为 0000 0010</span></span><br><span class="line"><span class="comment">    $errorLevel 的值 = 9; 对应的二进制为 0000 1001</span></span><br><span class="line"><span class="comment">                                       ---------</span></span><br><span class="line"><span class="comment">                      运算之后的结果为0  0000 0000</span></span><br><span class="line"><span class="comment">    可以看到， 结果为0，不匹配当前错误级别</span></span><br></pre></td></tr></table></figure>

<p>通过上面的说明以及上面的图片， 可以发现本质上就是修改对应的位的状态， 使用的时候通过判断该位的状态来进行不同的操作</p>
<h4 id="3-5-2-异或方式-排除某一个状态"><a href="#3-5-2-异或方式-排除某一个状态" class="headerlink" title="3.5.2 ^ 异或方式 排除某一个状态"></a>3.5.2 <code>^</code> 异或方式 排除某一个状态</h4><p>偷懒一下， 少写一点，可以参考 或运算，本质上是一样的</p>
<p><strong>异或的规则是： 相同为0， 不同为1</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 E_ALL, 并且排除 E_NOTICE 以及 E_WARNING, 可以这样写</span></span><br><span class="line"><span class="variable">$errorLevel</span> = E_ALL ^ E_NOTICE ^ E_WARNING;</span><br><span class="line">error_reporting(<span class="variable">$errorLevel</span>);</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">    他们的运算过程是怎么样的呢， 来看一下</span></span><br><span class="line"><span class="comment">    E_ALL    的值 = 32767; 对应的二进制为 1111 1111 1111 1111</span></span><br><span class="line"><span class="comment">    E_NOTICE 的值 = 8;     对应的二进制为 0000 0000 0000 1000</span></span><br><span class="line"><span class="comment">                                        -------------------</span></span><br><span class="line"><span class="comment">                                 结果是  1111 1111 1111 0111</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    看上面的结果， 是不是发现就是把8对应的二进制位的状态变成0了，其他的位状态都没有变， </span></span><br><span class="line"><span class="comment">    所以就相当于排除了8也就是E_NOTICE, 下面用这个结果再与 E_WARNING 异或</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    上一步的结果为                       1111 1111 1111 1111</span></span><br><span class="line"><span class="comment">    E_WARNING 的值 = 2;                 0000 0000 0000 0010</span></span><br><span class="line"><span class="comment">                                        -------------------</span></span><br><span class="line"><span class="comment">                                 结果是 1111 1111 1111 0101</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    可以看到， 把E_WARNING对应的状态也置为0了</span></span><br></pre></td></tr></table></figure>

<h4 id="3-5-3-先取反-再-与-amp"><a href="#3-5-3-先取反-再-与-amp" class="headerlink" title="3.5.3 先取反 ~再 与 &amp;"></a>3.5.3 先取反 <code>~</code>再 与 <code>&amp;</code></h4><p>结果为 异或， 这里不再多说</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://stackoverflow.com/questions/7115852/notice-undefined-index-zzzzzzwtf">https://stackoverflow.com/questions/7115852/notice-undefined-index-zzzzzzwtf</a></li>
<li><a href="https://www.runoob.com/php/func-error-reporting.html">https://www.runoob.com/php/func-error-reporting.html</a></li>
<li><a href="https://www.php.net/manual/en/function.error-reporting.php">https://www.php.net/manual/en/function.error-reporting.php</a></li>
<li><a href="https://www.xstnet.com/article-148.html">https://www.xstnet.com/article-148.html</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>php区分线上环境和测试环境</title>
    <url>/php-dist-prod-and-test/</url>
    <content><![CDATA[<p>一般我们在做开发的时候，程序都会运行在多个环境，起码会3个：开发环境、测试环境、生成环境</p>
<p>三种环境的配置信息是不一样的</p>
<p>数据库配置不一样、debug级别不一样、日志记录级别不一样、缓存不一样，等等。</p>
<p>但是我们用版本管理工具的时候，代码在三种环境下是一样的，所以，如何区分当前运行的是那个环境？</p>
<ul>
<li><p>方案1. 是使用.env文件，这个文件不会托管到版本库，每个运行环境都是独立配置的</p>
</li>
<li><p>方案2. 准备多份配置文件，比如config.php、config-local.php，config.php托管在版本库，配个人都一样，config-local.php不托管在版本库，每个人独立配置，运行的时候config-local.php会覆盖config.php中的配置项，缺点是每次搭建环境都需要配置这个文件，比较繁琐。有些人会直接复制config.php为config-local.php，结果导致更改了config.php，其他开发人员不会生效。</p>
</li>
<li><p>方案3. 使用系统环境变量</p>
</li>
</ul>
<h2 id="1-Apache的环境变量设置"><a href="#1-Apache的环境变量设置" class="headerlink" title="1 Apache的环境变量设置"></a>1 Apache的环境变量设置</h2><p>指令：<code>SetEnv RUNTIME_ENVIROMENT DEV</code></p>
<p>配置格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ServerAdmin admin@admin.com</span><br><span class="line">DocumentRoot &quot;/var/www/&quot;</span><br><span class="line">ServerName localhost</span><br><span class="line">SetEnv RUNTIME_ENVIROMENT DEV</span><br><span class="line">ErrorLog &quot;logs/error.log&quot;</span><br><span class="line">CustomLog &quot;logs/access.log&quot; common</span><br></pre></td></tr></table></figure>

<h2 id="2-设置Nginx环境变量"><a href="#2-设置Nginx环境变量" class="headerlink" title="2 设置Nginx环境变量"></a>2 设置Nginx环境变量</h2><p>指令：<code>fastcgi_param RUNTIME_ENVIROMENT &#39;DEV&#39;</code></p>
<p>设置格式：</p>
<p>在<code>fastcgi_params</code>文件中配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastcgi_param RUNTIME_ENVIROMENT &#x27;DEV&#x27;;</span><br></pre></td></tr></table></figure>

<p>在nginx.conf中配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    root /var/www;</span><br><span class="line">    index index.php;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    location /</span><br><span class="line">    &#123;</span><br><span class="line">    	index index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(php|php5)?$ &#123;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi_params;  #需要在fastcgi_params文件中定义环境变量</span><br><span class="line">        #或者</span><br><span class="line">        #fastcgi_param RUNTIME_ENVIROMENT &#x27;DEV&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-Linux系统下的设置方式"><a href="#3-Linux系统下的设置方式" class="headerlink" title="3 Linux系统下的设置方式"></a>3 Linux系统下的设置方式</h2><p>在<code>/etc/environment</code>文件中添加环境变量</p>
<p>命令：<code>vi /etc/environment</code></p>
<p>添加一行<code>RUNTIME_ENVIROMENT=DEV</code></p>
<p>貌似只在命令行环境生效</p>
<h2 id="4-windows下IIS设置环境变量"><a href="#4-windows下IIS设置环境变量" class="headerlink" title="4 windows下IIS设置环境变量"></a>4 windows下IIS设置环境变量</h2><h3 id="1-我的电脑-》右键-选择我的属性"><a href="#1-我的电脑-》右键-选择我的属性" class="headerlink" title="1.我的电脑-》右键(选择我的属性)"></a>1.我的电脑-》右键(选择我的属性)</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/f3cbe59dbac54b68654fb358d87a2182.png" alt="f3cbe59dbac54b68654fb358d87a2182.png"></p>
<h3 id="2-点击高级设置"><a href="#2-点击高级设置" class="headerlink" title="2.点击高级设置"></a>2.点击高级设置</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/8547268d2ad7abcaa202a0378bcf8d2b.png" alt="8547268d2ad7abcaa202a0378bcf8d2b.png"></p>
<h3 id="3-点击环境变量"><a href="#3-点击环境变量" class="headerlink" title="3.点击环境变量"></a>3.点击环境变量</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/4cfb8718ac171455a00602614adb61cb.png" alt="4cfb8718ac171455a00602614adb61cb.png"></p>
<p>点击系统环境变量下面的新建按钮添加就可以了</p>
<p>可能需要重启电脑才能生效</p>
<p>使用方法</p>
<p>在PHP中有两个调用方式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env</span> = getenv(<span class="string">&#x27;RUNTIME_ENVIROMENT&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>还有超全局变量方式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;RUNTIME_ENVIROMENT&#x27;</span>];</span><br></pre></td></tr></table></figure>

<p>然后根据获取到的环境变量设置就可以了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">defined(<span class="string">&#x27;YII_ENV&#x27;</span>) <span class="keyword">or</span> define(<span class="string">&#x27;YII_ENV&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;RUNTIME_ENVIROMENT&#x27;</span>] ?? <span class="string">&#x27;prod&#x27;</span>);</span><br><span class="line">defined(<span class="string">&#x27;YII_DEBUG&#x27;</span>) <span class="keyword">or</span> define(<span class="string">&#x27;YII_DEBUG&#x27;</span>, YII_ENV === <span class="string">&#x27;dev&#x27;</span> || YII_ENV === <span class="string">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/weixin_30844865/article/details/115198811">https://blog.csdn.net/weixin_30844865/article/details/115198811</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>php中isset的empty区别？</title>
    <url>/php-isset-empty/</url>
    <content><![CDATA[<h2 id="1-错误"><a href="#1-错误" class="headerlink" title="1 错误"></a>1 错误</h2><p>在PHP中，经常会有需要判断某些变量是否为空的情况，这个时候，PHP中有两个函数可供使用：</p>
<ul>
<li>isset：判断变量的变量值是否已经设置</li>
<li>empty：判断当前变量是否为空</li>
</ul>
<p>这里需要注意，当使用empty的时候，如果这个变量的值为<code>0</code>，系统也会认为这个变量为空。如果想要使用避免一些错误，应该明白这个时候的逻辑到底是什么。建议使用<code>isset</code>代替<code>empty</code>。</p>
<p>我需要判断当<code>data</code>数组中的<code>a</code>变量为空的时候，就输出错误信息，但是我的这个<code>a</code>变量本身的值有可能是0，导致我在这个问题上纠结了很久，最后通过测试，发现了问题，然后我使用isset代替了empty，但是还是不行。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$data</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;   <span class="comment">//即使a不为空，也会进入到这个里面</span></span><br><span class="line">	<span class="keyword">return</span> \Fam\Api\Api::fail(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$data</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;   <span class="comment">//即使a不为空，也会进入到这个里面</span></span><br><span class="line">	<span class="keyword">return</span> \Fam\Api\Api::fail(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>经过对比这两个方法的区别，最后我是用了下面的方法，问题完美解决。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$data</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;   <span class="comment">//问题解决</span></span><br><span class="line">	<span class="keyword">return</span> \Fam\Api\Api::fail(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>



<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>php的关键语法介绍</title>
    <url>/php-syntax/</url>
    <content><![CDATA[<h1 id="1-变量"><a href="#1-变量" class="headerlink" title="1 变量"></a>1 变量</h1><h2 id="（1）变量"><a href="#（1）变量" class="headerlink" title="（1）变量"></a>（1）变量</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span>;  <span class="comment">//不指定初始值</span></span><br><span class="line"><span class="variable">$x</span> = <span class="number">1</span>; <span class="comment">//执行初始值   </span></span><br><span class="line"><span class="comment">//php中的变量不需要特别执行变量的类型，有解析器自动识别</span></span><br></pre></td></tr></table></figure>

<h2 id="（2）常量"><a href="#（2）常量" class="headerlink" title="（2）常量"></a>（2）常量</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//1.使用define()函数声明</span></span><br><span class="line"><span class="comment">//define(&quot;常量名&quot;，常量值)，这里需要注意，使用define定义常量时，需要使用双引号，否则会有提示警告</span></span><br><span class="line">define(PI, <span class="number">3.14</span>);</span><br><span class="line"><span class="keyword">echo</span> PI;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//2.使用const关键字定义</span></span><br><span class="line"><span class="keyword">const</span> PIS = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">echo</span> PIS;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210711151342.png" alt=""></p>
<h2 id="（3）变量作用域"><a href="#（3）变量作用域" class="headerlink" title="（3）变量作用域"></a>（3）变量作用域</h2><ul>
<li><p>全局变量：只允许再全局空间再被访问，也就是说再函数内部不能被访问</p>
</li>
<li><p>局部变量：只允许再函数内部被访问</p>
<ul>
<li><p>如果想要再函数内部访问全局变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   1.全局空间存在该变量</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="comment">//   2.全局不空间不存在该变量，系统会自动创建</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//$a = 123;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="variable">$a</span> = <span class="number">444</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>超全局变量：没有访问限制，可以再全局空间或者函数内部被访问</p>
</li>
</ul>
<h2 id="（4）静态变量"><a href="#（4）静态变量" class="headerlink" title="（4）静态变量"></a>（4）静态变量</h2><ul>
<li>生命周期延长，类似Java中的静态变量</li>
<li>一般用来统计当前函数被调用的次数</li>
<li>为了统计当前函数被多次调用的结果（自加）</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="built_in">static</span> <span class="variable">$a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$b</span> = <span class="number">555</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$b</span>++;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">test();</span><br><span class="line">test();</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210711152012.png" alt=""></p>
<h1 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2 流程控制"></a>2 流程控制</h1><h2 id="（1）for"><a href="#（1）for" class="headerlink" title="（1）for"></a>（1）for</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; %i++) &#123; <span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">//这里写HTML代码</span></span><br><span class="line"><span class="meta">&lt;?php</span> &#125;<span class="meta">?&gt;</span></span><br><span class="line">可写成：</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; %i++): <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endfor</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="（2）foreach"><a href="#（2）foreach" class="headerlink" title="（2）foreach"></a>（2）foreach</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">111</span>,</span><br><span class="line">    <span class="number">222</span>,</span><br><span class="line">);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$each</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$each</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210711160432.png" alt=""></p>
<h1 id="3-函数"><a href="#3-函数" class="headerlink" title="3 函数"></a>3 函数</h1><h2 id="（1）回调函数"><a href="#（1）回调函数" class="headerlink" title="（1）回调函数"></a>（1）回调函数</h2><blockquote>
<p>所谓的回调函数，就是指调用函数时并不是向函数中传递一个标准的变量作为参数，而是将另一个函数作为参数传递到调用的函数中，这个作为参数的函数就是回调函数。通俗的来说，回调函数也是一个我们定义的函数，但是不是我们直接来调用的，而是通过另一个函数来调用的，这个函数通过接收回调函数的名字和参数来实现对它的调用。</p>
<p>PHP 中的回调函数与 C、Java 等语言的回调函数的作用是一模一样的，都是在函数执行的过程中，跳转到回调函数中，当回调函数执行完毕之后，再回到之前的函数处理接下来的程序。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="variable">$function_name</span>, <span class="variable">$args1</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$function_name</span>(<span class="variable">$args1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$num1</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> test(<span class="string">&quot;add&quot;</span>, <span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210711152921.png" alt=""></p>
<h2 id="（2）匿名函数"><a href="#（2）匿名函数" class="headerlink" title="（2）匿名函数"></a>（2）匿名函数</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//匿名函数需要一个变量来接受，最后还需要一个分号结束</span></span><br><span class="line"><span class="variable">$x</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;这是一个匿名函数: &quot;</span> . <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$x</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210711153503.png" alt=""></p>
<h2 id="（3）函数闭包"><a href="#（3）函数闭包" class="headerlink" title="（3）函数闭包"></a>（3）函数闭包</h2><p>函数内部的局部变量在函数执行结束之后，没有被释放，这是因为函数内部定义的匿名函数还有对该局部变量的引用。</p>
<ul>
<li>函数内部的匿名函数如果需要使用函数内部的局部变量，需要使用<code>use</code>关键字。</li>
<li>匿名函数被<code>return</code>给外部使用，此时会使用<strong>闭包</strong>。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="keyword">__FUNCTION__</span>;</span><br><span class="line">    <span class="variable">$innerFunction</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$name</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$innerFunction</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$outter</span> = test();   <span class="comment">//此时，test()方法执行结束，但是下面运行$outter()之后任然可以打印出$name的值，说明$name没有立即释放。</span></span><br><span class="line"><span class="variable">$outter</span>();</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210711155203.png" alt=""></p>
<h2 id="（4）伪类型"><a href="#（4）伪类型" class="headerlink" title="（4）伪类型"></a>（4）伪类型</h2><ul>
<li>PHP中不存在的类型</li>
<li>但是程序员通过伪类型，可以更好的查看<a href="https://www.php.net/manual/zh/">操作手册</a>，从而更好的学习</li>
</ul>
<p>伪类型主要包括以下两种：</p>
<ul>
<li>Mixed：多种类型的混合</li>
<li>Number：数值型（整形和浮点型）</li>
</ul>
<p>比如<code>gettype()</code>，具体手册地址：<a href="https://www.php.net/manual/zh/function.gettype">https://www.php.net/manual/zh/function.gettype</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210711160116.png" alt=""></p>
<h2 id="（5）系统内部函数"><a href="#（5）系统内部函数" class="headerlink" title="（5）系统内部函数"></a>（5）系统内部函数</h2><h3 id="1-关于输出的函数"><a href="#1-关于输出的函数" class="headerlink" title="1 关于输出的函数"></a>1 关于输出的函数</h3><ul>
<li><a href="https://www.php.net/manual/zh/function.echo">echo</a>：可以输出一个或多个字符串</li>
<li><a href="https://www.php.net/manual/zh/function.print">print</a>：只允许输出一个字符串，返回值总为 1</li>
<li><a href="https://www.php.net/manual/zh/function.print-r">print_r</a>：以易于理解的格式打印变量</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="number">5555</span>,</span><br><span class="line">    <span class="number">2</span> =&gt; <span class="number">99080</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">print_r(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210711170154.png" alt=""></p>
<h3 id="2-关于时间的函数"><a href="#2-关于时间的函数" class="headerlink" title="2 关于时间的函数"></a>2 关于时间的函数</h3><ul>
<li><a href="https://www.php.net/manual/en/function.date">date()</a>：按照一定的格式化要求输出时间</li>
<li><a href="https://www.php.net/manual/zh/function.time.php">time()</a>：输出时间的毫秒数</li>
<li><a href="https://www.php.net/manual/zh/function.microtime.php">mircotime()</a>：输出时间的微秒数（一般用来压力测试时显示程序运行的时间）</li>
<li><a href="https://www.php.net/manual/zh/function.strtotime">strtotime()</a>：将英文的字符串转换成时间</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&#x27;date.timezone&#x27;,&#x27;PRC&#x27;);</span><br><span class="line">echo date(&quot;Y年m月d日 H:i:s&quot;);</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo time();</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo microtime();</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210711162309.png" alt=""></p>
<h3 id="3-常用数学函数"><a href="#3-常用数学函数" class="headerlink" title="3 常用数学函数"></a>3 常用数学函数</h3><ul>
<li><p><a href="https://www.php.net/manual/zh/function.max">max()</a>：取最大值</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.min">min()</a>：取最小值</p>
</li>
<li><p><a href="https://www.php.net/manual/en/function.rand.php">rand()</a>：取某个区间的随机值</p>
</li>
<li><p><a href="https://www.php.net/manual/en/function.mt-rand">mt_rand()</a>：作用和rand()类似，底层不一样，但是效率比rand()更高，建议使用这个函数</p>
</li>
<li><p><a href="https://www.php.net/manual/en/function.round">round()</a>：四舍五入</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.ceil.php">ceil()</a>：向上取整</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.floor">floor()</a>：向下取整</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.pow.php">pow()</a>：指数计算，pow(2, 3)：<br>$$<br>2^3=8<br>$$</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.abs">abs()</a>：取绝对值</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.sqrt">sqrt()</a>：开平方根</p>
</li>
</ul>
<h3 id="4-关于函数的函数"><a href="#4-关于函数的函数" class="headerlink" title="4 关于函数的函数"></a>4 关于函数的函数</h3><ul>
<li><p><a href="https://www.php.net/manual/zh/function.function-exists">function_exists()</a>：判断当前函数是否在内存中（可以帮助用户不去使用一个系统中不存在的函数，增加了安全性）</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.func-get-arg">func_get_arg()</a>：获取自定义函数中指定位置的参数</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.func-num-args">func_get_args()</a>：获取自定义函数中所有参数</p>
</li>
<li><p><a href="https://www.php.net/manual/zh/function.func-num-args">func_num_args()</a>：获取自定义函数中参数的个数</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span></span>) </span>&#123;</span><br><span class="line">    var_dump(func_get_arg(<span class="number">2</span>));</span><br><span class="line">    var_dump(func_num_args());</span><br><span class="line">    var_dump(func_get_args());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function_exists(<span class="string">&quot;test&quot;</span>) &amp;&amp; test(<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>);</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210711165008.png" alt=""></p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>php实现转盘游戏后台奖品按照概率发放</title>
    <url>/php-zhuanpan/</url>
    <content><![CDATA[<h2 id="游戏转盘PHP后台实现奖品发放"><a href="#游戏转盘PHP后台实现奖品发放" class="headerlink" title="游戏转盘PHP后台实现奖品发放"></a>游戏转盘PHP后台实现奖品发放</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header(<span class="string">&quot;Content-type:text/html;charset=GB2312&quot;</span>);  <span class="comment">//设置编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//中奖奖品</span></span><br><span class="line"><span class="variable">$prizeArr</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;prize&#x27;</span> =&gt; <span class="string">&#x27;现金500W&#x27;</span>, <span class="string">&#x27;v&#x27;</span> =&gt; <span class="number">1</span>), <span class="comment">//概率为1/200</span></span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;prize&#x27;</span> =&gt; <span class="string">&#x27;iphone7&#x27;</span>, <span class="string">&#x27;v&#x27;</span> =&gt; <span class="number">5</span>),</span><br><span class="line">    <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;prize&#x27;</span> =&gt; <span class="string">&#x27;耐克跑鞋&#x27;</span>, <span class="string">&#x27;v&#x27;</span> =&gt; <span class="number">10</span>),</span><br><span class="line">    <span class="number">3</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">4</span>, <span class="string">&#x27;prize&#x27;</span> =&gt; <span class="string">&#x27;魔声耳机&#x27;</span>, <span class="string">&#x27;v&#x27;</span> =&gt; <span class="number">24</span>),</span><br><span class="line">    <span class="number">4</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">5</span>, <span class="string">&#x27;prize&#x27;</span> =&gt; <span class="string">&#x27;蓝牙音响&#x27;</span>, <span class="string">&#x27;v&#x27;</span> =&gt; <span class="number">60</span>),</span><br><span class="line">    <span class="number">5</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">6</span>, <span class="string">&#x27;prize&#x27;</span> =&gt; <span class="string">&#x27;现金1元&#x27;</span>, <span class="string">&#x27;v&#x27;</span> =&gt; <span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 对数组进行处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">$item</span> = [];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$prizeArr</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">    <span class="comment">//使用新数组item</span></span><br><span class="line">    <span class="variable">$item</span>[<span class="variable">$v</span>[<span class="string">&#x27;id&#x27;</span>]] = <span class="variable">$v</span>[<span class="string">&#x27;v&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> array(</span></span><br><span class="line"><span class="comment">        1 =&gt; 1,</span></span><br><span class="line"><span class="comment">        2 =&gt; 5,</span></span><br><span class="line"><span class="comment">        3 =&gt; 10,</span></span><br><span class="line"><span class="comment">        4 =&gt; 24,</span></span><br><span class="line"><span class="comment">        5 =&gt; 60,</span></span><br><span class="line"><span class="comment">        6 =&gt; 100</span></span><br><span class="line"><span class="comment">     );</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRand</span>(<span class="params"><span class="variable">$item</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$num</span>    = array_sum(<span class="variable">$item</span>);<span class="comment">//计算出分母200</span></span><br><span class="line">    <span class="variable">$result</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$item</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line"><span class="comment">//        var_dump(&#x27;k = &#x27; . $k . &#x27;,    v=&#x27; . $v);</span></span><br><span class="line"><span class="comment">//        var_dump(&#x27;&lt;br&gt;&lt;br&gt;&#x27;);</span></span><br><span class="line">        <span class="variable">$rand</span> = mt_rand(<span class="number">1</span>, <span class="variable">$num</span>);<span class="comment">//概率区间(整数) 包括1和200</span></span><br><span class="line"><span class="comment">//        var_dump(&#x27;随机数=&#x27; . json_encode($rand));</span></span><br><span class="line"><span class="comment">//        var_dump(&#x27;&lt;br&gt;&lt;br&gt;&#x27;);</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *这个算法很666</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$rand</span> &lt;= <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="comment">//循环遍历,当下标$k = 1的时候，只有$rand = 1 才能中奖</span></span><br><span class="line">            <span class="variable">$result</span> = <span class="variable">$k</span>;</span><br><span class="line"><span class="comment">//            echo &#x27;$rand &lt;= $v      ,&#x27; . $rand . &#x27;--&#x27; . $v;</span></span><br><span class="line"><span class="comment">//            var_dump(&#x27;&lt;br&gt;&lt;br&gt;&#x27;);</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//当下标$k=6的时候，如果$rand&gt;100 必须$rand &lt; = 100 才能中奖 ，那么前面5次循环之后$rand的概率区间= 200-1-5-10-24-60 （1,100） 必中1块钱</span></span><br><span class="line">            <span class="variable">$num</span> -= <span class="variable">$v</span>;</span><br><span class="line"><span class="comment">//            echo &#x27;      *&#x27; . $rand . &#x27;*     num=&#x27; . $num;</span></span><br><span class="line"><span class="comment">//            var_dump(&#x27;&lt;br&gt;&lt;br&gt;&#x27;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    var_dump(&#x27;$result=&#x27; . json_encode($result));</span></span><br><span class="line"><span class="comment">//    var_dump(&#x27;&lt;br&gt;&lt;br&gt;&#x27;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$times</span>  = <span class="number">5000000</span>;</span><br><span class="line"><span class="variable">$prizes</span> = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$times</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$r</span> = getRand(<span class="variable">$item</span>);</span><br><span class="line">    <span class="variable">$p</span> = <span class="variable">$prizeArr</span>[<span class="variable">$r</span> - <span class="number">1</span>][<span class="string">&#x27;prize&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$prizes</span>[<span class="variable">$p</span>])) &#123;</span><br><span class="line">        <span class="variable">$num</span> = <span class="variable">$prizes</span>[<span class="variable">$p</span>];</span><br><span class="line">        <span class="variable">$num</span>++;</span><br><span class="line">        <span class="variable">$prizes</span>[<span class="variable">$p</span>] = <span class="variable">$num</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$prizes</span>[<span class="variable">$p</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//    var_dump(gettype($prizes));</span></span><br><span class="line">    <span class="comment">//    break;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">&#x27;概率：&#x27;</span>);</span><br><span class="line">var_dump(<span class="variable">$prizes</span>);</span><br><span class="line">var_dump(<span class="string">&#x27;&lt;br&gt;&lt;br&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$prizes</span> <span class="keyword">as</span> <span class="variable">$p</span> =&gt; <span class="variable">$nums</span>) &#123;</span><br><span class="line">    var_dump(<span class="variable">$p</span> . <span class="string">&#x27;------&gt;&#x27;</span> . <span class="variable">$nums</span> / <span class="variable">$times</span>);</span><br><span class="line">    var_dump(<span class="string">&#x27;&lt;br&gt;&lt;br&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">var_dump(<span class="string">&#x27;&lt;br&gt;&lt;br&gt;&#x27;</span>);</span><br><span class="line">var_dump(<span class="string">&#x27;&lt;br&gt;&lt;br&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$item</span> <span class="keyword">as</span> <span class="variable">$p</span> =&gt; <span class="variable">$nums</span>) &#123;</span><br><span class="line">    var_dump(<span class="variable">$prizeArr</span>[<span class="variable">$p</span> - <span class="number">1</span>][<span class="string">&#x27;prize&#x27;</span>] . <span class="string">&#x27;------&gt;&#x27;</span> . <span class="variable">$nums</span> / <span class="number">200</span>);</span><br><span class="line">    var_dump(<span class="string">&#x27;&lt;br&gt;&lt;br&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211118144848.png" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/zhoupufelix/p/6645458.html">https://www.cnblogs.com/zhoupufelix/p/6645458.html</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>php显示时间的时区设置</title>
    <url>/php-timezone/</url>
    <content><![CDATA[<h2 id="1-date"><a href="#1-date" class="headerlink" title="1 date"></a>1 date</h2><p>在PHP中，有一个系统函数：<code>date()</code>，该函数可以用来获取时间和日期，但是默认情况下不是显示的北京时间，所以需要进行一个时区的设置。设置方法如下：</p>
<h3 id="1-方法1"><a href="#1-方法1" class="headerlink" title="(1) 方法1"></a>(1) 方法1</h3><p>能正常显示，但是会报警告。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">date.date_default_timezone_set(<span class="string">&quot;PRC&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> date(<span class="string">&quot;Y年m月d日 H:i:s&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> time();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> microtime();</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210711162144.png" alt=""></p>
<h3 id="2-方法2"><a href="#2-方法2" class="headerlink" title="(2) 方法2"></a>(2) 方法2</h3><p>可以正常显示。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;date.timezone&#x27;</span>,<span class="string">&#x27;PRC&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> date(<span class="string">&quot;Y年m月d日 H:i:s&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> time();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> microtime();</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210711162309.png" alt=""></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>使用postman卡顿，切换窗口之后在切换回来卡顿现象</title>
    <url>/postman-caton/</url>
    <content><![CDATA[<h2 id="1-操作"><a href="#1-操作" class="headerlink" title="1 操作"></a>1 操作</h2><p>修改<code>C:\Users\&#123;user-name&#125;\AppData\Roaming\Postman\storage</code>这个文件夹的名字或者直接删除，然后重启<code>postman</code>即可。</p>
<h2 id="2-参考"><a href="#2-参考" class="headerlink" title="2 参考"></a>2 参考</h2><p><a href="https://learnku.com/articles/53569">https://learnku.com/articles/53569</a></p>
<p><a href="https://github.com/postmanlabs/postman-app-support/issues/4687#issuecomment-727541426">https://github.com/postmanlabs/postman-app-support/issues/4687#issuecomment-727541426</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title>postman tutoraials</title>
    <url>/postman-tutoraials/</url>
    <content><![CDATA[<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>预测算法简介</title>
    <url>/prediction-algorithm/</url>
    <content><![CDATA[<h3 id="0-A-few-more-concept-you-need-to-know"><a href="#0-A-few-more-concept-you-need-to-know" class="headerlink" title="0 A few more concept you need to know"></a>0 A few more concept you need to know</h3><h4 id="0-1-什么是bagging和boosting-link"><a href="#0-1-什么是bagging和boosting-link" class="headerlink" title="0.1 什么是bagging和boosting|link"></a>0.1 什么是bagging和boosting|<a href="https://www.jianshu.com/p/d270af43f043">link</a></h4><p><strong>bagging</strong>：Bagging是Bootstrap Aggregating的英文缩写,是指一种有放回采样<br><strong>boosting</strong>：提升方法（Boosting），是一种可以用来减小监督式学习中偏差的机器学习算法。面对的问题是迈可·肯斯（Michael Kearns）提出的：一组“弱学习者”的集合能否生成一个“强学习者”？弱学习者一般是指一个分类器，它的结果只比随机分类好一点点；强学习者指分类器的结果非常接近真值。</p>
<h4 id="0-2-预测和拟合的区别？"><a href="#0-2-预测和拟合的区别？" class="headerlink" title="0.2 预测和拟合的区别？"></a>0.2 预测和拟合的区别？</h4><blockquote>
<p>预测：灰色预测的通用性比较强一些，一般场合都可以用，尤其适合那些规律性差且不清楚数据产生机理的情况。   </p>
</blockquote>
<blockquote>
<p>拟合：拟合比较适合于那些清楚数据产生机理，有比较规则的变化趋势的场景，比如已经知道这些数据符合一定的动力学变化规律，这时用指数拟合就比较合适。</p>
</blockquote>
<p>在数学建模中，能用拟合的地方尽量用拟合，这样会有具体的函数表达式，更有利于进一步的建模。当然有些问题就是数据的预测，这种情况哪种精度高就用哪种了（建议都用，便于比较），上面所说的最适合的问题，也主要是基于精度考虑的。</p>
<h4 id="0-3-预测和推荐的区别？"><a href="#0-3-预测和推荐的区别？" class="headerlink" title="0.3 预测和推荐的区别？"></a>0.3 预测和推荐的区别？</h4><h4 id="0-4-时间序列预测法-link"><a href="#0-4-时间序列预测法-link" class="headerlink" title="0.4 时间序列预测法|link"></a>0.4 时间序列预测法|<a href="https://zhuanlan.zhihu.com/p/38320827">link</a></h4><blockquote>
<p>时间序列预测法其实是一种回归预测方法，属于定量预测，其基本原理是:一方面承认事物发展的延续性，运用过去的时间序列数据进行统计分析，推测出事物的发展趋势；另一方面充分考虑到由于偶然因素影响而产生的随机性，为了消除随机波动产生的影响，利用历史数据进行统计分析，并对数据进行适当处理，进行趋势预测。</p>
</blockquote>
<h4 id="0-5-什么有量纲和什么是无量纲？"><a href="#0-5-什么有量纲和什么是无量纲？" class="headerlink" title="0.5 什么有量纲和什么是无量纲？"></a>0.5 什么有量纲和什么是无量纲？</h4><p>量纲：是指有具体的单位的量，比如1m/s就是一个量纲量，是矢量。<br>无量纲：是指没有具体单位的标准化统计量，比如1%等，是标量<br>归一化：就是将有量纲的量转化成一个无量纲的量，将矢量变成标量。</p>
<h3 id="1-线性回归-link"><a href="#1-线性回归-link" class="headerlink" title="1 线性回归|link"></a>1 线性回归|<a href="https://www.cnblogs.com/baoxuhong/p/10210751.html">link</a></h3><blockquote>
<p>定义：确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法   </p>
</blockquote>
<p>公式：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/925095-20190102130153170-1089413164.png" alt="image"><br>举例：<br>线性回归的目的就是找到一条线，能够使图中的每个点到该直线的举例最短，一般可用<a href="https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95">最小二乘法</a>进行拟合<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/925095-20190102131101282-829231011.png" alt="image"></p>
<h3 id="2-逻辑回归-link"><a href="#2-逻辑回归-link" class="headerlink" title="2 逻辑回归|link"></a>2 逻辑回归|<a href="https://www.cnblogs.com/baoxuhong/p/10222463.html">link</a></h3><blockquote>
<p>概念：线性回归可以拟合X与Y之间的关系，但回归模型中Y值是连续的，如果换成一个二分类标签，Y只能取两个值0、1，这时候就不能用线性回归了，这样就有了逻辑回归。   </p>
</blockquote>
<p>针对Y的值域在区间[0-1]的问题，我们不能寻找到一条完美曲线，用于拟合二分类模型，但我们可以寻找一条完美的S型曲线，S型曲线叫Sigmoid曲线，<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/925095-20190104185925892-1190461612.png" alt="image"><br>核心原理：<br>==逻辑回归核心原理是在线性回归的基础上加上一个Sigmoid函数，把训练数据通过Sigmoid函数整合到（0—1）之间。==</p>
<h3 id="3-支持向量机-link"><a href="#3-支持向量机-link" class="headerlink" title="3 支持向量机|link"></a>3 支持向量机|<a href="https://www.cnblogs.com/baoxuhong/p/10240867.html">link</a></h3><blockquote>
<p>概念：SVM思想和线性回归很相似，两个都是寻找一条最佳直线。<br><strong>不同点</strong>：最佳直线的定义方法不一样，线性回归要求的是直线到各个点的距离最近，SVM要求的是直线离两边的点距离尽量大。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/925095-20190108233323307-1363840041.png" alt="image"></p>
<h3 id="4-随机森林算法-link"><a href="#4-随机森林算法-link" class="headerlink" title="4 随机森林算法|link"></a>4 随机森林算法|<a href="https://blog.csdn.net/qq_34106574/article/details/82016442">link</a></h3><p>所以随机森林算法的随机性主要体现在以下两个方面：   </p>
<ul>
<li>子模型的训练样本是随机抽取的</li>
<li>子模型的特征变量也是随机抽取的</li>
</ul>
<p>掌握随机森林之前，你学要具备如下知识：</p>
<ul>
<li><a href="https://www.cnblogs.com/zongfa/p/9304353.html">集成学习</a></li>
<li><a href="https://www.cnblogs.com/keye/p/10564914.html">决策树</a>   </li>
<li><a href="https://www.cnblogs.com/IamJiangXiaoKun/p/9455689.html">信息熵</a>| <a href="https://blog.csdn.net/am290333566/article/details/81187124">more concept</a></li>
</ul>
<p>随机森林的优缺点：| <a href="https://blog.csdn.net/qq_39303465/article/details/79234950">learn more</a></p>
<p>决策树算法的优缺点：<br>优点:</p>
<ul>
<li>(1)速度快: 计算量相对较小, 且容易转化成分类规则. 只要沿着树根向下一直走到叶, 沿途的分裂条件就能够唯一确定一条分类的谓词.</li>
<li>(2)准确性高: 挖掘出来的分类规则准确性高, 便于理解, 决策树可以清晰的显示哪些字段比较重要, 即可以生成可以理解的规则.</li>
<li>(3)可以处理连续和种类字段</li>
<li>(4)不需要任何领域知识和参数假设</li>
<li>(5)适合高维数据   </li>
</ul>
<p>缺点:   </p>
<ul>
<li>(1)对于各类别样本数量不一致的数据, 信息增益偏向于那些更多数值的特征</li>
<li>(2)容易过拟合</li>
<li>(3)忽略属性之间的相关性</li>
</ul>
<h3 id="5-AdaBoost-link"><a href="#5-AdaBoost-link" class="headerlink" title="5 AdaBoost|link"></a>5 AdaBoost|<a href="https://www.cnblogs.com/ScorpioLu/p/8295990.html">link</a></h3><h3 id="6-贝叶斯网络-link"><a href="#6-贝叶斯网络-link" class="headerlink" title="6 贝叶斯网络|link"></a>6 贝叶斯网络|<a href="https://blog.csdn.net/Pancheng1/article/details/81001459">link</a></h3><h3 id="7-自编码网络-link"><a href="#7-自编码网络-link" class="headerlink" title="7 自编码网络|link"></a>7 自编码网络|<a href="https://blog.csdn.net/abcdrachel/article/details/84024144">link</a></h3><h4 id="7-1-什么是自编码器？"><a href="#7-1-什么是自编码器？" class="headerlink" title="7.1 什么是自编码器？"></a>7.1 什么是自编码器？</h4><blockquote>
<p>自编码器是一个3层或大于3层的神经网络，将输入表达式x编码为一个新的表达式y，然后再将y解码回x。这是一个非监督学习算法，使用反向传播算法来训练网络使输出等于输入。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20181113100710190.png" alt="image"><br>图中，虚线蓝色框内就是一个自编码器模型，它由编码器(Encoder)和解码器(Decoder)两部分组成，本质上都是对输入信号做某种变换。编码器将输入信号x变换成编码信号y，而解码器将编码y转换成输出信号x‘。即<br>y = f(x)</p>
<p>x’ = g(y) = g(f(x))</p>
<p>自编码器的目的是，让输出x’尽可能复现输入x。</p>
<p>如果f和g都是恒等映射，那不就恒有x’=x？不错，但是这样的变换没啥作用。因此，我们对中间信号y做一定的约束，这样，系统往往能学出很有趣的编码变换f和编码y。</p>
<p>对于自编码器，我们需要强调一点是，我们往往并不关心输出是啥（反正只是复现输入），我们关心的是中间层的编码，或者说是从输入到编码的映射。</p>
<p>可以这么理解，我们在强迫编码y和输入x不同的情况下，系统还能复原原始信号x，那么说明编码y已经承载了原始数据的所有信息，但以另一种形式表现。这就是特征提取，而且是主动学出来的。实际上，自动学习原始数据的特征表达也是神经网络和深度学习的核心目的之一。</p>
</blockquote>
<h4 id="7-2-什么自编码网络？"><a href="#7-2-什么自编码网络？" class="headerlink" title="7.2 什么自编码网络？"></a>7.2 什么自编码网络？</h4><blockquote>
<p>自编码网络是非监督学习领域的一种，可以自动从无标注的数据中学习特征，是一种以重构输入信息为目标的神经网络，它可以给出比原始数据更好的特征描述，具有较强的特征学习能力，在深度学习中常用自编码网络生成的特征来取代原始数据，已取得更好效果。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20181113105333903.png" alt="image"><br>自编码器通过隐藏层对输入进行压缩，并在输出层中解压缩，整个过程肯定会丢失信息，但是通过训练我们能够使丢失的信息尽量减少，最大化的保留其主要特征。</p>
<p>y = f(x) = s(wx+b)<br>x’ = g(y) = s(w’y+b’)<br>L(x,x’) = L(x,g(f(x)))   </p>
<p>其中L表示损失函数，结合数据的不同形式，可以是二次误差（squared error loss）或交叉熵误差(cross entropy loss)。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo主题如何添加谷歌广告，非Next主题教程，pug框架</title>
    <url>/pug-how-to-add-google-ad/</url>
    <content><![CDATA[<h3 id="1-在主题目录下添加语句"><a href="#1-在主题目录下添加语句" class="headerlink" title="1 在主题目录下添加语句"></a>1 在主题目录下添加语句</h3><p>打开主题目录下的<code>your_theme/_config.yml</code> 文件,添加个广告控制开关：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show_ad_post: true  ##设置为 true</span><br></pre></td></tr></table></figure>

<h3 id="2-在head-pug中添加语句"><a href="#2-在head-pug中添加语句" class="headerlink" title="2 在head.pug中添加语句"></a>2 在head.pug中添加语句</h3><p><code>在 your_theme/layout/_partial/head.pug</code> 里添加代码：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if theme.show_ad_post</span><br><span class="line">      script(async=&#x27;&#x27;, src=&#x27;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#x27;)</span><br><span class="line">      script.</span><br><span class="line">        (adsbygoogle = window.adsbygoogle || []).push(&#123;google_ad_client: &quot;ca-pub-XXXXX&quot;, enable_page_level_ads: true&#125;);</span><br></pre></td></tr></table></figure>
<p>这段代码是从你申请的 Adsense 账户中复制下来的，其中 ca-pub-XXXXX 替换成自己的账号就行了。但是这样的设置完全让 Google 为我们决定广告的位置，有时候显得页面比较乱，博客的可读性比较差。可以考虑在 Adsense 中创建广告位，然后在特定位置加上代码就好了，我的选择是在文章结束，评论上方加上一条的广告。</p>
<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://www.jianshu.com/p/5a664fb9f325">原文</a></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让自己的hexo博客被Google和百度收录</title>
    <url>/put-your-hexo-blog-to-baidu-sitmap/</url>
    <content><![CDATA[<h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><p>关于如何让自己的hexo博客能够让百度或者谷歌收录，可以查看下面这篇博客。</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/25145964abf3">如何让自己的hexo博客被Google和百度收录</a></p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python如何对程序记录日志 logging</title>
    <url>/python-debug/</url>
    <content><![CDATA[<h3 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">LOG_FORMAT = <span class="string">&quot;%(asctime)s - %(levelname)s - %(message)s&quot;</span></span><br><span class="line">DATE_FORMAT = <span class="string">&quot;%m/%d/%Y %H:%M:%S %p&quot;</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">&#x27;apiStudy.log&#x27;</span>, level=logging.DEBUG, <span class="built_in">format</span>=LOG_FORMAT, datefmt=DATE_FORMAT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">	logging.info(<span class="string">&quot;这是一个info log&quot;</span>)</span><br><span class="line">	logging.error(<span class="string">&quot;这是一个error log&quot;</span>)</span><br><span class="line">	logging.debug(<span class="string">&quot;这是一个debug log&quot;</span>)</span><br><span class="line">	logging.warn(<span class="string">&quot;这是一个warn log&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="最终显示效果"><a href="#最终显示效果" class="headerlink" title="最终显示效果"></a>最终显示效果</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">10</span><span class="string">:01:23</span> <span class="string">AM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">Starting</span> <span class="string">new</span> <span class="string">HTTPS</span> <span class="string">connection</span> <span class="string">(1):</span> <span class="string">www.aqistudy.cn:443</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">10</span><span class="string">:01:23</span> <span class="string">AM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">https://www.aqistudy.cn:443</span> <span class="string">&quot;GET /historydata/ HTTP/1.1&quot;</span> <span class="number">200</span> <span class="string">None</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">10</span><span class="string">:02:40</span> <span class="string">AM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">Starting</span> <span class="string">new</span> <span class="string">HTTPS</span> <span class="string">connection</span> <span class="string">(1):</span> <span class="string">www.aqistudy.cn:443</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">10</span><span class="string">:02:40</span> <span class="string">AM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">https://www.aqistudy.cn:443</span> <span class="string">&quot;GET /historydata/ HTTP/1.1&quot;</span> <span class="number">200</span> <span class="string">None</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">10</span><span class="string">:03:28</span> <span class="string">AM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">Starting</span> <span class="string">new</span> <span class="string">HTTPS</span> <span class="string">connection</span> <span class="string">(1):</span> <span class="string">www.aqistudy.cn:443</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">10</span><span class="string">:03:28</span> <span class="string">AM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">https://www.aqistudy.cn:443</span> <span class="string">&quot;POST /historydata/api/historyapi.php HTTP/1.1&quot;</span> <span class="number">200</span> <span class="string">None</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">12</span><span class="string">:11:19</span> <span class="string">PM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">Starting</span> <span class="string">new</span> <span class="string">HTTPS</span> <span class="string">connection</span> <span class="string">(1):</span> <span class="string">www.aqistudy.cn:443</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">12</span><span class="string">:11:28</span> <span class="string">PM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">https://www.aqistudy.cn:443</span> <span class="string">&quot;POST /historydata/api/historyapi.php HTTP/1.1&quot;</span> <span class="number">200</span> <span class="string">None</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">12</span><span class="string">:12:57</span> <span class="string">PM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">Starting</span> <span class="string">new</span> <span class="string">HTTPS</span> <span class="string">connection</span> <span class="string">(1):</span> <span class="string">www.aqistudy.cn:443</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">12</span><span class="string">:12:59</span> <span class="string">PM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">https://www.aqistudy.cn:443</span> <span class="string">&quot;POST /historydata/api/historyapi.php HTTP/1.1&quot;</span> <span class="number">200</span> <span class="string">None</span></span><br><span class="line"><span class="number">12</span><span class="string">/26/2019</span> <span class="number">12</span><span class="string">:15:17</span> <span class="string">PM</span> <span class="bullet">-</span> <span class="string">DEBUG</span> <span class="bullet">-</span> <span class="string">Starting</span> <span class="string">new</span> <span class="string">HTTPS</span> <span class="string">connection</span> <span class="string">(1):</span> <span class="string">www.aqistudy.cn:443</span></span><br></pre></td></tr></table></figure>


<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>program language</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中：JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)</title>
    <url>/python-json-problem-sloved/</url>
    <content><![CDATA[<p><strong>问题：JSONDecodeError: Expecting property name enclosed in double quotes: line 1 column 2 (char 1)</strong></p>
<h3 id="问题代码："><a href="#问题代码：" class="headerlink" title="问题代码："></a>问题代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">s =  <span class="string">&quot;&#123;&#x27;name&#x27;:&#x27;zhuhonggen&#x27;,&#x27;age&#x27;:20&#125;&quot;</span></span><br><span class="line">d = json.loads(s)</span><br></pre></td></tr></table></figure>

<h3 id="错误截图"><a href="#错误截图" class="headerlink" title="错误截图"></a>错误截图</h3><p><img src= "/img/loading.gif" data-src="https://upload-images.jianshu.io/upload_images/621273-3d7fb38caa1ad9c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error shot"></p>
<h3 id="解决问题思路"><a href="#解决问题思路" class="headerlink" title="解决问题思路"></a>解决问题思路</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s =  <span class="string">&quot;&#123;&#x27;name&#x27;:&#x27;zhuhonggen&#x27;,&#x27;age&#x27;:20&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p>我们发现<code>age</code>属性对应的<code>value</code>值是没有被<code>&#39;</code>单引号括起来的，这种形式的数据不符合<code>json</code>的转化数据格式，<code>json</code>数据转换的格式必须是符合其格式的，也就是说，<code>key</code>和<code>value</code>都得被<code>&#39;</code>括起来。我们看下<code>json</code>的格式：<br><img src= "/img/loading.gif" data-src="https://upload-images.jianshu.io/upload_images/621273-b5256f24e9fc59bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="json format"><br>从图中我们可以看到，<code>key</code>和<code>value</code>都得被<code>&#39;</code>括起来。</p>
<h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><ul>
<li>手动修改字符串的格式</li>
<li>借助三方包，这里推荐demjson</li>
</ul>
<p>使用：   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> demjson</span><br><span class="line">s =  <span class="string">&quot;&#123;&#x27;name&#x27;:&#x27;zhuhonggen&#x27;,&#x27;age&#x27;:20&#125;&quot;</span></span><br><span class="line">d = demjson(s)</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-src="https://upload-images.jianshu.io/upload_images/621273-d5310968756a3641.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的logging.basicConfig模块是一个一次性工具函数</title>
    <url>/python-logging-error-sloved/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>今天当我们使用<code>python</code>中的<code>logging</code>模块记录日志时，我在三个文件中分别定义了下面的语句，目的是想将三个文件产生的日志分别存在不同的日志文件中，唯一不同的是<code>filename</code>不同，为了区别文件。但是并没有像我想的那样走，最终程序运行，只产生了一个日志文件，左右的日志信息都存储在一个日志文件中个，然后我就开始Google找答案，最后还是说服了我。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&quot;MysqlDB_&#123;&#125;.log&quot;</span>.<span class="built_in">format</span>(get_year_mon_day())</span><br><span class="line">logging.basicConfig(filename=<span class="string">&quot;MysqlDB_&#123;&#125;.log&quot;</span>.<span class="built_in">format</span>(get_year_mon_day()), level=logging.DEBUG, <span class="built_in">format</span>=LOG_FORMAT, datefmt=DATE_FORMAT)</span><br></pre></td></tr></table></figure>

<p>答案来源：<a href="https://www.cnblogs.com/yyds/p/6901864.html">Python之日志处理（logging模块）</a><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20191230131342304.png" alt="原因介绍"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>program language</tag>
        <tag>problem solved</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>用python扫描文件目录</title>
    <url>/python-scan-dir/</url>
    <content><![CDATA[<h3 id="1-使用"><a href="#1-使用" class="headerlink" title="1 使用"></a>1 使用</h3><p>通过<code>os.walk()</code>扫描制定目录下的所有文件以及子文件夹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">扫描目录下的第一层文件，不包括子文件夹中的文件</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dir_lists</span>(<span class="params">root_dir</span>):</span></span><br><span class="line">    root_dir = <span class="string">r&quot;J:\电子书&quot;</span></span><br><span class="line">    dir_tree = os.walk(root_dir)</span><br><span class="line">    sub_dir = dir_tree.__next__()[<span class="number">1</span>]</span><br><span class="line">    file_list = []</span><br><span class="line">    <span class="keyword">for</span> sub <span class="keyword">in</span> sub_dir:</span><br><span class="line">        <span class="keyword">for</span> _sub <span class="keyword">in</span> os.walk(root_dir + <span class="string">&quot;\\&quot;</span> + <span class="built_in">str</span>(sub)):</span><br><span class="line">            _book_list = _sub[-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> _sub[<span class="number">1</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">for</span> book <span class="keyword">in</span> _book_list:</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;.pdf&quot;</span> <span class="keyword">in</span> book:</span><br><span class="line">                        file_list.append(book)</span><br><span class="line">    <span class="keyword">return</span> file_list</span><br></pre></td></tr></table></figure>


<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的nonlocal和global关键字解析，python闭包解析</title>
    <url>/python-namespace/</url>
    <content><![CDATA[<h3 id="1-namespace"><a href="#1-namespace" class="headerlink" title="1 namespace"></a>1 namespace</h3><p>在python中。只有模块（module）才会重新开辟一个新的作用域，像<code>if/else</code>,<code>for loop</code>,<code>while loop</code>等是不会开辟新的作用域的。也就是说，在上述这几个循环体或控制体中的变量，在外部也就是主作用域中一样可以调用。看下面代码：   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">  s = i</span><br><span class="line">  <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：9</p>
</blockquote>
<p>从代码中可以看出，这几个控制体中不存在作用域。</p>
<h3 id="2-global"><a href="#2-global" class="headerlink" title="2 global"></a>2 global</h3><p>上一节讲述了作用域，这里就介绍一下<code>global</code>关键字。先看代码：   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">  num = <span class="number">10</span></span><br><span class="line">  num = num * <span class="number">2</span></span><br><span class="line">  <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行结果： 20</p>
</blockquote>
<p>如果想要在<code>test()</code>函数内部调用外部的<code>num</code>变量，那么就需要使用<code>global</code>关键字。如下：   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">  <span class="keyword">global</span> num</span><br><span class="line">  num = num * <span class="number">2</span></span><br><span class="line">  <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：200</p>
</blockquote>
<h3 id="3-nonlocal"><a href="#3-nonlocal" class="headerlink" title="3 nonlocal"></a>3 nonlocal</h3><p>在介绍<code>nonlocal</code>关键字之前，大家需要先了解一下<strong>闭包</strong>的概念，闭包在很多的编程语言中都有，在python中也有。</p>
<blockquote>
<h3 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h3><p>闭包就是在一个函数嵌套另一个函数，这两个函数都有其<code>局部变量</code>，外部的函数中的变量，在内部函数中是不能被<code>直接</code>修改的。也就是说，我们可以进行间接修改。那间接修改就需要用到<code>nonlocal</code>关键字。</p>
</blockquote>
<p>先看一段代码：   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>():</span></span><br><span class="line">  var = <span class="number">200</span> <span class="comment"># this is a nonlocal variable</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">    <span class="comment"># nonlocal var # define a nonlocal variable</span></span><br><span class="line">    var = <span class="number">300</span> <span class="comment"># this variable is different from the outter.var</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;inner:&quot;</span>, var)</span><br><span class="line">  inner()</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;outter:&quot;</span>, var)</span><br><span class="line">outter()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>inner:300<br>outter:200</p>
</blockquote>
<p>这是没有使用<code>nonlocal</code>关键字的代码：如果我们使用<code>nonlocal</code>定义<code>var</code>的话，那么救结果就不同了：   </p>
<blockquote>
<p>修改代码：去掉第4行的注释即可<br>运行结果：<br>inner:300<br>outter:300</p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>program language</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>用Python爬虫爬取基金网站基金数据</title>
    <url>/python-spider-crawl-fund-data/</url>
    <content><![CDATA[<h3 id="1-程序结构介绍"><a href="#1-程序结构介绍" class="headerlink" title="1 程序结构介绍"></a>1 程序结构介绍</h3><p>代码结构图：<br><img src= "/img/loading.gif" data-src="https://upload-images.jianshu.io/upload_images/621273-5866743b51461e55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码结构图"></p>
<p>代码目录结构：<br><img src= "/img/loading.gif" data-src="https://upload-images.jianshu.io/upload_images/621273-968868daae5c0dd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码目录结构"></p>
<p>结果图：<br><img src= "/img/loading.gif" data-src="https://upload-images.jianshu.io/upload_images/621273-47c43f78bd151981.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果图"></p>
<h3 id="2-数据源网站"><a href="#2-数据源网站" class="headerlink" title="2 数据源网站"></a>2 数据源网站</h3><p><a href="https://www.dayfund.cn/incrank.html">https://www.dayfund.cn/incrank.html</a></p>
<h3 id="3-GitHub地址"><a href="#3-GitHub地址" class="headerlink" title="3 GitHub地址"></a>3 GitHub地址</h3><p><a href="https://github.com/crazyjums/crawl_fund_data">https://github.com/crazyjums/crawl_fund_data</a></p>
<h3 id="4-文件代码："><a href="#4-文件代码：" class="headerlink" title="4 文件代码："></a>4 文件代码：</h3><p>main.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> get_fund_code <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> get_fund_data <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> MysqlDB <span class="keyword">import</span> MysqlFundCode</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    s_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;程序正在运行....&quot;</span>)</span><br><span class="line">    mysql_code = MysqlFundCode()</span><br><span class="line">    fund_code_lists = mysql_code.get_code_and_name_and_type(<span class="string">&quot;指数型&quot;</span>)</span><br><span class="line">    save_to_mysql(fund_code_lists=fund_code_lists)</span><br><span class="line"></span><br><span class="line">    e_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;一共运行了&#123;&#125;秒&quot;</span>.<span class="built_in">format</span>(e_time-s_time))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>get_fund_data.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">from</span> MysqlDB <span class="keyword">import</span> MysqlFundDetailData</span><br><span class="line"><span class="keyword">from</span> toolkit <span class="keyword">import</span> LOG_FORMAT,DATE_FORMAT,get_year_mon_day,get_class_name,get_HTML_content</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_refer_fund_detail_data</span>(<span class="params">fund_code,start_date=<span class="string">&quot;2019-09-28&quot;</span>,end_date=<span class="string">&quot;2019-12-28&quot;</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    :param fund_code:</span></span><br><span class="line"><span class="string">    :param start_date:</span></span><br><span class="line"><span class="string">    :param end_date:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    date,</span></span><br><span class="line"><span class="string">    fund_name,</span></span><br><span class="line"><span class="string">    latest_nvalue_pu,</span></span><br><span class="line"><span class="string">    latest_sum_nvalue,</span></span><br><span class="line"><span class="string">    last_nvalue_pu,</span></span><br><span class="line"><span class="string">    last_sum_nvalue,</span></span><br><span class="line"><span class="string">    daily_growth,</span></span><br><span class="line"><span class="string">    daily_growth_rate</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">&quot;https://www.dayfund.cn/fundvalue/&#123;&#125;.html?sdate=&#123;&#125;&amp;edate=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(fund_code, start_date, end_date)</span><br><span class="line">        resp = get_HTML_content(url)</span><br><span class="line">        soup = bs(resp,<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        trs = soup.find_all(<span class="string">&quot;table&quot;</span>,attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;mt1 clear&quot;</span>&#125;)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># fund_name = soup.find(&quot;h1&quot;,attrs=&#123;&quot;class&quot;:&quot;myfundTitle&quot;&#125;).string</span></span><br><span class="line">        <span class="comment"># t = re.sub(r&quot;\(&quot;,&quot;_&quot;,fund_name)</span></span><br><span class="line">        <span class="comment"># fund_name = re.sub(r&quot;\)&quot;,&quot;&quot;,t)</span></span><br><span class="line">        _soup = bs(<span class="built_in">str</span>(trs),<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">        lis = _soup.find_all(<span class="string">&quot;tr&quot;</span>)</span><br><span class="line">        fund_lists = []</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">            fund_dict = &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">1</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            t = <span class="built_in">list</span>(i)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(t) &gt;= <span class="number">17</span>:</span><br><span class="line">                date = t[<span class="number">1</span>].string</span><br><span class="line">                latest_nvalue_pu = t[<span class="number">7</span>].string</span><br><span class="line">                latest_sum_nvalue = t[<span class="number">9</span>].string</span><br><span class="line">                last_nvalue_pu = t[<span class="number">11</span>].string</span><br><span class="line">                last_sum_nvalue = t[<span class="number">13</span>].string</span><br><span class="line">                daily_growth = t[<span class="number">15</span>].string</span><br><span class="line">                daily_growth_rate = t[<span class="number">17</span>].string</span><br><span class="line">                fund_dict[<span class="string">&quot;date&quot;</span>] = date</span><br><span class="line">                fund_dict[<span class="string">&quot;latest_nvalue_pu&quot;</span>] = latest_nvalue_pu</span><br><span class="line">                fund_dict[<span class="string">&quot;latest_sum_nvalue&quot;</span>] = latest_sum_nvalue</span><br><span class="line">                fund_dict[<span class="string">&quot;last_nvalue_pu&quot;</span>] = last_nvalue_pu</span><br><span class="line">                fund_dict[<span class="string">&quot;last_sum_nvalue&quot;</span>] = last_sum_nvalue</span><br><span class="line">                fund_dict[<span class="string">&quot;daily_growth&quot;</span>] = daily_growth</span><br><span class="line">                fund_dict[<span class="string">&quot;daily_growth_rate&quot;</span>] = daily_growth_rate</span><br><span class="line">                fund_lists.append(fund_dict)</span><br><span class="line">                <span class="comment"># logging.info(&quot;&#123;&#125; | &#123;&#125; appended into fund_lists&quot;.format(date,latest_nvalue_pu))</span></span><br><span class="line">        <span class="keyword">return</span> fund_lists[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">&quot;&#123;&#125; | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e,sys._getframe().f_code.co_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mysql</span>(<span class="params">start_time=<span class="literal">None</span>,end_time=<span class="literal">None</span>, fund_code_lists=[]</span>):</span></span><br><span class="line">    <span class="keyword">if</span> start_time == <span class="literal">None</span>:</span><br><span class="line">        start_time = get_year_mon_day(y=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> end_time == <span class="literal">None</span>:</span><br><span class="line">        end_time = get_year_mon_day()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(fund_code_lists) != <span class="number">0</span>:</span><br><span class="line">        mysql = MysqlFundDetailData()</span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> fund_code_lists:</span><br><span class="line">            fund_code = info[<span class="number">0</span>]</span><br><span class="line">            table_name = info[-<span class="number">1</span>]</span><br><span class="line">            fund_lists = get_refer_fund_detail_data(fund_code,start_time,end_time)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> mysql.check_table_if_exist(table_name):</span><br><span class="line">                logging.info(<span class="string">&quot;&#123;&#125;表没有创建，正在创建... | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name, sys._getframe().f_code.co_name))</span><br><span class="line">                mysql.create_table(table_name)</span><br><span class="line">                logging.info(<span class="string">&quot;创建成功！正在将数据写入&#123;&#125;中... | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name,sys._getframe().f_code.co_name))</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> fund_lists:</span><br><span class="line">                    mysql.insert_into_table(table_name,i)</span><br><span class="line">                logging.info(<span class="string">&quot;&#123;&#125;。写入成功。 | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name,sys._getframe().f_code.co_name))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.info(<span class="string">&quot;表已存在，正在将数据写入&#123;&#125;中... | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name, sys._getframe().f_code.co_name))</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> fund_lists:</span><br><span class="line">                    mysql.insert_into_table(table_name, i)</span><br><span class="line">                logging.info(<span class="string">&quot;&#123;&#125;。写入成功。 | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name, sys._getframe().f_code.co_name))</span><br><span class="line">                <span class="comment"># for i in fund_lists:</span></span><br><span class="line">                <span class="comment">#     mysql.insert_into_table(table_name,i)</span></span><br><span class="line">                <span class="comment">#     print(&quot;&#123;&#125;,done&quot;.format(table_name))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.info(<span class="string">&quot;列表为空，没有爬取到数据。| &#123;&#125;&quot;</span>.<span class="built_in">format</span>(sys._getframe().f_code.co_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name_data</span>():</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        fund_type = i[2]</span></span><br><span class="line"><span class="string">            date = i[3]</span></span><br><span class="line"><span class="string">            nvalue_pu = i[4]</span></span><br><span class="line"><span class="string">            day_growth_rate = i[5]</span></span><br><span class="line"><span class="string">            a_week_rate = i[6]</span></span><br><span class="line"><span class="string">            a_month_rate = i[7]</span></span><br><span class="line"><span class="string">            _3_month_rate = i[8]</span></span><br><span class="line"><span class="string">            _6_month_rate = i[9]</span></span><br><span class="line"><span class="string">            a_year_rate = i[10]</span></span><br><span class="line"><span class="string">            _2_year_rate = i[11]</span></span><br><span class="line"><span class="string">            _3_year_rate = i[12]</span></span><br><span class="line"><span class="string">            from_this_year = i[13]</span></span><br><span class="line"><span class="string">            from_found_year = i[14]</span></span><br><span class="line"><span class="string">            poundage = i[-2]</span></span><br><span class="line"><span class="string">            purchase_money = i[-5]</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">    l = s.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        li = i.strip().split(<span class="string">&quot;=&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(li) == <span class="number">2</span>:</span><br><span class="line">            name = li[<span class="number">0</span>].strip()</span><br><span class="line">            data = li[-<span class="number">1</span>].strip()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;temp_dict[\&quot;&#123;&#125;\&quot;] = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, data))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>get_fund_code.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> demjson,re</span><br><span class="line"><span class="keyword">import</span> logging,sys</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="keyword">from</span> MysqlDB <span class="keyword">import</span> MysqlFundCode</span><br><span class="line"><span class="keyword">from</span> toolkit <span class="keyword">import</span> LOG_FORMAT,DATE_FORMAT,get_year_mon_day,get_class_name,get_HTML_content</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_fund_code_lists_by_page</span>(<span class="params">page</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;https://fundapi.eastmoney.com/fundtradenew.aspx</span></span><br><span class="line"><span class="string">        ?ft=zs&amp;sc=1n&amp;st=desc&amp;pi=1&amp;pn=100&amp;cp=&amp;ct=&amp;cd=&amp;ms=&amp;fr=&amp;plevel=&amp;fst=&amp;ftype=&amp;fr1=&amp;fl=0&amp;isab=1</span></span><br><span class="line"><span class="string">        https://fundapi.eastmoney.com/fundtradenew.aspx?ft=zs&amp;sc=1n&amp;st=desc&amp;pi=3&amp;pn=100&amp;cp=&amp;ct=&amp;cd=&amp;ms=&amp;fr=&amp;plevel=&amp;fst=&amp;ftype=&amp;fr1=&amp;fl=0&amp;isab=1&#x27;&#x27;&#x27;</span></span><br><span class="line">        url = <span class="string">&quot;https://fundapi.eastmoney.com/fundtradenew.aspx?ft=zs&amp;sc=1n&amp;st=desc&amp;pi=&#123;&#125;&amp;pn=100&amp;cp=&amp;ct=&amp;cd=&amp;ms=&amp;fr=&amp;plevel=&amp;fst=&amp;ftype=&amp;fr1=&amp;fl=0&amp;isab=1&quot;</span>.<span class="built_in">format</span>(page)</span><br><span class="line">        content = get_HTML_content(url)</span><br><span class="line">        _ = re.sub(<span class="string">&quot;\|&quot;</span>,<span class="string">&quot;  &quot;</span>,content[<span class="number">15</span>:-<span class="number">1</span>])</span><br><span class="line">        d = demjson.decode(_)</span><br><span class="line">        fund_info_lists = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> d[<span class="string">&quot;datas&quot;</span>]:</span><br><span class="line">            i = i.split(<span class="string">&quot;  &quot;</span>)</span><br><span class="line">            temp_dict = &#123;&#125;</span><br><span class="line">            temp_dict[<span class="string">&quot;fund_code&quot;</span>] = i[<span class="number">0</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;fund_name&quot;</span>] = i[<span class="number">1</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;fund_type&quot;</span>] = i[<span class="number">2</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;date&quot;</span>] = i[<span class="number">3</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;nvalue_pu&quot;</span>] = i[<span class="number">4</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;day_growth_rate&quot;</span>] = i[<span class="number">5</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;a_week_rate&quot;</span>] = i[<span class="number">6</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;a_month_rate&quot;</span>] = i[<span class="number">7</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;_3_month_rate&quot;</span>] = i[<span class="number">8</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;_6_month_rate&quot;</span>] = i[<span class="number">9</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;a_year_rate&quot;</span>] = i[<span class="number">10</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;_2_year_rate&quot;</span>] = i[<span class="number">11</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;_3_year_rate&quot;</span>] = i[<span class="number">12</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;from_this_year&quot;</span>] = i[<span class="number">13</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;from_found_year&quot;</span>] = i[<span class="number">14</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;poundage&quot;</span>] = i[-<span class="number">2</span>]</span><br><span class="line">            temp_dict[<span class="string">&quot;purchase_money&quot;</span>] = i[-<span class="number">5</span>]</span><br><span class="line">            fund_info_lists.append(temp_dict)</span><br><span class="line">        logging.info(<span class="string">&quot;&#123;&#125; | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;第 &#123;&#125; 页数据抓取完成。&quot;</span>.<span class="built_in">format</span>(page),sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">return</span> fund_info_lists</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">&quot;&#123;&#125; | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e, sys._getframe().f_code.co_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_total_page_num</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">&quot;https://fundapi.eastmoney.com/fundtradenew.aspx?ft=zs&amp;sc=1n&amp;st=desc&amp;pi=1&amp;pn=100&amp;cp=&amp;ct=&amp;cd=&amp;ms=&amp;fr=&amp;plevel=&amp;fst=&amp;ftype=&amp;fr1=&amp;fl=0&amp;isab=1&quot;</span></span><br><span class="line">        content = get_HTML_content(url)</span><br><span class="line">        _ = re.sub(<span class="string">&quot;\|&quot;</span>, <span class="string">&quot;  &quot;</span>, content[<span class="number">15</span>:-<span class="number">1</span>])</span><br><span class="line">        d = demjson.decode(_)</span><br><span class="line">        total_page = (<span class="built_in">int</span>(d[<span class="string">&quot;allPages&quot;</span>]))</span><br><span class="line">        logging.info(<span class="string">&quot;&#123;&#125; pages | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_page, sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">return</span> total_page</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">&quot;&#123;&#125; | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e, sys._getframe().f_code.co_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_fund_lists</span>():</span></span><br><span class="line">    all_fund_lists = []</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,get_total_page_num() + <span class="number">1</span>):</span><br><span class="line">        all_fund_lists.append(get_fund_code_lists_by_page(page))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> all_fund_lists</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_all_fund_lists_into_file</span>(<span class="params">filename=<span class="string">&quot;all_fund_lists.txt&quot;</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&quot;a+&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            logging.info(<span class="string">&quot;&#123;&#125; 文件存在，正在追加... | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename, sys._getframe().f_code.co_name))</span><br><span class="line">            file.write(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">            file.write(<span class="string">&quot;-&quot;</span>*<span class="number">20</span> + <span class="string">&quot;这是新加的数据，时间：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.ctime()) + <span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> fund_list <span class="keyword">in</span> get_all_fund_lists():</span><br><span class="line">                file.write(<span class="built_in">str</span>(fund_list))</span><br><span class="line">                file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            file.write(<span class="string">&quot;\n&quot;</span> + <span class="string">&quot;-&quot;</span>*<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            logging.info(<span class="string">&quot;&#123;&#125; 文件不存在，正在创建并写数据... | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename, sys._getframe().f_code.co_name))</span><br><span class="line">            <span class="keyword">for</span> fund_list <span class="keyword">in</span> get_all_fund_lists():</span><br><span class="line">                file.write(<span class="built_in">str</span>(fund_list))</span><br><span class="line">                file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name_data</span>():</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;&#x27;fund_dict[&quot;date&quot;] = date</span></span><br><span class="line"><span class="string">            fund_dict[&quot;latest_nvalue_pu&quot;] = latest_nvalue_pu</span></span><br><span class="line"><span class="string">            fund_dict[&quot;latest_sum_nvalue&quot;] = latest_sum_nvalue</span></span><br><span class="line"><span class="string">            fund_dict[&quot;last_nvalue_pu&quot;] = last_nvalue_pu</span></span><br><span class="line"><span class="string">            fund_dict[&quot;last_sum_nvalue&quot;] = last_sum_nvalue</span></span><br><span class="line"><span class="string">            fund_dict[&quot;daily_growth&quot;] = daily_growth</span></span><br><span class="line"><span class="string">            fund_dict[&quot;daily_growth_rate&quot;] = daily_growth_rate&#x27;&#x27;&#x27;</span></span><br><span class="line">    li = s.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    tt = <span class="string">&quot;&quot;</span></span><br><span class="line">    data = <span class="string">&quot;&quot;</span></span><br><span class="line">    values = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">import</span> re</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">        t = i.split(<span class="string">&quot;=&quot;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        t = re.sub(<span class="string">&quot;fund_dict\[\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, t)</span><br><span class="line">        t = re.sub(<span class="string">&quot;\&quot;\]&quot;</span>, <span class="string">&quot;&quot;</span>, t)</span><br><span class="line">        tt += t + <span class="string">&quot;,&quot;</span></span><br><span class="line">        d = <span class="string">&quot;&#123;&#125;=each_data[\&quot;&#123;&#125;\&quot;],&quot;</span>.<span class="built_in">format</span>(t, t)</span><br><span class="line">        data += d</span><br><span class="line">        v = <span class="string">r&quot;\&#x27;&#123;&quot;</span> + t + <span class="string">r&quot;&#125;\&#x27;&quot;</span></span><br><span class="line">        values += v + <span class="string">&quot;,&quot;</span></span><br><span class="line">        sql = <span class="string">r&quot;insert into &#123;table_name&#125; &quot;</span> + <span class="string">&quot;(&#123;&#125;) values(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(tt,values)</span><br><span class="line">    <span class="built_in">print</span>(sql)</span><br><span class="line">    <span class="built_in">print</span>(values)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="built_in">print</span>(tt)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sql</span>():</span></span><br><span class="line">    s = <span class="string">&quot;date,fund_name,latest_nvalue_pu,latest_sum_nvalue,last_nvalue_pu,last_sum_nvalue,daily_growth,daily_growth_rate&quot;</span></span><br><span class="line">    li = s.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;`fund_code` VARCHAR(50)  NULL,&#x27;&#x27;&#x27;</span></span><br><span class="line">        t = <span class="string">&quot;`&quot;</span> + i + <span class="string">&quot;`&quot;</span> + <span class="string">&quot;VARCHAR(50)  NULL,&quot;</span> + <span class="string">&quot;\n&quot;</span></span><br><span class="line">        s += t</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mysql</span>():</span></span><br><span class="line">    mysql = MysqlFundCode()</span><br><span class="line">    table_name = get_fund_code_lists_by_page(<span class="number">1</span>)[<span class="number">1</span>][<span class="string">&quot;fund_type&quot;</span>]</span><br><span class="line">    all_fund_lists = get_all_fund_lists()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> mysql.check_table_if_exist(table_name=table_name):</span><br><span class="line">        logging.info(<span class="string">&quot;&#123;&#125;表没有创建，正在创建... | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name, sys._getframe().f_code.co_name))</span><br><span class="line">        mysql.create_table(table_name)</span><br><span class="line">        logging.info(<span class="string">&quot;创建成功！正在将数据写入&#123;&#125;中... | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name,sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">for</span> fund_list <span class="keyword">in</span> all_fund_lists:</span><br><span class="line">            <span class="keyword">for</span> each_data <span class="keyword">in</span> fund_list:</span><br><span class="line">                <span class="comment"># print(&quot;now --&gt; &#123;&#125;&quot;.format(each_data))</span></span><br><span class="line">                mysql.insert_into_table(table_name,each_data)</span><br><span class="line">                <span class="comment"># logging.info(&quot;&#123;&#125; | &#123;&#125;&quot;.format(each_data, sys._getframe().f_code.co_name))</span></span><br><span class="line">        logging.info(<span class="string">&quot;&#123;&#125;。写入成功。 | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name, sys._getframe().f_code.co_name))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.info(<span class="string">&quot;表已存在，正在将数据写入&#123;&#125;中... | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name, sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">for</span> fund_list <span class="keyword">in</span> all_fund_lists:</span><br><span class="line">            <span class="keyword">for</span> each_data <span class="keyword">in</span> fund_list:</span><br><span class="line">                <span class="comment"># print(&quot;now --&gt; &#123;&#125;&quot;.format(each_data))</span></span><br><span class="line">                mysql.insert_into_table(table_name,each_data)</span><br><span class="line">        logging.info(<span class="string">&quot;&#123;&#125;。写入成功。 | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name, sys._getframe().f_code.co_name))</span><br></pre></td></tr></table></figure>
<p>MysqlDB.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql,logging,sys</span><br><span class="line"><span class="keyword">from</span> toolkit <span class="keyword">import</span> LOG_FORMAT,DATE_FORMAT,get_year_mon_day,get_class_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlFundCode</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">        self.user = <span class="string">&quot;root&quot;</span></span><br><span class="line">        self.password = <span class="string">&quot;root&quot;</span></span><br><span class="line">        self.database = <span class="string">&quot;fund_data&quot;</span></span><br><span class="line">        self.charset = <span class="string">&quot;utf8mb4&quot;</span></span><br><span class="line">        self.port = <span class="number">3306</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DB</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> pymysql.connect(self.host,self.user, self.password, self.database, self.port, charset=self.charset)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_into_table</span>(<span class="params">self, table_name,each_data</span>):</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info(&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;.format(mysqlDB, get_class_name(self), sys._getframe().f_code.co_name))</span></span><br><span class="line">        <span class="comment"># if not isinstance(each_data,list):</span></span><br><span class="line">        <span class="comment">#     each_data = eval(each_data)</span></span><br><span class="line">        sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            insert into &#123;table_name&#125;(fund_code,fund_name,fund_type,date,nvalue_pu,day_growth_rate,</span></span><br><span class="line"><span class="string">            a_week_rate,a_month_rate,_3_month_rate,_6_month_rate,a_year_rate,_2_year_rate,_3_year_rate,</span></span><br><span class="line"><span class="string">            from_this_year,from_found_year,poundage,purchase_money)</span></span><br><span class="line"><span class="string">            values(\&#x27;&#123;fund_code&#125;\&#x27;,\&#x27;&#123;fund_name&#125;\&#x27;,\&#x27;&#123;fund_type&#125;\&#x27;,\&#x27;&#123;date&#125;\&#x27;,\&#x27;&#123;nvalue_pu&#125;\&#x27;,</span></span><br><span class="line"><span class="string">            \&#x27;&#123;day_growth_rate&#125;\&#x27;,\&#x27;&#123;a_week_rate&#125;\&#x27;,\&#x27;&#123;a_month_rate&#125;\&#x27;,\&#x27;&#123;_3_month_rate&#125;\&#x27;,</span></span><br><span class="line"><span class="string">            \&#x27;&#123;_6_month_rate&#125;\&#x27;,\&#x27;&#123;a_year_rate&#125;\&#x27;,\&#x27;&#123;_2_year_rate&#125;\&#x27;,\&#x27;&#123;_3_year_rate&#125;\&#x27;,</span></span><br><span class="line"><span class="string">            \&#x27;&#123;from_this_year&#125;\&#x27;,\&#x27;&#123;from_found_year&#125;\&#x27;,\&#x27;&#123;poundage&#125;\&#x27;,\&#x27;&#123;purchase_money&#125;\&#x27;)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(table_name=table_name,fund_code=each_data[<span class="string">&quot;fund_code&quot;</span>],fund_name=each_data[<span class="string">&quot;fund_name&quot;</span>],</span><br><span class="line">                   fund_type=each_data[<span class="string">&quot;fund_type&quot;</span>],date=each_data[<span class="string">&quot;date&quot;</span>],nvalue_pu=each_data[<span class="string">&quot;nvalue_pu&quot;</span>],</span><br><span class="line">                   day_growth_rate=each_data[<span class="string">&quot;day_growth_rate&quot;</span>],a_week_rate=each_data[<span class="string">&quot;a_week_rate&quot;</span>],</span><br><span class="line">                   a_month_rate=each_data[<span class="string">&quot;a_month_rate&quot;</span>],_3_month_rate=each_data[<span class="string">&quot;_3_month_rate&quot;</span>],_6_month_rate=each_data[<span class="string">&quot;_6_month_rate&quot;</span>],</span><br><span class="line">                   a_year_rate=each_data[<span class="string">&quot;a_year_rate&quot;</span>],_2_year_rate=each_data[<span class="string">&quot;_2_year_rate&quot;</span>],_3_year_rate=each_data[<span class="string">&quot;_3_year_rate&quot;</span>],</span><br><span class="line">                   from_this_year=each_data[<span class="string">&quot;from_this_year&quot;</span>],from_found_year=each_data[<span class="string">&quot;from_found_year&quot;</span>],poundage=each_data[<span class="string">&quot;poundage&quot;</span>],</span><br><span class="line">                   purchase_money=each_data[<span class="string">&quot;purchase_money&quot;</span>])</span><br><span class="line">        <span class="comment"># print(sql)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                info = cursor.execute(sql)</span><br><span class="line">                mysqlDB.commit()</span><br><span class="line">                <span class="keyword">if</span> cursor.rowcount &gt;= <span class="number">1</span>:</span><br><span class="line">                    self.count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_table</span>(<span class="params">self,table_name</span>):</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info(&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;.format(mysqlDB, get_class_name(self), sys._getframe().f_code.co_name))</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        date,fund_name,latest_nvalue_pu,latest_sum_nvalue,last_nvalue_pu,</span></span><br><span class="line"><span class="string">    last_sum_nvalue,daily_growth,daily_growth_rate</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        temp_dict[&quot;fund_code&quot;] = i[0]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;fund_name&quot;] = i[1]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;fund_type&quot;] = i[2]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;date&quot;] = i[3]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;nvalue_pu&quot;] = i[4]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;day_growth_rate&quot;] = i[5]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;a_week_rate&quot;] = i[6]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;a_month_rate&quot;] = i[7]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;_3_month_rate&quot;] = i[8]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;_6_month_rate&quot;] = i[9]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;a_year_rate&quot;] = i[10]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;_2_year_rate&quot;] = i[11]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;_3_year_rate&quot;] = i[12]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;from_this_year&quot;] = i[13]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;from_found_year&quot;] = i[14]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;poundage&quot;] = i[-2]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;purchase_money&quot;] = i[-5]</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            CREATE TABLE IF NOT EXISTS `&#123;table_name&#125;`(</span></span><br><span class="line"><span class="string">               `id`  bigint NOT NULL AUTO_INCREMENT ,</span></span><br><span class="line"><span class="string">               `fund_code` VARCHAR(40)  NULL,</span></span><br><span class="line"><span class="string">               `fund_name` VARCHAR(100)  NULL,</span></span><br><span class="line"><span class="string">               `fund_type` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `date` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `nvalue_pu`  VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `day_growth_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `a_week_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `a_month_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `_3_month_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `_6_month_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `a_year_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `_2_year_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `_3_year_rate` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `from_this_year` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `from_found_year` VARCHAR(40) NULL,</span></span><br><span class="line"><span class="string">               `poundage` VARCHAR(40)  NULL,</span></span><br><span class="line"><span class="string">               `purchase_money` VARCHAR(40)  NULL,</span></span><br><span class="line"><span class="string">               PRIMARY KEY ( `id` )</span></span><br><span class="line"><span class="string">            )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(table_name=table_name)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_table_if_exist</span>(<span class="params">self,table_name</span>):</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info(&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;.format(mysqlDB,get_class_name(self),sys._getframe().f_code.co_name))</span></span><br><span class="line">        sql = <span class="string">&quot;show tables&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                _tables = cursor.fetchall()</span><br><span class="line">                table_lists = []</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> _tables:</span><br><span class="line">                    table_lists.append(i[<span class="number">0</span>])</span><br><span class="line">                <span class="comment"># print(&quot;all tables:&#123;&#125;&quot;.format(len(table_lists)))</span></span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> table_lists:</span><br><span class="line">                    <span class="keyword">if</span> table_name <span class="keyword">in</span> _:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code_and_name_and_type</span>(<span class="params">self,table_name</span>):</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info(&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;.format(mysqlDB, get_class_name(self), sys._getframe().f_code.co_name))</span></span><br><span class="line">        sql = <span class="string">&quot;SELECT fund_code,fund_name,fund_type FROM &#123;&#125;&quot;</span>.<span class="built_in">format</span>(table_name)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                info = cursor.fetchall()</span><br><span class="line">                <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                info是一个&lt;class &#x27;tuple&#x27;&gt;类型的数据</span></span><br><span class="line"><span class="string">                &#x27;&#x27;&#x27;</span></span><br><span class="line">                return_info = []</span><br><span class="line">                <span class="keyword">for</span> each <span class="keyword">in</span> info:</span><br><span class="line">                    _ = []</span><br><span class="line">                    fund_code = each[<span class="number">0</span>]</span><br><span class="line">                    _table_name = <span class="string">&quot;&#123;&#125;_&#123;&#125;_&#123;&#125;&quot;</span>.<span class="built_in">format</span>(each[<span class="number">0</span>],each[<span class="number">1</span>],each[<span class="number">2</span>])</span><br><span class="line">                    _.append(fund_code)</span><br><span class="line">                    _.append(_table_name)</span><br><span class="line">                    return_info.append(_)</span><br><span class="line">                <span class="keyword">return</span> return_info</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_data_rows</span>(<span class="params">self</span>):</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info(&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;.format(mysqlDB, get_class_name(self), sys._getframe().f_code.co_name))</span></span><br><span class="line">        sql_1 = <span class="string">&quot;show tables&quot;</span></span><br><span class="line">        total_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                cursor.execute(sql_1)</span><br><span class="line">                _tables = cursor.fetchall()</span><br><span class="line">                table_lists = []</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> _tables:</span><br><span class="line">                    table_lists.append(i[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> table_lists:</span><br><span class="line">                    sql_2 = <span class="string">&quot;select count(*) from &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">                    cursor.execute(sql_2)</span><br><span class="line">                    res = cursor.fetchall()</span><br><span class="line">                    num = res[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                    total_count = total_count + num</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;_&quot;</span>*<span class="number">20</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;from now on,there are &#123;&#125; lines data in database.&quot;</span>.<span class="built_in">format</span>(self.good_to_show(total_count)))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;_&quot;</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_insert_rows</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;_&quot;</span> * <span class="number">20</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;there total insert &#123;&#125; lines data in database.&quot;</span>.<span class="built_in">format</span>(self.good_to_show(self.count)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;_&quot;</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">good_to_show</span>(<span class="params">num</span>):</span></span><br><span class="line">        _s = <span class="built_in">str</span>(num)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(_s) == <span class="number">5</span>:</span><br><span class="line">            head = _s[<span class="number">0</span>]</span><br><span class="line">            tail = _s[<span class="number">1</span>]</span><br><span class="line">            total = head + <span class="string">&quot;.&quot;</span> + tail + <span class="string">&quot;万&quot;</span></span><br><span class="line">            <span class="keyword">return</span> total</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(_s) == <span class="number">6</span>:</span><br><span class="line">            head = _s[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">            tail = _s[<span class="number">2</span>]</span><br><span class="line">            total = head + <span class="string">&quot;.&quot;</span> + tail + <span class="string">&quot;万&quot;</span></span><br><span class="line">            <span class="keyword">return</span> total</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(_s) == <span class="number">7</span>:</span><br><span class="line">            head = _s[<span class="number">0</span>]</span><br><span class="line">            tail = _s[<span class="number">1</span>]</span><br><span class="line">            total = head + <span class="string">&quot;.&quot;</span> + tail + <span class="string">&quot;百万&quot;</span></span><br><span class="line">            <span class="keyword">return</span> total</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(_s) == <span class="number">8</span>:</span><br><span class="line">            head = _s[<span class="number">0</span>]</span><br><span class="line">            tail = _s[<span class="number">1</span>]</span><br><span class="line">            total = head + <span class="string">&quot;.&quot;</span> + tail + <span class="string">&quot;千万&quot;</span></span><br><span class="line">            <span class="keyword">return</span> total</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(_s) == <span class="number">9</span>:</span><br><span class="line">            head = _s[<span class="number">0</span>]</span><br><span class="line">            tail = _s[<span class="number">1</span>]</span><br><span class="line">            total = head + <span class="string">&quot;.&quot;</span> + tail + <span class="string">&quot;亿&quot;</span></span><br><span class="line">            <span class="keyword">return</span> total</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(_s) &gt; <span class="number">9</span>:</span><br><span class="line">            head = _s[<span class="number">0</span>:-<span class="number">8</span>]</span><br><span class="line">            tail = _s[<span class="number">1</span>]</span><br><span class="line">            total = head + <span class="string">&quot;.&quot;</span> + tail + <span class="string">&quot;亿&quot;</span></span><br><span class="line">            <span class="keyword">return</span> total</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlFundDetailData</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">        self.user = <span class="string">&quot;root&quot;</span></span><br><span class="line">        self.password = <span class="string">&quot;root&quot;</span></span><br><span class="line">        self.database = <span class="string">&quot;fund_data&quot;</span></span><br><span class="line">        self.charset = <span class="string">&quot;utf8mb4&quot;</span></span><br><span class="line">        self.port = <span class="number">3306</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DB</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> pymysql.connect(self.host,self.user, self.password, self.database, self.port, charset=self.charset)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_into_table</span>(<span class="params">self, table_name,each_data</span>):</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info(&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;.format(mysqlDB, get_class_name(self), sys._getframe().f_code.co_name))</span></span><br><span class="line">        <span class="comment"># if not isinstance(each_data,list):</span></span><br><span class="line">        <span class="comment">#     each_data = eval(each_data)</span></span><br><span class="line">        sql = <span class="string">&#x27;&#x27;&#x27;insert into &#123;table_name&#125;(date, latest_nvalue_pu, latest_sum_nvalue, last_nvalue_pu, last_sum_nvalue,</span></span><br><span class="line"><span class="string">        daily_growth,daily_growth_rate) </span></span><br><span class="line"><span class="string">        values(\&#x27;&#123;date&#125;\&#x27;,\&#x27;&#123;latest_nvalue_pu&#125;\&#x27;,\&#x27;&#123;latest_sum_nvalue&#125;\&#x27;,\&#x27;&#123;last_nvalue_pu&#125;\&#x27;,</span></span><br><span class="line"><span class="string">        \&#x27;&#123;last_sum_nvalue&#125;\&#x27;,\&#x27;&#123;daily_growth&#125;\&#x27;,\&#x27;&#123;daily_growth_rate&#125;\&#x27;)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(table_name=table_name, date=each_data[<span class="string">&quot;date&quot;</span>], latest_nvalue_pu=each_data[<span class="string">&quot;latest_nvalue_pu&quot;</span>],</span><br><span class="line">           latest_sum_nvalue=each_data[<span class="string">&quot;latest_sum_nvalue&quot;</span>], last_nvalue_pu=each_data[<span class="string">&quot;last_nvalue_pu&quot;</span>],</span><br><span class="line">           last_sum_nvalue=each_data[<span class="string">&quot;last_sum_nvalue&quot;</span>], daily_growth=each_data[<span class="string">&quot;daily_growth&quot;</span>],</span><br><span class="line">           daily_growth_rate=each_data[<span class="string">&quot;daily_growth_rate&quot;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(sql)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                info = cursor.execute(sql)</span><br><span class="line">                mysqlDB.commit()</span><br><span class="line">                <span class="keyword">if</span> cursor.rowcount &gt;= <span class="number">1</span>:</span><br><span class="line">                    self.count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_table</span>(<span class="params">self,table_name</span>):</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info(&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;.format(mysqlDB, get_class_name(self), sys._getframe().f_code.co_name))</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        date,fund_name,latest_nvalue_pu,latest_sum_nvalue,last_nvalue_pu,</span></span><br><span class="line"><span class="string">    last_sum_nvalue,daily_growth,daily_growth_rate</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        temp_dict[&quot;fund_code&quot;] = i[0]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;fund_name&quot;] = i[1]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;fund_type&quot;] = i[2]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;date&quot;] = i[3]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;nvalue_pu&quot;] = i[4]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;day_growth_rate&quot;] = i[5]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;a_week_rate&quot;] = i[6]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;a_month_rate&quot;] = i[7]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;_3_month_rate&quot;] = i[8]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;_6_month_rate&quot;] = i[9]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;a_year_rate&quot;] = i[10]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;_2_year_rate&quot;] = i[11]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;_3_year_rate&quot;] = i[12]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;from_this_year&quot;] = i[13]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;from_found_year&quot;] = i[14]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;poundage&quot;] = i[-2]</span></span><br><span class="line"><span class="string">        temp_dict[&quot;purchase_money&quot;] = i[-5]</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            CREATE TABLE IF NOT EXISTS `&#123;table_name&#125;`(</span></span><br><span class="line"><span class="string">               `id`  bigint NOT NULL AUTO_INCREMENT ,</span></span><br><span class="line"><span class="string">               `date`VARCHAR(50)  NULL,</span></span><br><span class="line"><span class="string">                `latest_nvalue_pu`VARCHAR(50)  NULL,</span></span><br><span class="line"><span class="string">                `latest_sum_nvalue`VARCHAR(50)  NULL,</span></span><br><span class="line"><span class="string">                `last_nvalue_pu`VARCHAR(50)  NULL,</span></span><br><span class="line"><span class="string">                `last_sum_nvalue`VARCHAR(50)  NULL,</span></span><br><span class="line"><span class="string">                `daily_growth`VARCHAR(50)  NULL,</span></span><br><span class="line"><span class="string">                `daily_growth_rate`VARCHAR(50)  NULL,</span></span><br><span class="line"><span class="string">               PRIMARY KEY ( `id` )</span></span><br><span class="line"><span class="string">            )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(table_name=table_name)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_table_if_exist</span>(<span class="params">self,table_name</span>):</span></span><br><span class="line">        mysqlDB = self.DB()</span><br><span class="line">        <span class="comment"># logging.info(&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;.format(mysqlDB, get_class_name(self), sys._getframe().f_code.co_name))</span></span><br><span class="line">        sql = <span class="string">&quot;show tables&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> mysqlDB.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                _tables = cursor.fetchall()</span><br><span class="line">                table_lists = []</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> _tables:</span><br><span class="line">                    table_lists.append(i[<span class="number">0</span>])</span><br><span class="line">                <span class="comment"># print(&quot;all tables:&#123;&#125;&quot;.format(len(table_lists)))</span></span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> table_lists:</span><br><span class="line">                    <span class="keyword">if</span> table_name <span class="keyword">in</span> _:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">&quot;&#123;&#125; | &#123;&#125; | &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e, get_class_name(self), sys._getframe().f_code.co_name))</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            mysqlDB.close()</span><br></pre></td></tr></table></figure>
<p>toolkit.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time,sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">LOG_FORMAT = <span class="string">&quot;%(asctime)s - %(levelname)s - %(message)s&quot;</span></span><br><span class="line">DATE_FORMAT = <span class="string">&quot;%m/%d/%Y %H:%M:%S %p&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_year_mon_day</span>(<span class="params">y = <span class="number">0</span>,m = <span class="number">0</span>,d = <span class="number">0</span></span>):</span></span><br><span class="line">    t = time.localtime()</span><br><span class="line">    year = t.tm_year</span><br><span class="line">    month = t.tm_mon</span><br><span class="line">    day = t.tm_mday</span><br><span class="line">    _time = <span class="string">&quot;&#123;&#125;-&#123;&#125;-&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(year) - y, month - m, day - d)</span><br><span class="line">    <span class="keyword">return</span> _time</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;log/mylog_&#123;&#125;.log&quot;</span>.<span class="built_in">format</span>(get_year_mon_day())</span><br><span class="line">logging.basicConfig(filename=filename, level=logging.DEBUG, <span class="built_in">format</span>=LOG_FORMAT, datefmt=DATE_FORMAT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_class_name</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">return</span> self.__class__.__name__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUser_Agent</span>():</span></span><br><span class="line">    headers = [</span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&#x27;</span>,   <span class="comment">#safari 5.1 – MAC</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&#x27;</span>,  <span class="comment">#safari 5.1 – Windows</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0&#x27;</span>,   <span class="comment">#IE 9.0</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)&#x27;</span>,   <span class="comment">#IE 8.0</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&#x27;</span>,   <span class="comment">#IE 7.0</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)&#x27;</span>,   <span class="comment"># IE6.0</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&#x27;</span>,   <span class="comment">#Firefox 4.0.1 – MAC</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&#x27;</span>,     <span class="comment">#Firefox 4.0.1 – Windows</span></span><br><span class="line">        <span class="string">&#x27;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11&#x27;</span>,     <span class="comment">#Opera 11.11 – MAC</span></span><br><span class="line">        <span class="string">&#x27;Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11&#x27;</span>,  <span class="comment">#Opera 11.11 – Windows</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&#x27;</span>,    <span class="comment">#Chrome 17.0 – MAC</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0)&#x27;</span>,  <span class="comment">#傲游（Maxthon）</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; TencentTraveler 4.0)&#x27;</span>,  <span class="comment">#腾讯TT</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)&#x27;</span>,  <span class="comment">#世界之窗（The World） 2.x</span></span><br><span class="line">        <span class="string">&#x27;ozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; The World)&#x27;</span>,  <span class="comment">#世界之窗（The World） 3.x</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0)&#x27;</span>,  <span class="comment">#搜狗浏览器 1.x</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&#x27;</span>,  <span class="comment">#360浏览器</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser)&#x27;</span>,     <span class="comment">#Avant</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)&#x27;</span>,     <span class="comment">#Green Browser</span></span><br><span class="line">        <span class="comment">##移动端用户代理</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5&#x27;</span>,     <span class="comment">#safari iOS 4.33 – iPhone</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5&#x27;</span>,     <span class="comment">#safari iOS 4.33 – iPod Touch</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5&#x27;</span>,     <span class="comment">#safari iOS 4.33 – iPad</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&#x27;</span>,  <span class="comment">#Android N1</span></span><br><span class="line">        <span class="string">&#x27;MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&#x27;</span>,  <span class="comment">#Android QQ浏览器 For android</span></span><br><span class="line">        <span class="string">&#x27;Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) Presto/2.8.149 Version/11.10&#x27;</span>,  <span class="comment">#Android Opera Mobile</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+&#x27;</span>,  <span class="comment">#Android Pad Moto Xoom</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0&#x27;</span>,  <span class="comment">#WebOS HP Touchpad</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124&#x27;</span>,  <span class="comment">#Nokia N97</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)&#x27;</span>,  <span class="comment">#Windows Phone Mango</span></span><br><span class="line">        <span class="string">&#x27;UCWEB7.0.2.37/28/999&#x27;</span>,  <span class="comment">#UC无</span></span><br><span class="line">        <span class="string">&#x27;Openwave/ UCWEB7.0.2.37/28/999&#x27;</span>,  <span class="comment">#UCOpenwave</span></span><br><span class="line">        <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999&#x27;</span>,  <span class="comment">#UC Opera</span></span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&quot;</span>,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;User-Agent&#x27;</span>:headers[randint(<span class="number">0</span>,<span class="built_in">len</span>(headers)-<span class="number">1</span>)]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = getUser_Agent()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_HTML_content</span>(<span class="params">url</span>):</span></span><br><span class="line">    resp = requests.get(url = url, headers=headers).content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure>


<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>program language</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>TabError: Inconsistent use of tabs and spaces in indentation</title>
    <url>/python-tab-error/</url>
    <content><![CDATA[<h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h3><p>在使用命令行运行<code>python</code>文件时，出现以下错误：   </p>
<blockquote>
<p>TabError: Inconsistent use of tabs and spaces in indentation</p>
</blockquote>
<p>但是代码什么的都没有问题，最后发现是格式的问题。因为<code>python</code>中默认是使用缩进进行区分代码的，所以如果使用了<code>tab</code>键进行缩进代码，那就回报这个错误。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200320205810.png" alt="error show"></p>
<h3 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2 解决方法"></a>2 解决方法</h3><p>用空格代替<code>tab</code>即可。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>program language</tag>
        <tag>problem solved</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>《庆余年》免费资源</title>
    <url>/qing-yu-nian-resource/</url>
    <content><![CDATA[<h3 id="1-国外资源"><a href="#1-国外资源" class="headerlink" title="1 国外资源"></a>1 国外资源</h3><p><a href="https://drive.google.com/drive/folders/1OEdzNsGgfx_t-b0cVy-V0lmyBAn8Jqp8?usp=drive_open">https://drive.google.com/drive/folders/1OEdzNsGgfx_t-b0cVy-V0lmyBAn8Jqp8?usp=drive_open</a></p>
<h3 id="2-国内资源"><a href="#2-国内资源" class="headerlink" title="2 国内资源"></a>2 国内资源</h3><p>天翼云盘：<a href="https://cloud.189.cn/t/rMN3uq3MRFf2">https://cloud.189.cn/t/rMN3uq3MRFf2</a>(密码：48sc)</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>movie</tag>
      </tags>
  </entry>
  <entry>
    <title>Python问题解决:re.error: unbalanced parenthesis at position 88</title>
    <url>/re-sub/</url>
    <content><![CDATA[<h4 id="问题：re-error-unbalanced-parenthesis-at-position-88"><a href="#问题：re-error-unbalanced-parenthesis-at-position-88" class="headerlink" title="问题：re.error: unbalanced parenthesis at position 88"></a>问题：re.error: unbalanced parenthesis at position 88</h4><p>在使用Python正则表达式的时候，用替换方法出现上述错误，</p>
<h3 id="下面是错误代码："><a href="#下面是错误代码：" class="headerlink" title="下面是错误代码："></a>下面是错误代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_url = <span class="string">&quot;https://jums.club/images/article/20191227161526664.png)&quot;</span></span><br><span class="line">old_url = <span class="string">&quot;https://img2018.cnblogs.com/blog/1212206/201912/1212206-20191227161526664-2133632479.png)&quot;</span></span><br><span class="line">line = <span class="string">&quot;![list example](https://img2018.cnblogs.com/blog/1212206/201912/1212206-20191227161526664-2133632479.png)&quot;</span></span><br><span class="line">new_line = re.sub(old_url,new_url,line)</span><br><span class="line"><span class="built_in">print</span>(new_line)</span><br></pre></td></tr></table></figure>
<h3 id="错误提示："><a href="#错误提示：" class="headerlink" title="错误提示："></a>错误提示：</h3><p><img src= "/img/loading.gif" data-src="https://upload-images.jianshu.io/upload_images/621273-5780ef5219b1b55f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error">   </p>
<h3 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h3><p><img src= "/img/loading.gif" data-src="https://upload-images.jianshu.io/upload_images/621273-e6156da55498b8e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="reason"><br>我们可以看到，需要替换的两个字符串末尾多出一个<code>)</code>来，导致匹配出错。我们去掉末尾那个<code>)</code>就可以了。</p>
<h3 id="更正代码："><a href="#更正代码：" class="headerlink" title="更正代码："></a>更正代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">line = <span class="string">&#x27;![list example](https://img2018.cnblogs.com/blog/1212206/201912/1212206-20191227161526664-2133632479.png)&#x27;</span></span><br><span class="line">old_url = <span class="string">&quot;https://img2018.cnblogs.com/blog/1212206/201912/1212206-20191227161526664-2133632479.png&quot;</span></span><br><span class="line">new_url = <span class="string">&quot;https://jums.club/images/article/20191227161526664.png&quot;</span></span><br><span class="line">l = re.sub(old_url,new_url,line)</span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure>

<h4 id="正确运行结果："><a href="#正确运行结果：" class="headerlink" title="正确运行结果："></a>正确运行结果：</h4><p><img src= "/img/loading.gif" data-src="https://upload-images.jianshu.io/upload_images/621273-cc9c055877a920b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="right result"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>program language</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>web开发中转发和重定向的区别</title>
    <url>/redirecting-forword/</url>
    <content><![CDATA[<h3 id="1-转发"><a href="#1-转发" class="headerlink" title="1 转发"></a>1 转发</h3><p>转发是指浏览器在地址不变的情况下，页面内容发生变化</p>
<h3 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2 重定向"></a>2 重定向</h3><p>重定向是指浏览器的页面转到另外一个页面，此时页面内容和浏览器的地址都会发生变化</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>glossary</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Java代码操作redis</title>
    <url>/redis-and-java/</url>
    <content><![CDATA[<p>在Java项目中操作redis需要相应的<a href="https://mvnrepository.com/artifact/redis.clients/jedis">jedis-jar包</a>支持，可以从<a href="https://mvnrepository.com/">https://mvnrepository.com/</a>下载相应的包，或者创建maven项目，在<code>pom.xml</code>中指定相应的依赖，依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后创建测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果 Redis 服务设置了密码，需要下面这行，没有就不需要</span></span><br><span class="line">        <span class="comment">// jedis.auth(&quot;123456&quot;);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">        <span class="comment">//查看服务是否运行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务正在运行: &quot;</span>+jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果得到如下运行结果，则表示成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">连接成功</span><br><span class="line">服务正在运行: PONG</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.runoob.com/redis/redis-java.html">https://www.runoob.com/redis/redis-java.html</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>入门教程</tag>
      </tags>
  </entry>
  <entry>
    <title>redis启动出错Creating Server TCP listening socket 127.0.0.1:6379: bind: No error</title>
    <url>/redis-start-error/</url>
    <content><![CDATA[<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>使用命令行进入到redis的安装目录，然后执行下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dos&gt; redis-cli.exe</span><br><span class="line">127.0.0.1:6379&gt;shutdown</span><br><span class="line">not connected&gt;<span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>然后重新运行<code>redis-server.exe redis.windows.conf</code>，启动成功！</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/194720-20170628150542305-1508549911.png" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/shaosks/p/7089786.html">https://www.cnblogs.com/shaosks/p/7089786.html</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis教程-常用命令</title>
    <url>/redis-tutorials/</url>
    <content><![CDATA[<h2 id="1-键（key）命令"><a href="#1-键（key）命令" class="headerlink" title="1 键（key）命令"></a>1 键（key）命令</h2><p> Redis 是 key-value 型数据库，使用 key 对 value 进行存储，因此，键（Key）命令是 Redis 中经常使用的一类命令。常用的键命令如下所示：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://c.biancheng.net/redis2/del.html">DEL</a></td>
<td>若键存在的情况下，该命令用于删除键</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/dump.html">DUMP</a></td>
<td>用于序列化给定 key ，并返回被序列化的值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/exists.html">EXISTS</a></td>
<td>用于检查键是否存在，若存在则返回 1，否则返回 0</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/expire.html">EXPIRE</a></td>
<td>设置 key 的过期时间，以秒为单位</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/expireat.html">EXPIREAT</a></td>
<td>该命令与 EXPIRE 相似，用于为 key 设置过期时间，不同在于，它的时间参数值采用的是时间戳格式。</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/keys.html">KEYS</a></td>
<td>此命令用于查找与指定 pattern 匹配的 key</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/move.html">MOVE</a></td>
<td>将当前数据库中的 key 移动至指定的数据库中（默认存储为 0 库，可选 1-15中的任意库）</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/persist.html">PERSIST</a></td>
<td>该命令用于删除 key 的过期时间，然后 key 将一直存在，不会过期</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/pexpire.html">PEXPIRE</a></td>
<td>设置 key 的过期，以毫秒为单位</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/randomkey.html">RANDOMKEY</a></td>
<td>从当前数据库中随机返回一个 key</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/rename.html">RENAME</a></td>
<td>修改 key 的名称</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/scan.html">SCAN</a></td>
<td>基于游标的迭代器，用于迭代数据库中存在的所有键，cursor 指的是迭代游标</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/ttl.html">TTL</a></td>
<td>用于检查 key 还剩多长时间过期，以秒为单位</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/type.html">TYPE</a></td>
<td>该命令用于获取 value 的数据类型。</td>
</tr>
</tbody></table>
<h2 id="2-Hash-命令"><a href="#2-Hash-命令" class="headerlink" title="2 Hash 命令"></a>2 Hash 命令</h2><p>Hash（哈希散列）是 Redis 基本数据类型之一，它以字符串映射表的形式来进行存储。Hash 特别适合用于存储对象。常用的命令如下所示：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://c.biancheng.net/redis2/hdel.html">HDEL</a></td>
<td>用于删除一个或多个哈希表字段</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/hexists.html">HEXISTS</a></td>
<td>用于确定哈希字段是否存在</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/hget.html">HGET</a></td>
<td>获取存储在 key 中的哈希字段的值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/hgetall.html">HGETALL</a></td>
<td>获取存储在 key 中的所有哈希字段值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/hincrby.html">HINCRBY</a></td>
<td>为存储在 key 中的哈希表指定字段做整数增量运算</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/hkeys.html">HKEYS</a></td>
<td>获取存储在 key 中的哈希表的所有字段</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/hlen.html">HLEN</a></td>
<td>获取存储在 key 中的哈希表的字段数量</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/hset.html">HSET</a></td>
<td>用于设置存储在 key 中的哈希表字段的值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/hvals.html">HVALS</a></td>
<td>用于获取哈希表中的所有值</td>
</tr>
</tbody></table>
<h2 id="3-String命令"><a href="#3-String命令" class="headerlink" title="3 String命令"></a>3 String命令</h2><p>Strings（字符串）结构是 Redis 的基本数据类型之一，我们可以通过相关字符串命令对其进行操作，比如设置、检索、删除等等。</p>
<p>字符串类型有诸多的应用场景，比如微博粉丝的关注与取消等。下面介绍了 Redis 中常营的字符串命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://c.biancheng.net/redis2/append.html">APPEND</a></td>
<td>该命令将 value 追加到 key 所存储值的末尾</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/bitcount.html">BITCOUNT</a></td>
<td>该命令用于计算字符串中，被设置为 1 的比特位的数量。</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/decr.html">DECR</a></td>
<td>将 key 所存储的整数值减 1</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/decrby.html">DECRBY</a></td>
<td>将 key 所储存的值减去给定的递减值（decrement）</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/get.html">GET</a></td>
<td>用于检索指定键的值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/getbit.html">GETBIT</a></td>
<td>对 key 所存储的字符串值，获取其指定偏移量上的位（bit）</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/getrange.html">GETRANGE</a></td>
<td>返回 key 中字符串值的子字符</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/getset.html">GETSET</a></td>
<td>将给定 key 的值设置为 value，并返回 key 的旧值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/incr.html">INCR</a></td>
<td>将 key 所存储的整数值加 1</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/incrby.html">INCRBY</a></td>
<td>将 key 所储存的值加上给定的递增值（increment）</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/incrbyfloat.html">INCRBYFLOAT</a></td>
<td>将 key 所储存的值加上指定的浮点递增值（increment）</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/mget.html">MGET</a></td>
<td>一次性获取一个或多个 key 所存储的值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/mset.html">MSET</a></td>
<td>该命令允许同时设置多个键值对</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/msetnx.html">MSETNX</a></td>
<td>当指定的 key 都不存在时，用于设置多个键值对</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/set.html">SET</a></td>
<td>用于设定指定键的值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/setbit.html">SETBIT</a></td>
<td>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/setex.html">SETEX</a></td>
<td>将值 value 存储到 key中 ，并将 key 的过期时间设为 seconds (以秒为单位)</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/strlen.html">STRLEN</a></td>
<td>返回 key 所储存的字符串值的长度</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/setnx.html">SETNX</a></td>
<td>当 key 不存在时设置 key 的值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/setrange.html">SETRANGE</a></td>
<td>从偏移量 offset 开始，使用指定的 value 覆盖的 key 所存储的部分字符串值</td>
</tr>
</tbody></table>
<h2 id="4-List命令"><a href="#4-List命令" class="headerlink" title="4 List命令"></a>4 List命令</h2><p>List 是 Redis 中最常用数据类型之一。Redis 提供了诸多用于操作列表类型的命令，通过这些命令你可以实现将一个元素添加到列表的头部，或者尾部等诸多操作。</p>
<p>List 常用的命令如下所示：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://c.biancheng.net/redis2/blpop.html">BLPOP</a></td>
<td>用于删除并返回列表中的第一个元素（头部操作），如果列表中没有元素，就会发生阻塞，直到列表等待超时或发现可弹出元素为止</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/brpop.html">BRPOP</a></td>
<td>用于删除并返回列表中的最后一个元素（尾部操作），如果列表中没有元素，就会发生阻塞，直到列表等待超时或发现可弹出元素为止</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/brpoplpush.html">BRPOPLPUSH</a></td>
<td>从列表中取出最后一个元素，并插入到另一个列表的头部。如果列表中没有元素，就会发生阻塞，直到等待超时或发现可弹出元素时为止</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/lindex_command.html">LINDEX</a></td>
<td>通过索引获取列表中的元素</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/linsert.html">LINSERT</a></td>
<td>指定列表中一个元素在它之前或之后插入另外一个元素</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/llen.html">LLEN</a></td>
<td>用于获取列表的长度</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/lpop.html">LPOP</a></td>
<td>从列表的头部弹出元素，默认为第一个元素</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/lpush.html">LPUSH</a></td>
<td>在列表头部插入一个或者多个值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/lpushx.html">LPUSHX</a></td>
<td>当储存列表的 key 存在时，用于将值插入到列表头部</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/lrange.html">LRANGE</a></td>
<td>获取列表指定范围内的元素</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/lrem.html">LREM</a></td>
<td>表示从列表中删除元素与 value 相等的元素。count 表示删除的数量，为 0 表示全部移除</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/lset.html">LSET</a></td>
<td>表示通过其索引设置列表中元素的值</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/ltrim.html">LTRIM</a></td>
<td>保留列表中指定范围内的元素值</td>
</tr>
</tbody></table>
<h2 id="5-Set命令"><a href="#5-Set命令" class="headerlink" title="5 Set命令"></a>5 Set命令</h2><p>Redis set 数据类型由键值对组成，这些键值对具有无序、唯一的性质，这与 Python 的 set 相似。当集合中最后一个元素被移除之后，该数据结构也会被自动删除，内存也同样会被收回。</p>
<p>Redis 的 Set 是 string 类型的无序集合。</p>
<p>集合成员是唯一的，这就意味着集合中没有重复的数据。</p>
<p>在 Redis 中，添加、删除和查找的时间复杂都是 O(1)（不管 Set 中包含多少元素）。</p>
<p>集合中最大的成员数为<br>$$<br>2^{32} – 1<br>$$<br>(4294967295), 每个集合可存储 40 多亿个成员。</p>
<p>由于 set 集合可以实现去重，因此它有很多适用场景，比如用户抽奖活动，使用 set 集合可以保证同一用户不被第二次选中。</p>
<p>Redis set 常用的命令如下所示：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://c.biancheng.net/redis2/sadd.html">SADD</a></td>
<td>向集合中添加一个或者多个元素，并且自动去重</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/scard.html">SCARD</a></td>
<td>返回集合中元素的个数</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/sdiff.html">SDIFF</a></td>
<td>求两个或对多个集合的差集</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/sdiffstore.html">SDIFFSTORE</a></td>
<td>求两个集合或多个集合的差集，并将结果保存到指定的集合(key)中</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/sinter.html">SINTER</a></td>
<td>求两个或多个集合的交集</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/sinterstore.html">SINTERSTORE</a></td>
<td>求两个或多个集合的交集，并将结果保存到指定的集合(key)中</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/smembers.html">SMEMBERS</a></td>
<td>查看集合中所有元素</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/smove.html">SMOVE</a></td>
<td>将集合中的元素移动到指定的集合中</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/spop.html">SPOP</a></td>
<td>弹出指定数量的元素</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/srandmember.html">SRANDMEMBER</a></td>
<td>随机从集合中返回指定数量的元素，默认返回 1个</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/srem.html">SREM</a></td>
<td>删除一个或者多个元素，若元素不存在则自动忽略</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/sunion.html">SUNION</a></td>
<td>求两个或者多个集合的并集</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/redis2/sunsionstore.html">SUNIONSTORE</a></td>
<td>求两个或者多个集合的并集，并将结果保存到指定的集合(key)中</td>
</tr>
</tbody></table>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://c.biancheng.net/redis_command/">http://c.biancheng.net/redis_command/</a></li>
<li><a href="https://jums.club/redis-start-error/">redis启动出错Creating Server TCP listening socket 127.0.0.1:6379: bind: No error</a></li>
<li><a href="https://jums.club/How-to-connect-remote-redis-server/">How to connect remote redis server</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>理解restful协议</title>
    <url>/restful-introduction/</url>
    <content><![CDATA[<p>越来越多的人开始意识到，<strong>网站即软件</strong>，而且是一种新型的软件。</p>
<p>这种”互联网软件”采用客户端/服务器模式，建立在分布式体系上，通过互联网通信，具有高延时（high latency）、高并发等特点。</p>
<p>网站开发，完全可以采用软件开发的模式。但是传统上，软件和网络是两个不同的领域，很少有交集；软件开发主要针对单机环境，网络则主要研究系统之间的通信。互联网的兴起，使得这两个领域开始融合，<strong>现在我们必须考虑，如何开发在互联网环境中使用的软件。</strong></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/bg2011091202.jpg" alt=""></p>
<p>RESTful架构，就是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</p>
<p>但是，到底什么是RESTful架构，并不是一个容易说清楚的问题。下面，我就谈谈我理解的RESTful架构。</p>
<h2 id="一、起源"><a href="#一、起源" class="headerlink" title="一、起源"></a>一、起源</h2><p>REST这个词，是<a href="https://en.wikipedia.org/wiki/Roy_Fielding">Roy Thomas Fielding</a>在他2000年的<a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">博士论文</a>中提出的。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/bg2011091201.jpg" alt=""></p>
<p>Fielding是一个非常重要的人，他是HTTP协议（1.0版和1.1版）的主要设计者、Apache服务器软件的作者之一、Apache基金会的第一任主席。所以，他的这篇论文一经发表，就引起了关注，并且立即对互联网开发产生了深远的影响。</p>
<p>他这样介绍论文的写作目的：</p>
<blockquote>
<p>“本文研究计算机科学两大前沿—-软件和网络—-的交叉点。长期以来，软件研究主要关注软件设计的分类、设计方法的演化，很少客观地评估不同的设计选择对系统行为的影响。而相反地，网络研究主要关注系统之间通信行为的细节、如何改进特定通信机制的表现，常常忽视了一个事实，那就是改变应用程序的互动风格比改变互动协议，对整体表现有更大的影响。<strong>我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。</strong>“</p>
<p>(This dissertation explores a junction on the frontiers of two research disciplines in computer science: software and networking. Software research has long been concerned with the categorization of software designs and the development of design methodologies, but has rarely been able to objectively evaluate the impact of various design choices on system behavior. Networking research, in contrast, is focused on the details of generic communication behavior between systems and improving the performance of particular communication techniques, often ignoring the fact that changing the interaction style of an application can have more impact on performance than the communication protocols used for that interaction. My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. )</p>
</blockquote>
<h2 id="二、名称"><a href="#二、名称" class="headerlink" title="二、名称"></a>二、名称</h2><p>Fielding将他对互联网软件的架构原则，定名为REST，即Representational State Transfer的缩写。我对这个词组的翻译是”表现层状态转化”。</p>
<p>如果一个架构符合REST原则，就称它为RESTful架构。</p>
<p><strong>要理解RESTful架构，最好的方法就是去理解Representational State Transfer这个词组到底是什么意思，它的每一个词代表了什么涵义。</strong>如果你把这个名称搞懂了，也就不难体会REST是一种什么样的设计。</p>
<h2 id="三、资源（Resources）"><a href="#三、资源（Resources）" class="headerlink" title="三、资源（Resources）"></a>三、资源（Resources）</h2><p>REST的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”。</p>
<p><strong>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。</strong>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。</p>
<p>所谓”上网”，就是与互联网上一系列的”资源”互动，调用它的URI。</p>
<h2 id="四、表现层（Representation）"><a href="#四、表现层（Representation）" class="headerlink" title="四、表现层（Representation）"></a><strong>四、表现层（Representation）</strong></h2><p>“资源”是一种信息实体，它可以有多种外在表现形式。<strong>我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。</strong></p>
<p>比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。</p>
<p>URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p>
<h2 id="五、状态转化（State-Transfer）"><a href="#五、状态转化（State-Transfer）" class="headerlink" title="五、状态转化（State Transfer）"></a><strong>五、状态转化（State Transfer）</strong></h2><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。</p>
<p>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，<strong>如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</strong></p>
<p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：<strong>GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</strong></p>
<h2 id="六、综述"><a href="#六、综述" class="headerlink" title="六、综述"></a><strong>六、综述</strong></h2><p>综合上面的解释，我们总结一下什么是RESTful架构：</p>
<p>　　（1）每一个URI代表一种资源；</p>
<p>　　（2）客户端和服务器之间，传递这种资源的某种表现层；</p>
<p>　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p>
<h2 id="七、误区"><a href="#七、误区" class="headerlink" title="七、误区"></a><strong>七、误区</strong></h2><p>RESTful架构有一些典型的设计误区。</p>
<p><strong>最常见的一种设计错误，就是URI包含动词。</strong>因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。</p>
<p>举例来说，某个URI是/posts/show/1，其中show是动词，这个URI就设计错了，正确的写法应该是/posts/1，然后用GET方法表示show。</p>
<p>如果某些动作是HTTP动词表示不了的，你就应该把动作做成一种资源。比如网上汇款，从账户1向账户2汇款500元，错误的URI是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /accounts/1/transfer/500/to/2</span><br></pre></td></tr></table></figure>

<p>正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /transaction HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">from=1&amp;to=2&amp;amount=500.00</span><br></pre></td></tr></table></figure>

<p><strong>另一个设计误区，就是在URI中加入版本号</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://www.example.com/app/1.0/foo</span><br><span class="line">http://www.example.com/app/1.1/foo</span><br><span class="line">http://www.example.com/app/2.0/foo</span><br></pre></td></tr></table></figure>

<p>因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URI。版本号可以在HTTP请求头信息的Accept字段中进行区分（参见<a href="http://www.informit.com/articles/article.aspx?p=1566460">Versioning REST Services</a>）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Accept: vnd.example-com.foo+json; version=1.0</span><br><span class="line">Accept: vnd.example-com.foo+json; version=1.1</span><br><span class="line">Accept: vnd.example-com.foo+json; version=2.0</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><p><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">理解RESTful架构</a></p>
</li>
<li><p><a href="https://www.kancloud.cn/amamatthew/api">API 设计参考</a></p>
</li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
  </entry>
  <entry>
    <title>关于最近的传染病，我们应该注意点什么？</title>
    <url>/sava-our-life/</url>
    <content><![CDATA[<h3 id="1-做好防护措施"><a href="#1-做好防护措施" class="headerlink" title="1 做好防护措施"></a>1 做好防护措施</h3><ul>
<li>戴口罩</li>
<li>尽量少出门</li>
<li>如果非要出门，也尽量别去人多的地方</li>
<li>今年可以不用找借口，在家里宅了</li>
<li>过年过节的，注意身体，别处意外</li>
</ul>
<h3 id="2-了解一下病毒"><a href="#2-了解一下病毒" class="headerlink" title="2 了解一下病毒"></a>2 了解一下病毒</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200123151745.jpg" alt="病毒-1"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200123151823.jpg" alt="病毒-2"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200123151833.jpg" alt="病毒-3"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200123151841.jpg" alt="病毒-4">   </p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>personal opinion</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10登录不上Micrsoft账户，解决办法</title>
    <url>/slove-windows-account-error/</url>
    <content><![CDATA[<h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h2><p>在登录Windows账户时，出现了以下错误：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/4554548454578.png" alt="在这里插入图片描述"></p>
<h2 id="2-方法一（修改DNS）"><a href="#2-方法一（修改DNS）" class="headerlink" title="2 方法一（修改DNS）"></a>2 方法一（修改DNS）</h2><p>将网络的DNS配置改成微软的DNS即可：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/787844851.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/32423fgs.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/4f5sdafa.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/656sdgsdg.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/454fdsaf.png" alt="在这里插入图片描述"><br>改成如下DNS地址即可，这是微软的DNS地址：4.2.2.2、4.2.2.1<br>或者这里有一个<a href="https://dns.icoa.cn/#world">免费的DNS网址</a>，可以试试这里的也行<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/78fdfa.png" alt="在这里插入图片描述"></p>
<blockquote>
<p><strong>改完DNS之后，如果还不行，那就看看自己是否开启了网络代理服务，如果开启了，一定要关掉才可以，否则也不能正常登录。</strong></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210423185512.png" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210423185534.png" alt=""></p>
</blockquote>
<h2 id="2-方法二"><a href="#2-方法二" class="headerlink" title="2 方法二"></a>2 方法二</h2><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/89fdf.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/676fdf.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/454fdf.png" alt="在这里插入图片描述"><br>然后使用win+R打开运行界面，并输入：services.msc，点击【确定】<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/2323fd.png" alt="在这里插入图片描述"><br>找到【Microsoft Account Sign-in Assistant】，点击【属性】，设置成自动启动，重启即可。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>解决问题</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>java中的sleep、wait、yield、join之间的区别</title>
    <url>/sleep-wait/</url>
    <content><![CDATA[<h2 id="1-区别"><a href="#1-区别" class="headerlink" title="1 区别"></a>1 区别</h2><p>在<code>java</code>中，<code>sleep()</code>和<code>yield()</code>方法是<code>Thread</code>类中的方法，而<code>wait()</code>是<code>Object</code>类中的方法。也就是说，在java中，所有的类都有<code>wait()</code>方法，而只有继承了<code>Thread</code>类的方法才有<code>sleep()</code>和<code>yield()</code>方法。</p>
<h2 id="2-其中sleep-和wait-的区别"><a href="#2-其中sleep-和wait-的区别" class="headerlink" title="2 其中sleep()和wait()的区别"></a>2 其中<code>sleep()</code>和<code>wait()</code>的区别</h2><ul>
<li><p><code>sleep()</code>方法用于短暂暂停线程的运行，而<code>wait()</code>方法用于线程间的通信</p>
</li>
<li><p>更主要的区别是：</p>
<ul>
<li>线程调用<code>sleep()</code>方法后，当前线程<strong>不会</strong>释放其持有的资源</li>
<li>线程调用<code>wait()</code>方法后，当前线程<strong>会</strong>释放其持有的资源</li>
</ul>
</li>
<li><p><code>sleep()</code>是一个静态方法，作用在当前线程上；而<code>wait()</code>是一个实例方法，并且只能由其他线程调用本实例的<code>notify()</code>或者<code>notifyAll()</code>方法后才能被唤醒。且如果线程调用<code>sleep()</code>方法被唤醒后，会立刻进入<strong>就绪状态</strong>，而调用<code>wait()</code>方法的线程则不会立刻进入，而是<strong>先获得同步锁</strong>，然后<strong>才进入就绪状态</strong>。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20190530003821842.png" alt=""></p>
</li>
<li><p><code>wait()</code>只能在同步环境中被使用，而<code>sleep()</code>没有限制，可以在任何地方使用</p>
</li>
<li><p><code>wait()</code>方法针对的是一个呗同步代码块加锁的对象，而<code>sleep()</code>针对的是一个线程进行休眠。</p>
</li>
</ul>
<h2 id="3-sleep-和yield-的区别"><a href="#3-sleep-和yield-的区别" class="headerlink" title="3 sleep()和yield()的区别"></a>3 <code>sleep()</code>和<code>yield()</code>的区别</h2><ul>
<li>与<code>sleep()</code>不同的是，当前线程执行<code>yield()</code>后，也就是告诉<code>CPU</code>，当前线程已经执行的差不多了，线程调度器可以将当前的<code>CPU</code>让给那些比当前线程优先级更高的线程或者优先级和当前线程同级的线程去执行，<strong>如果没有这样的线程，那么当前线程继续执行</strong>，<strong>如果有这样的线程，那么当前线程进入就绪状态。</strong><h2 id="4-sleep-的注意"><a href="#4-sleep-的注意" class="headerlink" title="4 sleep()的注意"></a>4 <code>sleep()</code>的注意</h2></li>
</ul>
<ol>
<li>执行<code>t.sleep()</code>是不会让线程<code>t</code>暂停，而是当当前线程暂停，因为<code>sleep()</code>是一个静态方法。</li>
<li>当前一个线程执行完<code>sleep()</code>方法后，不能保证能立马获得<code>CPU</code>资源，而是需要竞争，也就是当前线程会进入<strong>就绪状态</strong>。</li>
<li>如果其他线程中断了一个正在休眠的线程（调用<code>sleep()</code>方法休眠的线程），那么<code>sleep()</code>会抛出一个<code>Interrupted Exception</code>异常</li>
<li>一个线程执行完<code>sleep()</code>后，会将其本身拥有的<code>cpu</code>资源让给线程调度器</li>
<li><code>sleep()</code>有两个方法，一个是传入一个<strong>毫秒数</strong>，一个需要传入一个<strong>毫秒数</strong>和一个<strong>纳秒数</strong>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><code>yield()</code>和<code>sleep()</code>方法都是作用在当前线程上，因为他们都是静态方法，不是实例方法。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">yield</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="5-join-的作用"><a href="#5-join-的作用" class="headerlink" title="5 join()的作用"></a>5 <code>join()</code>的作用</h2><p>在多线程中，使用<code>join()</code>方法用于让主线程等待子线程运行完之后，主线程才继续执行。如下面的代码，不加<code>join()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      TreeNode root = TreeNode.getBST();</span><br><span class="line">       System.out.println(<span class="keyword">new</span> FDASF().getMinGap(root));</span><br><span class="line"></span><br><span class="line">       Thread[] tt = <span class="keyword">new</span> Thread[<span class="number">5</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           tt[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                       System.out.println(<span class="string">&quot;this is thread ==&quot;</span> + <span class="keyword">this</span>.getClass().getName() + <span class="string">&quot;  j=&quot;</span> + j);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tt.length; i++) &#123;</span><br><span class="line">           tt[i].start();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>this is thread ==Thread-0  j=0<br>this is thread ==Thread-0  j=1<br>this is thread ==Thread-2  j=0<br>this is thread ==Thread-0  j=2<br>this is thread ==Thread-3  j=0<br>this is thread ==Thread-3  j=1<br>this is thread ==Thread-2  j=1<br>this is thread ==Thread-4  j=0<br>this is thread ==Thread-1  j=0<br>this is thread ==Thread-3  j=2<br>this is thread ==Thread-0  j=3<br>this is thread ==Thread-3  j=3<br>this is thread ==Thread-1  j=1<br>this is thread ==Thread-4  j=1<br>this is thread ==Thread-2  j=2<br>this is thread ==Thread-4  j=2<br>this is thread ==Thread-1  j=2<br>this is thread ==Thread-1  j=3<br>this is thread ==Thread-1  j=4<br>this is thread ==Thread-3  j=4<br>this is thread ==Thread-0  j=4<br>this is thread ==Thread-4  j=3<br>this is thread ==Thread-2  j=3<br>this is thread ==Thread-4  j=4<br>this is thread ==Thread-2  j=4   </p>
</blockquote>
<p>加上<code>join()</code>方法之后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      TreeNode root = TreeNode.getBST();</span><br><span class="line">       System.out.println(<span class="keyword">new</span> FDASF().getMinGap(root));</span><br><span class="line"></span><br><span class="line">       Thread[] tt = <span class="keyword">new</span> Thread[<span class="number">5</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           tt[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                       System.out.println(<span class="string">&quot;this is thread ==&quot;</span> + <span class="keyword">this</span>.getClass().getName() + <span class="string">&quot;  j=&quot;</span> + j);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tt.length; i++) &#123;</span><br><span class="line">           tt[i].start();</span><br><span class="line">           tt[i].join();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：<br>this is thread ==Thread-0  j=0<br>this is thread ==Thread-0  j=1<br>this is thread ==Thread-0  j=2<br>this is thread ==Thread-0  j=3<br>this is thread ==Thread-0  j=4<br>this is thread ==Thread-1  j=0<br>this is thread ==Thread-1  j=1<br>this is thread ==Thread-1  j=2<br>this is thread ==Thread-1  j=3<br>this is thread ==Thread-1  j=4<br>this is thread ==Thread-2  j=0<br>this is thread ==Thread-2  j=1<br>this is thread ==Thread-2  j=2<br>this is thread ==Thread-2  j=3<br>this is thread ==Thread-2  j=4<br>this is thread ==Thread-3  j=0<br>this is thread ==Thread-3  j=1<br>this is thread ==Thread-3  j=2<br>this is thread ==Thread-3  j=3<br>this is thread ==Thread-3  j=4<br>this is thread ==Thread-4  j=0<br>this is thread ==Thread-4  j=1<br>this is thread ==Thread-4  j=2<br>this is thread ==Thread-4  j=3<br>this is thread ==Thread-4  j=4   </p>
</blockquote>
<p>从上面的代码以及运行结果可以看出，<code>join()</code>的具体作用了。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>解决hexo博客标题出错-》title: Python问题解决 re.error: unbalanced parenthesis at pos</title>
    <url>/sloved-hexo-title/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191228141835.png" alt="problem">   </p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>完美解决：用<code>&quot;&quot;</code>将标题引用起来，如：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191228141630.png" alt="sloved"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>关于cURL，了解这些就够用了</title>
    <url>/something-about-curl/</url>
    <content><![CDATA[<h3 id="1-Wikipedia解释"><a href="#1-Wikipedia解释" class="headerlink" title="1 Wikipedia解释"></a>1 Wikipedia解释</h3><blockquote>
<p><a href="https://curl.haxx.se/">cURL</a>是一个开源项目，主要的产品是curl（命令行工具）和libcurl（C语言的API库），两者功能均是：基于网络协议，对指定URL进行网络传输。cURL涉及是任何网络协议传输，不涉及对具体数据的具体处理。</p>
</blockquote>
<h3 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2 基本用法"></a>2 基本用法</h3><ul>
<li>简单模式   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://example.com </span><br></pre></td></tr></table></figure>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200302221732.png" alt="example">   </li>
<li>详细模式(verbose)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -v http://example.com</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>transfer tool</tag>
      </tags>
  </entry>
  <entry>
    <title>sql优化策略</title>
    <url>/sql-optimazition/</url>
    <content><![CDATA[<h2 id="MySQL中show命令"><a href="#MySQL中show命令" class="headerlink" title="MySQL中show命令"></a>MySQL中show命令</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES                                <span class="operator">/</span><span class="operator">/</span>列出 MySQL Server 数据库。</span><br><span class="line"><span class="keyword">SHOW</span> TABLES [<span class="keyword">FROM</span> db_name]                    <span class="operator">/</span><span class="operator">/</span>列出数据库数据表。</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span>S tbl_name                    <span class="operator">/</span><span class="operator">/</span>导出数据表结构。</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS [<span class="keyword">FROM</span> db_name]              <span class="operator">/</span><span class="operator">/</span>列出数据表及表状态信息。</span><br><span class="line"><span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> tbl_name [<span class="keyword">FROM</span> db_name]     <span class="operator">/</span><span class="operator">/</span>列出资料表字段</span><br><span class="line"><span class="keyword">SHOW</span> FIELDS <span class="keyword">FROM</span> tbl_name [<span class="keyword">FROM</span> db_name]，<span class="keyword">DESCRIBE</span> tbl_name [col_name]。</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> COLUMNS <span class="keyword">FROM</span> tbl_name [<span class="keyword">FROM</span> db_name]<span class="operator">/</span><span class="operator">/</span>列出字段及详情</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> FIELDS <span class="keyword">FROM</span> tbl_name [<span class="keyword">FROM</span> db_name] <span class="operator">/</span><span class="operator">/</span>列出字段完整属性</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> tbl_name [<span class="keyword">FROM</span> db_name]       <span class="operator">/</span><span class="operator">/</span>列出表索引。</span><br><span class="line"><span class="keyword">SHOW</span> STATUS                                  <span class="operator">/</span><span class="operator">/</span>列出 DB Server 状态。</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES                               <span class="operator">/</span><span class="operator">/</span>列出 MySQL 系统环境变量。</span><br><span class="line"><span class="keyword">SHOW</span> PROCESSLIST                             <span class="operator">/</span><span class="operator">/</span>列出执行命令。</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="keyword">user</span>                         <span class="operator">/</span><span class="operator">/</span>列出某用户权限</span><br></pre></td></tr></table></figure>

<h2 id="1-分页查询涉及的性能优化"><a href="#1-分页查询涉及的性能优化" class="headerlink" title="1 分页查询涉及的性能优化"></a>1 分页查询涉及的性能优化</h2><ul>
<li><p>在进行分页功能设计时，避免对总条目数量的查询</p>
<blockquote>
<p>假如每页显示 20 条数据，那么查询数据库的时候，用<code>limit #offset#, 21</code> 取出 21 条记录，页面展现20条。如果取到了 21 条，说明下一页还有数据，在页面展示下一页按钮。如果结果集数量不足 21，说明已经到了最后一页，无需显示下一页按钮了。这种方式完全避免了在分页查询时对总条目数量的查询。</p>
</blockquote>
</li>
<li><p>当数据量增大时，limit性能下降</p>
<p>原因分析：</p>
<p>针对下面的分页查询语句进行解析：<code>select * from table_name where &#123;condition&#125; limit &#123;offset&#125; &#123;count&#125;</code></p>
<p>假如<code>offset</code>的值很大，那么这条语句会先查询完前<code>offset</code>条数据之后，再开始截取<code>count</code>条数据进行返回，所以该语句的性能会随着数据量的增加，不断减小。</p>
<p>优化策略：</p>
<ul>
<li><p>自定义一个自增的主键id，然后该用id进行分页查询，如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> &#123;table_name&#125; <span class="keyword">where</span> &#123;<span class="keyword">condition</span>&#125; id <span class="operator">&gt;=</span> minid <span class="keyword">and</span> id <span class="operator">&lt;=</span> maxid</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.cnblogs.com/qingmei/p/4437762.html">分页查询的那些坑和各种技巧</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>值得收藏的52条SQL优化策略</title>
    <url>/sql-select-optimization/</url>
    <content><![CDATA[<p>1、对查询进行优化，应尽量避免全表扫描，首先应考虑在<code>where</code>及<code>order by</code>涉及的列上建立索引。</p>
<p>2、应尽量避免在<code>where</code>子句中对字段进行<code>null</code>值判断，创建表时NULL是默认值，但大多数时候应该使用<code>NOT NULL</code>，或者使用一个特殊的值，如0，-1作为默认值。</p>
<p>3、应尽量避免在<code>where</code>子句中使用<code>!=</code>或<code>&lt;&gt;</code>操作符，MySQL只有对以下操作符才使用索引：<code>&lt;</code>，&lt;=，<code>=</code>，<code>&gt;</code>，<code>&gt;=</code>，<code>BETWEEN</code>，<code>IN</code>，以及某些时候的<code>LIKE</code>。</p>
<p>4、应尽量避免在where子句中使用or来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，可以使用UNION合并查询：<code>select id from t where num=10 union all select id from t where num=20</code>。</p>
<p>5、in和not in也要慎用，否则会导致全表扫描，对于连续的数值，能用between就不要用in了：Select id from t where num between 1 and 3。</p>
<p>6、下面的查询也将导致全表扫描：<code>select id from t where name like‘%abc%’</code>或者<code>select id from t where name like‘%abc</code>’若要提高效率，可以考虑全文检索。而<code>select id from t where name like‘abc%’</code>才用到索引。</p>
<p>7、如果在where子句中使用参数，也会导致全表扫描。</p>
<p>8、应尽量避免在where子句中对字段进行表达式操作，应尽量避免在where子句中对字段进行函数操作。</p>
<p>9、很多时候用exists代替in是一个好的选择：<code>select num from a where num in(select num from b)</code>。用下面的语句替换：<code>select num from a where exists(select 1 from b where num=a.num)</code>。</p>
<p>10、索引固然可以提高相应的select的效率，但同时也降低了insert及update的效率，因为insert或update时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>
<p>11、应尽可能的避免更新clustered索引数据列， 因为clustered索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新clustered索引数据列，那么需要考虑是否应将该索引建为clustered索引。</p>
<p>12、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。</p>
<p>13、尽可能的使用varchar/nvarchar代替char/nchar，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>
<p>14、最好不要使用”“返回所有：<code>select from t</code> ，用具体的字段列表代替<code>“*”</code>，不要返回用不到的任何字段。</p>
<p>15、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>
<p>16、使用表的别名(Alias)：当在SQL语句中连接多个表时，请使用表的别名并把别名前缀于每个Column上。这样一来，就可以减少解析的时间并减少那些由Column歧义引起的语法错误。</p>
<p>17、使用“临时表”暂存中间结果 ：</p>
<blockquote>
<p>简化SQL语句的重要方法就是采用临时表暂存中间结果，但是临时表的好处远远不止这些，将临时结果暂存在临时表，后面的查询就在tempdb中了，这可以避免程序中多次扫描主表，也大大减少了程序执行中“共享锁”阻塞“更新锁”，减少了阻塞，提高了并发性能。</p>
</blockquote>
<p>18、一些SQL查询语句应加上nolock，读、写是会相互阻塞的，为了提高并发性能，对于一些查询，可以加上nolock，这样读的时候可以允许写，但缺点是可能读到未提交的脏数据。</p>
<p>使用nolock有3条原则：</p>
<ul>
<li>查询的结果用于“插、删、改”的不能加nolock；</li>
<li>查询的表属于频繁发生页分裂的，慎用nolock ；</li>
<li>使用临时表一样可以保存“数据前影”，起到类似Oracle的undo表空间的功能，能采用临时表提高并发性能的，不要用nolock。</li>
</ul>
<p>19、常见的简化规则如下：</p>
<ul>
<li>不要有超过5个以上的表连接（JOIN），考虑使用临时表或表变量存放中间结果。少用子查询，视图嵌套不要过深，一般视图嵌套不要超过2个为宜。</li>
</ul>
<p>20、将需要查询的结果预先计算好放在表中，查询的时候再Select。这在SQL7.0以前是最重要的手段，例如医院的住院费计算。</p>
<p>21、用OR的字句可以分解成多个查询，并且通过UNION 连接多个查询。他们的速度只同是否使用索引有关，如果查询需要用到联合索引，用UNION all执行的效率更高。多个OR的字句没有用到索引，改写成UNION的形式再试图与索引匹配。一个关键的问题是否用到索引。</p>
<p>22、在IN后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，减少判断的次数。</p>
<p>23、尽量将数据的处理工作放在服务器上，减少网络的开销，如使用存储过程。</p>
<p>存储过程是编译好、优化过、并且被组织到一个执行规划里、且存储在数据库中的SQL语句，是控制流语言的集合，速度当然快。反复执行的动态SQL，可以使用临时存储过程，该过程（临时表）被放在Tempdb中。</p>
<p>24、当服务器的内存够多时，配制线程数量 = 最大连接数+5，这样能发挥最大的效率；否则使用 配制线程数量&lt;最大连接数启用SQL SERVER的线程池来解决，如果还是数量 = 最大连接数+5，严重的损害服务器的性能。</p>
<p>25、查询的关联同写的顺序 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.personMemberID, <span class="operator">*</span> <span class="keyword">from</span> chineseresume a,personmember b <span class="keyword">where</span> personMemberID <span class="operator">=</span> b.referenceid <span class="keyword">and</span> a.personMemberID <span class="operator">=</span> ‘JCNPRH39681’ （A <span class="operator">=</span> B ,B <span class="operator">=</span> ‘号码’） </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.personMemberID, <span class="operator">*</span> <span class="keyword">from</span> chineseresume a,personmember b <span class="keyword">where</span> a.personMemberID <span class="operator">=</span> b.referenceid <span class="keyword">and</span> a.personMemberID <span class="operator">=</span> ‘JCNPRH39681’ <span class="keyword">and</span> b.referenceid <span class="operator">=</span> ‘JCNPRH39681’ （A <span class="operator">=</span> B ,B <span class="operator">=</span> ‘号码’， A <span class="operator">=</span> ‘号码’） </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.personMemberID, <span class="operator">*</span> <span class="keyword">from</span> chineseresume a,personmember b <span class="keyword">where</span> b.referenceid <span class="operator">=</span> ‘JCNPRH39681’ <span class="keyword">and</span> a.personMemberID <span class="operator">=</span> ‘JCNPRH39681’ （B <span class="operator">=</span> ‘号码’， A <span class="operator">=</span> ‘号码’）</span><br></pre></td></tr></table></figure>

<p>26、尽量使用exists代替select count(1)来判断是否存在记录，count函数只有在统计表中所有行数时使用，而且count(1)比count(*)更有效率。</p>
<p>27、尽量使用“&gt;=”，不要使用“&gt;”。</p>
<p>28、索引的使用规范：</p>
<ul>
<li>索引的创建要与应用结合考虑，建议大的OLTP表不要超过6个索引；</li>
<li>尽可能的使用索引字段作为查询条件，尤其是聚簇索引，必要时可以通过index index_name来强制指定索引；</li>
<li>避免对大表查询时进行table scan，必要时考虑新建索引；</li>
<li>在使用索引字段作为条件时，如果该索引是联合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用；</li>
<li>要注意索引的维护，周期性重建索引，重新编译存储过程。　　</li>
</ul>
<p>29、下列SQL条件语句中的列都建有恰当的索引，但执行速度却非常慢： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> record <span class="keyword">WHERE</span> <span class="built_in">substrINg</span>(card_no,<span class="number">1</span>,<span class="number">4</span>)<span class="operator">=</span>’<span class="number">5378</span>’ (<span class="number">13</span>秒) </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> record <span class="keyword">WHERE</span> amount<span class="operator">/</span><span class="number">30</span><span class="operator">&lt;</span> <span class="number">1000</span> （<span class="number">11</span>秒） </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> record <span class="keyword">WHERE</span> <span class="keyword">convert</span>(<span class="type">char</span>(<span class="number">10</span>),<span class="type">date</span>,<span class="number">112</span>)<span class="operator">=</span>’<span class="number">19991201</span>’ （<span class="number">10</span>秒）</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong> </p>
<p>WHERE子句中对列的任何操作结果都是在SQL运行时逐列计算得到的，因此它不得不进行表搜索，而没有使用该列上面的索引。</p>
<p>如果这些结果在查询编译时就能得到，那么就可以被SQL优化器优化，使用索引，避免表搜索，因此将SQL重写成下面这样： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> record <span class="keyword">WHERE</span> card_no <span class="keyword">like</span> ‘<span class="number">5378</span><span class="operator">%</span>’ （<span class="operator">&lt;</span> <span class="number">1</span>秒） </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> record <span class="keyword">WHERE</span> amount<span class="operator">&lt;</span> <span class="number">1000</span><span class="operator">*</span><span class="number">30</span> （<span class="operator">&lt;</span> <span class="number">1</span>秒） </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> record <span class="keyword">WHERE</span> <span class="type">date</span><span class="operator">=</span> ‘<span class="number">1999</span><span class="operator">/</span><span class="number">12</span><span class="operator">/</span><span class="number">01</span>’ （<span class="operator">&lt;</span> <span class="number">1</span>秒）</span><br></pre></td></tr></table></figure>

<p>30、当有一批处理的插入或更新时，用批量插入或批量更新，绝不会一条条记录的去更新。</p>
<p>31、在所有的存储过程中，能够用SQL语句的，我绝不会用循环去实现。</p>
<p>例如：列出上个月的每一天，我会用connect by去递归查询一下，绝不会去用循环从上个月第一天到最后一天。</p>
<p>32、选择最有效率的表名顺序（只在基于规则的优化器中有效）： </p>
<p>Oracle的解析器按照从右到左的顺序处理FROM子句中的表名，FROM子句中写在最后的表（基础表 driving table）将被最先处理，在FROM子句中包含多个表的情况下，你必须选择记录条数最少的表作为基础表。</p>
<p>如果有3个以上的表连接查询，那就需要选择交叉表（intersection table）作为基础表，交叉表是指那个被其他表所引用的表。</p>
<p>33、提高<code>GROUP BY</code>语句的效率，可以通过将不需要的记录在<code>GROUP BY</code>之前过滤掉。下面两个查询返回相同结果，但第二个明显就快了许多。 </p>
<p>低效：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JOB , <span class="built_in">AVG</span>(SAL) </span><br><span class="line"><span class="keyword">FROM</span> EMP </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> JOB </span><br><span class="line"><span class="keyword">HAVING</span> JOB <span class="operator">=</span>’PRESIDENT’ </span><br><span class="line"><span class="keyword">OR</span> JOB <span class="operator">=</span>’MANAGER’ </span><br></pre></td></tr></table></figure>

<p>高效: </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> JOB , <span class="built_in">AVG</span>(SAL) </span><br><span class="line"><span class="keyword">FROM</span> EMP </span><br><span class="line"><span class="keyword">WHERE</span> JOB <span class="operator">=</span>’PRESIDENT’ </span><br><span class="line"><span class="keyword">OR</span> JOB <span class="operator">=</span>’MANAGER’ </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> JOB</span><br></pre></td></tr></table></figure>

<p>34、SQL语句用大写，因为Oracle总是先解析SQL语句，把小写的字母转换成大写的再执行。</p>
<p>35、别名的使用，别名是大型数据库的应用技巧，就是表名、列名在查询中以一个字母为别名，查询速度要比建连接表快1.5倍。</p>
<p>36、避免死锁，在你的存储过程和触发器中访问同一个表时总是以相同的顺序；事务应经可能地缩短，在一个事务中应尽可能减少涉及到的数据量；永远不要在事务中等待用户输入。</p>
<p>37、避免使用临时表，除非却有需要，否则应尽量避免使用临时表，相反，可以使用表变量代替；大多数时候(99%)，表变量驻扎在内存中，因此速度比临时表更快，临时表驻扎在TempDb数据库中，因此临时表上的操作需要跨数据库通信，速度自然慢。</p>
<p>38、最好不要使用触发器：</p>
<ul>
<li>触发一个触发器，执行一个触发器事件本身就是一个耗费资源的过程；</li>
<li>如果能够使用约束实现的，尽量不要使用触发器；</li>
<li>不要为不同的触发事件(Insert，Update和Delete)使用相同的触发器；</li>
<li>不要在触发器中使用事务型代码。</li>
</ul>
<p>39、索引创建规则： </p>
<ul>
<li>表的主键、外键必须有索引； </li>
<li>数据量超过300的表应该有索引； </li>
<li>经常与其他表进行连接的表，在连接字段上应该建立索引； </li>
<li>经常出现在Where子句中的字段，特别是大表的字段，应该建立索引； </li>
<li>索引应该建在选择性高的字段上； </li>
<li>索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引； </li>
<li>复合索引的建立需要进行仔细分析，尽量考虑用单字段索引代替； </li>
<li>正确选择复合索引中的主列字段，一般是选择性较好的字段； </li>
<li>复合索引的几个字段是否经常同时以AND方式出现在Where子句中？单字段查询是否极少甚至没有？如果是，则可以建立复合索引；否则考虑单字段索引； </li>
<li>如果复合索引中包含的字段经常单独出现在Where子句中，则分解为多个单字段索引； </li>
<li>如果复合索引所包含的字段超过3个，那么仔细考虑其必要性，考虑减少复合的字段； </li>
<li>如果既有单字段索引，又有这几个字段上的复合索引，一般可以删除复合索引； </li>
<li>频繁进行数据操作的表，不要建立太多的索引； </li>
<li>删除无用的索引，避免对执行计划造成负面影响； </li>
<li>表上建立的每个索引都会增加存储开销，索引对于插入、删除、更新操作也会增加处理上的开销。另外，过多的复合索引，在有单字段索引的情况下，一般都是没有存在价值的；相反，还会降低数据增加删除时的性能，特别是对频繁更新的表来说，负面影响更大。 </li>
<li>尽量不要对数据库中某个含有大量重复的值的字段建立索引。</li>
</ul>
<p>40、MySQL查询优化总结：</p>
<p>使用慢查询日志去发现慢查询，使用执行计划去判断查询是否正常运行，总是去测试你的查询看看是否他们运行在最佳状态下。</p>
<p>久而久之性能总会变化，避免在整个表上使用count(*)，它可能锁住整张表，使查询保持一致以便后续相似的查询可以使用查询缓存，在适当的情形下使用GROUP BY而不是DISTINCT，在WHERE、GROUP BY和ORDER BY子句中使用有索引的列，保持索引简单，不在多个索引中包含同一个列。</p>
<p>有时候MySQL会使用错误的索引，对于这种情况使用USE INDEX，检查使用SQL_MODE=STRICT的问题，对于记录数小于5的索引字段，在UNION的时候使用LIMIT不是是用OR。 </p>
<p>为了避免在更新前SELECT，使用INSERT ON DUPLICATE KEY或者INSERT IGNORE，不要用UPDATE去实现，不要使用MAX，使用索引字段和ORDER BY子句，LIMIT M，N实际上可以减缓查询在某些情况下，有节制地使用，在WHERE子句中使用UNION代替子查询，在重新启动的MySQL，记得来温暖你的数据库，以确保数据在内存和查询速度快，考虑持久连接，而不是多个连接，以减少开销。</p>
<p>基准查询，包括使用服务器上的负载，有时一个简单的查询可以影响其他查询，当负载增加在服务器上，使用SHOW PROCESSLIST查看慢的和有问题的查询，在开发环境中产生的镜像数据中测试的所有可疑的查询。</p>
<p>41、MySQL备份过程：</p>
<ul>
<li>从二级复制服务器上进行备份；</li>
<li>在进行备份期间停止复制，以避免在数据依赖和外键约束上出现不一致；</li>
<li>彻底停止MySQL，从数据库文件进行备份；</li>
<li>如果使用MySQL dump进行备份，请同时备份二进制日志文件 – 确保复制没有中断；</li>
<li>不要信任LVM快照，这很可能产生数据不一致，将来会给你带来麻烦；</li>
<li>为了更容易进行单表恢复，以表为单位导出数据——如果数据是与其他表隔离的。 </li>
<li>当使用mysqldump时请使用–opt；</li>
<li>在备份之前检查和优化表；</li>
<li>为了更快的进行导入，在导入时临时禁用外键约束。；</li>
<li>为了更快的进行导入，在导入时临时禁用唯一性检测；</li>
<li>在每一次备份后计算数据库，表以及索引的尺寸，以便更够监控数据尺寸的增长；</li>
<li>通过自动调度脚本监控复制实例的错误和延迟；</li>
<li>定期执行备份。</li>
</ul>
<p>42、查询缓冲并不自动处理空格，因此，在写SQL语句时，应尽量减少空格的使用，尤其是在SQL首和尾的空格（因为查询缓冲并不自动截取首尾空格）。</p>
<p>43、member用mid做标准进行分表方便查询么？一般的业务需求中基本上都是以username为查询依据，正常应当是username做hash取模来分表。</p>
<p>而分表的话MySQL的partition功能就是干这个的，对代码是透明的；在代码层面去实现貌似是不合理的。</p>
<p>44、我们应该为数据库里的每张表都设置一个ID做为其主键，而且最好的是一个INT型的（推荐使用UNSIGNED），并设置上自动增加的AUTO_INCREMENT标志。</p>
<p>45、在所有的存储过程和触发器的开始处设置SET NOCOUNT ON，在结束时设置SET NOCOUNT OFF。无需在执行存储过程和触发器的每个语句后向客户端发送DONE_IN_PROC消息。</p>
<p>46、MySQL查询可以启用高速查询缓存。这是提高数据库性能的有效MySQL优化方法之一。当同一个查询被执行多次时，从缓存中提取数据和直接从数据库中返回数据快很多。</p>
<p>47、EXPLAIN SELECT查询用来跟踪查看效果：</p>
<p>使用EXPLAIN关键字可以让你知道MySQL是如何处理你的SQL语句的。这可以帮你分析你的查询语句或是表结构的性能瓶颈。EXPLAIN的查询结果还会告诉你你的索引主键被如何利用的，你的数据表是如何被搜索和排序的。</p>
<p>48、当只要一行数据时使用LIMIT 1 ：</p>
<p>当你查询表的有些时候，你已经知道结果只会有一条结果，但因为你可能需要去fetch游标，或是你也许会去检查返回的记录数。</p>
<p>在这种情况下，加上LIMIT 1可以增加性能。这样一来，MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查少下一条符合记录的数据。</p>
<p>49、选择表合适存储引擎： </p>
<ul>
<li><p>myisam：应用时以读和插入操作为主，只有少量的更新和删除，并且对事务的完整性，并发性要求不是很高的。 </p>
</li>
<li><p>InnoDB：事务处理，以及并发条件下要求数据的一致性。除了插入和查询外，包括很多的更新和删除。（InnoDB有效地降低删除和更新导致的锁定）。</p>
<p>对于支持事务的InnoDB类型的表来说，影响速度的主要原因是AUTOCOMMIT默认设置是打开的，而且程序没有显式调用BEGIN 开始事务，导致每插入一条都自动提交，严重影响了速度。可以在执行SQL前调用begin，多条SQL形成一个事物（即使autocommit打开也可以），将大大提高性能。</p>
</li>
</ul>
<p>50、优化表的数据类型，选择合适的数据类型： </p>
<p>原则：更小通常更好，简单就好，所有字段都得有默认值，尽量避免null。 </p>
<p>例如：数据库表设计时候更小的占磁盘空间尽可能使用更小的整数类型。(mediumint就比int更合适) </p>
<p>比如时间字段：datetime和timestamp，datetime占用8个字节，而timestamp占用4个字节，只用了一半，而timestamp表示的范围是1970—2037适合做更新时间 </p>
<p>MySQL可以很好的支持大数据量的存取，但是一般说来，数据库中的表越小，在它上面执行的查询也就会越快。 </p>
<p>因此，在创建表的时候，为了获得更好的性能，我们可以将表中字段的宽度设得尽可能小。</p>
<p>例如：在定义邮政编码这个字段时，如果将其设置为CHAR(255)，显然给数据库增加了不必要的空间。甚至使用VARCHAR这种类型也是多余的，因为CHAR(6)就可以很好的完成任务了。</p>
<p>同样的，如果可以的话，我们应该使用MEDIUMINT而不是BIGIN来定义整型字段，应该尽量把字段设置为NOT NULL，这样在将来执行查询的时候，数据库不用去比较NULL值。 </p>
<p>对于某些文本字段，例如“省份”或者“性别”，我们可以将它们定义为ENUM类型。因为在MySQL中，ENUM类型被当作数值型数据来处理，而数值型数据被处理起来的速度要比文本类型快得多。这样，我们又可以提高数据库的性能。</p>
<p>51、字符串数据类型：注意char，varchar，text选择区别。</p>
<p>52、任何对列的操作都将导致表扫描，它包括数据库函数、计算表达式等等，查询时要尽可能将操作移至等号右边</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.php.cn/toutiao-472847.html">https://www.php.cn/toutiao-472847.html</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>sql server2008，数据库已经有表结构，如何还原数据？</title>
    <url>/sql-server-reback-data/</url>
    <content><![CDATA[<h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1 需求"></a>1 需求</h3><p>已经通过<a href="https://jums.club/sql-server-something">这篇文章</a>导入了数据库的表结构，但是还有数据没有导入进来，接下来，下面讲一下，如何通过命令行，将<code>.sql</code>文件的数据导入数据库中（大于1G）。</p>
<h3 id="2-执行命令"><a href="#2-执行命令" class="headerlink" title="2 执行命令"></a>2 执行命令</h3><p>进入到你安装的<code>sql server</code>的安装路径，路径地址如：<code>G:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn</code>，如果你将其安装在其他的盘，那就修改前面的盘符，然后执行下面的命令：<br><strong><code>sqlcmd -S xxx -i xxx -d xxx</code></strong><br>命令解释：</p>
<ul>
<li>-S（大写） xxx | 后面的xxx有两部分，前部分是你的计算机名，后部分是记得sql server的实例名，如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200131140435.png" alt="计算机名/实例名">   </li>
<li>-i xxx | 后面的xxx代表你的<code>.sql</code>文件的地址</li>
<li>-d xxx | 后面的xxx代表你要还原到哪个数据库，且该数据库必须要提前创建好</li>
</ul>
<blockquote>
<p>注意：字母的大小写很重要，别看错了   </p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200131134502.png" alt="效果"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>database</tag>
        <tag>sql server</tag>
      </tags>
  </entry>
  <entry>
    <title>sql server 2008，sql server 2012下载安装教程</title>
    <url>/sql-server-download/</url>
    <content><![CDATA[<h3 id="1-Microsoft®-SQL-Server®-2008-R2-SP2-Express-Edition"><a href="#1-Microsoft®-SQL-Server®-2008-R2-SP2-Express-Edition" class="headerlink" title="1 Microsoft® SQL Server® 2008 R2 SP2 - Express Edition"></a>1 Microsoft® SQL Server® 2008 R2 SP2 - Express Edition</h3><p>官方下载地址：<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=30438">https://www.microsoft.com/zh-cn/download/details.aspx?id=30438</a>   可以根据电脑的性能选择不同的版本，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200131141213.png" alt="download face">    </p>
<h3 id="2-Microsoft®-SQL-Server®-2012-Evaluation"><a href="#2-Microsoft®-SQL-Server®-2012-Evaluation" class="headerlink" title="2 Microsoft® SQL Server® 2012 Evaluation"></a>2 Microsoft® SQL Server® 2012 Evaluation</h3><p>官方下载地址：<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=29066">https://www.microsoft.com/zh-cn/download/details.aspx?id=29066</a><br>同样你也一根据自己的电脑需求，下载不同的版本，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200131141641.png" alt="download face 2012"></p>
<h3 id="3-sql-server-2012-秘钥"><a href="#3-sql-server-2012-秘钥" class="headerlink" title="3 sql server 2012 秘钥"></a>3 sql server 2012 秘钥</h3><p><a href="https://blog.csdn.net/lmy4710/article/details/9089563">原文</a>   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MICROSOFT SQL SERVER 2012 DEVELOPER 版（开发版）</span><br><span class="line">序列号：YQWTX-G8T4R-QW4XX-BVH62-GP68Y </span><br><span class="line">MICROSOFT SQL SERVER 2012 ENTERPRISE SERVER/CAL EDITION 版（服务器/ CAL版）</span><br><span class="line">序列号：748RB-X4T6B-MRM7V-RTVFF-CHC8H</span><br><span class="line"></span><br><span class="line">MICROSOFT SQL SERVER 2012 STANDARD 版（标准版）</span><br><span class="line">序列号：YFC4R-BRRWB-TVP9Y-6WJQ9-MCJQ7</span><br><span class="line"></span><br><span class="line">MICROSOFT SQL SERVER 2012 WEB 版（WEB 版）</span><br><span class="line">序列号：FB3W8-YRXDP-G8F8F-C46KG-Q998F</span><br><span class="line"></span><br><span class="line">MICROSOFT SQL SERVER 2012 ENTERPRISE CORE 版（企业版）</span><br><span class="line">序列号：FH666-Y346V-7XFQ3-V69JM-RHW28</span><br><span class="line"></span><br><span class="line">MICROSOFT SQL SERVER 2012 BUSINESS INTELLIGENCE 版（企业版）</span><br><span class="line">序列号：HRV7T-DVTM4-V6XG8-P36T4-MRYT6</span><br></pre></td></tr></table></figure>

<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>database</tag>
        <tag>sql server</tag>
        <tag>software download</tag>
      </tags>
  </entry>
  <entry>
    <title>如何把高版本的sql server数据还原到低版本的sql server？</title>
    <url>/sql-server-something/</url>
    <content><![CDATA[<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><blockquote>
<p>这是转载的文章，个人觉得挺好的文章，不能埋没了，所以这里引用过来，一是为了方便自己以后有需要的时候可以翻出来看看，二是可以帮助作者宣传一下，尽自己微薄之力。</p>
</blockquote>
<p><strong>以下是原文</strong><a href="http://blog.sina.com.cn/s/blog_842339240102uzp6.html">原文链接</a>  </p>
<hr>
<h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1 需求"></a>1 需求</h3><p>我要实现的功能是把sql2012的数据库备份到sql2008，数据库名字为Test，并且这两个数据库在不同的电脑中。微软的软件设计方案基本上都是新版本兼容旧版本，旧版本不兼容新版本，就是逼着人用新版本的软件，这也属于正常，毕竟时代在发展嘛。废话不说。<br>步骤如下 </p>
<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>首先把要把sql2012中要备份的数据库设置为兼容2008.<br>右键sql2012中的数据库Test-属性-选项<br>看到如下图：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/002q1Tc8zy6LhCOA0ZTfd&690.jpg" alt="01">      </p>
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>右键Test-任务-生成脚本，下一步-下一步到达下图，点 高级  选项。把script for sql  version 改成你要降级的那个版本 也就是sql2008.确定完成即可。会生成一个script.sql脚本文件。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/002q1Tc8zy6LhDsplHUce&690.jpg" alt="02">   </p>
<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>下一步要把sqlserver2012源文件复制到另外一个电脑上。由于SqlServer正在运行 是无法复制的。所以首先要停止sqlserver服务。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/002q1Tc8zy6LhDP0Lfd7b&690.jpg" alt="03">   </p>
<h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>找到你这个sql2012数据库在电脑中的位置。 右键这个数据库-文件 会有路径，复制出这两个文件来。 至此 sqlserver2012的电脑操作完成<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/002q1Tc8zy6LhDZgnKWea&690.jpg" alt="04">   </p>
<h4 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h4><p>把上面得到的script.sql 文件和两个数据源文件复制到sql2008所在的电脑中。在sql2008中  新建-查询管理器。把script.sql拖进去，会看到代码。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/002q1Tc8zy6LhEhJ3bq38&690.jpg" alt="05"></p>
<p>注意绿色部分。此时显示的数据库文件位置是sql2012电脑的位置。我们需要把这两个地址改为 sql2008 中 你复制过来的那两个源文件的地址即可。运行F5执行  成功。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>database</tag>
        <tag>sql server</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql教程</title>
    <url>/sql-tutorials/</url>
    <content><![CDATA[<h2 id="1-MySQL常见命令"><a href="#1-MySQL常见命令" class="headerlink" title="1 MySQL常见命令"></a>1 MySQL常见命令</h2><ul>
<li><code>show &#123;databases|tables|tables from database&#125;</code>：查看已有的数据库、数据中的数据表</li>
<li><code>use &#123;dsatabase&#125;</code>：选择使用某个数据库</li>
<li><code>select version()</code>：查看当前数据库的版本信息，或者在cmd命令行输入<code>mysql --version</code></li>
<li><code>desc &#123;table_name&#125;</code>：查看表结构信息</li>
</ul>
<h2 id="2-joins"><a href="#2-joins" class="headerlink" title="2 joins"></a>2 joins</h2><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1090617-20190520233002027-1421406253.jpg" alt=""></p>
<ul>
<li><code>left join(左联接)</code> 返回包括<code>左表</code>中的所有记录和右表中联结字段相等的记录 。</li>
<li><code>right join(右联接)</code> 返回包括<code>右表</code>中的所有记录和左表中联结字段相等的记录。</li>
<li><code>inner join(等值连接)</code> 只返回两个表中联结字段相等的行。</li>
</ul>
<h3 id="（1）left-join"><a href="#（1）left-join" class="headerlink" title="（1）left join"></a>（1）left join</h3><blockquote>
<p>left join 通俗的解释：以左表为主表，返回左表的所有行，如果右表中没有匹配，则依然会有左表的记录，右表字段用null填充。看起来非常好理解，但实际操作的过程中可能会有一些很容易被忽略的点。</p>
</blockquote>
<h2 id="2-聚合函数"><a href="#2-聚合函数" class="headerlink" title="2 聚合函数"></a>2 聚合函数</h2><p>常用的聚合函数有如下：</p>
<ul>
<li>sum：计算某一列的值的总和</li>
<li>count：计算某一列的总数</li>
<li>avg：计算某一列的值的平均值，类似sum</li>
<li>max：计算某一列的值的最大值</li>
<li>min：计算某一列的值的最小值</li>
</ul>
<p>注意事项：</p>
<ul>
<li>每个组函数接收一个参数</li>
<li>默认情况下，组函数忽略列值为null的行，不参与计算</li>
<li>有时，会使用关键字distinct剔除字段值重复的条数</li>
<li><strong>当使用组函数的select语句中没有group by子句时，中间结果集中的所有行自动形成一组，然后计算组函数</strong></li>
<li><strong>组函数不允许嵌套，例如：count(max(…)</strong></li>
<li><strong>组函数的参数可以是列或是函数表达</strong></li>
<li><strong>一个SELECT子句中可出现多个聚集函数</strong></li>
</ul>
<h2 id="3-select查询"><a href="#3-select查询" class="headerlink" title="3 select查询"></a>3 select查询</h2><h3 id="（1）模糊查询"><a href="#（1）模糊查询" class="headerlink" title="（1）模糊查询"></a>（1）模糊查询</h3><ul>
<li><p><code>like</code></p>
<ul>
<li><p><code>%</code>通配符，表示任意多个（包括0个）字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> c1 <span class="keyword">like</span> <span class="string">&#x27;%&#123;pattern&#125;%&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>_</code>通配符，表示任意单个字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> c1 <span class="keyword">like</span> <span class="string">&#x27;_ame&#x27;</span> ## 查找table_name表中的c1字段出现了‘<span class="operator">*</span>ame’的所有数据 </span><br></pre></td></tr></table></figure>
</li>
<li><p><code>\</code>转义符，或者自定义转义符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> c1 <span class="keyword">like</span> <span class="string">&#x27;_\_ame&#x27;</span> ## 查找table_name表中的c1字段出现了‘<span class="operator">*</span>_ame’的所有数据 </span><br><span class="line"># 或者自定义转义符</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> c1 <span class="keyword">like</span> <span class="string">&#x27;_$_ame&#x27;</span> <span class="keyword">escape</span> <span class="string">&#x27;$&#x27;</span>  #表示不匹配‘$’符号  </span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>in</code>：可以替代连续的<code>or</code></p>
</li>
<li><p><code>is null</code></p>
</li>
<li><p><code>is not null</code></p>
</li>
<li><p><code>between and</code>：包含临界值</p>
</li>
<li><p><code>&lt;=&gt;</code>：（安全等于符号），可以用来判断<code>null</code>，也可以用来判断普通的值，但是由于可读性不高，不建议使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> c1 <span class="operator">=</span> <span class="keyword">null</span>;  # 这种写法是错误的</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> c1 <span class="keyword">is</span> <span class="keyword">null</span>;  # 这种写法才是MySQL建议使用的写法</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> c1 <span class="operator">&lt;=&gt;</span> <span class="keyword">null</span>;  #这种写法可以正常出结果，但是不建议使用</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> c1 <span class="operator">&lt;=&gt;</span> <span class="number">12</span>;  # 这种写法也可以，类似下面的语句：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> c1 <span class="operator">=</span> <span class="number">12</span>;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="（2）字符串拼接"><a href="#（2）字符串拼接" class="headerlink" title="（2）字符串拼接"></a>（2）字符串拼接</h3><ul>
<li><p><code>concat</code>，拼接字符串</p>
</li>
<li><p><code>group_concat</code>：按照分组拼接字符串</p>
</li>
<li><p><code>+</code>，这个符号只能用于计算数值型的数据，不能将字符串进行拼接，如果<code>+</code>两边的数据有一个的值为<code>null</code>，则最终的结果为<code>null</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a <span class="operator">+</span> b   </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">a=1, b=null, a+b=null</span></span><br><span class="line"><span class="comment">a=&#x27;9&#x27;, b=1, a+b=10</span></span><br><span class="line"><span class="comment">a=&#x27;name&#x27;, b=2, a+b=2  #字符串直接转换成数字0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="（3）replace用法"><a href="#（3）replace用法" class="headerlink" title="（3）replace用法"></a>（3）replace用法</h3><ul>
<li><p>在<code>update</code>数据时使用，替换所有满足条件的column，并写入数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update </span><br><span class="line">	&#123;table_name&#125;</span><br><span class="line"><span class="keyword">set</span> </span><br><span class="line">	&#123;field_name&#125; <span class="operator">=</span> replace(`field_name`, `<span class="keyword">from</span> string`, `to_string`)</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">	&#123;field_name&#125; <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">replace()参数说明：</span></span><br><span class="line"><span class="comment">- `field_name`：需要查询的列名</span></span><br><span class="line"><span class="comment">- `from string`：待替换的字符串</span></span><br><span class="line"><span class="comment">- `to_string`：替换成`to_string`字符串</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在查询时替换部分记录数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	replace(`field_name`, `<span class="keyword">from</span> string`, `to_string`) <span class="keyword">as</span> &#123;ailas_name&#125;</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	&#123;table_name&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="4-MySQL函数"><a href="#4-MySQL函数" class="headerlink" title="4 MySQL函数"></a>4 MySQL函数</h2><h3 id="4-1-MySQL-字符串函数"><a href="#4-1-MySQL-字符串函数" class="headerlink" title="4.1 MySQL 字符串函数"></a>4.1 MySQL 字符串函数</h3><table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ASCII(s)</td>
<td align="left">返回字符串 s 的第一个字符的 ASCII 码。</td>
<td align="left">返回 CustomerName 字段第一个字母的 ASCII 码：<code>SELECT ASCII(CustomerName) AS NumCodeOfFirstChar FROM Customers;</code></td>
</tr>
<tr>
<td align="left">CHAR_LENGTH(s)</td>
<td align="left">返回字符串 s 的字符数</td>
<td align="left">返回字符串 RUNOOB 的字符数<code>SELECT CHAR_LENGTH(&quot;RUNOOB&quot;) AS LengthOfString;</code></td>
</tr>
<tr>
<td align="left">CHARACTER_LENGTH(s)</td>
<td align="left">返回字符串 s 的字符数</td>
<td align="left">返回字符串 RUNOOB 的字符数<code>SELECT CHARACTER_LENGTH(&quot;RUNOOB&quot;) AS LengthOfString;</code></td>
</tr>
<tr>
<td align="left">CONCAT(s1,s2…sn)</td>
<td align="left">字符串 s1,s2 等多个字符串合并为一个字符串</td>
<td align="left">合并多个字符串<code>SELECT CONCAT(&quot;SQL &quot;, &quot;Runoob &quot;, &quot;Gooogle &quot;, &quot;Facebook&quot;) AS ConcatenatedString;</code></td>
</tr>
<tr>
<td align="left">CONCAT_WS(x, s1,s2…sn)</td>
<td align="left">同 CONCAT(s1,s2,…) 函数，但是每个字符串之间要加上 x，x 可以是分隔符</td>
<td align="left">合并多个字符串，并添加分隔符：<code>SELECT CONCAT_WS(&quot;-&quot;, &quot;SQL&quot;, &quot;Tutorial&quot;, &quot;is&quot;, &quot;fun!&quot;)AS ConcatenatedString;</code></td>
</tr>
<tr>
<td align="left">FIELD(s,s1,s2…)</td>
<td align="left">返回第一个字符串 s 在字符串列表(s1,s2…)中的位置</td>
<td align="left">返回字符串 c 在列表值中的位置：<code>SELECT FIELD(&quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;);</code></td>
</tr>
<tr>
<td align="left">FIND_IN_SET(s1,s2)</td>
<td align="left">返回在字符串s2中与s1匹配的字符串的位置</td>
<td align="left">返回字符串 c 在指定字符串中的位置：<code>SELECT FIND_IN_SET(&quot;c&quot;, &quot;a,b,c,d,e&quot;);</code></td>
</tr>
<tr>
<td align="left">FORMAT(x,n)</td>
<td align="left">函数可以将数字 x 进行格式化 “#,###.##”, 将 x 保留到小数点后 n 位，最后一位四舍五入。</td>
<td align="left">格式化数字 “#,###.##” 形式：<code>SELECT FORMAT(250500.5634, 2);     -- 输出 250,500.56</code></td>
</tr>
<tr>
<td align="left">INSERT(s1,x,len,s2)</td>
<td align="left">字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</td>
<td align="left">从字符串第一个位置开始的 6 个字符替换为 runoob：<code>SELECT INSERT(&quot;google.com&quot;, 1, 6, &quot;runoob&quot;);  -- 输出：runoob.com</code></td>
</tr>
<tr>
<td align="left">LOCATE(s1,s)</td>
<td align="left">从字符串 s 中获取 s1 的开始位置</td>
<td align="left">获取 b 在字符串 abc 中的位置：<code>SELECT LOCATE(&#39;st&#39;,&#39;myteststring&#39;);  -- 5</code>返回字符串 abc 中 b 的位置：<code>SELECT LOCATE(&#39;b&#39;, &#39;abc&#39;) -- 2</code></td>
</tr>
<tr>
<td align="left">LCASE(s)</td>
<td align="left">将字符串 s 的所有字母变成小写字母</td>
<td align="left">字符串 RUNOOB 转换为小写：<code>SELECT LCASE(&#39;RUNOOB&#39;) -- runoob</code></td>
</tr>
<tr>
<td align="left">LEFT(s,n)</td>
<td align="left">返回字符串 s 的前 n 个字符</td>
<td align="left">返回字符串 runoob 中的前两个字符：<code>SELECT LEFT(&#39;runoob&#39;,2) -- ru</code></td>
</tr>
<tr>
<td align="left">LOWER(s)</td>
<td align="left">将字符串 s 的所有字母变成小写字母</td>
<td align="left">字符串 RUNOOB 转换为小写：<code>SELECT LOWER(&#39;RUNOOB&#39;) -- runoob</code></td>
</tr>
<tr>
<td align="left">LPAD(s1,len,s2)</td>
<td align="left">在字符串 s1 的开始处填充字符串 s2，使字符串长度达到 len</td>
<td align="left">将字符串 xx 填充到 abc 字符串的开始处：<code>SELECT LPAD(&#39;abc&#39;,5,&#39;xx&#39;) -- xxabc</code></td>
</tr>
<tr>
<td align="left">LTRIM(s)</td>
<td align="left">去掉字符串 s 开始处的空格</td>
<td align="left">去掉字符串 RUNOOB开始处的空格：<code>SELECT LTRIM(&quot;    RUNOOB&quot;) AS LeftTrimmedString;-- RUNOOB</code></td>
</tr>
<tr>
<td align="left">MID(s,n,len)</td>
<td align="left">从字符串 s 的 n 位置截取长度为 len 的子字符串，同 SUBSTRING(s,n,len)</td>
<td align="left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT MID(&quot;RUNOOB&quot;, 2, 3) AS ExtractString; -- UNO</code></td>
</tr>
<tr>
<td align="left">POSITION(s1 IN s)</td>
<td align="left">从字符串 s 中获取 s1 的开始位置</td>
<td align="left">返回字符串 abc 中 b 的位置：<code>SELECT POSITION(&#39;b&#39; in &#39;abc&#39;) -- 2</code></td>
</tr>
<tr>
<td align="left">REPEAT(s,n)</td>
<td align="left">将字符串 s 重复 n 次</td>
<td align="left">将字符串 runoob 重复三次：<code>SELECT REPEAT(&#39;runoob&#39;,3) -- runoobrunoobrunoob</code></td>
</tr>
<tr>
<td align="left">REPLACE(s,s1,s2)</td>
<td align="left">将字符串 s2 替代字符串 s 中的字符串 s1</td>
<td align="left">将字符串 abc 中的字符 a 替换为字符 x：<code>SELECT REPLACE(&#39;abc&#39;,&#39;a&#39;,&#39;x&#39;) --xbc</code></td>
</tr>
<tr>
<td align="left">REVERSE(s)</td>
<td align="left">将字符串s的顺序反过来</td>
<td align="left">将字符串 abc 的顺序反过来：<code>SELECT REVERSE(&#39;abc&#39;) -- cba</code></td>
</tr>
<tr>
<td align="left">RIGHT(s,n)</td>
<td align="left">返回字符串 s 的后 n 个字符</td>
<td align="left">返回字符串 runoob 的后两个字符：<code>SELECT RIGHT(&#39;runoob&#39;,2) -- ob</code></td>
</tr>
<tr>
<td align="left">RPAD(s1,len,s2)</td>
<td align="left">在字符串 s1 的结尾处添加字符串 s2，使字符串的长度达到 len</td>
<td align="left">将字符串 xx 填充到 abc 字符串的结尾处：<code>SELECT RPAD(&#39;abc&#39;,5,&#39;xx&#39;) -- abcxx</code></td>
</tr>
<tr>
<td align="left">RTRIM(s)</td>
<td align="left">去掉字符串 s 结尾处的空格</td>
<td align="left">去掉字符串 RUNOOB 的末尾空格：<code>SELECT RTRIM(&quot;RUNOOB     &quot;) AS RightTrimmedString;   -- RUNOOB</code></td>
</tr>
<tr>
<td align="left">SPACE(n)</td>
<td align="left">返回 n 个空格</td>
<td align="left">返回 10 个空格：<code>SELECT SPACE(10);</code></td>
</tr>
<tr>
<td align="left">STRCMP(s1,s2)</td>
<td align="left">比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1</td>
<td align="left">比较字符串：<code>SELECT STRCMP(&quot;runoob&quot;, &quot;runoob&quot;);  -- 0</code></td>
</tr>
<tr>
<td align="left">SUBSTR(s, start, length)</td>
<td align="left">从字符串 s 的 start 位置截取长度为 length 的子字符串</td>
<td align="left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT SUBSTR(&quot;RUNOOB&quot;, 2, 3) AS ExtractString; -- UNO</code></td>
</tr>
<tr>
<td align="left">SUBSTRING(s, start, length)</td>
<td align="left">从字符串 s 的 start 位置截取长度为 length 的子字符串</td>
<td align="left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT SUBSTRING(&quot;RUNOOB&quot;, 2, 3) AS ExtractString; -- UNO</code></td>
</tr>
<tr>
<td align="left">SUBSTRING_INDEX(s, delimiter, number)</td>
<td align="left">返回从字符串 s 的第 number 个出现的分隔符 delimiter 之后的子串。 如果 number 是正数，返回第 number 个字符左边的字符串。 如果 number 是负数，返回第(number 的绝对值(从右边数))个字符右边的字符串。</td>
<td align="left"><code>SELECT SUBSTRING_INDEX(&#39;a*b&#39;,&#39;*&#39;,1) -- a SELECT SUBSTRING_INDEX(&#39;a*b&#39;,&#39;*&#39;,-1)  -- b SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(&#39;a*b*c*d*e&#39;,&#39;*&#39;,3),&#39;*&#39;,-1)  -- c</code></td>
</tr>
<tr>
<td align="left">TRIM(s)</td>
<td align="left">去掉字符串 s 开始和结尾处的空格</td>
<td align="left">去掉字符串 RUNOOB 的首尾空格：<code>SELECT TRIM(&#39;    RUNOOB    &#39;) AS TrimmedString;</code></td>
</tr>
<tr>
<td align="left">UCASE(s)</td>
<td align="left">将字符串转换为大写</td>
<td align="left">将字符串 runoob 转换为大写：<code>SELECT UCASE(&quot;runoob&quot;); -- RUNOOB</code></td>
</tr>
<tr>
<td align="left">UPPER(s)</td>
<td align="left">将字符串转换为大写</td>
<td align="left">将字符串 runoob 转换为大写：<code>SELECT UPPER(&quot;runoob&quot;); -- RUNOOB</code></td>
</tr>
</tbody></table>
<hr>
<h3 id="4-2-MySQL-数字函数"><a href="#4-2-MySQL-数字函数" class="headerlink" title="4.2 MySQL 数字函数"></a>4.2 MySQL 数字函数</h3><table>
<thead>
<tr>
<th align="left">函数名</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ABS(x)</td>
<td align="left">返回 x 的绝对值</td>
<td align="left">返回 -1 的绝对值：<code>SELECT ABS(-1) -- 返回1</code></td>
</tr>
<tr>
<td align="left">ACOS(x)</td>
<td align="left">求 x 的反余弦值(参数是弧度)</td>
<td align="left"><code>SELECT ACOS(0.25);</code></td>
</tr>
<tr>
<td align="left">ASIN(x)</td>
<td align="left">求反正弦值(参数是弧度)</td>
<td align="left"><code>SELECT ASIN(0.25);</code></td>
</tr>
<tr>
<td align="left">ATAN(x)</td>
<td align="left">求反正切值(参数是弧度)</td>
<td align="left"><code>SELECT ATAN(2.5);</code></td>
</tr>
<tr>
<td align="left">ATAN2(n, m)</td>
<td align="left">求反正切值(参数是弧度)</td>
<td align="left"><code>SELECT ATAN2(-0.8, 2);</code></td>
</tr>
<tr>
<td align="left">AVG(expression)</td>
<td align="left">返回一个表达式的平均值，expression 是一个字段</td>
<td align="left">返回 Products 表中Price 字段的平均值：<code>SELECT AVG(Price) AS AveragePrice FROM Products;</code></td>
</tr>
<tr>
<td align="left">CEIL(x)</td>
<td align="left">返回大于或等于 x 的最小整数</td>
<td align="left"><code>SELECT CEIL(1.5) -- 返回2</code></td>
</tr>
<tr>
<td align="left">CEILING(x)</td>
<td align="left">返回大于或等于 x 的最小整数</td>
<td align="left"><code>SELECT CEILING(1.5); -- 返回2</code></td>
</tr>
<tr>
<td align="left">COS(x)</td>
<td align="left">求余弦值(参数是弧度)</td>
<td align="left"><code>SELECT COS(2);</code></td>
</tr>
<tr>
<td align="left">COT(x)</td>
<td align="left">求余切值(参数是弧度)</td>
<td align="left"><code>SELECT COT(6);</code></td>
</tr>
<tr>
<td align="left">COUNT(expression)</td>
<td align="left">返回查询的记录总数，expression 参数是一个字段或者 * 号</td>
<td align="left">返回 Products 表中 products 字段总共有多少条记录：<code>SELECT COUNT(ProductID) AS NumberOfProducts FROM Products;</code></td>
</tr>
<tr>
<td align="left">DEGREES(x)</td>
<td align="left">将弧度转换为角度</td>
<td align="left"><code>SELECT DEGREES(3.1415926535898) -- 180</code></td>
</tr>
<tr>
<td align="left">n DIV m</td>
<td align="left">整除，n 为被除数，m 为除数</td>
<td align="left">计算 10 除于 5：<code>SELECT 10 DIV 5;  -- 2</code></td>
</tr>
<tr>
<td align="left">EXP(x)</td>
<td align="left">返回 e 的 x 次方</td>
<td align="left">计算 e 的三次方：<code>SELECT EXP(3) -- 20.085536923188</code></td>
</tr>
<tr>
<td align="left">FLOOR(x)</td>
<td align="left">返回小于或等于 x 的最大整数</td>
<td align="left">小于或等于 1.5 的整数：<code>SELECT FLOOR(1.5) -- 返回1</code></td>
</tr>
<tr>
<td align="left">GREATEST(expr1, expr2, expr3, …)</td>
<td align="left">返回列表中的最大值</td>
<td align="left">返回以下数字列表中的最大值：<code>SELECT GREATEST(3, 12, 34, 8, 25); -- 34</code>返回以下字符串列表中的最大值：<code>SELECT GREATEST(&quot;Google&quot;, &quot;Runoob&quot;, &quot;Apple&quot;);   -- Runoob</code></td>
</tr>
<tr>
<td align="left">LEAST(expr1, expr2, expr3, …)</td>
<td align="left">返回列表中的最小值</td>
<td align="left">返回以下数字列表中的最小值：<code>SELECT LEAST(3, 12, 34, 8, 25); -- 3</code>返回以下字符串列表中的最小值：<code>SELECT LEAST(&quot;Google&quot;, &quot;Runoob&quot;, &quot;Apple&quot;);   -- Apple</code></td>
</tr>
<tr>
<td align="left">LN</td>
<td align="left">返回数字的自然对数，以 e 为底。</td>
<td align="left">返回 2 的自然对数：<code>SELECT LN(2);  -- 0.6931471805599453</code></td>
</tr>
<tr>
<td align="left">LOG(x) 或 LOG(base, x)</td>
<td align="left">返回自然对数(以 e 为底的对数)，如果带有 base 参数，则 base 为指定带底数。</td>
<td align="left"><code>SELECT LOG(20.085536923188) -- 3 SELECT LOG(2, 4); -- 2</code></td>
</tr>
<tr>
<td align="left">LOG10(x)</td>
<td align="left">返回以 10 为底的对数</td>
<td align="left"><code>SELECT LOG10(100) -- 2</code></td>
</tr>
<tr>
<td align="left">LOG2(x)</td>
<td align="left">返回以 2 为底的对数</td>
<td align="left">返回以 2 为底 6 的对数：<code>SELECT LOG2(6);  -- 2.584962500721156</code></td>
</tr>
<tr>
<td align="left">MAX(expression)</td>
<td align="left">返回字段 expression 中的最大值</td>
<td align="left">返回数据表 Products 中字段 Price 的最大值：<code>SELECT MAX(Price) AS LargestPrice FROM Products;</code></td>
</tr>
<tr>
<td align="left">MIN(expression)</td>
<td align="left">返回字段 expression 中的最小值</td>
<td align="left">返回数据表 Products 中字段 Price 的最小值：<code>SELECT MIN(Price) AS MinPrice FROM Products;</code></td>
</tr>
<tr>
<td align="left">MOD(x,y)</td>
<td align="left">返回 x 除以 y 以后的余数</td>
<td align="left">5 除于 2 的余数：<code>SELECT MOD(5,2) -- 1</code></td>
</tr>
<tr>
<td align="left">PI()</td>
<td align="left">返回圆周率(3.141593）</td>
<td align="left"><code>SELECT PI() --3.141593</code></td>
</tr>
<tr>
<td align="left">POW(x,y)</td>
<td align="left">返回 x 的 y 次方</td>
<td align="left">2 的 3 次方：<code>SELECT POW(2,3) -- 8</code></td>
</tr>
<tr>
<td align="left">POWER(x,y)</td>
<td align="left">返回 x 的 y 次方</td>
<td align="left">2 的 3 次方：<code>SELECT POWER(2,3) -- 8</code></td>
</tr>
<tr>
<td align="left">RADIANS(x)</td>
<td align="left">将角度转换为弧度</td>
<td align="left">180 度转换为弧度：<code>SELECT RADIANS(180) -- 3.1415926535898</code></td>
</tr>
<tr>
<td align="left">RAND()</td>
<td align="left">返回 0 到 1 的随机数</td>
<td align="left"><code>SELECT RAND() --0.93099315644334</code></td>
</tr>
<tr>
<td align="left">ROUND(x)</td>
<td align="left">返回离 x 最近的整数</td>
<td align="left"><code>SELECT ROUND(1.23456) --1</code></td>
</tr>
<tr>
<td align="left">SIGN(x)</td>
<td align="left">返回 x 的符号，x 是负数、0、正数分别返回 -1、0 和 1</td>
<td align="left"><code>SELECT SIGN(-10) -- (-1)</code></td>
</tr>
<tr>
<td align="left">SIN(x)</td>
<td align="left">求正弦值(参数是弧度)</td>
<td align="left"><code>SELECT SIN(RADIANS(30)) -- 0.5</code></td>
</tr>
<tr>
<td align="left">SQRT(x)</td>
<td align="left">返回x的平方根</td>
<td align="left">25 的平方根：<code>SELECT SQRT(25) -- 5</code></td>
</tr>
<tr>
<td align="left">SUM(expression)</td>
<td align="left">返回指定字段的总和</td>
<td align="left">计算 OrderDetails 表中字段 Quantity 的总和：<code>SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails;</code></td>
</tr>
<tr>
<td align="left">TAN(x)</td>
<td align="left">求正切值(参数是弧度)</td>
<td align="left"><code>SELECT TAN(1.75);  -- -5.52037992250933</code></td>
</tr>
<tr>
<td align="left">TRUNCATE(x,y)</td>
<td align="left">返回数值 x 保留到小数点后 y 位的值（与 ROUND 最大的区别是不会进行四舍五入）</td>
<td align="left"><code>SELECT TRUNCATE(1.23456,3) -- 1.234</code></td>
</tr>
</tbody></table>
<hr>
<h3 id="4-3-MySQL-日期函数"><a href="#4-3-MySQL-日期函数" class="headerlink" title="4.3 MySQL 日期函数"></a>4.3 MySQL 日期函数</h3><table>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>ADDDATE(d,n)</td>
<td>计算起始日期 d 加上 n 天的日期</td>
<td><code>SELECT ADDDATE(&quot;2017-06-15&quot;, INTERVAL 10 DAY); -&gt;2017-06-25</code></td>
</tr>
<tr>
<td>ADDTIME(t,n)</td>
<td>n 是一个时间表达式，时间 t 加上时间表达式 n</td>
<td>加 5 秒：<code>SELECT ADDTIME(&#39;2011-11-11 11:11:11&#39;, 5); -&gt;2011-11-11 11:11:16 (秒)</code>添加 2 小时, 10 分钟, 5 秒:<code>SELECT ADDTIME(&quot;2020-06-15 09:34:21&quot;, &quot;2:10:5&quot;);  -&gt; 2020-06-15 11:44:26</code></td>
</tr>
<tr>
<td>CURDATE()</td>
<td>返回当前日期</td>
<td><code>SELECT CURDATE(); -&gt; 2018-09-19</code></td>
</tr>
<tr>
<td>CURRENT_DATE()</td>
<td>返回当前日期</td>
<td><code>SELECT CURRENT_DATE(); -&gt; 2018-09-19</code></td>
</tr>
<tr>
<td>CURRENT_TIME</td>
<td>返回当前时间</td>
<td><code>SELECT CURRENT_TIME(); -&gt; 19:59:02</code></td>
</tr>
<tr>
<td>CURRENT_TIMESTAMP()</td>
<td>返回当前日期和时间</td>
<td><code>SELECT CURRENT_TIMESTAMP() -&gt; 2018-09-19 20:57:43</code></td>
</tr>
<tr>
<td>CURTIME()</td>
<td>返回当前时间</td>
<td><code>SELECT CURTIME(); -&gt; 19:59:02</code></td>
</tr>
<tr>
<td>DATE()</td>
<td>从日期或日期时间表达式中提取日期值</td>
<td><code>SELECT DATE(&quot;2017-06-15&quot;);     -&gt; 2017-06-15</code></td>
</tr>
<tr>
<td>DATEDIFF(d1,d2)</td>
<td>计算日期 d1-&gt;d2 之间相隔的天数</td>
<td><code>SELECT DATEDIFF(&#39;2001-01-01&#39;,&#39;2001-02-02&#39;) -&gt; -32</code></td>
</tr>
<tr>
<td>DATE_ADD(d，INTERVAL expr type)</td>
<td>计算起始日期 d 加上一个时间段后的日期，type 值可以是：<br/>- MICROSECOND<br/>- SECOND<br/>- MINUTE<br/>- HOUR<br/>- DAY<br/>- WEEK<br/>- MONTH<br/>- QUARTER<br/>- YEAR<br/>- SECOND_MICROSECOND<br/>- MINUTE_MICROSECOND<br/>- MINUTE_SECOND<br/>- HOUR_MICROSECOND<br/>- HOUR_SECOND<br/>- HOUR_MINUTE<br/>- DAY_MICROSECOND<br/>- DAY_SECOND<br/>- DAY_MINUTE<br/>- DAY_HOUR<br/>- YEAR_MONTH</td>
<td><code>SELECT DATE_ADD(&quot;2017-06-15&quot;, INTERVAL 10 DAY);     -&gt; 2017-06-25 SELECT DATE_ADD(&quot;2017-06-15 09:34:21&quot;, INTERVAL 15 MINUTE); -&gt; 2017-06-15 09:49:21 SELECT DATE_ADD(&quot;2017-06-15 09:34:21&quot;, INTERVAL -3 HOUR); -&gt;2017-06-15 06:34:21 SELECT DATE_ADD(&quot;2017-06-15 09:34:21&quot;, INTERVAL -3 HOUR); -&gt;2017-04-15</code></td>
</tr>
<tr>
<td>DATE_FORMAT(d,f)</td>
<td>按表达式 f的要求显示日期 d</td>
<td><code>SELECT DATE_FORMAT(&#39;2011-11-11 11:11:11&#39;,&#39;%Y-%m-%d %r&#39;) -&gt; 2011-11-11 11:11:11 AM</code></td>
</tr>
<tr>
<td>DATE_SUB(date,INTERVAL expr type)</td>
<td>函数从日期减去指定的时间间隔。</td>
<td>Orders 表中 OrderDate 字段减去 2 天：<code>SELECT OrderId,DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDate FROM Orders</code></td>
</tr>
<tr>
<td>DAY(d)</td>
<td>返回日期值 d 的日期部分</td>
<td><code>SELECT DAY(&quot;2017-06-15&quot;);   -&gt; 15</code></td>
</tr>
<tr>
<td>DAYNAME(d)</td>
<td>返回日期 d 是星期几，如 Monday,Tuesday</td>
<td><code>SELECT DAYNAME(&#39;2011-11-11 11:11:11&#39;) -&gt;Friday</code></td>
</tr>
<tr>
<td>DAYOFMONTH(d)</td>
<td>计算日期 d 是本月的第几天</td>
<td><code>SELECT DAYOFMONTH(&#39;2011-11-11 11:11:11&#39;) -&gt;11</code></td>
</tr>
<tr>
<td>DAYOFWEEK(d)</td>
<td>日期 d 今天是星期几，1 星期日，2 星期一，以此类推</td>
<td><code>SELECT DAYOFWEEK(&#39;2011-11-11 11:11:11&#39;) -&gt;6</code></td>
</tr>
<tr>
<td>DAYOFYEAR(d)</td>
<td>计算日期 d 是本年的第几天</td>
<td><code>SELECT DAYOFYEAR(&#39;2011-11-11 11:11:11&#39;) -&gt;315</code></td>
</tr>
<tr>
<td>EXTRACT(type FROM d)</td>
<td>从日期 d 中获取指定的值，type 指定返回的值。<br/>- type可取值为：<br/>- MICROSECOND<br/>- SECOND<br/>- MINUTE<br/>- HOUR<br/>- DAY<br/>- WEEK<br/>- MONTH<br/>- QUARTER<br/>- YEAR<br/>- SECOND_MICROSECOND<br/>- MINUTE_MICROSECOND<br/>- MINUTE_SECOND<br/>- HOUR_MICROSECOND<br/>- HOUR_SECOND<br/>- HOUR_MINUTE<br/>- DAY_MICROSECOND<br/>- DAY_SECOND<br/>- DAY_MINUTE<br/>- DAY_HOUR<br/>- YEAR_MONTH</td>
<td><code>SELECT EXTRACT(MINUTE FROM &#39;2011-11-11 11:11:11&#39;)  -&gt; 11</code></td>
</tr>
<tr>
<td>FROM_DAYS(n)</td>
<td>计算从 0000 年 1 月 1 日开始 n 天后的日期</td>
<td><code>SELECT FROM_DAYS(1111) -&gt; 0003-01-16</code></td>
</tr>
<tr>
<td>HOUR(t)</td>
<td>返回 t 中的小时值</td>
<td><code>SELECT HOUR(&#39;1:2:3&#39;) -&gt; 1</code></td>
</tr>
<tr>
<td>LAST_DAY(d)</td>
<td>返回给给定日期的那一月份的最后一天</td>
<td><code>SELECT LAST_DAY(&quot;2017-06-20&quot;); -&gt; 2017-06-30</code></td>
</tr>
<tr>
<td>LOCALTIME()</td>
<td>返回当前日期和时间</td>
<td><code>SELECT LOCALTIME() -&gt; 2018-09-19 20:57:43</code></td>
</tr>
<tr>
<td>LOCALTIMESTAMP()</td>
<td>返回当前日期和时间</td>
<td><code>SELECT LOCALTIMESTAMP() -&gt; 2018-09-19 20:57:43</code></td>
</tr>
<tr>
<td>MAKEDATE(year, day-of-year)</td>
<td>基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期</td>
<td><code>SELECT MAKEDATE(2017, 3); -&gt; 2017-01-03</code></td>
</tr>
<tr>
<td>MAKETIME(hour, minute, second)</td>
<td>组合时间，参数分别为小时、分钟、秒</td>
<td><code>SELECT MAKETIME(11, 35, 4); -&gt; 11:35:04</code></td>
</tr>
<tr>
<td>MICROSECOND(date)</td>
<td>返回日期参数所对应的微秒数</td>
<td><code>SELECT MICROSECOND(&quot;2017-06-20 09:34:00.000023&quot;); -&gt; 23</code></td>
</tr>
<tr>
<td>MINUTE(t)</td>
<td>返回 t 中的分钟值</td>
<td><code>SELECT MINUTE(&#39;1:2:3&#39;) -&gt; 2</code></td>
</tr>
<tr>
<td>MONTHNAME(d)</td>
<td>返回日期当中的月份名称，如 November</td>
<td><code>SELECT MONTHNAME(&#39;2011-11-11 11:11:11&#39;) -&gt; November</code></td>
</tr>
<tr>
<td>MONTH(d)</td>
<td>返回日期d中的月份值，1 到 12</td>
<td><code>SELECT MONTH(&#39;2011-11-11 11:11:11&#39;) -&gt;11</code></td>
</tr>
<tr>
<td>NOW()</td>
<td>返回当前日期和时间</td>
<td><code>SELECT NOW() -&gt; 2018-09-19 20:57:43</code></td>
</tr>
<tr>
<td>PERIOD_ADD(period, number)</td>
<td>为 年-月 组合日期添加一个时段</td>
<td><code>SELECT PERIOD_ADD(201703, 5);    -&gt; 201708</code></td>
</tr>
<tr>
<td>PERIOD_DIFF(period1, period2)</td>
<td>返回两个时段之间的月份差值</td>
<td><code>SELECT PERIOD_DIFF(201710, 201703); -&gt; 7</code></td>
</tr>
<tr>
<td>QUARTER(d)</td>
<td>返回日期d是第几季节，返回 1 到 4</td>
<td><code>SELECT QUARTER(&#39;2011-11-11 11:11:11&#39;) -&gt; 4</code></td>
</tr>
<tr>
<td>SECOND(t)</td>
<td>返回 t 中的秒钟值</td>
<td><code>SELECT SECOND(&#39;1:2:3&#39;) -&gt; 3</code></td>
</tr>
<tr>
<td>SEC_TO_TIME(s)</td>
<td>将以秒为单位的时间 s 转换为时分秒的格式</td>
<td><code>SELECT SEC_TO_TIME(4320) -&gt; 01:12:00</code></td>
</tr>
<tr>
<td>STR_TO_DATE(string, format_mask)</td>
<td>将字符串转变为日期</td>
<td><code>SELECT STR_TO_DATE(&quot;August 10 2017&quot;, &quot;%M %d %Y&quot;); -&gt; 2017-08-10</code></td>
</tr>
<tr>
<td>SUBDATE(d,n)</td>
<td>日期 d 减去 n 天后的日期</td>
<td><code>SELECT SUBDATE(&#39;2011-11-11 11:11:11&#39;, 1) -&gt;2011-11-10 11:11:11 (默认是天)</code></td>
</tr>
<tr>
<td>SUBTIME(t,n)</td>
<td>时间 t 减去 n 秒的时间</td>
<td><code>SELECT SUBTIME(&#39;2011-11-11 11:11:11&#39;, 5) -&gt;2011-11-11 11:11:06 (秒)</code></td>
</tr>
<tr>
<td>SYSDATE()</td>
<td>返回当前日期和时间</td>
<td><code>SELECT SYSDATE() -&gt; 2018-09-19 20:57:43</code></td>
</tr>
<tr>
<td>TIME(expression)</td>
<td>提取传入表达式的时间部分</td>
<td><code>SELECT TIME(&quot;19:30:10&quot;); -&gt; 19:30:10</code></td>
</tr>
<tr>
<td>TIME_FORMAT(t,f)</td>
<td>按表达式 f 的要求显示时间 t</td>
<td><code>SELECT TIME_FORMAT(&#39;11:11:11&#39;,&#39;%r&#39;) 11:11:11 AM</code></td>
</tr>
<tr>
<td>TIME_TO_SEC(t)</td>
<td>将时间 t 转换为秒</td>
<td><code>SELECT TIME_TO_SEC(&#39;1:12:00&#39;) -&gt; 4320</code></td>
</tr>
<tr>
<td>TIMEDIFF(time1, time2)</td>
<td>计算时间差值</td>
<td><code>SELECT TIMEDIFF(&quot;13:10:11&quot;, &quot;13:10:10&quot;); -&gt; 00:00:01</code></td>
</tr>
<tr>
<td>TIMESTAMP(expression, interval)</td>
<td>单个参数时，函数返回日期或日期时间表达式；有2个参数时，将参数加和</td>
<td><code>SELECT TIMESTAMP(&quot;2017-07-23&quot;,  &quot;13:10:11&quot;); -&gt; 2017-07-23 13:10:11</code></td>
</tr>
<tr>
<td>TO_DAYS(d)</td>
<td>计算日期 d 距离 0000 年 1 月 1 日的天数</td>
<td><code>SELECT TO_DAYS(&#39;0001-01-01 01:01:01&#39;) -&gt; 366</code></td>
</tr>
<tr>
<td>WEEK(d)</td>
<td>计算日期 d 是本年的第几个星期，范围是 0 到 53</td>
<td><code>SELECT WEEK(&#39;2011-11-11 11:11:11&#39;) -&gt; 45</code></td>
</tr>
<tr>
<td>WEEKDAY(d)</td>
<td>日期 d 是星期几，0 表示星期一，1 表示星期二</td>
<td><code>SELECT WEEKDAY(&quot;2017-06-15&quot;); -&gt; 3</code></td>
</tr>
<tr>
<td>WEEKOFYEAR(d)</td>
<td>计算日期 d 是本年的第几个星期，范围是 0 到 53</td>
<td><code>SELECT WEEKOFYEAR(&#39;2011-11-11 11:11:11&#39;) -&gt; 45</code></td>
</tr>
<tr>
<td>YEAR(d)</td>
<td>返回年份</td>
<td><code>SELECT YEAR(&quot;2017-06-15&quot;); -&gt; 2017</code></td>
</tr>
<tr>
<td>YEARWEEK(date, mode)</td>
<td>返回年份及第几周（0到53），mode 中 0 表示周天，1表示周一，以此类推</td>
<td><code>SELECT YEARWEEK(&quot;2017-06-15&quot;); -&gt; 201724</code></td>
</tr>
</tbody></table>
<hr>
<h3 id="4-4-MySQL-高级函数"><a href="#4-4-MySQL-高级函数" class="headerlink" title="4.4 MySQL 高级函数"></a>4.4 MySQL 高级函数</h3><table>
<thead>
<tr>
<th align="left">函数名</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BIN(x)</td>
<td align="left">返回 x 的二进制编码</td>
<td align="left">15 的 2 进制编码:<code>SELECT BIN(15); -- 1111</code></td>
</tr>
<tr>
<td align="left">BINARY(s)</td>
<td align="left">将字符串 s 转换为二进制字符串</td>
<td align="left"><code>SELECT BINARY &quot;RUNOOB&quot;; -&gt; RUNOOB</code></td>
</tr>
<tr>
<td align="left"><code>CASE expression    WHEN condition1 THEN result1    WHEN condition2 THEN result2   ...    WHEN conditionN THEN resultN    ELSE result END</code></td>
<td align="left">CASE 表示函数开始，END 表示函数结束。如果 condition1 成立，则返回 result1, 如果 condition2 成立，则返回 result2，当全部不成立则返回 result，而当有一个成立之后，后面的就不执行了。</td>
<td align="left"><code>SELECT CASE  　WHEN 1 &gt; 0 　THEN &#39;1 &gt; 0&#39; 　WHEN 2 &gt; 0 　THEN &#39;2 &gt; 0&#39; 　ELSE &#39;3 &gt; 0&#39; 　END -&gt;1 &gt; 0</code></td>
</tr>
<tr>
<td align="left">CAST(x AS type)</td>
<td align="left">转换数据类型</td>
<td align="left">字符串日期转换为日期：<code>SELECT CAST(&quot;2017-08-29&quot; AS DATE); -&gt; 2017-08-29</code></td>
</tr>
<tr>
<td align="left">COALESCE(expr1, expr2, …., expr_n)</td>
<td align="left">返回参数中的第一个非空表达式（从左向右）</td>
<td align="left"><code>SELECT COALESCE(NULL, NULL, NULL, &#39;runoob.com&#39;, NULL, &#39;google.com&#39;); -&gt; runoob.com</code></td>
</tr>
<tr>
<td align="left">CONNECTION_ID()</td>
<td align="left">返回唯一的连接 ID</td>
<td align="left"><code>SELECT CONNECTION_ID(); -&gt; 4292835</code></td>
</tr>
<tr>
<td align="left">CONV(x,f1,f2)</td>
<td align="left">返回 f1 进制数变成 f2 进制数</td>
<td align="left"><code>SELECT CONV(15, 10, 2); -&gt; 1111</code></td>
</tr>
<tr>
<td align="left">CONVERT(s USING cs)</td>
<td align="left">函数将字符串 s 的字符集变成 cs</td>
<td align="left"><code>SELECT CHARSET(&#39;ABC&#39;) -&gt;utf-8     SELECT CHARSET(CONVERT(&#39;ABC&#39; USING gbk)) -&gt;gbk</code></td>
</tr>
<tr>
<td align="left">CURRENT_USER()</td>
<td align="left">返回当前用户</td>
<td align="left"><code>SELECT CURRENT_USER(); -&gt; guest@%</code></td>
</tr>
<tr>
<td align="left">DATABASE()</td>
<td align="left">返回当前数据库名</td>
<td align="left"><code>SELECT DATABASE();    -&gt; runoob</code></td>
</tr>
<tr>
<td align="left">IF(expr,v1,v2)</td>
<td align="left">如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2。</td>
<td align="left"><code>SELECT IF(1 &gt; 0,&#39;正确&#39;,&#39;错误&#39;)     -&gt;正确</code></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/mysql/mysql-func-ifnull.html">IFNULL(v1,v2)</a></td>
<td align="left">如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。</td>
<td align="left"><code>SELECT IFNULL(null,&#39;Hello Word&#39;) -&gt;Hello Word</code></td>
</tr>
<tr>
<td align="left">ISNULL(expression)</td>
<td align="left">判断表达式是否为 NULL</td>
<td align="left"><code>SELECT ISNULL(NULL); -&gt;1</code></td>
</tr>
<tr>
<td align="left">LAST_INSERT_ID()</td>
<td align="left">返回最近生成的 AUTO_INCREMENT 值</td>
<td align="left"><code>SELECT LAST_INSERT_ID(); -&gt;6</code></td>
</tr>
<tr>
<td align="left">NULLIF(expr1, expr2)</td>
<td align="left">比较两个字符串，如果字符串 expr1 与 expr2 相等 返回 NULL，否则返回 expr1</td>
<td align="left"><code>SELECT NULLIF(25, 25); -&gt;</code></td>
</tr>
<tr>
<td align="left">SESSION_USER()</td>
<td align="left">返回当前用户</td>
<td align="left"><code>SELECT SESSION_USER(); -&gt; guest@%</code></td>
</tr>
<tr>
<td align="left">SYSTEM_USER()</td>
<td align="left">返回当前用户</td>
<td align="left"><code>SELECT SYSTEM_USER(); -&gt; guest@%</code></td>
</tr>
<tr>
<td align="left">USER()</td>
<td align="left">返回当前用户</td>
<td align="left"><code>SELECT USER(); -&gt; guest@%</code></td>
</tr>
<tr>
<td align="left">VERSION()</td>
<td align="left">返回数据库的版本号</td>
<td align="left"><code>SELECT VERSION() -&gt; 5.6.34</code></td>
</tr>
</tbody></table>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li><a href="https://www.coder.work/article/53004">mysql - MySQL将两列合并为一列</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/85856388">关于Left join，你可能不知道这些……</a></li>
<li><a href="https://www.cnblogs.com/qdhxhz/p/10897315.html">纪录一次left join一对多关系而引起的BUG</a></li>
<li><a href="https://www.cnblogs.com/geaozhang/p/6745147.html">MySQL最常用分组聚合函数</a></li>
<li><a href="https://www.bilibili.com/video/BV12b411K7Zu">mysql视频教程</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>用PHP写sqlbulider</title>
    <url>/sqlbulider-in-php/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PHPProject</span></span><br><span class="line"><span class="comment"> * SqlBuilder.php Created by usher.yue.</span></span><br><span class="line"><span class="comment"> * User: usher.yue</span></span><br><span class="line"><span class="comment"> * Date: 16/7/7</span></span><br><span class="line"><span class="comment"> * Time: 下午12:32</span></span><br><span class="line"><span class="comment"> * 心怀教育梦－烟台网格软件技术有限公司</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlBuilder</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sql结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$_sql</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$_select</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$_from</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$_where</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$_update</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$_insert</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$_join</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$_value</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$_limit</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$_set</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$_method</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$_order</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//执行方式</span></span><br><span class="line">    <span class="keyword">const</span> SQL_INSERT=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> SQL_UPDATE=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> SQL_SELECT=<span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * clear sql</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_select=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_from=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_where=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_update=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_insert=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_method=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_value=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_set=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_limit=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_order=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $fields</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params"><span class="variable">$fields</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;clear();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_method=SqlBuilder::SQL_SELECT ;</span><br><span class="line">        <span class="keyword">if</span>(is_array(<span class="variable">$fields</span>))&#123;</span><br><span class="line">            <span class="variable">$selectFields</span>=implode(<span class="string">&#x27; , &#x27;</span>,<span class="variable">$fields</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_select=(<span class="variable">$selectFields</span>==<span class="string">&quot;&quot;</span>)?<span class="string">&quot; * &quot;</span>:<span class="variable">$selectFields</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(is_string(<span class="variable">$fields</span>))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_select=<span class="variable">$fields</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $tables</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">from</span>(<span class="params"><span class="variable">$tables</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_array(<span class="variable">$tables</span>))&#123;</span><br><span class="line">            <span class="variable">$from</span>=implode(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$tables</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_from=<span class="string">&#x27; &#x27;</span> . <span class="variable">$from</span> .<span class="string">&#x27;  &#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(is_string(<span class="variable">$tables</span>))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_from=<span class="variable">$tables</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**配合表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $conditionExpr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">wheres</span>(<span class="params"><span class="variable">$conditionExpr</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//拼接expr</span></span><br><span class="line">        <span class="keyword">if</span>(array_key_exists(<span class="string">&#x27;expr&#x27;</span>,<span class="variable">$conditionExpr</span>))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_where.=<span class="variable">$conditionExpr</span>[<span class="string">&#x27;expr&#x27;</span>];</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$conditionExpr</span>[<span class="string">&#x27;expr&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$arrSetExpr</span>=[];</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$conditionExpr</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">            <span class="variable">$arrSetExpr</span>[]=<span class="string">&quot;<span class="subst">$k</span>=&#x27;<span class="subst">$v</span>&#x27;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$condition</span>=implode(<span class="string">&#x27; and &#x27;</span>,<span class="variable">$arrSetExpr</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_where=(<span class="variable">$condition</span>==<span class="string">&#x27;&#x27;</span>?<span class="keyword">$this</span>-&gt;_where:<span class="keyword">$this</span>-&gt;_where.<span class="string">&#x27; and &#x27;</span>.<span class="variable">$condition</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $conditon</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">where</span>(<span class="params"><span class="variable">$conditon</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_string(<span class="variable">$conditon</span>))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_where.=<span class="string">&quot; <span class="subst">$conditon</span>&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(is_array(<span class="variable">$conditon</span>))&#123;</span><br><span class="line">            <span class="variable">$arrCondition</span>=[];</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$conditon</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">                <span class="variable">$arrCondition</span>[]=<span class="string">&quot;<span class="subst">$k</span>=&#x27;<span class="subst">$v</span>&#x27;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$arrCondition</span>))&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;_where.=implode(<span class="string">&quot; and &quot;</span>,<span class="variable">$arrCondition</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $condition</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">on</span>(<span class="params"><span class="variable">$condition</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_string(<span class="variable">$condition</span>))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_join.=<span class="string">&quot; on <span class="subst">$condition</span> &quot;</span>;</span><br><span class="line">         &#125;<span class="keyword">else</span> <span class="keyword">if</span>(is_array(<span class="variable">$condition</span>))&#123;</span><br><span class="line">            <span class="variable">$arrCondition</span>=[];</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$condition</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">                <span class="variable">$arrCondition</span>[]=<span class="string">&quot;<span class="subst">$k</span>=&#x27;<span class="subst">$v</span>&#x27;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_join.=<span class="string">&quot; on &quot;</span>.implode(<span class="string">&quot; and &quot;</span>,<span class="variable">$arrCondition</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $tablename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $join_type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">join</span>(<span class="params"><span class="variable">$tablename</span>,<span class="variable">$join_type</span>=<span class="string">&#x27;join&#x27;</span></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">$this</span>-&gt;_join.=<span class="string">&quot; <span class="subst">$join_type</span> <span class="subst">$tablename</span> &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">in</span>(<span class="params"><span class="variable">$arr</span>=<span class="string">&quot;&quot;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_array(<span class="variable">$arr</span>))&#123;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> &amp;<span class="variable">$field</span>)&#123;</span><br><span class="line">                 <span class="variable">$field</span>=<span class="string">&#x27;\&#x27;&#x27;</span>.<span class="variable">$field</span>.<span class="string">&#x27;\&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$ins</span>=<span class="string">&#x27; in (&#x27;</span> .implode(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$arr</span>).<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_where.=<span class="string">&quot;  <span class="subst">$ins</span>&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(is_string(<span class="variable">$arr</span>))&#123;</span><br><span class="line">             <span class="keyword">$this</span>-&gt;_where.=<span class="string">&quot; in(<span class="subst">$arr</span>)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持关联数组和字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $field</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span>  <span class="title">and_</span>(<span class="params"><span class="variable">$field</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_string(<span class="variable">$field</span>))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_where.=<span class="string">&quot; and <span class="subst">$field</span>&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(is_array(<span class="variable">$field</span>))&#123;</span><br><span class="line">            <span class="variable">$arrCondition</span>=[];</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$field</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">               <span class="variable">$arrCondition</span>[]=<span class="string">&quot;<span class="subst">$k</span>=&#x27;<span class="subst">$v</span>&#x27;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$arrCondition</span>))&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;_where.=<span class="string">&quot; and &quot;</span>.implode(<span class="string">&quot; and &quot;</span>,<span class="variable">$arrCondition</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">$this</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $condition</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onOr</span>(<span class="params"><span class="variable">$condition</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_join.=<span class="string">&quot; or <span class="subst">$condition</span> &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $tables</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"><span class="variable">$tables</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;clear();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_method=SqlBuilder::SQL_UPDATE ;</span><br><span class="line">        <span class="keyword">if</span>(is_array(<span class="variable">$tables</span>))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_update=implode(<span class="string">&quot;,&quot;</span>,<span class="variable">$tables</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(is_string(<span class="variable">$tables</span>))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_update=<span class="string">&quot; <span class="subst">$tables</span> &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $conditionExpr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">set</span>(<span class="params"><span class="variable">$conditionExpr</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//拼接expr</span></span><br><span class="line">        <span class="keyword">if</span>(is_array(<span class="variable">$conditionExpr</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(array_key_exists(<span class="string">&#x27;expr&#x27;</span>,<span class="variable">$conditionExpr</span>))&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;_set.=<span class="variable">$conditionExpr</span>[<span class="string">&#x27;expr&#x27;</span>];</span><br><span class="line">                <span class="keyword">unset</span>(<span class="variable">$conditionExpr</span>[<span class="string">&#x27;expr&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="variable">$arrSetExpr</span>=[];</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$conditionExpr</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">                <span class="variable">$arrSetExpr</span>[]=<span class="string">&quot;<span class="subst">$k</span>=&#x27;<span class="subst">$v</span>&#x27;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$condition</span>=implode(<span class="string">&#x27; , &#x27;</span>,<span class="variable">$arrSetExpr</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_set=(<span class="keyword">$this</span>-&gt;_set==<span class="string">&#x27;&#x27;</span>?<span class="variable">$condition</span>:<span class="keyword">$this</span>-&gt;_set.<span class="string">&#x27; , &#x27;</span>.<span class="variable">$condition</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(is_string(<span class="variable">$conditionExpr</span>))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_set.=<span class="string">&quot; <span class="subst">$conditionExpr</span> &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** get sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sql</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$sqlCmd</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span>(<span class="keyword">$this</span>-&gt;_method)&#123;</span><br><span class="line">            <span class="keyword">case</span> SqlBuilder::SQL_SELECT:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$sqlCmd</span>=<span class="string">&quot;select <span class="subst">&#123;$this-&gt;_select&#125;</span> from <span class="subst">&#123;$this-&gt;_from&#125;</span>&quot;</span> ;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;_join)&#123;</span><br><span class="line">                    <span class="variable">$sqlCmd</span>.=<span class="keyword">$this</span>-&gt;_join;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;_where)&#123;</span><br><span class="line">                    <span class="variable">$sqlCmd</span>.=<span class="string">&#x27; where &#x27;</span>.<span class="keyword">$this</span>-&gt;_where;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;_limit)&#123;</span><br><span class="line">                    <span class="variable">$sqlCmd</span>.=<span class="keyword">$this</span>-&gt;_limit;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> SqlBuilder::SQL_UPDATE:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$sqlCmd</span>=<span class="string">&quot;update <span class="subst">&#123;$this-&gt;_update &#125;</span> set <span class="subst">&#123;$this-&gt;_set&#125;</span>&quot;</span> ;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;_where)&#123;</span><br><span class="line">                    <span class="variable">$sqlCmd</span>.=<span class="string">&#x27; where &#x27;</span>.<span class="keyword">$this</span>-&gt;_where;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> SqlBuilder::SQL_INSERT:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$sqlCmd</span>=<span class="string">&quot;insert into  <span class="subst">&#123;$this-&gt;_insert &#125;</span> VALUES  <span class="subst">&#123;$this-&gt;_value&#125;</span>&quot;</span> ;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$sqlCmd</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $fields</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $values</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">values</span>(<span class="params"><span class="variable">$values</span>=[[]]</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="variable">$valueList</span>=[];</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$values</span> <span class="keyword">as</span> &amp;<span class="variable">$value</span>)&#123;</span><br><span class="line">             <span class="keyword">foreach</span>(<span class="variable">$value</span> <span class="keyword">as</span> &amp;<span class="variable">$v</span>)&#123;</span><br><span class="line">                    <span class="variable">$v</span>=<span class="string">&quot;&#x27;<span class="subst">$v</span>&#x27;&quot;</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="variable">$valueList</span>[]=<span class="string">&quot;(&quot;</span>.implode(<span class="string">&quot;,&quot;</span>,<span class="variable">$value</span>).<span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_value=implode(<span class="string">&quot;,&quot;</span>,<span class="variable">$valueList</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $table</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $fields</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insertinto</span>(<span class="params"><span class="variable">$table</span>,<span class="variable">$fields</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;clear();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_method=SqlBuilder::SQL_INSERT;</span><br><span class="line">        <span class="keyword">if</span>(is_array(<span class="variable">$table</span>))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_insert=implode(<span class="string">&quot;,&quot;</span>,<span class="variable">$table</span>) ;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(is_string(<span class="variable">$table</span>))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_insert=<span class="variable">$table</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(is_array(<span class="variable">$fields</span>))&#123;</span><br><span class="line">            <span class="variable">$insertFields</span>=implode(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$fields</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$insertFields</span>!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;_insert.= <span class="string">&quot; (<span class="subst">$insertFields</span>)  &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(is_string(<span class="variable">$fields</span>))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_insert.= <span class="string">&quot; (<span class="subst">$fields</span>)  &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $num</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">limit</span>(<span class="params"><span class="variable">$num</span>,<span class="variable">$offset</span>=<span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$offset</span>&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_limit=<span class="string">&quot; limit <span class="subst">$num</span>&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;_limit=<span class="string">&quot; limit <span class="subst">$num</span>,<span class="subst">$offset</span> &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $field</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">orderby</span>(<span class="params"><span class="variable">$field</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$order</span>=<span class="string">&#x27;desc&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_array(<span class="variable">$field</span>))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_order=<span class="string">&quot; &quot;</span>.implode(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$field</span>).<span class="string">&quot; <span class="subst">$order</span>&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_order=<span class="string">&quot; <span class="subst">$field</span> <span class="subst">$order</span>&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//$builder=new SqlBuilder() ;</span></span><br><span class="line"><span class="comment">//$builder-&gt;select([&#x27;a&#x27;,&#x27;b&#x27;])-&gt;from([&#x27;aa as &#x27;,&#x27;bb vd&#x27;])-&gt;join(&quot;t1&quot;)-&gt;on(&quot;a=5&quot;)-&gt;onAnd(&quot;c=1&quot;)-&gt;wheres([&#x27;ax&#x27;=&gt;1,&#x27;expr&#x27;=&gt;&quot;cx&gt;=1&quot;])-&gt;limit(100);</span></span><br><span class="line"><span class="comment">//var_dump($builder-&gt;sql());</span></span><br><span class="line"><span class="comment">//$builder-&gt;update([&#x27;a&#x27;,&#x27;b&#x27;])-&gt;set([&#x27;a&#x27;=&gt;1,&#x27;ss&#x27;=&gt;2])-&gt;where(&quot;a&gt;1&quot;)-&gt;whereAnd(&quot;b&lt;1&quot;);</span></span><br><span class="line"><span class="comment">//var_dump($builder-&gt;sql());</span></span><br><span class="line"><span class="comment">//$builder-&gt;insertinto(&quot;table_1&quot;,[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;])-&gt;values([[&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;,&quot;ddd&quot;],[&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;,&quot;ddd&quot;],[&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;,&quot;ddd&quot;]]);</span></span><br><span class="line"><span class="comment">//var_dump($builder-&gt;sql());</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//完整测试</span></span><br><span class="line"><span class="comment">//echo $builder-&gt;select(&quot;*&quot;)-&gt;from(&quot;a,b as 3&quot;)-&gt;join(&quot;b&quot;)-&gt;on([&#x27;ccsxx&#x27;=&gt;34566,&#x27;dss&#x27;=&gt;&quot;3&quot;])-&gt;where([&quot;a4&quot;=&gt;12,&quot;2b&quot;=&gt;32,&quot;c23&quot;=&gt;&quot;42&quot;])-&gt;and_(&quot;b=2&quot;)-&gt;and_([&quot;a&quot;=&gt;1,&quot;b&quot;=&gt;2,&quot;c&quot;=&gt;&quot;4&quot;])-&gt;and_(&quot;s&quot;)-&gt;in([1,2,3,43,2,77])-&gt;orderby(&quot;cc desc&quot;)-&gt;limit(1,2)-&gt;sql();</span></span><br><span class="line"><span class="comment">//echo $builder-&gt;insertinto(&quot;a&quot;,&quot;c,d,s,d,e&quot;)-&gt;values([[1,2,3,4,5],[2,3,4,5,6],[32,43,43,43]])-&gt;sql();</span></span><br><span class="line"><span class="comment">//echo $builder-&gt;update(&quot;a&quot;)-&gt;set(&quot;a=1,b=4,c=c+1&quot;)-&gt;where(&quot;c&gt;c+1&quot;)-&gt;and_(&quot;c&lt;6&quot;)-&gt;sql();</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/jkrasnay/sqlbuilder">https://github.com/jkrasnay/sqlbuilder</a></li>
<li><a href="https://blog.csdn.net/yue7603835/article/details/51872409">php实现简单的SQL Builder</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>解决【Please make sure you have the correct access rights and the repository exists.】</title>
    <url>/ssh-connect-to-github/</url>
    <content><![CDATA[<h3 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1 发现问题"></a>1 发现问题</h3><blockquote>
<p>问题：Please make sure you have the correct access rights and the repository exists.<br>当你使用git工具向GitHub提交代码时，遇到了上述问题，那么没关系，该问题已经解决<br>问题的关键就是没有在GitHub配置ssh key</p>
</blockquote>
<h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>进入到你的GitHub账户的setting中，然后找到ssh key选项，添加自己的公钥即可。<br><strong>第一步：</strong><br>产生自己的公钥,执行如下命令：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your github account&quot;</span><br><span class="line">#比如：我的GitHub账户是123456@qq.com，那么命令如下：</span><br><span class="line">ssh-keygen -t rsa -C &quot;123456@qq.com&quot;</span><br></pre></td></tr></table></figure>
<p>一路默认即可，然后在cd到存放公钥的文件夹里面，使用cat命令查看，然后将其复制到GitHub的setting中：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191124130021.png" alt="ssh key">  </p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Diffience between Stack and Heap Memery in java ?</title>
    <url>/stack-and-heap-java/</url>
    <content><![CDATA[<p><a href="https://www.tutorialspoint.com/difference-between-stack-and-heap-memory-in-java">reference</a></p>
<table>
<thead>
<tr>
<th>Sr. No.</th>
<th align="center">Key</th>
<th align="center">Stack</th>
<th align="center">Heap Memory</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td align="center">Basic</td>
<td align="center">Stack memory is used to store items which have a very short life like local variables, a reference variable of objects</td>
<td align="center">Heap memory is allocated to store objects and JRE classes.</td>
</tr>
<tr>
<td>2</td>
<td align="center">Ordering</td>
<td align="center">The stack is always reserved in a LIFO (last in first out) order</td>
<td align="center">Heap memory is dynamic allocation there is no fixed pattern for allocating and deallocating blocks in memory</td>
</tr>
<tr>
<td>3</td>
<td align="center">Size</td>
<td align="center">We can increase stack memory size by using JVM parameter -XSS</td>
<td align="center">We can increase or decrease heap memory size by using JVM option -Xms and -Xmx</td>
</tr>
<tr>
<td>4</td>
<td align="center">Visibility</td>
<td align="center">Variables are visible to only to owner thread</td>
<td align="center">It is visible to all threads</td>
</tr>
<tr>
<td>5</td>
<td align="center">Exception</td>
<td align="center">JVM will throw java.lang.StackOverFlowError</td>
<td align="center">JVM will throw java.lang.OutOfMemoryError</td>
</tr>
</tbody></table>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
      </tags>
  </entry>
  <entry>
    <title>一台电脑如何管理多个ssh key</title>
    <url>/ssh-for-mutli-pc/</url>
    <content><![CDATA[<p>需求：一台电脑上（Mac os）管理多个ssh key，可以任意切换，达到多用户（账号）使用不同ssh提交代码。</p>
<p>以下利用<code>bitbucket</code>和<code>github</code>账号来做例子。</p>
<h1 id="一、生成ssh-key"><a href="#一、生成ssh-key" class="headerlink" title="一、生成ssh key"></a>一、生成ssh key</h1><h2 id="1-1-生成密钥（必须）"><a href="#1-1-生成密钥（必须）" class="headerlink" title="1.1 生成密钥（必须）"></a>1.1 生成密钥（必须）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@yourcompany.com&quot;</span><br></pre></td></tr></table></figure>

<p>注解：</p>
<ul>
<li><code>密钥类型</code>可以用 <code>-t 选项</code>指定。如果没有指定则默认生成用于<code>SSH-2</code>的RSA密钥。这里使用的是<code>rsa</code>。</li>
<li>同时在密钥中有一个<code>注释字段</code>，用<code>-C</code>来指定所指定的注释，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。所以在这里输入<code>自己的邮箱或者其他都行</code>。</li>
<li>若一路回车（密码可以不写），这样只会在<code>~/.ssh/ 目录</code>下生成 <code>id_rsa 和 id_rsa.pub 两个文件</code>。</li>
</ul>
<h2 id="1-2-设置路径-（可选）"><a href="#1-2-设置路径-（可选）" class="headerlink" title="1.2 设置路径 （可选）"></a>1.2 设置路径 （可选）</h2><p>为了区分，我们在第一个回车后设置路径，进行第二步</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id_rsa_bitbucket</span><br><span class="line">id_rsa_bitbucket.pub</span><br><span class="line"></span><br><span class="line">id_rsa_github</span><br><span class="line">id_rsa_github.pub</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1237064-20181225215653687-1827872582.png" alt="img"></p>
<h2 id="1-3-指定密语字符串（可选）"><a href="#1-3-指定密语字符串（可选）" class="headerlink" title="1.3 指定密语字符串（可选）"></a>1.3 指定密语字符串（可选）</h2><ul>
<li>输入完毕后程序同时要求输入<code>一个密语字符串(passphrase)</code>，空表示没有密语。接着会让输入<code>2次口令(password)</code>，空表示没有口令。3次回车即可完成当前步骤，此时<code>～/.ssh</code>目录下文件已经生成好了。</li>
<li>建议输一个，安全一点，当然不输也行，应该不会有人闲的无聊冒充你去修改你的代码</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1237064-20181225221627124-1133333171.png" alt="img"><br>完了之后，大概是这样：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1237064-20181225221642968-594704204.png" alt="img"></p>
<p>到此为止，你本地的密钥对就生成了。</p>
<h1 id="二、设置ssh-key的代理"><a href="#二、设置ssh-key的代理" class="headerlink" title="二、设置ssh key的代理"></a>二、设置ssh key的代理</h1><h2 id="2-1、-首先查看代理"><a href="#2-1、-首先查看代理" class="headerlink" title="2.1、 首先查看代理"></a>2.1、 首先查看代理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure>

<p>若提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Could not open a connection to your authentication agent.</span><br></pre></td></tr></table></figure>

<p>则系统代理里没有任何key，执行如下操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec ssh-agent bash</span><br></pre></td></tr></table></figure>

<p>若系统已经有ssh-key 代理 ,可以删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-add -D</span><br></pre></td></tr></table></figure>

<h2 id="2-2、-添加私钥"><a href="#2-2、-添加私钥" class="headerlink" title="2.2、 添加私钥"></a>2.2、 添加私钥</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_bitbucket</span><br><span class="line">ssh-add ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure>

<h1 id="三、添加公钥"><a href="#三、添加公钥" class="headerlink" title="三、添加公钥"></a>三、添加公钥</h1><p>在对应的github的ssh管理页面，添加对应的公钥（.pub 文件内容），保存到代码管理服务器。</p>
<h1 id="四、添加和编辑配置文件config"><a href="#四、添加和编辑配置文件config" class="headerlink" title="四、添加和编辑配置文件config"></a>四、添加和编辑配置文件config</h1><p>在 <code>~/.ssh 目录</code>下新建一个<code>config文件</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch ~/.ssh/config</span><br></pre></td></tr></table></figure>

<p>添加内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># git@bitbucket.org</span><br><span class="line">Host bitbucket.org</span><br><span class="line">HostName bitbucket.org</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github/id_rsa_bitbucket</span><br><span class="line"></span><br><span class="line"># git@github.com</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure>

<p>当然也可以利用nano命令来创建和编辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano ~/.ssh/config</span><br></pre></td></tr></table></figure>

<p>如此，ssh就会根据登陆的不同域，来读取对应的私钥文件</p>
<h1 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h1><p>ssh -T HostName</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>若出现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi XXX! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>则表示成功。</p>
<p>若出现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">permission denied (publickey)</span><br></pre></td></tr></table></figure>

<p>请检查github的ssh管理里添加的公钥是否正确。</p>
<h1 id="六、为不同项目设置不同的git账号"><a href="#六、为不同项目设置不同的git账号" class="headerlink" title="六、为不同项目设置不同的git账号"></a>六、为不同项目设置不同的git账号</h1><p>设置了全局的git用户，所有的git项目都会使用这个用户名和邮箱，如下设置的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &#x27;Username&#x27;</span><br><span class="line">git config --global user.email &#x27;UserEmail&#x27;</span><br></pre></td></tr></table></figure>

<p>如果你在另一个项目中想使用另一个git账号，就要为当前项目设置指定的账号和邮箱，在当前项目中设置如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config user.name &#x27;AnotherName&#x27;</span><br><span class="line">git config user.email &#x27;AnotherEmail&#x27;</span><br></pre></td></tr></table></figure>

<p>使用<code>git config --list</code> 就可以看到全局的git配置和当前项目的git配置了</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.cnblogs.com/qiqi715/p/10176836.html">https://www.cnblogs.com/qiqi715/p/10176836.html</a></li>
</ul>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>C++中栈和堆的区别？</title>
    <url>/stack-and-heap/</url>
    <content><![CDATA[<p>在计算机领域，堆栈是一个不容忽视的概念，我们编写的 C 语言程序基本上都要用到。但对于很多的初学着来说，堆栈是一个很模糊的概念。<br>堆栈：一种数据结构、一个在程序运行时用于存放的地方，这可能是很多初学者的认识，因为我曾经就是这么想的和汇编语言中的堆栈一词混为一谈。我身边的一些编程的朋友以及在网上看帖遇到的朋友中有好多也说不清堆栈，所以我想有必要给大家分享一下我对堆栈的看法，有说的不对的地方请朋友们不吝赐教，这对于大家学习会有很大帮助。</p>
<h2 id="1-数据结构的栈和堆"><a href="#1-数据结构的栈和堆" class="headerlink" title="1 数据结构的栈和堆"></a>1 数据结构的栈和堆</h2><p>首先在数据结构上要知道堆栈，尽管我们这么称呼它，但实际上堆栈是两种数据结构：堆和栈。<br>堆和栈都是一种数据项按序排列的数据结构。</p>
<h2 id="2-栈就像装数据的桶或箱子"><a href="#2-栈就像装数据的桶或箱子" class="headerlink" title="2 栈就像装数据的桶或箱子"></a>2 栈就像装数据的桶或箱子</h2><p>我们先从大家比较熟悉的栈说起吧，它是一种具有后进先出性质的数据结构，也就是说后存放的先取，先存放的后取。<br>这就如同我们要取出放在箱子里面底下的东西（放入的比较早的物体），我们首先要移开压在它上面的物体（放入的比较晚的物体）。</p>
<h2 id="3-堆像一棵倒过来的树"><a href="#3-堆像一棵倒过来的树" class="headerlink" title="3 堆像一棵倒过来的树"></a>3 堆像一棵倒过来的树</h2><p>而堆就不同了，堆是一种经过排序的树形数据结构，每个结点都有一个值。<br>通常我们所说的堆的数据结构，是指二叉堆。<br>堆的特点是根结点的值最小（或最大），且根结点的两个子树也是一个堆。<br>由于堆的这个特性，常用来实现优先队列，堆的存取是随意，这就如同我们在图书馆的书架上取书，虽然书的摆放是有顺序的，但是我们想取任意一本时不必像栈一样，先取出前面所有的书，书架这种机制不同于箱子，我们可以直接取出我们想要的书。</p>
<h2 id="4-内存分配中的栈和堆"><a href="#4-内存分配中的栈和堆" class="headerlink" title="4 内存分配中的栈和堆"></a>4 内存分配中的栈和堆</h2><p>然而我要说的重点并不在这，我要说的堆和栈并不是数据结构的堆和栈，之所以要说数据结构的堆和栈是为了和后面我要说的堆区和栈区区别开来，请大家一定要注意。</p>
<p>下面就说说 C 语言程序内存分配中的堆和栈，这里有必要把内存分配也提一下，大家不要嫌我啰嗦，一般情况下程序存放在 Rom（只读内存，比如硬盘）或 Flash 中，运行时需要拷到 RAM（随机存储器 RAM）中执行，RAM 会分别存储不同的信息，如下图所示：</p>
<p>内存中的栈区处于相对较高的地址以地址的增长方向为上的话，栈地址是向下增长的。<br>栈中分配局部变量空间，堆区是向上增长的用于分配程序员申请的内存空间。另外还有静态区是分配静态变量，全局变量空间的；只读区是分配常量和程序代码空间的；以及其他一些分区。</p>
<p><strong>来看一个网上很流行的经典例子：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>; <span class="comment">//全局初始化区 </span></span><br><span class="line"><span class="keyword">char</span> *p1; <span class="comment">//全局未初始化区 </span></span><br><span class="line"><span class="built_in">main</span>() </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">int</span> b; <span class="comment">//栈 </span></span><br><span class="line">    <span class="keyword">char</span> s[] = <span class="string">&quot;abc&quot;</span>; <span class="comment">//栈 </span></span><br><span class="line">    <span class="keyword">char</span> *p2; <span class="comment">//栈 </span></span><br><span class="line">    <span class="keyword">char</span> *p3 = <span class="string">&quot;123456&quot;</span>; <span class="comment">//123456\0在常量区，p3在栈上。 </span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> c =<span class="number">0</span>； <span class="comment">//全局（静态）初始化区 </span></span><br><span class="line">    p1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span>); <span class="comment">//堆 </span></span><br><span class="line">    p2 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);  <span class="comment">//堆 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="4-1-申请方式和回收方式不同"><a href="#4-1-申请方式和回收方式不同" class="headerlink" title="4.1 申请方式和回收方式不同"></a>4.1 申请方式和回收方式不同</h3><p>不知道你是否有点明白了。</p>
<p>堆和栈的第一个区别就是申请方式不同：栈（英文名称是 stack）是系统自动分配空间的，例如我们定义一个 char a；系统会自动在栈上为其开辟空间。而堆（英文名称是 heap）则是程序员根据需要自己申请的空间，例如 malloc（10）；开辟十个字节的空间。</p>
<p>由于栈上的空间是自动分配自动回收的，所以栈上的数据的生存周期只是在函数的运行过程中，运行后就释放掉，不可以再访问。而堆上的数据只要程序员不释放空间，就一直可以访问到，不过缺点是一旦忘记释放会造成内存泄露。还有其他的一些区别我认为网上的朋友总结的不错这里转述一下：</p>
<h3 id="4-2-申请后系统的响应"><a href="#4-2-申请后系统的响应" class="headerlink" title="4.2 申请后系统的响应"></a>4.2 申请后系统的响应</h3><p>栈：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。<br>堆：首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，另外，对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样，代码中的 delete 语句才能正确的释放本内存空间。另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。<br>也就是说堆会在申请后还要做一些后续的工作这就会引出申请效率的问题。</p>
<h3 id="4-3-申请效率的比较"><a href="#4-3-申请效率的比较" class="headerlink" title="4.3 申请效率的比较"></a>4.3 申请效率的比较</h3><p>根据第 0 点和第 1 点可知。<br>栈：由系统自动分配，速度较快。但程序员是无法控制的。<br>堆：是由 new 分配的内存，一般速度比较慢，而且容易产生内存碎片，不过用起来最方便。</p>
<h3 id="4-4-申请大小的限制"><a href="#4-4-申请大小的限制" class="headerlink" title="4.4 申请大小的限制"></a>4.4 申请大小的限制</h3><p>栈：在 Windows 下，栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在 WINDOWS 下，栈的大小是 2M（也有的说是 1M，总之是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示 overflow。因此，能从栈获得的空间较小。<br>堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</p>
<h3 id="4-5-堆和栈中的存储内容"><a href="#4-5-堆和栈中的存储内容" class="headerlink" title="4.5 堆和栈中的存储内容"></a>4.5 堆和栈中的存储内容</h3><p>由于栈的大小有限，所以用子函数还是有物理意义的，而不仅仅是逻辑意义。<br>栈： 在函数调用时，第一个进栈的是主函数中函数调用后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的 C 编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。<br>当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。<br>堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。</p>
<p>4.6 存取效率的比较</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s1[] = <span class="string">&quot;aaaaaaaaaaaaaaa&quot;</span>; </span><br><span class="line"><span class="keyword">char</span> *s2 = <span class="string">&quot;bbbbbbbbbbbbbbbbb&quot;</span>; </span><br></pre></td></tr></table></figure>

<p><code>aaaaaaaaaaa</code> 是在运行时刻赋值的；放在栈中。<br>而 <code>bbbbbbbbbbb</code> 是在编译时就确定的；放在堆中。<br>但是，在以后的存取中，在栈上的数组比指针所指向的字符串 (例如堆) 快。<br>比如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="keyword">char</span> a = <span class="number">1</span>; </span><br><span class="line">  <span class="keyword">char</span> c[] = <span class="string">&quot;1234567890&quot;</span>; </span><br><span class="line">  <span class="keyword">char</span> *p =<span class="string">&quot;1234567890&quot;</span>; </span><br><span class="line">  a = c[<span class="number">1</span>]; </span><br><span class="line">  a = p[<span class="number">1</span>]; </span><br><span class="line">  <span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应的汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10: a = c[1];</span><br><span class="line">00401067 8A 4D F1 mov cl,byte ptr [ebp-0Fh]</span><br><span class="line">0040106A 88 4D FC mov byte ptr [ebp-4],cl</span><br><span class="line">11: a = p[1];</span><br><span class="line">0040106D 8B 55 EC mov edx,dword ptr [ebp-14h]</span><br><span class="line">00401070 8A 42 01 mov al,byte ptr [edx+1]</span><br><span class="line">00401073 88 45 FC mov byte ptr [ebp-4],al</span><br></pre></td></tr></table></figure>

<h2 id="5-关于堆和栈区别的比喻"><a href="#5-关于堆和栈区别的比喻" class="headerlink" title="5 关于堆和栈区别的比喻"></a>5 关于堆和栈区别的比喻</h2><p>堆和栈的区别可以引用一位前辈的比喻来看出：</p>
<p>使用栈就象我们去饭馆里吃饭，只管点菜（发出申请）、付钱、和吃（使用），吃饱了就走，不必理会切菜、洗菜等准备工作和洗碗、刷锅等扫尾工作，他的好处是快捷，但是自由度小。</p>
<p>使用堆就象是自己动手做喜欢吃的菜肴，比较麻烦，但是比较符合自己的口味，而且自由度大。比喻很形象，说的很通俗易懂，不知道你是否有点收获。</p>
<p><a href="https://learnku.com/articles/18841">原文</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>java interview</tag>
        <tag>program language</tag>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>steam下载在国内下载游戏很慢，解决办法</title>
    <url>/steam-speed/</url>
    <content><![CDATA[<p><a href="https://jingyan.baidu.com/article/359911f5ad104057ff030667.html">参考</a></p>
<h2 id="1-解决办法"><a href="#1-解决办法" class="headerlink" title="1 解决办法"></a>1 解决办法</h2><ol>
<li><p>原因：steam下载速度慢是因为当前网络与下载服务器之间出现了波动，一般情况下修改下载节点即可解决问题，但是有些非中国区的游戏，就必须通过修改hosts文件来提高下载速度。</p>
</li>
<li><p>如果我们游戏下载速度慢，那么大多数是因为你所在的地方节点出现问题，我们可以进入设置菜单进行设置；首先我们打开设置，然后选择下载。</p>
</li>
<li><p>我们在下载时区中选择以北京节点，一般国内的游戏最好还是选择北京、成都，如果我们下载国外的游戏，可以选择日本或者韩国的节点进行下载；</p>
</li>
<li><p>那么我们更换节点依然无法解决问题怎么办呢？我们打开系统菜单，输入（用管理员打开）CMD呼出命令符，然后在命令符中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">notepad &quot;%systemroot%/system32/drivers/etc/hosts&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开hosts文件后，我们在hosts文件中，输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">61.147.228.241 cdn.mileweb.cs.steampowered.com.8686c.com</span><br></pre></td></tr></table></figure>

<p>​    然后进行保存。</p>
</li>
<li><p>这时我们重启steam，然后继续下载游戏，你会发现游戏的下载速度已经达到了峰值，这样就不会出现下载速度慢的问题了。</p>
</li>
</ol>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>game</tag>
        <tag>steam</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime教程</title>
    <url>/sublime-tutorials/</url>
    <content><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/sublime_text_4.png" alt=""></p>
<p>sublime更新两点：</p>
<ul>
<li>许可证更改：Sublime Text License 密钥（注册码）不再与独立的主要版本绑定，而是对购买后 3 年内的所有更新均有效，不过使用更新的版本需要升级 License。</li>
<li>支持多 tab 选项卡：方便分割视图，支持通过界面或内置命令行使用。</li>
<li>支持 Apple Silicon 和 Linux ARM64：Sublime Text for Mac 包含对 Apple Silicon 处理器的原生支持，Linux ARM64 builds 在树莓派等设备中可用。</li>
<li>全新的 UI 界面</li>
<li>语境感知自动补全：该版本重写了自动补全引擎，使之能够基于项目中的已有代码提供智能补全。</li>
<li>支持 TypeScript、JSX 和 TSX</li>
<li>语法定义升级：语法高亮引擎全新升级，能够处理非确定性语法、多行语句、lazy embed 和语法继承。此外，内存使用降低，加载速度更快。</li>
<li>GPU 渲染：Sublime Text 4 稳定版在渲染界面时，能够在 Linux、Mac 和 Windows 系统中利用 GPU，从而带来流畅的 UI 界面，分辨率最高可达 8K，且消耗的能源更少。</li>
<li>Python API 升级：Sublime Text 新版本 API 升级至 Python 3.8，同时具备对 Sublime Text 3 软件包的向后兼容性。Python API 新增了许多特性，如允许 LSP 等插件更好地运行。</li>
<li>兼容性：Sublime Text 4 完全兼容 Sublime Text 3，可以自动接收旧版本的会话和配置。Sublime Text 还支持 3、4 版本的分开运行。</li>
</ul>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h2><p>可以直接点击<a href="https://www.sublimetext.com/download">下载sublime</a>进行下载。以下是sublime的<a href="https://www.sublimetext.com/">官网</a>：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210905162217.png" alt=""></p>
<h2 id="3-汉化"><a href="#3-汉化" class="headerlink" title="3 汉化"></a>3 汉化</h2><p>菜单点击P<strong>references – Package Control，选择 Install Package</strong></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210905162403.png" alt=""></p>
<p>输入 ChineseLocalzations 可见中文包！选中即可安装！</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/2ce6891e69b7d72a.png" alt=""></p>
<h2 id="4-破解"><a href="#4-破解" class="headerlink" title="4 破解"></a>4 破解</h2><p><strong>不太推荐使用网上的破解工具~ 以下方法亲测可行！</strong></p>
<p>1）在软件的安装目录找到 <code>sublime_text.exe</code> 文件。</p>
<p>2）这里推荐使用： <a href="https://51.ruyo.net/hexed">hexed</a> 在线十六进制编辑器，打开 <code>sublime_text.exe</code> 文件。</p>
<p>3）然后查找以下字节并且替换（不同的软件版本替换的内容略有不同，一定要看好软件版本）。</p>
<p><strong>2021年7月14日 最新更新！</strong></p>
<blockquote>
<p><strong>软件版本 4113 依此替换下方 2 组字节！（sublime 4113版本下载地址：<a href="https://download.sublimetext.com/sublime_text_build_4113_x64_setup.exe">Windows</a>|<a href="https://download.sublimetext.com/sublime_text_build_4113_mac.zip">mac</a>）</strong><br><code>C3 C6 01 00 C3</code> 替换为 <code>C3 C6 01 01 C3</code><br><code>51 31 C0 88 05</code> 替换为 <code>51 b0 01 88 05</code></p>
</blockquote>
<blockquote>
<p><strong>软件版本：4107 替换下方 1 组字节！</strong></p>
<p>80 38 00 74 2C 49<code>替换为</code>FE 00 90 74 2C 49</p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210905162817.png" alt=""></p>
<p>然后将选择【另存为】将修改后的文件放回原处，即可。</p>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article2/微信截图_20210905162927.png"  />

<h2 id="5-正则搜索"><a href="#5-正则搜索" class="headerlink" title="5 正则搜索"></a>5 正则搜索</h2><p>这里以这段文字为例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一般，container是可运行的，我们启动一个container之后，这个container里面就是我们的linux环境。</span><br><span class="line"></span><br><span class="line">懂得了上面的意思，你就明白了我们要做的事情很简单:找一个合适的image，这个image里面应该包含一切开发时候所需要的东西， 然后启动它，我们就可以在这个container环境上工作了。当然这个时候container应该可以跟宿主共享文件。并且可以在本局域网内可以被访问到。</span><br><span class="line"></span><br><span class="line">在继续搭建我们的开发环境之前，我们还是要先学一点docker的命令和概念的。</span><br></pre></td></tr></table></figure>

<p><strong>我需要将其中的英文单词都用`抱起来，因为在markdown中可以高亮显示？</strong></p>
<p>这个需求看起来很简单，如果手动修改，那当然很麻烦，因为都是一些重复的工作，但是如何如何使用<code>python</code>等语言来写一个脚本做这个事情，也不是不可以，就是有点麻烦，经过一番寻找，发现<code>sublime</code>就有这个功能——<strong>正则搜索</strong>：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210905163745.png" alt=""></p>
<p>注意：</p>
<ol>
<li>如果想使用原值进行替换操作，需要在正则表达式中添加<code>()</code></li>
<li><code>$n</code>可以表示第<code>n</code>个变量，<code>$1</code>表示第1个变量，这里的第<code>n</code>个变量的定义是：用括号括起来的部分<ol>
<li>比如：<code>([a-zA-Z]+)(0-9)+</code>，则使用<code>$1</code>能匹配到前面的全是英文单词的部分，<code>$2</code>能够匹配到后面全是数字的部分</li>
</ol>
</li>
</ol>
<h2 id="6-正则表达式语法"><a href="#6-正则表达式语法" class="headerlink" title="6 正则表达式语法"></a>6 正则表达式语法</h2><h3 id="（1）普通字符"><a href="#（1）普通字符" class="headerlink" title="（1）普通字符"></a>（1）普通字符</h3><table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">[ABC]</td>
<td align="left">匹配 <strong>[…]</strong> 中的所有字符，例如 <strong>[aeiou]</strong> 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。</td>
</tr>
<tr>
<td align="left">[^ABC]</td>
<td align="left">匹配除了 <strong>[…]</strong> 中字符的所有字符，例如 <strong>[^aeiou]</strong> 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。</td>
</tr>
<tr>
<td align="left">[A-Z]</td>
<td align="left">[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配除换行符（\n、\r）之外的任何单个字符，相等于 [^\n\r]。</td>
</tr>
<tr>
<td align="left">[\s\S]</td>
<td align="left">匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行。</td>
</tr>
<tr>
<td align="left">\w</td>
<td align="left">匹配字母、数字、下划线。等价于 [A-Za-z0-9_]</td>
</tr>
</tbody></table>
<h3 id="（2）非打印字符"><a href="#（2）非打印字符" class="headerlink" title="（2）非打印字符"></a>（2）非打印字符</h3><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\cx</td>
<td align="left">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
</tr>
</tbody></table>
<h3 id="（3）特殊字符"><a href="#（3）特殊字符" class="headerlink" title="（3）特殊字符"></a>（3）特殊字符</h3><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 runoo\b 中的 ，简单的说就是表示任何字符串的意思。如果要查找字符串中的  符号，则需要对  进行转义，即在其前加一个 \，runo\ob 匹配字符串 runo\ob。</p>
<p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符\ 放在它们前面。下表列出了正则表达式中的特殊字符：</p>
<table>
<thead>
<tr>
<th align="left">特别字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$</td>
<td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td>
</tr>
<tr>
<td align="left">( )</td>
<td align="left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td>
</tr>
<tr>
<td align="left">[</td>
<td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 [。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>
</tr>
<tr>
<td align="left">\</td>
<td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td>
</tr>
<tr>
<td align="left">{</td>
<td align="left">标记限定符表达式的开始。要匹配 {，请使用 {。</td>
</tr>
<tr>
<td align="left">|</td>
<td align="left">指明两项之间的一个选择。要匹配 |，请使用 |。</td>
</tr>
</tbody></table>
<h3 id="（4）限定符"><a href="#（4）限定符" class="headerlink" title="（4）限定符"></a>（4）限定符</h3><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 <strong>*** 或 **+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p>
<p>正则表达式的限定符有：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td align="left">{n}</td>
<td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td align="left">{n,}</td>
<td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td align="left">{n,m}</td>
<td align="left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody></table>
<p>以下正则表达式匹配一个正整数，<strong>[1-9]</strong>设置第一个数字不是 0，<strong>[0-9]*</strong> 表示任意多个数字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/[1-9][0-9]*/</span><br></pre></td></tr></table></figure>

<h3 id="（5）定位符"><a href="#（5）定位符" class="headerlink" title="（5）定位符"></a>（5）定位符</h3><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p>
<p>定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\b</strong> 描述单词的前或后边界，<strong>\B</strong> 表示非单词边界。</p>
<p>正则表达式的定位符有：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">^</td>
<td align="left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">匹配一个单词边界，即字与空格间的位置。</td>
</tr>
<tr>
<td align="left">\B</td>
<td align="left">非单词边界匹配。</td>
</tr>
</tbody></table>
<p><strong>注意</strong>：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 <strong>^*</strong> 之类的表达式。</p>
<p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 <strong>^</strong> 字符。不要将 <strong>^</strong> 的这种用法与中括号表达式内的用法混淆。</p>
<p>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 <strong>$</strong> 字符。</p>
<p>若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^Chapter [1-9][0-9]&#123;0,1&#125;/</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://51.ruyo.net/17264.html">https://51.ruyo.net/17264.html</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/38526591">使用Sublime正则表达式清洗数据</a></li>
<li><a href="https://www.runoob.com/regexp/regexp-syntax.html">https://www.runoob.com/regexp/regexp-syntax.html</a></li>
<li><a href="http://sublimetext3.bianjiqi.net/3039.html">Sublime Text 4发布BUILD 4113版本 - Sublime Text3中文网 (bianjiqi.net)</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python的matplotlib如何给多个子图只添加一个图例</title>
    <url>/subplot-legend/</url>
    <content><![CDATA[<h2 id="1-方法1"><a href="#1-方法1" class="headerlink" title="1 方法1"></a>1 方法1</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">axes = fig.subplots(nrows=<span class="number">2</span>, ncols=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">axess = []</span><br><span class="line"><span class="keyword">for</span> ax <span class="keyword">in</span> fig.axes:</span><br><span class="line">    axess.append(ax)</span><br><span class="line">    </span><br><span class="line">axess[<span class="number">0</span>].plot([<span class="number">0</span>, <span class="number">10</span>], [<span class="number">0</span>, <span class="number">10</span>], label=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">axess[<span class="number">1</span>].plot([<span class="number">0</span>, <span class="number">10</span>], [<span class="number">0</span>, <span class="number">10</span>], label=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">axess[<span class="number">2</span>].plot([<span class="number">0</span>, <span class="number">10</span>], [<span class="number">0</span>, <span class="number">10</span>], label=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">axess[<span class="number">3</span>].plot([<span class="number">0</span>, <span class="number">10</span>], [<span class="number">0</span>, <span class="number">10</span>], label=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line"></span><br><span class="line">lines, labels = fig.axes[-<span class="number">1</span>].get_legend_handles_labels()</span><br><span class="line"></span><br><span class="line">fig.legend(lines, labels, loc=<span class="string">&#x27;upper center&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210126161231235054.png" alt=""></p>
<h2 id="2-方法2"><a href="#2-方法2" class="headerlink" title="2 方法2"></a>2 方法2</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">y1 = x</span><br><span class="line">y2 = <span class="number">0.1</span> * x ** <span class="number">2</span></span><br><span class="line">y3 = x ** <span class="number">3</span></span><br><span class="line">y4 = x ** <span class="number">4</span></span><br><span class="line">y5 = x ** <span class="number">5</span></span><br><span class="line"></span><br><span class="line">fig, grid = plt.subplots(nrows=<span class="number">2</span>, ncols=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># fig.subplots_adjust(wspace=0, hspace=0)</span></span><br><span class="line">ax1 = plt.subplot(<span class="number">221</span>)</span><br><span class="line">ax1.plot(x, y1, label=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">ax1.plot(x, y2, label=<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">ax1.plot(x, y3, label=<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">ax2 = plt.subplot(<span class="number">222</span>)</span><br><span class="line">ax2.plot(x, y4, label=<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">ax2.plot(x, y5, label=<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">ax2.plot(x, y1, label=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax1.legend(bbox_to_anchor=(<span class="number">0.</span>, <span class="number">1.02</span>, <span class="number">1.</span>, <span class="number">.102</span>), loc=<span class="number">4</span>, ncol=<span class="number">5</span>, borderaxespad=<span class="number">0.</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210126161231ddd235054.png" alt=""></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>tcp和udp有什么区别？面试题。</title>
    <url>/tcp-and-udp/</url>
    <content><![CDATA[<h2 id="1-UDP和TCP的区别"><a href="#1-UDP和TCP的区别" class="headerlink" title="1 UDP和TCP的区别"></a>1 UDP和TCP的区别</h2><ul>
<li>如果是两台主机用UDP协议发送数据，那么他们在任意时刻都可以向对方发送数据，因为<strong>UDP是无连接的协议</strong>，而如果使用TCP协议进行通信，那么两台主机在通信之前需要进行三次握手建立连接，断开连接时需要进行四次挥手断开连接，<strong>TCP协议是面向连接的</strong>。（<strong>注意：这里所说的连接是指逻辑连接，而不是只物理连接。</strong>）</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201201222605.png" alt=""></p>
<ul>
<li>UDP支持单播、多播、广播通信，而TCP只支持单播通信。</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201201223122.png" alt=""></p>
<ul>
<li>UDP是面向应用报文的协议，TCP是面向字节流的协议<ul>
<li>也就是说发送方使用UDP协议发送数据时会给该数据报文添加一个UDP头部，接收方接收到该数据报文后去掉其UDP头部直接交给应用进程，中间不做任何操作。</li>
<li>应用进程将需要发送的数据交给下面的TCP协议（传输层），需要发送的数据会首先放在TCP缓存中，TCP协议会根据一定的策略从TCP缓存中提取一定数量的字节并加上TCP头部发送给接收方，接收方收到数据后提取并去掉TCP头部先存放在TCP缓存中，然后将一部分数据交给应用进程。（<strong>TCP协议不能保证发送的每个字节都是有意义的，这个需要应用进程进行解析成有意义的字段。</strong>）</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201201223422.png" alt=""></p>
<ul>
<li><p>TCP和UDP都是全双工协议，也就是说同一时刻任意一方都支持发送和接收数据</p>
</li>
<li><p>UDP协议是不安全的，TCP协议是安全可靠的协议</p>
<ul>
<li>UDP协议对发送方发送的数据在传输过程中的丢失或者误码等情况，发送方不做任何处理，因为UDP提供的不安全的传输服务，一般用于视频通话，观看视频等功能</li>
<li>TCP协议在建立连接之前会进行三次握手，在断开连接之前会进行四次挥手，且在传输数据过程中如果发生<strong>数据的丢失</strong>会进行<strong>数据重传</strong>，因为TCP提供的是安全可靠的服务，一般用于发送文件等安全性要求较高的服务。</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201201224448.png" alt=""></p>
<ul>
<li>UDP的首部较简单，TCP的首部较复杂<ul>
<li>因为UDP提供的是不可靠的传输，所以其首部比较简单，只有源端口和目的端口以及数据的长度，加上一个校验和（验证数据是否有丢失）</li>
<li>TCP由于要提供可靠的传输，还需要进行拥塞控制、流量控制、超时重传等操作，所以其首部较长，最短为20个字节，最长为60个字节。</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201201224857.png" alt=""></p>
<h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2 总结"></a>2 总结</h2><ol>
<li><p>UDP是无连接的协议，TCP是面向连接的协议</p>
<ul>
<li>如果是两台主机用UDP协议发送数据，那么他们在任意时刻都可以向对方发送数据，因为<strong>UDP是无连接的协议</strong>，</li>
<li>如果使用TCP协议进行通信，那么两台主机在通信之前需要进行三次握手建立连接，断开连接时需要进行四次挥手断开连接，<strong>TCP协议是面向连接的</strong>。（<strong>注意：这里所说的连接是指逻辑连接，而不是只物理连接。</strong>）</li>
</ul>
</li>
<li><p>UDP支持单播、多播、广播通信，而TCP只支持单播通信。</p>
<ul>
<li>使用UDP协议的局域网中，每个主机之间可以实现<strong>一对一通信</strong>、<strong>一对多通信</strong>、<strong>多对多通信</strong></li>
<li>使用TCP协议的局域网中，每个主机之间只能进行<strong>一对一通信</strong></li>
</ul>
</li>
<li><p>UDP是面向应用报文的协议，TCP是面向字节流的协议</p>
<ul>
<li>也就是说发送方使用UDP协议发送数据时会给该数据报文添加一个UDP头部，接收方接收到该数据报文后去掉其UDP头部直接交给应用进程，中间不做任何操作。</li>
<li>应用进程将需要发送的数据交给下面的TCP协议（传输层），需要发送的数据会首先放在TCP缓存中，TCP协议会根据一定的策略从TCP缓存中提取一定数量的字节并加上TCP头部发送给接收方，接收方收到数据后提取并去掉TCP头部先存放在TCP缓存中，然后将一部分数据交给应用进程。（<strong>TCP协议不能保证发送的每个字节都是有意义的，这个需要应用进程进行解析成有意义的字段。</strong>）</li>
</ul>
</li>
<li><p>TCP和UDP都是全双工协议，也就是说同一时刻任意一方都支持发送和接收数据</p>
</li>
<li><p>UDP协议是不安全的，TCP协议是安全可靠的协议</p>
<ul>
<li>UDP协议对发送方发送的数据在传输过程中的丢失或者误码等情况，发送方不做任何处理，因为UDP提供的不安全的传输服务，一般用于视频通话，观看视频等功能</li>
<li>TCP协议在建立连接之前会进行三次握手，在断开连接之前会进行四次挥手，且在传输数据过程中如果发生<strong>数据的丢失</strong>会进行<strong>数据重传</strong>，因为TCP提供的是安全可靠的服务，一般用于发送文件等安全性要求较高的服务。</li>
</ul>
</li>
<li><p>UDP的首部较简单，TCP的首部较复杂</p>
<ul>
<li>因为UDP提供的是不可靠的传输，所以其首部比较简单，只有源端口和目的端口以及数据的长度，加上一个校验和（验证数据是否有丢失）</li>
<li>TCP由于要提供可靠的传输，还需要进行拥塞控制、流量控制、超时重传等操作，所以其首部较长，最短为20个字节，最长为60个字节。</li>
</ul>
</li>
</ol>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>java interview</tag>
        <tag>computer network</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP协议中的拥塞控制面试题</title>
    <url>/tcp-ip-cwnd/</url>
    <content><![CDATA[<h3 id="1-TCP拥塞控制"><a href="#1-TCP拥塞控制" class="headerlink" title="1 TCP拥塞控制"></a>1 TCP拥塞控制</h3><iframe src="//player.bilibili.com/player.html?aid=64605483&bvid=BV1c4411d7jb&cid=143171089&page=61" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<blockquote>
<p>别看放在最后，因为是压轴的知识点，很重要！</p>
</blockquote>
<h4 id="1-1-慢启动和拥塞避免"><a href="#1-1-慢启动和拥塞避免" class="headerlink" title="1.1 慢启动和拥塞避免"></a>1.1 慢启动和拥塞避免</h4><h5 id="（1）慢启动"><a href="#（1）慢启动" class="headerlink" title="（1）慢启动"></a>（1）慢启动</h5><p>慢启动指先把拥塞窗口cwnd设置为一个最大报文段MSS的数值，发送方在每收到一个对新的报文段的确认后，把拥塞窗口增加至多一个MSS的数值，在每经过一个往返时间RTT，拥塞窗口wcnd就<strong>加倍</strong>。</p>
<blockquote>
<p>慢启动的“慢”并不是指cwnd的增长速度慢，而是指在TCP开始发送报文段时先设置cwnd=1，使得发送方在开始时只发送一个报文段（目的是探测一下网络的拥塞情况）</p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/454545454545.png" alt="在这里插入图片描述"></p>
<h5 id="（2）拥塞避免算法"><a href="#（2）拥塞避免算法" class="headerlink" title="（2）拥塞避免算法"></a>（2）拥塞避免算法</h5><p>让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。</p>
<h5 id="（3）步骤"><a href="#（3）步骤" class="headerlink" title="（3）步骤"></a>（3）步骤</h5><ul>
<li>当cwnd &lt; ssthresh时，使用上述的慢启动算法；</li>
<li>当cwnd &gt; ssthresh时，停止使用慢启动算法而改用拥塞避免算法；</li>
<li>当cwnd = ssthresh时，即可使用慢启动算法，也可以使用拥塞避免算法；<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/4454545454545.png" alt=""></li>
</ul>
<h4 id="1-2-快速重传和快速恢复"><a href="#1-2-快速重传和快速恢复" class="headerlink" title="1.2 快速重传和快速恢复"></a>1.2 快速重传和快速恢复</h4><img src= "/img/loading.gif" data-src="https://jums.club/images/article/微信截图_20201201210337.png" />

<p>当发送方向接收方发送数据时，中间可能会有个别数据包丢失，但是这<strong>不是网络拥塞</strong>，如果使用上面的<strong>慢启动+拥塞避免</strong>算法的话，如果发送方在发送数据的过程中有数据丢失的情况，那么会将慢启动的阈值设置为当前拥塞窗口cwnd的值的一半，并将cwnd的值设为1，重新开始<strong>慢启动+拥塞避免</strong>算法的执行过程，如上图中的<code>TCP Tahoe</code>版本对应的曲线。这种方式会造成网络的吞吐量降低，所以就有了后来的<strong>快重传+快恢复</strong>算法。</p>
<h5 id="（1）快速重传"><a href="#（1）快速重传" class="headerlink" title="（1）快速重传"></a>（1）快速重传</h5><ol>
<li>当发送方连续收到三个重复确认，就执行“乘法减小”算法，把慢开始门限ssthresh减半。这是为了 预防网络发生拥塞。请注意：接下去不执行慢开始算法。</li>
<li>与慢开始不同之处是现在不执行慢开始算法（即拥塞窗口cwnd现在不设置为1），而是把cwnd值设置为<strong>慢开始门限ssthresh减半后的数值</strong>，然后开始执行<strong>拥塞避免算法</strong>，使拥塞窗口缓慢地线性增大。</li>
</ol>
<h5 id="（2）快速恢复"><a href="#（2）快速恢复" class="headerlink" title="（2）快速恢复"></a>（2）快速恢复</h5><p>快速重传算法首先要求接收方每收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有达到对方）而不要等到自己发送数据时才进行捎带确认。快重恢复算法规定，发送方只要一连收到<strong>3个重复确认</strong>就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计数器时间到期。此时执行的是快恢复算法，而不执行慢启动算法，即发送方将慢启动门限值ssthresh和拥塞窗口cwnd值调整为当前窗口的一半。开始执行拥塞避免算法（即线性增长）。</p>
<p>也有的快恢复算法的实现是把开始时的拥塞窗口的cwnd值再增大一点，即<code>cwnd=ssthresh+3</code>，解释：</p>
<ul>
<li>既然发送方收到三个重复的确认包，那么就表示有3个数据报文段已经离开了网络</li>
<li>这个三个包不再占用网络资源，而是停留在接收方的缓存中</li>
<li>可见网络中的报文段不是堆积了，而是减少了，所以可以适当扩大cwnd的值</li>
</ul>
<p>TCP拥塞控制的整个流程如下：</p>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/微信截图_20201201210337.png" style="zoom:67%;" />

<blockquote>
<p>参考：<a href="http://blog.chinaunix.net/uid-26548237-id-3966297.html">http://blog.chinaunix.net/uid-26548237-id-3966297.html</a></p>
</blockquote>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>java interview</tag>
        <tag>computer network</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP协议中的三次握手和四次挥手</title>
    <url>/tcp-three-four/</url>
    <content><![CDATA[<h2 id="1-三次握手"><a href="#1-三次握手" class="headerlink" title="1 三次握手"></a>1 三次握手</h2><p>在$TCP/IP$协议中，由于需要建立安全且稳定的连接，所有需要进行多次确认。</p>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/微信截图_20201107203525.png" style="zoom:80%;" />

<ul>
<li><strong>第一次握手：</strong>客户端需要与服务端建立连接，此时客户端会向服务端发送一个连接请求，即将请求头中的$SYN$字段设置为$1$，表示需要建立请求，并发送一个客户端的32位的序列号$seq1$（该序列号由主机随机生成），该序列号用于后续客户端向服务端发送数据时给数据包的一个序列号，服务器端可以通过判断当前序列是否在某一个区间内，如果不在该区间内，表示当前的数据包不是当前客户端发送是数据，可以直接丢弃。</li>
<li><strong>第二次握手：</strong>服务端接收到客户端的请求，向客户端发送一个确认建立连接的请求，将请求头中的$ACK$字段设置为$1$，并在客户端的序列号$seq1$的基础上进行加$1$的操作，客户端通过该序列号来确认是否是一个可信的服务器发送回来的请求，在确认信息中，服务器端也会发送服务端的一个序列号，该序列号用于发送数据时的数据包的编号，每发送一个序列号编号加$1$。</li>
<li><strong>第三次握手：</strong>由于客户端向服务端发送了一个需要建立连接的请求，此时服务器端表示同意建立建立，向客户端返回了一个确认信息，此时客户端已经准备好和服务端建立连接了，但是服务端还没有收到来自客户端的确认信息，因为服务端不知道客户端是否收到了该确认信息，所以此时客户端还需要向服务端发送一个确认信息，表示客户端已经收到了服务端的确认信息。客户端发送的确认信息中，由于是一个确认信息，所以标志位$ACK$被设置为$1$，并将服务端的序列号$seq2$加$1$并放在确认信息中。</li>
</ul>
<blockquote>
<p>这里为了画图表示，假设客户端和服务端的序列号为一个较小的数，实际上是一个由32位的随机数。</p>
</blockquote>
<h2 id="2-四次挥手"><a href="#2-四次挥手" class="headerlink" title="2 四次挥手"></a>2 四次挥手</h2><p>当客户端不想在与服务端保持连接时，此时需要进行一个断开的操作，由于$TCP/IP$是一个安全可靠的连接协议，所以在建立连接和断开连接之前都需要进行“协商确认”。</p>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/微信截图_20201107205919.png" style="zoom:80%;" />

<ul>
<li><strong>第一次挥手：</strong>客户端向服务端发送断开连接的请求，并将断开连接的标志位$FIN$设置为$1$，同时将客户端当前的序列号$seq1$发送给客户端，从图中可知，假设当前客户端已经向服务端发动了$1300$个数据包。</li>
<li><strong>第二次挥手：</strong>服务端收到客户端发送过来的断开连接的请求，但是由于服务端在接收到该断开请求之前并不知道客户端想要断开，所以之前的服务器一直以为客户端是处于想要连接的状态，那么服务器端就会一直处理客户端发送过来的请求，此时此刻，服务端可能还没有准备好与客户端断开连接，因为服务器端还有一些数据没有传输完，此时服务器端向客户端发送一个确认信息，告诉客户端表示服务端已经知道客户端想要断开连接。将确认标志位$ACK$设置为$1$，并将客户端的序列号$seq1$加$1$添加到确认信息中。</li>
<li><strong>第三次挥手：</strong>在上一步中，服务端知道了客户端想要断开连接，所以之后服务端不会再处理与该客户端有关的所有请求，并将之前还在处理的请求处理完之后，向客户端发送一个断开的请求，表示当前服务器端已经准备好与客户端断开连接，由于是断开连接的请求，所以信息中包含服务器端的序列号$seq2$的信息，并将断开连接的标志位$FIN$设置为$1$。</li>
<li><strong>第四次挥手：</strong>客户端在收到服务器端的断开连接请求后，向服务端发送一个确认信息，向服务端确认客户端已经准备好断开，当发送完之后，客户端与服务端便断开了连接。</li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>computer network</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯笔试题目</title>
    <url>/tencent-interview-questions/</url>
    <content><![CDATA[<h3 id="笔试题1"><a href="#笔试题1" class="headerlink" title="笔试题1"></a>笔试题1</h3><blockquote>
<p>小Q定义了一种数列称为翻转数列:<br>给定整数n和m, 满足n能被2m整除。对于一串连续递增整数数列1, 2, 3, 4…, 每隔m个符号翻转一次, 最初符号为’-‘;。<br>例如n = 8, m = 2, 数列就是: -1, -2, +3, +4, -5, -6, +7, +8.<br>而n = 4, m = 1, 数列就是: -1, +2, -3, + 4.<br>小Q现在希望你能帮他算算前n项和为多少。</p>
</blockquote>
<h5 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a><strong>输入描述:</strong></h5><blockquote>
<p>输入包括两个整数n和m(2 &lt;= n &lt;= 109, 1 &lt;= m), 并且满足n能被2m整除。</p>
</blockquote>
<h5 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h5><blockquote>
<p>输出一个整数, 表示前n项和。</p>
</blockquote>
<h3 id="笔试题1-代码："><a href="#笔试题1-代码：" class="headerlink" title="笔试题1-代码："></a>笔试题1-代码：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = scanner.nextInt();</span><br><span class="line">        <span class="keyword">long</span> s = System.nanoTime();</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span>*m !=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>  <span class="keyword">if</span> (m &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">2</span> &amp;&amp; n &gt; Math.pow(<span class="number">10</span>,<span class="number">9</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(n*m/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">long</span> e = System.nanoTime();</span><br><span class="line">        System.out.println((e-s)/<span class="number">1000000</span> + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="笔试题2"><a href="#笔试题2" class="headerlink" title="笔试题2"></a>笔试题2</h3><blockquote>
<p>牛牛和羊羊正在玩一个纸牌游戏。这个游戏一共有n张纸牌, 第i张纸牌上写着数字ai。<br>牛牛和羊羊轮流抽牌, 牛牛先抽, 每次抽牌他们可以从纸牌堆中任意选择一张抽出, 直到纸牌被抽完。<br>他们的得分等于他们抽到的纸牌数字总和。<br>现在假设牛牛和羊羊都采用最优策略, 请你计算出游戏结束后牛牛得分减去羊羊得分等于多少。</p>
</blockquote>
<h5 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a><strong>输入描述:</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入包括两行。</span><br><span class="line">第一行包括一个正整数n(1 &lt;= n &lt;= 105),表示纸牌的数量。</span><br><span class="line">第二行包括n个正整数ai(1 &lt;= ai &lt;= 109),表示每张纸牌上的数字。</span><br></pre></td></tr></table></figure>

<h5 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出一个整数, 表示游戏结束后牛牛得分减去羊羊得分等于多少。</span><br></pre></td></tr></table></figure>

<h5 id="输入例子1"><a href="#输入例子1" class="headerlink" title="输入例子1:"></a><strong>输入例子1:</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2 7 4</span><br></pre></td></tr></table></figure>

<h5 id="输出例子1"><a href="#输出例子1" class="headerlink" title="输出例子1:"></a><strong>输出例子1:</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<p>一种弄简单的<code>java</code>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//input</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            arr[i] = scanner.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = Integer.parseInt(arr[<span class="number">0</span>]);</span><br><span class="line">        Integer[] array = <span class="keyword">new</span> Integer[m];</span><br><span class="line">        String[] a = arr[<span class="number">1</span>].split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            array[i] = Integer.parseInt(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(array,<span class="keyword">new</span> Comparator&lt;Integer&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 &lt; o2)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (o1 &gt; o2)</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> niuniu = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> yangyang = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                niuniu += array[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                yangyang += array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(niuniu - yangyang);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>高级<code>python</code>实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    num_list = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    num_list.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        s += (-<span class="number">1</span>) ** i * num_list[i]</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>

<h3 id="笔试题3"><a href="#笔试题3" class="headerlink" title="笔试题3"></a>笔试题3</h3><blockquote>
<p>小Q的父母要出差N天，走之前给小Q留下了M块巧克力。小Q决定每天吃的巧克力数量不少于前一天吃的一半，但是他又不想在父母回来之前的某一天没有巧克力吃，请问他第一天最多能吃多少块巧克力</p>
</blockquote>
<h5 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a><strong>输入描述:</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">每个输入包含一个测试用例。</span><br><span class="line">每个测试用例的第一行包含两个正整数，表示父母出差的天数N(N&lt;=50000)和巧克力的数量M(N&lt;=M&lt;=100000)。</span><br></pre></td></tr></table></figure>

<h5 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a><strong>输出描述:</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出一个数表示小Q第一天最多能吃多少块巧克力。</span><br></pre></td></tr></table></figure>

<h5 id="输入例子1-1"><a href="#输入例子1-1" class="headerlink" title="输入例子1:"></a><strong>输入例子1:</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 7</span><br></pre></td></tr></table></figure>

<h5 id="输出例子1-1"><a href="#输出例子1-1" class="headerlink" title="输出例子1:"></a><strong>输出例子1:</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<p><code>java</code>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="笔试题4-两数之和"><a href="#笔试题4-两数之和" class="headerlink" title="笔试题4-两数之和"></a>笔试题4-两数之和</h3><blockquote>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>
</blockquote>
<p>示例:</p>
<p>给定 nums = [2, 7, 11, 15], target = 9</p>
<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>
<p><code>python</code>代码实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] == target:</span><br><span class="line">                    <span class="keyword">return</span> [i,j]</span><br></pre></td></tr></table></figure>







<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>interview question</tag>
      </tags>
  </entry>
  <entry>
    <title>tensorflow如何控制输出控制台的日志等级</title>
    <url>/tensorflow-log-level/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 输出所有 默认等级</span></span><br><span class="line">os.environ[<span class="string">&quot;TF_CPP_MIN_LOG_LEVEL&quot;</span>]=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出warm和error</span></span><br><span class="line">os.environ[<span class="string">&quot;TF_CPP_MIN_LOG_LEVEL&quot;</span>]=<span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只输出error</span></span><br><span class="line">os.environ[<span class="string">&quot;TF_CPP_MIN_LOG_LEVEL&quot;</span>]=<span class="string">&#x27;3&#x27;</span></span><br></pre></td></tr></table></figure>


<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>基于TensorFlow的mnist手写体识别</title>
    <url>/tensorflow-mnist-full-connection/</url>
    <content><![CDATA[<h3 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h3><p>昨天我做（学者网上的教程）了一个线性回归的模型，可以参考这篇<a href="https://jusm.club/liner-regression-writen-by-tensorflow/">博客</a>，用的TensorFlow框架，今天我继续学习，用TensorFlow框架对mnist数据集进行手写体识别。</p>
<h3 id="1-准备数据"><a href="#1-准备数据" class="headerlink" title="1 准备数据"></a>1 准备数据</h3><p>这里用到的是TensorFlow里面的<code>placeholder</code>占位符，类似<code>constant</code>，只不过先定义但是不赋值，用起来的时候再赋值。   </p>
<ul>
<li>mnist数据集<br>from tensorflow.examples.tutorials.mnist import input_data<br>mnist_data = input_data.read_data_sets(“./mnist_data”, one_hot=True)</li>
<li>y_true<br>y_true = tf.placeholder(dtype=tf.float32, shape=[None, 10], name=”y_true”)   </li>
<li>label<br>X = tf.placeholder(dtype=tf.float32, shape=[None, 784], name=”X”)</li>
</ul>
<h3 id="2-构造模型"><a href="#2-构造模型" class="headerlink" title="2 构造模型"></a>2 构造模型</h3><ul>
<li>参数<br>weights = tf.Variable(initial_value=tf.random_normal(shape=[784,10]),name=”weight”)<br>bias = tf.Variable(initial_value=tf.random_normal([10]),name=”bias”)</li>
<li>模型<br>y_predict = tf.matmul(X,weights) + bias</li>
</ul>
<h3 id="3-构造损失函数"><a href="#3-构造损失函数" class="headerlink" title="3 构造损失函数"></a>3 构造损失函数</h3><ul>
<li>loss function<br>loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_true,logits=y_predict))</li>
</ul>
<h3 id="4-优化损失"><a href="#4-优化损失" class="headerlink" title="4 优化损失"></a>4 优化损失</h3><ul>
<li>梯度下降法<br>optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(loss)</li>
</ul>
<h3 id="5-计算准确率"><a href="#5-计算准确率" class="headerlink" title="5 计算准确率"></a>5 计算准确率</h3><ul>
<li>预测值和真实值进行比较<br>equal_list = tf.equal(tf.argmax(y_true, 1), tf.argmax(y_predict, 1))</li>
<li>求平均<br>accuracy = tf.<a href="https://jums.club/tensorflow-reduce-mean/">reduce_mean</a>(tf.cast(equal_list, tf.float32))</li>
</ul>
<h3 id="6-初始化变量"><a href="#6-初始化变量" class="headerlink" title="6 初始化变量"></a>6 初始化变量</h3><ul>
<li>初始化<br>init = tf.global_variables_initializer()</li>
<li>在会话中运行<br>sess.run(init)</li>
</ul>
<h3 id="7-开启会话"><a href="#7-开启会话" class="headerlink" title="7 开启会话"></a>7 开启会话</h3><ul>
<li>拉取mnist训练集<br>image, label = mnist_data.train.next_batch(batch_size)</li>
<li>开始训练<br>_optimizer, loss_value, accuracy_value = sess.run([optimizer, loss, accuracy], feed_dict={X: image, y_true: label})</li>
</ul>
<h3 id="8-运行效果"><a href="#8-运行效果" class="headerlink" title="8 运行效果"></a>8 运行效果</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191128161437.png" alt="running result"></p>
<h3 id="9-源代码"><a href="#9-源代码" class="headerlink" title="9 源代码"></a>9 源代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fucc_connection</span>(<span class="params">learning_rate=<span class="number">0.01</span>,error_value=np.exp(<span class="params">-<span class="number">5</span></span>),batch_size=<span class="number">100</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    这是一个通过全连接网络实现的手写字体识别demo</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">###############################</span></span><br><span class="line">    <span class="comment"># 分析过程</span></span><br><span class="line">    <span class="comment"># 这里的过程和线性回归的过程差不多，无非就是模型和函数有点不一样</span></span><br><span class="line">    <span class="comment"># 1 准备数据</span></span><br><span class="line">    <span class="comment"># 公式：</span></span><br><span class="line">    <span class="comment"># X([None,784]) * weight([784,10]) + bias[10] = y_predict([10])</span></span><br><span class="line">    <span class="comment"># with tf.variable_scope(&quot;prepare_data&quot;):</span></span><br><span class="line">    mnist_data = input_data.read_data_sets(<span class="string">&quot;./mnist_data&quot;</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line">    X = tf.placeholder(dtype=tf.float32, shape=[<span class="literal">None</span>, <span class="number">784</span>], name=<span class="string">&quot;X&quot;</span>)</span><br><span class="line">    y_true = tf.placeholder(dtype=tf.float32, shape=[<span class="literal">None</span>, <span class="number">10</span>], name=<span class="string">&quot;y_true&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2 构造模型</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&quot;create_model&quot;</span>):</span><br><span class="line">        <span class="comment"># 参数</span></span><br><span class="line">        weights = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">784</span>,<span class="number">10</span>]),name=<span class="string">&quot;weight&quot;</span>)</span><br><span class="line">        bias = tf.Variable(initial_value=tf.random_normal([<span class="number">10</span>]),name=<span class="string">&quot;bias&quot;</span>)</span><br><span class="line">        <span class="comment"># 模型</span></span><br><span class="line">        y_predict = tf.matmul(X,weights) + bias</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3 构造损失函数</span></span><br><span class="line">    <span class="comment"># 这里使用的损失不再是均方差，这里用的softmax和交叉熵</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&quot;loss_function&quot;</span>):</span><br><span class="line">        loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_true,logits=y_predict))</span><br><span class="line">        <span class="comment"># 什么是logits:https://blog.csdn.net/nbxzkok/article/details/84838984</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4 优化损失</span></span><br><span class="line">    <span class="comment"># 还是使用梯度下降方法进行优化损失</span></span><br><span class="line">    optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5 计算准确率</span></span><br><span class="line">    equal_list = tf.equal(tf.argmax(y_true, <span class="number">1</span>), tf.argmax(y_predict, <span class="number">1</span>))</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(equal_list, tf.float32))</span><br><span class="line"></span><br><span class="line">    <span class="comment">###############</span></span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2) 收集变量</span></span><br><span class="line">    tf.summary.scalar(<span class="string">&quot;loss&quot;</span>,loss)</span><br><span class="line">    tf.summary.histogram(<span class="string">&quot;weights&quot;</span>, weights)</span><br><span class="line">    tf.summary.histogram(<span class="string">&quot;bias&quot;</span>, bias)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3) 合并变量</span></span><br><span class="line">    merged = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line">    <span class="comment">## (1)定义一个模型的保存器</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启回话</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(init)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1) 创建事件</span></span><br><span class="line">        file_writer = tf.summary.FileWriter(graph=sess.graph, logdir=<span class="string">&quot;./mnist_graph&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        image, label = mnist_data.train.next_batch(batch_size)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;loss:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(sess.run(loss, feed_dict=&#123;X: image, y_true: label&#125;)))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始训练</span></span><br><span class="line">        <span class="comment"># count = 0</span></span><br><span class="line">        <span class="comment"># while(loss.eval() &gt; np.exp(-9)):</span></span><br><span class="line">        <span class="comment">#     count += 1</span></span><br><span class="line">        <span class="comment">#     _optimizer, loss = sess.run([optimizer,loss], feed_dict=&#123;X:image, y_true:label&#125;)</span></span><br><span class="line">        <span class="comment">#     print(&quot;NO.&#123;count&#125;,loss:&#123;value&#125;&quot;.format(value=loss.eval(), count=count))</span></span><br><span class="line">        error_value = error_value</span><br><span class="line">        <span class="keyword">for</span> count <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">            _optimizer, loss_value, accuracy_value = sess.run([optimizer, loss, accuracy], feed_dict=&#123;X: image, y_true: label&#125;)</span><br><span class="line">            <span class="keyword">if</span> accuracy_value &lt; <span class="number">0.9</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;NO.&#123;count&#125;,loss:&#123;value&#125;, accuracy:&#123;accuracy&#125;&quot;</span>.<span class="built_in">format</span>(value=loss_value, count=count, accuracy=accuracy_value))</span><br><span class="line">                <span class="comment"># 4) 运行合并后的变量</span></span><br><span class="line">                <span class="comment"># summary = sess.run(merged)</span></span><br><span class="line">                <span class="comment"># file_writer.add_summary(summary,count)</span></span><br><span class="line">                <span class="comment">#</span></span><br><span class="line">                <span class="comment"># # (2) 开始保存模型</span></span><br><span class="line">                <span class="comment"># if count % 10 ==0 :</span></span><br><span class="line">                <span class="comment">#     saver.save(&quot;./temp/mnist/mnist.ckpt&quot;)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">10</span> + <span class="string">&quot;result&quot;</span> + <span class="string">&quot;-&quot;</span>*<span class="number">10</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;learning_rate:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(learning_rate))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;minial error value:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(error_value))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;accuracy is:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(accuracy_value))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;total running times:&#123;&#125; times&quot;</span>.<span class="built_in">format</span>(count))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    s_time = time.time()</span><br><span class="line">    fucc_connection(learning_rate=<span class="number">0.1</span>,batch_size=<span class="number">1000</span>)</span><br><span class="line">    e_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;running time:&#123;&#125; s&quot;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>((e_time - s_time),<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tf.app.run()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>TensorFlow中reduce_mean有什么用？</title>
    <url>/tensorflow-reduce-mean/</url>
    <content><![CDATA[<h3 id="TensorFlow中reduce-mean的作用"><a href="#TensorFlow中reduce-mean的作用" class="headerlink" title="TensorFlow中reduce_mean的作用"></a>TensorFlow中reduce_mean的作用</h3><blockquote>
<p>tf.reduce_mean 函数用于计算张量tensor沿着指定的数轴（tensor的某一维度）上的的平均值，主要用作降维或者计算tensor（图像）的平均值。</p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>tensorflow/keras使用GPU进行训练</title>
    <url>/tensorflow-to-use-gpu/</url>
    <content><![CDATA[<h2 id="1-需要的环境配置"><a href="#1-需要的环境配置" class="headerlink" title="1 需要的环境配置"></a>1 需要的环境配置</h2><ul>
<li>Anaconda环境，<a href="https://zhuanlan.zhihu.com/p/32925500">Anaconda安装教程</a></li>
<li>CUDA，<a href="https://developer.nvidia.com/CUDA-TOOLKIT-ARCHIVE">CUDA下载</a>，这里需要注意CUDA、cuDNN、tensorflow的对应版本，<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">对应版本查询</a></li>
<li>cuDNN，<a href="https://developer.nvidia.com/cudnn%20">cuDNN下载</a>，这里需要注册</li>
<li>tensorflow-gpu</li>
<li>keras</li>
</ul>
<h2 id="2-CUDA安装与配置"><a href="#2-CUDA安装与配置" class="headerlink" title="2 CUDA安装与配置"></a>2 CUDA安装与配置</h2><p>进入<a href="https://developer.nvidia.com/CUDA-TOOLKIT-ARCHIVE">CUDA下载页面</a>选择对应的CUDA版本：</p>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210126161051.png" style="zoom:60%;" />

<p>选择一个需要下载的版本，然后选择系统以及安装方式进行安装。</p>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210126161158.png" style="zoom:60%;" />

<h3 id="2-1-这里以本地安装（local）为例："><a href="#2-1-这里以本地安装（local）为例：" class="headerlink" title="2.1 这里以本地安装（local）为例："></a>2.1 这里以本地安装（local）为例：</h3><p>你可以选择精简安装和自定义安装:</p>
<ul>
<li>精简安装：安装默认需要的包，这里不建议，因为可能有些包之前安装过，这里可能会覆盖之前安装的包、</li>
<li>自定义安装：自己选择一些需要安装的包，可以只安装自己需要的</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-7d972aecc15569b66daaeb7305221b9a_720w.jpg" alt=""></p>
<p>如图选择CUDA列表中的Development，Runtime，Documentation，Samples的四个组件，其他组件可按需安装：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-c9647603e82f66ad51d0f014b5edfed1_r.jpg" alt=""></p>
<p>记住安装位置，用来配置环境变量。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-fffda3abaeaba46ebd8e9b9f4d7f1c69_r.jpg" alt=""></p>
<h3 id="2-2-CUDA环境变量配置"><a href="#2-2-CUDA环境变量配置" class="headerlink" title="2.2 CUDA环境变量配置"></a>2.2 CUDA环境变量配置</h3><p>点击【我的电脑】-》【属性】-》【高级系统设置】-》【环境变量】进行环境变量的配置，如果CUDA安装完成，默认会多出以下几个系统变量：CUDA_PATH、CUDA_PATH_V10_1、NVCUDASAMPLES_ROOT、NVCUDASAMPLES10_1_ROOT，下面式需要配置的：</p>
<ul>
<li>需要额外添加的环境变量（添加到系统变量那一栏）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CUDA_SDK_PATH：C:\ProgramData\NVIDIA Corporation\CUDA Samples\v10.1</span><br><span class="line">CUDA_LIB_PATH：%CUDA_PATH%\lib\x64</span><br><span class="line">CUDA_BIN_PATH：%CUDA_PATH%\bin</span><br><span class="line">CUDA_SDK_BIN_PATH：%CUDA_SDK_PATH%\bin\win64</span><br><span class="line">CUDA_SDK_LIB_PATH：%CUDA_SDK_PATH%\common\lib\x64</span><br></pre></td></tr></table></figure>

<ul>
<li>需要在系统PATH中添加的变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%CUDA_LIB_PATH%</span><br><span class="line">%CUDA_BIN_PATH%</span><br><span class="line">%CUDA_SDK_LIB_PATH%</span><br><span class="line">%CUDA_SDK_BIN_PATH%; </span><br><span class="line">C:\ProgramFiles\NVIDIA GPU Computing Toolkit\CUDA\v10.1\lib\x64</span><br><span class="line">C:\ProgramFiles\NVIDIA GPU Computing Toolkit\CUDA\v10.1\bin</span><br><span class="line">C:\ProgramData\NVIDIACorporation\CUDA Samples\v10.1\common\lib\x64</span><br><span class="line">C:\ProgramData\NVIDIACorporation\CUDA Samples\v10.1\bin\win64</span><br></pre></td></tr></table></figure>

<h2 id="3-安装和配置cuDNN"><a href="#3-安装和配置cuDNN" class="headerlink" title="3 安装和配置cuDNN"></a>3 安装和配置cuDNN</h2><p>进入<a href="https://developer.nvidia.com/cudnn%20">cuDNN官网</a>下载相应版本的cuDNN。cuDNN的全程为NVIDIA CUDA® Deep Neural Network library，是NVIDIA专门针对深度神经网络中的基础操作而设计基于GPU的加速库。</p>
<p>cuDNN是一个压缩包，解压之后如下：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210126162336.png" alt=""></p>
<p>将对应的文件复制到CUDA的安装目录下，默认是C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.0（这里版本号是你下载的版本号）</p>
<h2 id="4-验证是否安装成功"><a href="#4-验证是否安装成功" class="headerlink" title="4 验证是否安装成功"></a>4 验证是否安装成功</h2><p>安装之后，通过以下的方式进行验证，进入如下地址：C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.0\extras\demo_suite，分别执行bandwidthTest.exe和deviceQuery.exe，若如图均返回PASS则说明配置生效。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-1f09c5c7b3271cdf7b1ea7ae5a2e401f_720w.jpg" alt=""></p>
<h2 id="5-创建tensorflow虚拟环境"><a href="#5-创建tensorflow虚拟环境" class="headerlink" title="5 创建tensorflow虚拟环境"></a>5 创建tensorflow虚拟环境</h2><p>anaconda安装这里略过，如果安装完anaconda之后，便可以继续操作。</p>
<p>使用如下命令创建虚拟环境：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -name your_env_name python=version_no anaconda ##(如果末尾不添加anaconda命令，则该虚拟环境只有python，没有其他包)</span><br></pre></td></tr></table></figure>

<p>其中your_env_name是你要创建的虚拟环境的名称，后面的version_no为你指定的python版本，如下：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210126163053.png" alt=""></p>
<p>创建完之后可以使用如下命令查看已经创建的虚拟环境：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda info -e</span><br><span class="line">conda env list ## 两个命令都可以</span><br></pre></td></tr></table></figure>

<p>创建完虚拟环境之后，然后激活该虚拟环境：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda activate gpu  ## gpu为我创建的虚拟环境</span><br></pre></td></tr></table></figure>

<p>安装腾搜人flow-gpu：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install tensorflow-gpu</span><br></pre></td></tr></table></figure>

<p>安装完之后：</p>
<p>使用如下命令查看是否安装成功：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">hello=tf.constant(<span class="string">&#x27;hello!&#x27;</span>)</span><br><span class="line">sess=tf.Session()</span><br><span class="line"><span class="built_in">print</span>(sess.run(hello))</span><br></pre></td></tr></table></figure>

<h3 id="6-1-测试tensorflow是否使用GPU计算"><a href="#6-1-测试tensorflow是否使用GPU计算" class="headerlink" title="6.1 测试tensorflow是否使用GPU计算"></a>6.1 测试tensorflow是否使用GPU计算</h3><p>当运行上述代码时，如果输出如下信息，表示tensorflow在使用GPU进行计算。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2021-01-26 16:52:39.588750: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1555] Found device 0 with properties: </span><br><span class="line">pciBusID: 0000:01:00.0 name: GeForce GTX 1660 Ti computeCapability: 7.5</span><br><span class="line">coreClock: 1.59GHz coreCount: 24 deviceMemorySize: 6.00GiB deviceMemoryBandwidth: 268.26GiB/s</span><br><span class="line">2021-01-26 16:52:39.589095: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_101.dll</span><br><span class="line">2021-01-26 16:52:39.592145: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_10.dll</span><br><span class="line">2021-01-26 16:52:39.595130: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_10.dll</span><br><span class="line">2021-01-26 16:52:39.596242: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_10.dll</span><br><span class="line">2021-01-26 16:52:39.599306: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_10.dll</span><br><span class="line">2021-01-26 16:52:39.601463: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_10.dll</span><br><span class="line">2021-01-26 16:52:39.609400: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll</span><br><span class="line">2021-01-26 16:52:39.609656: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1697] Adding visible gpu devices: 0</span><br></pre></td></tr></table></figure>

<h2 id="6-测试GPU和CPU的速度"><a href="#6-测试GPU和CPU的速度" class="headerlink" title="6 测试GPU和CPU的速度"></a>6 测试GPU和CPU的速度</h2><p>测试代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _*_ coding=utf-8 _*_</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@author: crazy jums</span></span><br><span class="line"><span class="string">@time: 2021-01-24 20:55</span></span><br><span class="line"><span class="string">@desc: 添加描述</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 指定GPU训练</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>]=<span class="string">&quot;0&quot;</span>  <span class="comment">##表示使用GPU编号为0的GPU进行计算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential  <span class="comment"># 采用贯序模型</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense, Dropout, Conv2D, MaxPool2D, Flatten</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.utils <span class="keyword">import</span> to_categorical</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.callbacks <span class="keyword">import</span> TensorBoard</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_model</span>():</span></span><br><span class="line">    model = Sequential()</span><br><span class="line">    model.add(Conv2D(<span class="number">32</span>, (<span class="number">5</span>, <span class="number">5</span>), activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=[<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>]))  <span class="comment"># 第一卷积层</span></span><br><span class="line">    model.add(Conv2D(<span class="number">64</span>, (<span class="number">5</span>, <span class="number">5</span>), activation=<span class="string">&#x27;relu&#x27;</span>))  <span class="comment"># 第二卷积层</span></span><br><span class="line">    model.add(MaxPool2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))  <span class="comment"># 池化层</span></span><br><span class="line">    model.add(Flatten())  <span class="comment"># 平铺层</span></span><br><span class="line">    model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">    model.add(Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">    model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">    model.add(Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compile_model</span>(<span class="params">model</span>):</span></span><br><span class="line">    model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, optimizer=<span class="string">&quot;adam&quot;</span>, metrics=[<span class="string">&#x27;acc&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span>(<span class="params">model, x_train, y_train, batch_size=<span class="number">128</span>, epochs=<span class="number">10</span></span>):</span></span><br><span class="line"></span><br><span class="line">    tbCallBack = TensorBoard(log_dir=<span class="string">&quot;model&quot;</span>, histogram_freq=<span class="number">1</span>, write_grads=<span class="literal">True</span>)</span><br><span class="line">    history = model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, shuffle=<span class="literal">True</span>, verbose=<span class="number">2</span>,</span><br><span class="line">                        validation_split=<span class="number">0.2</span>, callbacks=[tbCallBack])</span><br><span class="line">    <span class="keyword">return</span> history, model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">    <span class="built_in">print</span>(tf.__version__)</span><br><span class="line">    <span class="keyword">from</span> tensorflow.python.client <span class="keyword">import</span> device_lib</span><br><span class="line">    <span class="built_in">print</span>(device_lib.list_local_devices())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    (x_train, y_train), (x_test, y_test) = mnist.load_data()  <span class="comment"># mnist的数据我自己已经下载好了的</span></span><br><span class="line">    <span class="built_in">print</span>(np.shape(x_train), np.shape(y_train), np.shape(x_test), np.shape(y_test))</span><br><span class="line"></span><br><span class="line">    x_train = np.expand_dims(x_train, axis=<span class="number">3</span>)</span><br><span class="line">    x_test = np.expand_dims(x_test, axis=<span class="number">3</span>)</span><br><span class="line">    y_train = to_categorical(y_train, num_classes=<span class="number">10</span>)</span><br><span class="line">    y_test = to_categorical(y_test, num_classes=<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(np.shape(x_train), np.shape(y_train), np.shape(x_test), np.shape(y_test))</span><br><span class="line"></span><br><span class="line">    model = create_model()</span><br><span class="line">    model = compile_model(model)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start training&quot;</span>)</span><br><span class="line">    ts = time.time()</span><br><span class="line">    history, model = train_model(model, x_train, y_train, epochs=<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start training&quot;</span>, time.time() - ts)</span><br></pre></td></tr></table></figure>

<p>计算结果如下：</p>
<blockquote>
<p>GPU计算10个epoch的时间：31.588526725769043秒   平均每个epoch15秒</p>
<p>CPU计算2个epoch的时间：104.25619554519653秒      平均每个epoch52秒</p>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/83596098">https://zhuanlan.zhihu.com/p/83596098</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>时间序列算法综述</title>
    <url>/time-series-forecasting-algorithm/</url>
    <content><![CDATA[<h3 id="时间序列预测的顺序"><a href="#时间序列预测的顺序" class="headerlink" title="时间序列预测的顺序"></a>时间序列预测的顺序</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/147.png" alt="image"></p>
<p>时间序列的正式定义如下：它是一系列在相同时间间隔内测量到的数据点。<br>时间序列的特殊性是：该序列中的每个数据点都与先前的数据点相关。<br><a href="https://zhuanlan.zhihu.com/p/49746642">知乎问答：利用Auto ARIMA构建高性能时间序列模型（附Python和R代码）</a>|<a href="https://www.analyticsvidhya.com/blog/2018/02/time-series-forecasting-methods/">source article</a></p>
<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="#参考文献"></a>#参考文献</h4><p><a href="https://blog.csdn.net/jyfu2_12/article/details/79207643">常见Markdown公式代码</a><br><a href="https://item.jd.com/12475341.html">《时间序列分析》-作者：詹姆斯·D·汉密尔顿（James D.Hamilton）</a><br><a href="https://otexts.com/fppcn/holt-winters.html">预测：方法与实践</a></p>
<h3 id="1-其中常见的时间序列预测算法"><a href="#1-其中常见的时间序列预测算法" class="headerlink" title="1 其中常见的时间序列预测算法"></a>1 其中常见的时间序列预测算法</h3><h4 id="1-1-朴素预测法（一次指数平滑）"><a href="#1-1-朴素预测法（一次指数平滑）" class="headerlink" title="1.1 朴素预测法（一次指数平滑）"></a>1.1 朴素预测法（一次指数平滑）</h4><p>概念：利用前一时刻的数据，作为下一时刻数据的预测值，公式如下：</p>
<p>$X_{t+1} = X_i$</p>
<p>缺点：那么预测出来的结果会是一条平行线，因为预测结果都是之前的最后一个时刻的值。如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-91cc0429042526c71934287553bbd36e_hd.jpg" alt="image"></p>
<h4 id="1-2-简单平均法"><a href="#1-2-简单平均法" class="headerlink" title="1.2 简单平均法"></a>1.2 简单平均法</h4><p>概念：该方法是将之前的所有历史数据进行平均，不再是简单的利用最后一个时刻的数据作为预测值，图像是一条斜线，公式如下：</p>
<p>$X_{t+1} = \frac{1}{N} \sum^N_{i=1} X_i  $ </p>
<p>where:<code>N</code>表示所有的历史数据的总数.<br>优点：不像“朴素预测法”那样，直接是一条平行线，该算法中将历史数据也考虑进去；<br>缺点：但是这些历史数据有些不一定都是有用，所以也会产生一定的误差<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-25e9516f144807a45e483cdd9f1f6fbd_hd.jpg" alt="image"></p>
<h4 id="1-3-移动平均法"><a href="#1-3-移动平均法" class="headerlink" title="1.3 移动平均法"></a>1.3 移动平均法</h4><p>概念：取前n个历史数据的平均，作为下一次的预测结果值，公式如下：</p>
<p>$X_{t+1} = \frac {1}{n} \sum^n_i X_i$</p>
<p>where:<code>n</code>表示前<code>n</code>个数据的数据总数<br>优点：在<code>朴素预测法</code>和<code>简单平均法</code>的基础上进行改进，使得预测结果更加符合实际<br>缺点：最接近下一时刻的数据与下一时刻的真实数据明显更加接近，没有考虑权重<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-eac4ad5b9cc86106750147f88a1a3a42_hd.jpg" alt="image"></p>
<h4 id="1-4-加权移动平均法"><a href="#1-4-加权移动平均法" class="headerlink" title="1.4 加权移动平均法"></a>1.4 加权移动平均法</h4><p>概念：在移动平均法的基础上，对前n个数据给予不同的权重，那么对下一时刻的预测结果将更加接近真实值，公式如下：</p>
<p>$X_{t+1} = \frac {1}{n} \sum^n_i X_i \cdot W_i$</p>
<p>where:W表示每个数据点的权重<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-ac1f9544d26d5d966573a5a8679875fd_hd.jpg" alt="image"></p>
<h3 id="1-5-简单指数平均法"><a href="#1-5-简单指数平均法" class="headerlink" title="1.5 简单指数平均法"></a>1.5 简单指数平均法</h3><p>概念：在该方法中，同样取前n个数据的平均同时加权重，但是更近期的观测结果会被赋予更大的权重，公式如下：</p>
<p>$X_{t+1} = \frac {1}{n} \sum^n_i X_i \cdot W_i 且W_i&gt;W_{i-1}$</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-49baf17e7e9ade3bfd3a0b8b8d4b9864_hd.jpg" alt="image"></p>
<h4 id="1-6-霍尔特（Holt）线性趋势预测"><a href="#1-6-霍尔特（Holt）线性趋势预测" class="headerlink" title="1.6 霍尔特（Holt）线性趋势预测"></a>1.6 霍尔特（Holt）线性趋势预测</h4><p>概念：在之前的基础上，该方法加入了数据集的趋势，也就是数据的整体上涨或下跌等。<br>优点：该方法能够按照一定的趋势去预测，而不是盲目的预测，结果更具说服性<br>缺点：该方法只考虑了趋势性（上涨或下跌），但是没有考虑数据的季节性，也就是数据集的周期性。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-6a278b4ba9c50cbd6db292dd4e7372df_hd.jpg" alt="image"></p>
<h4 id="1-7-霍尔特-温特斯（Holt-Winters）方法（三次指数平滑）"><a href="#1-7-霍尔特-温特斯（Holt-Winters）方法（三次指数平滑）" class="headerlink" title="1.7 霍尔特-温特斯（Holt Winters）方法（三次指数平滑）"></a>1.7 霍尔特-温特斯（Holt Winters）方法（三次指数平滑）</h4><p>概念：该方法在霍尔特线性趋势预测的基础上了，加入了季节性，也就是说，该方法同时具有趋势性和季节性。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-a6d012dfeeadb4d9074789067871f42a_hd.jpg" alt="image"></p>
<h5 id="指数平滑法"><a href="#指数平滑法" class="headerlink" title="指数平滑法"></a><a href="https://blog.csdn.net/anshuai_aw1/article/details/82499095">指数平滑法</a></h5><blockquote>
<p>指数平滑法有几种不同形式：一次指数平滑法针对没有趋势和季节性的序列，二次指数平滑法针对有趋势但没有季节性的序列，三次指数平滑法针对有趋势也有季节性的序列。“Holt-Winters”有时特指三次指数平滑法。</p>
</blockquote>
<h3 id="2-算法中用到的各种指标介绍-link"><a href="#2-算法中用到的各种指标介绍-link" class="headerlink" title="2 算法中用到的各种指标介绍|link"></a>2 算法中用到的各种指标介绍|<a href="https://www.jianshu.com/p/9ee85fdad150">link</a></h3><h4 id="2-1-MSE-均方误差-mean-square-error"><a href="#2-1-MSE-均方误差-mean-square-error" class="headerlink" title="2.1 MSE-均方误差(mean square error)"></a>2.1 MSE-均方误差(mean square error)</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/148.png" alt="image"><br>这里的y是测试集上的。<br>用 真实值-预测值 然后平方之后求和平均。</p>
<h4 id="2-2-RMSE-均方根误差-root-mean-square-error"><a href="#2-2-RMSE-均方根误差-root-mean-square-error" class="headerlink" title="2.2 RMSE-均方根误差(root mean square error)"></a>2.2 RMSE-均方根误差(root mean square error)</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/149.png" alt="image"></p>
<blockquote>
<p>例如：要做房价预测，每平方是万元（真贵），我们预测结果也是万元。那么差值的平方单位应该是 千万级别的。那我们不太好描述自己做的模型效果。怎么说呢？我们的模型误差是 多少千万？。。。。。。于是干脆就开个根号就好了。我们误差的结果就跟我们数据是一个级别的可，在描述模型的时候就说，我们模型的误差是多少万元。</p>
</blockquote>
<h4 id="2-3-MAE-平均绝对误差-mean-absolute-error"><a href="#2-3-MAE-平均绝对误差-mean-absolute-error" class="headerlink" title="2.3 MAE-平均绝对误差(mean absolute error)"></a>2.3 MAE-平均绝对误差(mean absolute error)</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/150.png" alt="image"></p>
<h4 id="2-4-R-Squared"><a href="#2-4-R-Squared" class="headerlink" title="2.4 R Squared"></a>2.4 R Squared</h4><p>为了能够让模型有一个标准的衡量标准，这里引入R方的概念。</p>
<blockquote>
<p>比如说预测房价 那么误差单位就是万元。数子可能是3，4，5之类的。那么预测身高就可能是0.1，0.6之类的。没有什么可读性，到底多少才算好呢？不知道，那要根据模型的应用场景来。<br>看看分类算法的衡量标准就是正确率，而正确率又在0～1之间，最高百分之百。最低0。很直观，而且不同模型一样的。那么线性回归有没有这样的衡量标准呢？答案是有的。<br>那就是R Squared也就R方</p>
</blockquote>
<p>公式：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/151.png" alt="image"><br>其中分子是Residual(残差) Sum of Squares 分母是 Total Sum of Squares</p>
<p>慢慢解释。其实这个很简单：</p>
<ul>
<li>上面分子就是我们训练出的模型预测的所有误差。</li>
<li>下面分母就是不管什么我们猜的结果就是y的平均数。（瞎猜的误差）</li>
</ul>
<p>结果如下：</p>
<ul>
<li>如果结果是0，就说明我们的模型跟瞎猜差不多。</li>
<li>如果结果是1。就说明我们模型无错误。</li>
<li>如果结果是0-1之间的数，就是我们模型的好坏程度。</li>
<li>如果结果是负数。说明我们的模型还不如瞎猜。（其实导致这种情况说明我们的数据其实没有啥线性关系）</li>
</ul>
<p>公式的分子分母同时处以m，得：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/152.png" alt="image"></p>
<p>那么分子便成了MSE，分母就是方差，有如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/153.png" alt="image"></p>
<blockquote>
<p>补充：什么是方差？<br><strong>方差</strong>（英语：Variance），<a href="https://zh.wikipedia.org/wiki/應用數學">应用数学</a>里的专有名词。在<a href="https://zh.wikipedia.org/wiki/概率论">概率论</a>和<a href="https://zh.wikipedia.org/wiki/统计学">统计学</a>中，一个<a href="https://zh.wikipedia.org/wiki/随机变量">随机变量</a>的<strong>方差</strong>描述的是它的离散程度，也就是该变量离其<a href="https://zh.wikipedia.org/wiki/期望值">期望值</a>的距离。一个实随机变量的方差也称为它的<a href="https://zh.wikipedia.org/wiki/矩_(數學)">二阶矩</a>或二阶<a href="https://zh.wikipedia.org/wiki/主動差">中心矩</a>，恰巧也是它的二阶累积量。这里把复杂说白了，就是将各个误差之平方（而非取绝对值，使之肯定为正数），相加之后再除以总数，透过这样的方式来算出各个数据分布、零散（相对中心点）的程度。继续延伸的话，方差的正<a href="https://zh.wikipedia.org/wiki/平方根">平方根</a>称为该随机变量的<strong><a href="https://zh.wikipedia.org/wiki/标准差">标准差</a></strong>（此为相对各个数据点间），方差除以<a href="https://zh.wikipedia.org/wiki/期望值">期望值</a>归一化的值叫<strong>分散指数</strong>，标准差除以<a href="https://zh.wikipedia.org/wiki/期望值">期望值</a>归一化的值叫<strong>变异系数</strong>。</p>
</blockquote>
<h3 id="3-循环神经网络"><a href="#3-循环神经网络" class="headerlink" title="3 循环神经网络"></a>3 循环神经网络</h3><p>循环神经网络（Recurrent Neural Network）是一种基于序列结构数据的神经网络模型，在处理时间序列数据时，具有一定的优势。在RNN模型中，下一层的隐含层的输入是前一层隐含层的输入，这样做的目的就是为了能够“记住”整个序列的数据，从而能够对一些有时间顺序的数据进行处理。但是RNN也有缺点，缺点也由于其“优势”所导致的，在利用BPTT（Back Propagation Through Time，基于时间的反向传播）算法优化参数时，可能会遇到梯度消失（或者说梯度弥散）或者梯度爆炸的问题。由于BPTT的本质也是采用逐层梯度下降，然而梯度下降也就是求偏导数，如果每层的偏导数都小于1，那么就会出现梯度消失；反之，如果每层的偏导数大于1，那么就会出现梯度爆炸。<br><strong>公式如下：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1187314-20190829170635207-1732920092.png" alt="image"><br><strong>RNN的结构如下：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/154.png" alt="image"></p>
<h4 id="（1）-梯度爆炸的解决方法"><a href="#（1）-梯度爆炸的解决方法" class="headerlink" title="（1） 梯度爆炸的解决方法"></a>（1） 梯度爆炸的解决方法</h4><ul>
<li>重新设计网络结构</li>
<li>使用激活函数（ReLU函数等）</li>
<li>使用权重正则化</li>
<li>使用梯度剪枝</li>
<li>LSTM</li>
</ul>
<h4 id="（2）-梯度消失的解决办法"><a href="#（2）-梯度消失的解决办法" class="headerlink" title="（2） 梯度消失的解决办法"></a>（2） 梯度消失的解决办法</h4><p>由于梯度消失的问题比较棘手，不像梯度爆炸那样比较容易解决，需要对原网络进行改进，在此基础上，有诞生了</p>
<ul>
<li>GRU（Gate Recurrent Unit），门循环单元</li>
<li>LSTM（Long Short Term Memory）,长短时记忆网络。</li>
</ul>
<h4 id="3-1-长短时记忆网络"><a href="#3-1-长短时记忆网络" class="headerlink" title="3.1 长短时记忆网络"></a>3.1 长短时记忆网络</h4><p>为了解决基础RNN中出现的梯度消失和梯度爆炸问题，LSTM（Long Short Term Memory）于1997年被提出，且能很好的解决RNN中的梯度消失和梯度爆炸问题。</p>
<h5 id="（1）LSTM介绍"><a href="#（1）LSTM介绍" class="headerlink" title="（1）LSTM介绍"></a>（1）LSTM介绍</h5><blockquote>
<p>概念：</p>
<ul>
<li>一个LSTM Cell是由3个门限结构和1个状态向量传输线组成的，门限分别是遗忘门，传入门，输出门；</li>
<li>其中状态向量传输线负责长程记忆，因为它只做了一些简单的线性操作；3个门限负责短期记忆的选择，因为门限设置可以对输入向量做删除或者添加操作;   </li>
</ul>
</blockquote>
<p>下图是RNN和LSTM的结构图比较，右侧为LSTM：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-e4f9851cad426dfe4ab1c76209546827_r.jpg" alt="image">   </p>
<p>左侧：<br>其中$x^t$表示的是当前t时刻的输入， $h^{t-1}$表示的是上一时刻的隐含层输出值， $h^t$表示的是t时刻隐含层状态，  $y^t$表示的是当前$t$时刻的输出值，Naive表示的是普通的RNN。</p>
<p><strong>LSTM中的参数介绍：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-15c5eb554f843ec492579c6d87e1497b_r.jpg" alt="image"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-d044fd0087e1df5d2a1089b441db9970_hd.jpg" alt="image">   </p>
<p><strong>LSTM的内部结构：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-556c74f0e025a47fea05dc0f76ea775d_hd.jpg" alt="image">   </p>
<p><strong>多层LSTM的连接结构：</strong><br><strong>以下是一个LSTM cell结构图：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/776149-20180419171148265-132667484.png" alt="image"></p>
<p>1）遗忘门<br>遗忘门是通过一个sigmoid函数来实现，“0”表示决绝任何输入，“1”表示接受所有输入<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/776149-20180419180212604-282221791.png" alt="image">   </p>
<p>2）输入门（选择记忆）<br>输入门有两部分组成，一部分是由sigmoid函数来决定哪些信息需要更新，一部分由tanh函数来生成一个备选的用来更新的内容；然后再将这两部分进行向量点乘。<br>作用：决定让多少<strong>新的信</strong>息加入到cell状态中来<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/776149-20180419180455006-1062571156.png" alt="image">   </p>
<p>3）输出门<br>该部分同样由两部分构成，一部分由sigmoid函数决定哪些信息需要输出，接着，另一部分是把一个状态向量通过一个tanh层（tanh函数），然后把tanh的状态输出和由sigmoid函数计算出来的权重相乘。这就得到了最后的结果。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/776149-20180419181357739-45985178.png" alt="image"></p>
<p>4）状态更新<br>首先由旧的状态和遗忘门的输出相乘，把一些不想保留的信息忘掉，然后加上<strong>输入门的输出，这部分信息就是我们想要新添加的内容</strong></p>
<h5 id="（2）LSTM的优缺点介绍"><a href="#（2）LSTM的优缺点介绍" class="headerlink" title="（2）LSTM的优缺点介绍"></a>（2）LSTM的优缺点介绍</h5><ul>
<li>优点<ul>
<li>解决了RNN中的梯度消失和梯度爆炸问题</li>
</ul>
</li>
<li>缺点<ul>
<li>计算速度较慢</li>
</ul>
</li>
</ul>
<h4 id="3-2-GRU"><a href="#3-2-GRU" class="headerlink" title="3.2 GRU"></a>3.2 GRU</h4><p>针对LSTM的缺点（计算速度偏慢），门控循环单元（Gate Recurrent Unit，GRU）在2014年被提出，在LSTM结构的基础上，GRU进行了改进。相比于LSTM，GRU减少了一个“门控单元”。在LSTM中有三个“门控单元”，分别是遗忘门、输入门、输出门来控制输入值、记忆值和输出值。而GRU中之后更新门(z)和重置门(r)两个“门控单元”，少了一个“门控单元”，其计算复杂度降低了，运行速度也提升了。</p>
<h5 id="（1）GRU的结构介绍"><a href="#（1）GRU的结构介绍" class="headerlink" title="（1）GRU的结构介绍"></a>（1）GRU的结构介绍</h5><p><strong>GRU的内部结构图：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/1335117-20180727095108158-462781335.png" alt="image">   </p>
<p><strong>GRU的状态图：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-8134a00c243153bfd9fd2bcbe0844e9c_1200x500.jpg" alt="image">    </p>
<p><strong>GRU的两个门控：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/v2-7fff5d817530dada1b279c7279d73b8a_hd.jpg" alt="image"><br>首先再次强调一下，门控信号（这里的z ）的范围为0~1。门控信号越接近1，代表”记忆“下来的数据越多；而越接近0则代表”遗忘“的越多。</p>
<h5 id="（2）GRU和LSTM的关系"><a href="#（2）GRU和LSTM的关系" class="headerlink" title="（2）GRU和LSTM的关系"></a>（2）GRU和LSTM的关系</h5><p>我们知道GRU也是RNN的一种，且GRU是LSTM的一个变种或者说是简化版，但是他们之间的关系其实是：GRU利用更新门(z)代替了LSTM中的遗忘门和输入门，更新门既可以进行“遗忘”也可以进行“选择记忆”，这一点由<strong>更新表达式</strong>可以看出。</p>
<h4 id="RNN的参考文献"><a href="#RNN的参考文献" class="headerlink" title="RNN的参考文献"></a>RNN的参考文献</h4><p><a href="https://blog.csdn.net/qq_32241189/article/details/80461635">深度学习之RNN(循环神经网络)</a><br><a href="https://zhuanlan.zhihu.com/p/32481747">人人都能看懂的GRU</a><br><a href="https://zhuanlan.zhihu.com/p/32085405">人人都能看懂的LSTM</a><br><a href="https://www.jianshu.com/p/8b78ac379e3a">一文了解LSTM和GRU背后的秘密（绝对没有公式）</a><br><a href="https://www.cnblogs.com/arachis/p/RNN.html">循环神经（LSTM）网络学习总结摘要</a><br><a href="https://blog.csdn.net/jason_cuijiahui/article/details/87517127">什么是白噪声？如何判断时间序列是白噪声？</a><br><a href="https://blog.csdn.net/SUSU0203/article/details/80051692">时间序列分析——自回归移动平均（ARMA）模型</a><br><a href="https://www.cnblogs.com/junge-mike/p/9335054.html">时间序列模式（ARIMA）—Python实现</a></p>
<h3 id="4-奇异谱分析（SSA）"><a href="#4-奇异谱分析（SSA）" class="headerlink" title="4 奇异谱分析（SSA）"></a>4 奇异谱分析（SSA）</h3><p>奇异频谱分析（Singular spectral analysis，SSA）</p>
<h3 id="5-自回归移动平均（ARMA）"><a href="#5-自回归移动平均（ARMA）" class="headerlink" title="5 自回归移动平均（ARMA）"></a>5 自回归移动平均（ARMA）</h3><p>AR（p）,MA（q）<br>因为AR（p）,MA（q）,ARMA（p,q）都是平稳随机过程，对于有些时间序列数据不能很好的进行预测，比如有些数据在时间上具有季节性和或趋势性，像这样<strong>非平稳随机过程</strong>ARMA不能很好的预测，所以引入ARIMA（差分自回归移动平均），即在p,q两个参数的基础上，再加一个将时间序列变为平稳时所做的差分次数d。</p>
<blockquote>
<h4 id="什么是平稳随机过程？"><a href="#什么是平稳随机过程？" class="headerlink" title="什么是平稳随机过程？"></a>什么是平稳随机过程？</h4><p>平稳随机过程就是该随机过程的统计特性不随时间的推移而产生变化，因此其<strong>数学期望</strong>和<strong>方差</strong>都不变。</p>
</blockquote>
<h4 id="ARMA参考文献"><a href="#ARMA参考文献" class="headerlink" title="#ARMA参考文献"></a>#ARMA参考文献</h4><p><a href="https://blog.csdn.net/x_i_y_u_e/article/details/47748479">AR,MA-&gt;ARMA-&gt;ARIMA</a>   </p>
<h3 id="6-差分自回归移动平均（ARIMA）"><a href="#6-差分自回归移动平均（ARIMA）" class="headerlink" title="6 差分自回归移动平均（ARIMA）"></a>6 差分自回归移动平均（ARIMA）</h3><p>差分自回归移动平均模型（Auto Regressive Integrated Moving Average  Model ,简称ARIMA）。|<a href="https://wiki.mbalib.com/wiki/ARIMA">MBA智库-解释</a><br>AR是（Auto Regressive）自回归，p是自回归项；MA（Moving Average）是移动平均，q是移动平均项；d是时间序列成为平稳时所做的差分次数。<br>ARIMA模型的提出是为了解决ARMA模型不能预测非随机平稳过程的问题，ARIMA的<strong>思路</strong>是：现将给定的非平稳随机过程转换成平稳随机过程，然后再使用ARMA模型进行预测。</p>
<h3 id="7-支持向量回归（SVR）"><a href="#7-支持向量回归（SVR）" class="headerlink" title="7 支持向量回归（SVR）"></a>7 支持向量回归（SVR）</h3><p>支持向量回归（Support Vector Regression），SVM的英文全称是Support Vector Machines，中文叫支持向量机。支持向量机是我们用于分类的一种算法。支持向量也可以用于回归，所以叫支持向量回归。</p>
<h3 id="8-三次指数平滑"><a href="#8-三次指数平滑" class="headerlink" title="8 三次指数平滑"></a>8 三次指数平滑</h3><h4 id="8-1-为什么叫“指数平滑”？"><a href="#8-1-为什么叫“指数平滑”？" class="headerlink" title="8.1 为什么叫“指数平滑”？"></a>8.1 为什么叫“指数平滑”？</h4><p>先看公式：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/120150vwlsv88wgehsta8g.jpg" alt="image"><br>从公式中可以看出，该算法对整个时间序列中的数据多进行了计算，但是时间越久远，其对下一时刻的影响越小，指数越大，其权重越小。</p>
<h4 id="8-2-算法优点"><a href="#8-2-算法优点" class="headerlink" title="8.2 算法优点"></a>8.2 算法优点</h4><p>该算法考虑了时间序列的趋势性和季节性。</p>
<h4 id="三次指数平滑参考文献"><a href="#三次指数平滑参考文献" class="headerlink" title="#三次指数平滑参考文献"></a>#三次指数平滑参考文献</h4><p><a href="https://blog.csdn.net/hqr20627/article/details/79403876">时间序列挖掘-三次指数平滑法(Holt-Winters)</a>   </p>
<blockquote>
<h4 id="什么是白噪声？"><a href="#什么是白噪声？" class="headerlink" title="什么是白噪声？"></a>什么是白噪声？</h4><p>纯随机序列，也称为白噪声序列，序列的各项之间没有任何的关系， 序列在进行完全无序的随机波动， 可以终止对该序列的分析。<br>当时间序列预测模型的预测达到了白噪声时，那么该模型就类似于收敛了。</p>
</blockquote>
<blockquote>
<h4 id="机器学习模型中的参数和超参数的区别？"><a href="#机器学习模型中的参数和超参数的区别？" class="headerlink" title="机器学习模型中的参数和超参数的区别？"></a>机器学习模型中的参数和超参数的区别？</h4><p>参数：是模型内部的参数，是模型从历史数据中“学习”到的参数，比如W和b，其值可以通过数据估计然后模型训练得到<br>超参数：是不能从模型中得到的参数，可以理解为模型外的参数，其值不能从数据估计得到<br>参考文件：<a href="https://www.jianshu.com/p/18730bed1b9d">机器学习中模型参数与超参数的区别</a></p>
</blockquote>
<blockquote>
<h4 id="机器学习模型中的训练集、校验集、测试集"><a href="#机器学习模型中的训练集、校验集、测试集" class="headerlink" title="机器学习模型中的训练集、校验集、测试集"></a>机器学习模型中的训练集、校验集、测试集</h4><ul>
<li>训练集：用于训练模型，找出最佳的w和b。</li>
<li>验证集：用以确定模型超参数，选出最优模型。</li>
<li>测试集：仅用于对训练好的最优函数进行性能评估。   </li>
</ul>
<p>参考文献：<a href="https://blog.csdn.net/hohaizx/article/details/81013985">https://blog.csdn.net/hohaizx/article/details/81013985</a></p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的序列化和反序列化</title>
    <url>/tree-series/</url>
    <content><![CDATA[<h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1 题目"></a>1 题目</h2><blockquote>
<p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p>
<p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p>
<p>示例: </p>
<p>你可以将以下二叉树：</p>
<p>​     1</p>
<p>   ​    / \<br>    2   3<br>   ​      / \<br>   ​     4   5</p>
<p>序列化为 “[1,2,3,null,null,4,5]”<br>提示: 这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p>
<p>说明: 不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。</p>
<p>作者：力扣 (LeetCode)<br>链接：<a href="https://leetcode-cn.com/leetbook/read/2021-spring-recruitment/5fyjvv/">https://leetcode-cn.com/leetbook/read/2021-spring-recruitment/5fyjvv/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2 思路"></a>2 思路</h2><h3 id="2-1-序列化"><a href="#2-1-序列化" class="headerlink" title="2.1 序列化"></a>2.1 序列化</h3><p>序列化就是将二叉树转换成一个字符串表示，可以使用二叉树的层序遍历方式进行存储，等反序列化时在使用同样的方式反序列化回去。与正常的反序列不同的是，这里需要判断当前节点的左右子树是否空才加入队列中，不管当前节点的左右子节点是否为空，那么都将其左右子节点添加到队列中。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queue.add(t.left); <span class="comment">//并需要需要判断是否为空</span></span><br><span class="line">queue.add(t.right);</span><br></pre></td></tr></table></figure>

<h3 id="2-2-反序列化"><a href="#2-2-反序列化" class="headerlink" title="2.2 反序列化"></a>2.2 反序列化</h3><p>反序列化就是将一个字符串表示的树转成一个二叉树的结构，此时同样需要借助一个辅助队列完成，当给定字符串能够表示一棵树时，则进行反序列操作，如果不能，则返回$null$。</p>
<p>反序列化过程中，从左节点到右节点的顺序进行反序列化，当前字符串出的值不为$”null”$，则可以进行反序列化。这里还需要一个索引$index$来标注当前位置上的值是表示左子树还是右子树。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3 代码"></a>3 代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            TreeNode t = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(t.val + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">                queue.add(t.left);</span><br><span class="line">                queue.add(t.right);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">&quot;null,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.deleteCharAt(sb.length() - <span class="number">1</span>); <span class="comment">// 删除最后一个逗号</span></span><br><span class="line">        sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deserialize</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        TreeNode root = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.equals(<span class="string">&quot;[]&quot;</span>)) <span class="keyword">return</span> root;</span><br><span class="line">        String[] vals = data.substring(<span class="number">1</span>, data.length() - <span class="number">1</span>).split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        root = <span class="keyword">new</span> TreeNode(Integer.parseInt(vals[<span class="number">0</span>]));</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            TreeNode t = queue.poll();</span><br><span class="line">            <span class="comment">//还原左子树</span></span><br><span class="line">            <span class="keyword">if</span> (!vals[i].equals(<span class="string">&quot;null&quot;</span>)) &#123;</span><br><span class="line">                t.left = <span class="keyword">new</span> TreeNode(Integer.parseInt(vals[i]));</span><br><span class="line">                queue.add(t.left);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="comment">//还原右子树</span></span><br><span class="line">            <span class="keyword">if</span> (!vals[i].equals(<span class="string">&quot;null&quot;</span>)) &#123;</span><br><span class="line">                t.right = <span class="keyword">new</span> TreeNode(Integer.parseInt(vals[i]));</span><br><span class="line">                queue.add(t.right);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec ser = new Codec();</span></span><br><span class="line"><span class="comment">// Codec deser = new Codec();</span></span><br><span class="line"><span class="comment">// TreeNode ans = deser.deserialize(ser.serialize(root));</span></span><br></pre></td></tr></table></figure>





<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Leetcode</tag>
        <tag>hard</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>用两个队列实现栈，java代码实现</title>
    <url>/two-queue-to-stack/</url>
    <content><![CDATA[<h3 id="1-实现原理介绍"><a href="#1-实现原理介绍" class="headerlink" title="1 实现原理介绍"></a>1 实现原理介绍</h3><p>队列和栈的功能在<a href="https://jums.club/two-stacks-to-queue">用两个栈实现队列，java代码实现</a>这边文章中已经介绍过了，这里就不多说了，直接讲实现原理：</p>
<p>当需要插入元素时，总是将新元素插入到那个空的队列中，然后再将另一个有数据的队列中的数据，取出插入到存放新元素的队列中，即可完成栈的功能。<strong>注意，每次执行完一次操作，两个队列中，只有一个队列有数据，要么是A，要么是B。</strong>下面画图介绍具体过程：</p>
<ul>
<li>插入<code>元素1</code></li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427194219821.jpg" alt="直接插入到队列A"></p>
<p>此时有数据的是<code>队列A</code>。</p>
<ul>
<li>插入<code>元素2</code></li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427194853374.jpg" alt="第一步"></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427194927794.jpg" alt="第二步，腾入队列A"></p>
<p>此时有数据的是<code>队列B</code>。</p>
<ul>
<li>插入<code>元素3</code></li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427195232881.jpg" alt="第一步，插入新元素"></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427195326136.jpg" alt="第二步，腾入队列A"></p>
<p>此时有数据的<code>队列A</code>。</p>
<ul>
<li>删除栈顶元素，<code>pop</code>操作</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427195622474.jpg" alt="直接使用队列删除非空队列队首元素"></p>
<h3 id="2-java代码实现"><a href="#2-java代码实现" class="headerlink" title="2 java代码实现"></a>2 <code>java</code>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueToStack</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        QueueToStack queueToStack = <span class="keyword">new</span> QueueToStack();</span><br><span class="line">        queueToStack.push(<span class="number">1</span>);</span><br><span class="line">        queueToStack.push(<span class="number">2</span>);</span><br><span class="line">        queueToStack.push(<span class="number">3</span>);</span><br><span class="line">        queueToStack.push(<span class="number">4</span>);</span><br><span class="line">        queueToStack.pop();</span><br><span class="line">        <span class="keyword">int</span> data = queueToStack.top();</span><br><span class="line">        System.out.println(data);</span><br><span class="line">        System.out.println(queueToStack.empty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Queue&lt;Integer&gt; queueA = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    Queue&lt;Integer&gt; queueB = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Push element x onto stack.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queueA.isEmpty() &amp;&amp; !queueB.isEmpty()) &#123;</span><br><span class="line">            queueA.add(x);</span><br><span class="line">            <span class="keyword">while</span> (!queueB.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">int</span> data = queueB.remove();</span><br><span class="line">                queueA.add(data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!queueA.isEmpty() &amp;&amp; queueB.isEmpty()) &#123;</span><br><span class="line">            queueB.add(x);</span><br><span class="line">            <span class="keyword">while</span> (!queueA.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">int</span> data = queueA.remove();</span><br><span class="line">                queueB.add(data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (queueA.isEmpty() &amp;&amp; queueB.isEmpty()) &#123;</span><br><span class="line">            queueA.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the element on top of the stack and returns that element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queueA.isEmpty() &amp;&amp; !queueB.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> queueB.remove();</span><br><span class="line">        <span class="keyword">return</span> queueA.remove();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the top element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queueA.isEmpty() &amp;&amp; !queueB.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> queueB.peek();</span><br><span class="line">        <span class="keyword">return</span> queueA.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns whether the stack is empty.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queueA.isEmpty() &amp;&amp; queueB.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427174952625.jpg" alt="运行结果"></p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>用两个栈实现队列，java代码实现</title>
    <url>/two-stacks-to-queue/</url>
    <content><![CDATA[<h3 id="1-队列的功能介绍"><a href="#1-队列的功能介绍" class="headerlink" title="1 队列的功能介绍"></a>1 队列的功能介绍</h3><p>队列的功能就是<code>FIFO</code>（先进先出）原则。不管是队列还是栈，他们的功能都是存储数据，底层实现可以数组也可以是链表，但是他们各自有他们的特点。既然队列也是存储数据的一种数据结构，那么他就有<code>增删改查</code>等功能。队列的添加元素是在队尾添加，删除元素是在队头删除。</p>
<p>下面介绍一下队列的<code>增删改查</code>操作：</p>
<ul>
<li><code>push(int x)</code>：在队列尾部添加一个元素</li>
<li><code>pop()</code>：删除队列头部第一个元素</li>
<li><code>empty()</code>：判断是否为空队列</li>
<li><code>peek()</code>：获取队列头部元素</li>
</ul>
<h3 id="2-栈的功能介绍"><a href="#2-栈的功能介绍" class="headerlink" title="2 栈的功能介绍"></a>2 栈的功能介绍</h3><p>栈也是一种存储数据的数据结构，和队列不同的是，这是一种<code>FILO</code>（先进后出）的数据结构，插入和删除都在栈顶完成。</p>
<p>下面介绍一下的栈的<code>增删改查</code>操作：</p>
<ul>
<li><code>push(int x)</code>：向栈中插入一个元素</li>
<li><code>pop()</code>：删除栈顶元素</li>
<li><code>top()</code>：获得栈顶元素，打印，不删除</li>
<li><code>empty()</code>：判断是否为空</li>
</ul>
<h3 id="3-栈实现队列的原理介绍"><a href="#3-栈实现队列的原理介绍" class="headerlink" title="3 栈实现队列的原理介绍"></a>3 栈实现队列的原理介绍</h3><h4 id="3-1-方式1原理介绍"><a href="#3-1-方式1原理介绍" class="headerlink" title="3.1 方式1原理介绍"></a>3.1 方式1原理介绍</h4><p>方式1将栈A作为最终的栈，即栈A中的元素排序和队列中的排序一致，此种方式在<code>push</code>元素入队列时，需要同时操作两个栈，比较消耗时间和空间，但是其他的操作（比如<code>pop</code>,<code>top</code>等）就不会消耗太多的时间和空间资源了。</p>
<p>假设需要向队列中插入4个元素，分别是<code>1,2,3,4</code>：</p>
<p>有两个栈，分别是<code>栈A</code>和<code>栈B</code>：</p>
<p>第一步：向队列中插入<code>元素1</code>，即：向<code>栈A</code>中插入<code>元素1</code>：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427161006175.jpg" alt="插入元素1"></p>
<p>第二步：向队列中插入<code>元素2</code>，即：向将栈A中的元素1放到栈B中，然后将元素2插入栈A中，在将栈B中的元素1放到栈A中：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427161543607.jpg" alt="将栈A中的元素放到栈B中"></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427161559253.jpg" alt="向栈A中插入新元素"></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427161605012.jpg" alt="将栈B中的元素放回到栈A"></p>
<p>如果在插入<code>元素3</code>也是如此，将<code>栈A</code>中的元素放到<code>栈B</code>中，将元素插入到栈A，在将<code>栈B</code>中的元素放回到<code>栈A</code>中即可。</p>
<h4 id="3-2-方式1的java代码实现"><a href="#3-2-方式1的java代码实现" class="headerlink" title="3.2 方式1的java代码实现"></a>3.2 方式1的<code>java</code>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">用两个栈实现队列的功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackToQueue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StackToQueue stackToQueue = <span class="keyword">new</span> StackToQueue();</span><br><span class="line">        stackToQueue.push1(<span class="number">12</span>);</span><br><span class="line">        stackToQueue.push1(<span class="number">13</span>);</span><br><span class="line">        stackToQueue.push1(<span class="number">14</span>);</span><br><span class="line">        stackToQueue.push1(<span class="number">15</span>);</span><br><span class="line">        stackToQueue.pop1();</span><br><span class="line">        stackToQueue.push1(<span class="number">16</span>);</span><br><span class="line">        stackToQueue.size1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stackA = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stackB = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">  </span><br><span class="line"> 	<span class="comment">//add a element to queue</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stackA.empty())&#123;</span><br><span class="line">            stackA.push(x);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (!stackA.empty())</span><br><span class="line">                stackB.push(stackA.pop());</span><br><span class="line">            stackA.push(x);</span><br><span class="line">            <span class="keyword">while</span> (!stackB.empty())</span><br><span class="line">                stackA.push(stackB.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//remove the front element of the queue</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!stackA.empty())</span><br><span class="line">            <span class="keyword">return</span> stackA.pop();</span><br><span class="line">        <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//print the front element of the queue, do not delete, just print</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">peek1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!stackA.empty())</span><br><span class="line">            System.out.println(stackA.peek());</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//print the size of the queue</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">size1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(stackA.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427164802941.jpg" alt="运行结果"></p>
</blockquote>
<h4 id="3-3-方式2原理介绍"><a href="#3-3-方式2原理介绍" class="headerlink" title="3.3 方式2原理介绍"></a>3.3 方式2原理介绍</h4><p>下面介绍的方式1，是在<code>push</code>操作的时候，将其栈中顺序做了调整，也就是变成队列的顺序，但是如果面对那种需要频繁<code>push</code>操作的程序，那么方式1的设计显然有些不合理，那么可以使用方式2，<code>push</code>时，栈A和栈B不做顺序调整，到调用<code>pop</code>或者<code>peek</code>时在调整。</p>
<ul>
<li>向队列中插入三个元素（<code>1,2,3</code>）</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427161006175.jpg" alt="向队列中插入元素1"></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427170000756.jpg" alt="向队列中插入元素2"></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427170008370.jpg" alt="向队列中插入元素3"></p>
<ul>
<li>删除队列中一个元素（<code>1</code>）</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427170223898.jpg" alt="向栈A中元素放到栈B中"></p>
<p>删除<code>栈B</code>中元素，此时两个栈中元素顺序不做改动：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427170310074.jpg" alt="删除栈B中的栈顶元素"></p>
<ul>
<li>再向队列中插入一个新元素（<code>4</code>）</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427170506378.jpg" alt="将栈B中的元素放回到栈A中"></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427170727515.jpg" alt="向栈A中插入新元素4"></p>
<ul>
<li>打印队列的第一个第一个元素，<code>peek</code>操作</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427170853464.jpg" alt="向栈A中的元素放到栈B中"></p>
<p>然后将<code>栈B</code>中的栈顶元素打印，就是队列的第一个元素了。</p>
<h4 id="3-4-方式2的java代码实现"><a href="#3-4-方式2的java代码实现" class="headerlink" title="3.4 方式2的java代码实现"></a>3.4 方式2的<code>java</code>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackToQueue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StackToQueue stackToQueue = <span class="keyword">new</span> StackToQueue();</span><br><span class="line">        stackToQueue.push2(<span class="number">12</span>);</span><br><span class="line">        stackToQueue.push2(<span class="number">13</span>);</span><br><span class="line">        stackToQueue.push2(<span class="number">14</span>);</span><br><span class="line">        stackToQueue.push2(<span class="number">15</span>);</span><br><span class="line">        stackToQueue.pop2();</span><br><span class="line">        stackToQueue.push2(<span class="number">16</span>);</span><br><span class="line">        stackToQueue.peek2();</span><br><span class="line">        stackToQueue.size2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stackA = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stackB = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//push a data to the stack</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push2</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stackA.empty() &amp;&amp; !stackB.empty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stackB.empty()) &#123;</span><br><span class="line">                stackA.push(stackB.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//A is not empty, so push the data to A</span></span><br><span class="line">        stackA.push(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get the size of the stack</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">size2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!stackA.empty())</span><br><span class="line">            <span class="keyword">while</span> (!stackA.empty()) &#123;</span><br><span class="line">                stackA.pop();</span><br><span class="line">                length++;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!stackB.empty())</span><br><span class="line">            <span class="keyword">while</span> (!stackB.empty()) &#123;</span><br><span class="line">                stackB.pop();</span><br><span class="line">                length++;</span><br><span class="line">            &#125;</span><br><span class="line">        System.out.println(length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//remove the top element data</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stackA.empty() &amp;&amp; stackB.empty())<span class="comment">//都为空时</span></span><br><span class="line">            System.out.println(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!stackA.empty())&#123;<span class="comment">//执行pop之前的操作，都是push，此时栈B是空的</span></span><br><span class="line">            <span class="keyword">while</span> (!stackA.empty())</span><br><span class="line">                stackB.push(stackA.pop());</span><br><span class="line">            stackB.pop();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (stackA.empty() &amp;&amp; !stackB.empty())<span class="comment">//上一步执行的pop操作，栈A是空的，</span></span><br><span class="line">            stackB.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//print the top element data</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">peek2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stackA.empty() &amp;&amp; stackB.empty())<span class="comment">//都为空时</span></span><br><span class="line">            System.out.println(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!stackA.empty())&#123;<span class="comment">//执行pop之前的操作，都是push，此时栈B是空的</span></span><br><span class="line">            <span class="keyword">while</span> (!stackA.empty())</span><br><span class="line">                stackB.push(stackA.pop());</span><br><span class="line">            System.out.println(stackB.peek());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (stackA.empty() &amp;&amp; !stackB.empty())<span class="comment">//上一步执行的pop操作，栈A是空的，</span></span><br><span class="line">            System.out.println(stackB.peek());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200427172458121.jpg" alt="运行结果"></p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
        <tag>program language</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>typora使用快捷键</title>
    <url>/typra-usage/</url>
    <content><![CDATA[<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h3><p><a href="https://typora.io/#windows">下载链接</a></p>
<h3 id="2-快捷键"><a href="#2-快捷键" class="headerlink" title="2 快捷键"></a>2 快捷键</h3><ol>
<li><p>加粗： Ctrl + B</p>
</li>
<li><p>斜体：Ctrl + I</p>
</li>
<li><p>下划线：Ctrl + U</p>
</li>
<li><p>代码：Ctrl + Shift + `</p>
</li>
<li><p>删除线：Alt + Shift + 5</p>
</li>
<li><p>超链接：Ctrl + K</p>
</li>
<li><p>图片：Ctrl + Shift + I</p>
</li>
<li><p>标题：Ctrl + 数字 （代表生成几级标题）</p>
</li>
<li><p>引用： Ctrl + Shift + Q</p>
</li>
<li><p>无序列表： * + 空格 （需另起一行）</p>
</li>
<li><p>有序列表：</p>
</li>
<li><p>分割线： 三个 -</p>
</li>
<li><p>回到顶端：Ctrl + Home</p>
</li>
<li><p>回到底部：Ctrl + End</p>
</li>
</ol>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>解决python3 UnicodeEncodeError: &#39;gbk&#39; codec can&#39;t encode character &#39;\xXX&#39; in position XX</title>
    <url>/unicode-error-sloved/</url>
    <content><![CDATA[<h3 id="1-错误"><a href="#1-错误" class="headerlink" title="1 错误"></a>1 错误</h3><p>在使用爬虫爬取网络数据时，容易报下面的错误，也就是Unicode解码错误。<br><code>UnicodeEncodeError: &#39;gbk&#39; codec can&#39;t encode character &#39;\xbb&#39; in position 0: illegal multibyte sequence</code></p>
<p>str转bytes叫encode，bytes转str叫decode，如上面的代码就是将抓到的字节流给decode成unicode数组，我们使用下面的代码测试一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;\xc2\xbb&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：UnicodeEncodeError: ‘gbk’ codec can’t encode character ‘\xbb’ in position 0: illegal multibyte sequence</p>
</blockquote>
<p>从结果可以看出，报错了。和爬虫的错误一模一样。</p>
<h4 id="错误原因解析"><a href="#错误原因解析" class="headerlink" title="错误原因解析"></a>错误原因解析</h4><p><code>python</code>语言自身的限制，由于<code>print()</code>方法并不能完全输出所有的<code>unicode</code>编码中的字符，所以我们有时候在使用爬虫的时候，会报这个错误。</p>
<h3 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2 解决方法"></a>2 解决方法</h3><p>在爬虫的文件头部，加上下面的代码即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line">sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding=<span class="string">&quot;utf8&quot;</span>)  <span class="comment">## encoding 的参数写成网站的编码格式即可</span></span><br></pre></td></tr></table></figure>

<p>其中，中文编码的大小：<strong>gbk&lt;gb2312&lt;gb18030</strong>，一般情况下，<code>gb18030</code>编码都能解析<code>gbk</code>不能解析的编码信息。</p>
<h3 id="转载博客"><a href="#转载博客" class="headerlink" title="转载博客"></a>转载博客</h3><blockquote>
<p>原文：<a href="https://blog.csdn.net/jim7424994/article/details/22675759">https://blog.csdn.net/jim7424994/article/details/22675759</a></p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>美国区apple ID充值教程以及需要注意的一些问题</title>
    <url>/us-apple-id-recharge/</url>
    <content><![CDATA[<h2 id="1-注册美区Apple-ID"><a href="#1-注册美区Apple-ID" class="headerlink" title="1 注册美区Apple ID"></a>1 注册美区Apple ID</h2><h2 id="2-给美区Apple-ID充值美元"><a href="#2-给美区Apple-ID充值美元" class="headerlink" title="2 给美区Apple ID充值美元"></a>2 给美区Apple ID充值美元</h2><p>前提准备：</p>
<ul>
<li>一个机场，可以翻墙的机场</li>
<li>一个已经注册好的美区的<code>Apple ID</code></li>
<li>一张双币信用卡，最好是美国运通（America Express）的，因为实测visa或者万事达的好像充值总是失败</li>
</ul>
<p>给美区<code>Apple ID</code>充值美元的方式有是三种，分别为：购买美国<code>gift card</code>进行充值，绑定美国发行的信用卡（<strong>注意：这里只能是美国发行的信用卡，下面的Q&amp;A会作详细解答</strong>）以及美国区的<code>PayPal</code>账号（这里也只能是美国的<code>PayPal</code>账号）。</p>
<h3 id="2-1-通过购买gift-card进行充值"><a href="#2-1-通过购买gift-card进行充值" class="headerlink" title="2.1 通过购买gift card进行充值"></a>2.1 通过购买gift card进行充值</h3><h4 id="2-1-1-美国官网购买"><a href="#2-1-1-美国官网购买" class="headerlink" title="2.1.1 美国官网购买"></a>2.1.1 美国官网购买</h4><p>可以谷歌搜索<code>gift card</code>或者直接点击该<a href="https://www.apple.com/shop/gift-cards">链接</a>跳转到<code>gift card</code>充值页面。</p>
<p><strong>注意：这里需要特别注意，一定要在美国官网进行充值，在中国官网购买的充值卡只能在国区的<code>Apple ID</code>进行使用，且中国官网购买的充值卡充值之后，只能在<code>APP Store</code>进行消费，而美国区官网购买的充值卡充值之后不仅可以在<code>APP Store</code>进行消费，还可以在<code>iTunes Store</code>等苹果其他的商店进行消费，也就是说美国官网购买的充值卡的钱是通用的，而中国区的只能在<code>APP Store</code>进行消费（再说了，国内的<code>APP</code>可以直接绑定支付宝或者微信直接购买，不需要购买充值卡）。</strong></p>
<p>进入到苹果官网的充值界面如下：</p>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113155251.png" style="zoom:67%;" />

<p>特别要注意看一下底部的国家是否是美国，如果不是美国，记得修改称美国。</p>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113155420.png" style="zoom:67%;" />

<p>然后就可以点击购买（buy）按钮进行购买了。购买步骤如下：</p>
<blockquote>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113162141.png" style="zoom:67%;" />

<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113162210.png" style="zoom:67%;" />

<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113162306.png" style="zoom:67%;" />

<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113162737.png" style="zoom:67%;" />

<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113162911.png" style="zoom:67%;" />

<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113163110.png" style="zoom:67%;" />

<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113163231.png" style="zoom:67%;" />

<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113163404.png" style="zoom: 50%;" />

<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113163629.png" style="zoom:67%;" />

<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113163836.png" style="zoom:67%;" />
</blockquote>
<p>这里有一个地方需要注意，如果你是<code>visa</code>、<code>master card</code>的卡，可能会充值不成功，订单界面提示This item was canceled on January 11, 2021 and you have not been billed for it，<strong>具体解答，请看Q&amp;A的第4点</strong>。</p>
<h4 id="2-1-2-淘宝购买（有风险）"><a href="#2-1-2-淘宝购买（有风险）" class="headerlink" title="2.1.2 淘宝购买（有风险）"></a>2.1.2 淘宝购买（有风险）</h4><p><a href="https://www.youtube.com/watch?v=ZoxobfnKJ3c&ab_channel=%E5%90%91%E5%8C%97">淘宝购买gift card油管教程</a></p>
<p>直接再淘宝搜索<code>gift card</code>即可，但是还是不要贪小便宜，购买之前和卖家沟通好，尽量降低封号的风险。</p>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113160020.png" style="zoom:67%;" />

<p>购买之后，淘宝卖家会给你发送一个激活码，直接复制该激活码到苹果的<code>APP Store</code>进行兑换即可。当你再淘宝上购买好<code>gift card</code>之后，便可以进行兑换了，兑换步骤如下：</p>
<blockquote>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113160246.png" style="zoom:67%;" />

<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113160349.png"  />

<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113160511.png" alt=""></p>
</blockquote>
<p>充值成功之后，便可以看到这二张图的下面有个余额的提示，便可以看到自己的充值已经到账了。然后就可以购物了。</p>
<h2 id="3-Q-amp-A"><a href="#3-Q-amp-A" class="headerlink" title="3 Q&amp;A"></a>3 Q&amp;A</h2><blockquote>
<ol>
<li>购买<code>gift card</code>并且到账之后，是否还需要绑定双币信用卡或者美国<code>PayPal</code>？</li>
</ol>
<p>答：不需要，<code>gift card</code>和绑定双币信用卡或者美国<code>PayPal</code>时平行的，也就是说这三者只要满足一项，就可以进行付费APP的购买。</p>
</blockquote>
<blockquote>
<ol start="2">
<li>可以给美国区的<code>Apple ID</code>帮定国内的<code>visa</code>、<code>master card</code>、<code>america express</code>吗？</li>
</ol>
<p>答：不可以，美国区的<code>Apple ID</code>只能绑定<strong>由美国发行的信用卡</strong>，有些小伙伴可能认为只要能消费美元的信用卡就可以，其实就算你绑定美国区<code>Apple ID</code>之后，苹果也能够识别你是大陆的信用卡，然后你的美国区账号就会被强制转成国区的<code>Apple ID</code>了，这就得不偿失了，所以建议不要尝试，如果不信邪，那可以试试，最后你可能需要重新注册一个美区<code>Apple ID</code>。</p>
</blockquote>
<blockquote>
<ol start="3">
<li>充值成功之后，购买付费<code>APP</code>提示以下图所示内容应该如何处理（<a href="https://www.idownloadblog.com/2020/09/14/your-purchase-could-not-be-completed-fix/">Your Purchase Could Not Be Completed in the App Store</a>）应该如何处理。</li>
</ol>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/Your-Purchase-Could-Not-Be-Completed-Message-768x477.jpg" style="zoom:50%;" />

<p>答：下面给出以下几种解决方案，该解决方案是从该<a href="https://www.idownloadblog.com/2020/09/14/your-purchase-could-not-be-completed-fix/">链接</a>获得，如果需要可以访问原链接。</p>
<ul>
<li><p>该商品在您所在的国家/地区不可用</p>
<blockquote>
<p>您无法购买的最常见原因之一是您所在的国家/地区不提供该应用或商品。</p>
<p>通常，您会收到一条错误消息，指出这一点；但是，不能保证。因此，请访问App Store在线，开发人员的网站，或进行一些研究，以查看是否可以在您居住的国家/地区购买该产品。您甚至可能找到可用的其他版本的应用程序。</p>
</blockquote>
</li>
<li><p>您的Apple ID被禁用或锁定</p>
<blockquote>
<p>为了保护您，如果多次错误输入您的密码或其他帐户信息，Apple会自动锁定您的Apple ID。显然，这是为了防止未经授权的用户访问和使用您的帐户。</p>
<p>通过两因素身份验证，请使用“受信任的”设备或电话号码来重置Apple ID的密码。如果您没有可信任的设备或号码，并且对Apple ID设置了安全性问题，请转到<a href="https://iforgot.apple.com/password/verify/appleid">“忘记密码”页面，</a>然后按照提示进行操作。</p>
<p>如果您不能执行任何操作，则可以直接向<a href="https://getsupport.apple.com/">Apple支持寻求帮助以</a>解决此问题。</p>
</blockquote>
</li>
<li><p>您的付款方式无法收费</p>
<blockquote>
<p>您的信用卡可能已被拒绝，由于到期日期需要更新，或者帐单信息错误。您<em>应该会</em>看到一条消息，说明您的付款方式存在问题。</p>
<p>幸运的是，您可以在大多数设备上轻松管理付款方式。对于iPhone，iPad和Mac等Apple设备，请访问此页面以<a href="https://support.apple.com/en-us/HT201266">更改，添加或删除Apple ID付款方式</a>。对于Android，PC或Chromebook等非Apple设备，请访问此页面以<a href="https://support.apple.com/en-us/HT210755">更改不使用Apple设备的Apple ID付款方式</a>。</p>
<p>然后，查看您的付款方式和信息，进行必要的更改，然后再次尝试购买。如果您只有一种付款方式，也可以考虑将另一种付款方式添加到您的帐户中。查看有关<a href="https://support.apple.com/en-us/HT201359">如何对App Store和iTunes购买进行计费的文章</a>。</p>
</blockquote>
</li>
<li><p>您的Apple ID与太多付款方式相关联</p>
<blockquote>
<p>另一方面，只有一种付款方式附加到您的Apple ID上，另一方面，这种方式太多了。Apple发现这是可疑活动，可能会导致您的Apple ID被锁定。</p>
<p>您会发现这是一个有点普遍的问题，<a href="https://discussions.apple.com/thread/8118345">在Apple社区论坛</a>中已经多次提出。答案通常是联系Apple支持。因此，如果您收到一条消息，说您的Apple ID上附有太多信用卡，或者认为您可能会这样做，则联系Apple支持是解决此问题的最佳方法。</p>
</blockquote>
</li>
<li><p>屏幕时间设置阻止了购买</p>
<blockquote>
<p>如果您为自己或与您共享设备的孩子使用“屏幕时间”，则您在这些设置中可能会限制购买。若要快速检查，请按照下列步骤。</p>
<p><strong>1）</strong>打开<strong>设置，</strong>然后选择<strong>屏幕时间</strong>。</p>
<p><strong>2）</strong>选择“<strong>内容和隐私限制”</strong>。</p>
<p><strong>3）</strong>如果启用此设置，请点击“ <strong>iTunes＆App Store购买”</strong>。</p>
<p><strong>4）</strong>如果“<strong>应用内购买”</strong>设置为“不允许”，请点击并将其更改为“允许”。</p>
<p><strong>注意</strong>：如果您设置了“屏幕时间”密码，则在执行上述步骤时，系统会要求您输入该密码。</p>
<p>另一个要检查的地方是“<strong>内容和隐私限制”</strong>。点击“<strong>允许的应用程序”</strong>，并确保启用了<strong>iTunes Store</strong>（如果需要，还有Book Store）。</p>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/Screen-Time-Content-Restrictions-Purchases-and-iTunes-2048x1203.jpg" style="zoom: 33%;" />

<p>有关<a href="https://www.idownloadblog.com/tag/screen-time/">使用“屏幕时间”的</a>更多帮助，请查看以下操作方法：</p>
<ul>
<li><a href="https://www.idownloadblog.com/2019/10/17/how-to-restrict-websites-on-mac-screen-time-kids/">如何使用屏幕时间限制或仅允许Mac上的某些网站</a></li>
<li><a href="https://www.idownloadblog.com/2019/12/11/screen-time-communication-limits-ios/">如何在iOS上使用屏幕时间通信限制</a></li>
<li><a href="https://www.idownloadblog.com/2018/06/14/limit-kids-screen-time/">如何在iPhone和iPad上限制孩子的屏幕显示时间</a></li>
</ul>
</blockquote>
</li>
<li><p>您可以尝试的其他方法</p>
<blockquote>
<p>如果仍然被告知“您的购买无法完成”，而上述原因似乎都不是造成您无能的原因，那么您可以尝试以下其他方法。</p>
<ul>
<li><strong>确保使用正确的Apple ID</strong>：您是否<a href="https://www.idownloadblog.com/2014/08/05/how-to-create-apple-id-without-credit-card/">创建了没有信用卡的Apple ID</a>？如果是这样，则您可能使用了错误的商品进行购买。</li>
<li><strong>注销您的Apple ID并再次</strong>登录：有时只需注销并重新登录即可解决最简单的问题。</li>
<li><strong>重新启动设备</strong>：您的设备可能暂时出现故障，因此重新启动设备可以解决此问题。</li>
</ul>
<p><strong>如果所有其他方法都失败，请联系Apple支持。</strong></p>
<p><strong>1）</strong>转到“<a href="https://getsupport.apple.com/">获取支持”页面</a>。</p>
<p><strong>2）</strong>选择“<strong>计费和订阅”</strong>。</p>
<p><strong>3）</strong>点击<strong>订阅和购买</strong>。</p>
<p><strong>4）</strong>选择<strong>无法购买</strong>。</p>
</blockquote>
</li>
</ul>
</blockquote>
<blockquote>
<ol start="4">
<li>使用<code>visa</code>或者万事达双币信用卡通过美国苹果官网购买<code>gift card</code>提示<code>This item was canceled on January 11, 2021 and you have not been billed for it.</code>（如下图所示），表示订单被取消，这是怎么回事？</li>
</ol>
<img src= "/img/loading.gif" data-src="https://jums.club/images/article/20210113164209.png" style="zoom:67%;" />

<p>答：这种情况，目前还不能给出一个合理的解释，使用中国发行的美国运通（America Express）的双币信用卡就可以充值成功，但是使用<code>visa</code>或者万事达的却不可以，有点玄学，如果没有美国运通的信用卡可以申请一张，或者淘宝购买也行，但是淘宝购买会有风险，这里还是简历将<code>visa</code>或者万事达注销然后申请一张美国运通的卡。</p>
</blockquote>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>解决问题</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu系统如何使用SSH协议连接root用户</title>
    <url>/use-ssh-connect-the-root-of-ubuntu/</url>
    <content><![CDATA[<h2 id="1-How-to-Fix-‘E-Could-not-get-lock-var-lib-dpkg-lock’-Error-in-Ubuntu-Linux"><a href="#1-How-to-Fix-‘E-Could-not-get-lock-var-lib-dpkg-lock’-Error-in-Ubuntu-Linux" class="headerlink" title="1 How to Fix ‘E: Could not get lock /var/lib/dpkg/lock’ Error in Ubuntu Linux"></a>1 How to Fix ‘E: Could not get lock /var/lib/dpkg/lock’ Error in Ubuntu Linux</h2><p><a href="https://itsfoss.com/could-not-get-lock-error/">resloved page</a></p>
<p>use the following command see what thread take the <code>apt</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps aux | grep -i apt</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/home/root123<span class="comment"># ps aux | grep -i apt</span></span><br><span class="line">root       3495  0.0  0.8 227104 33796 ?        SNl  06:32   0:00 /usr/bin/python3 /usr/sbin/aptd</span><br><span class="line">root       7697  0.0  0.0   4508   744 ?        Ss   06:38   0:00 /bin/sh /usr/lib/apt/apt.systemd.daily install</span><br><span class="line">root       7706  0.0  0.0   4508  1696 ?        S    06:38   0:00 /bin/sh /usr/lib/apt/apt.systemd.daily lock_is_held install</span><br><span class="line">root      10067  0.0  0.0  21292  1088 pts/18   S+   06:41   0:00 grep --color=auto -i apt</span><br></pre></td></tr></table></figure>

<p>at line 3, you will see the program <code>apt.systemd.daily install</code>, it’s means, you are locked.</p>
<p>Well, it is simple to handle it, you just use the following command to kill this program, the problem is solved.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> 7697</span><br></pre></td></tr></table></figure>

<p>After that, you can install any software you want. For example, I am trying to install <code>vim</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/home/root123<span class="comment"># apt install vim</span></span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  vim-common vim-runtime vim-tiny</span><br><span class="line">Suggested packages:</span><br><span class="line">  ctags vim-doc vim-scripts vim-gnome-py2 | vim-gtk-py2 | vim-gtk3-py2 | vim-athena-py2 | vim-nox-py2 indent</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  vim vim-runtime</span><br><span class="line">The following packages will be upgraded:</span><br><span class="line">  vim-common vim-tiny</span><br><span class="line">2 upgraded, 2 newly installed, 0 to remove and 629 not upgraded.</span><br><span class="line">Need to get 6,205 kB/6,754 kB of archives.</span><br><span class="line">After this operation, 30.0 MB of additional disk space will be used.</span><br><span class="line">Do you want to <span class="built_in">continue</span>? [Y/n] y</span><br><span class="line">Get:1 http://us.archive.ubuntu.com/ubuntu xenial-updates/main amd64 vim-runtime all 2:7.4.1689-3ubuntu1.5 [5,169 kB]</span><br><span class="line">Get:2 http://us.archive.ubuntu.com/ubuntu xenial-updates/main amd64 vim amd64 2:7.4.1689-3ubuntu1.5 [1,036 kB]</span><br><span class="line">Fetched 6,205 kB <span class="keyword">in</span> 3s (1,965 kB/s)</span><br><span class="line">(Reading database ... 178388 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../vim-tiny_2%3a7.4.1689-3ubuntu1.5_amd64.deb ...</span><br><span class="line"></span><br><span class="line">Progress: [  0%] [..........................................................................................................] </span><br><span class="line">Unpacking vim-tiny (2:7.4.1689-3ubuntu1.5) over (2:7.4.1689-3ubuntu1.2) ....................................................]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>Now, I can use <code>vim</code> free.</p>
<h2 id="2-Reference"><a href="#2-Reference" class="headerlink" title="2 Reference"></a>2 Reference</h2><p>All the answer is from this <a href="https://itsfoss.com/could-not-get-lock-error/">page</a>.</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo绑定个人域名如何实现https访问</title>
    <url>/use-cloudfree-make-your-hexo-to-https/</url>
    <content><![CDATA[<h3 id="1-发现问题"><a href="#1-发现问题" class="headerlink" title="1 发现问题"></a>1 发现问题</h3><p>当我们使用<code>github</code>+<code>hexo</code>+<code>personal domain</code>做自己的博客时，会发现只有http访问，不能进行https访问，关于个人域名的申请，请参考<a href="https://jums.club/personal-domain-for-github-page/">这篇博客</a>，这里介绍一个网站<a href="https://dash.cloudflare.com/">cloudflare</a>，他是国外的一个提供网站安全管理、性能优化及相关的技术支持的网站，<code>github</code>服务器在国外，所以有时候可能会被墙，这个时候<a href="https://dash.cloudflare.com/">cloudflare</a>就发挥作用了。</p>
<h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>首先去<a href="https://dash.cloudflare.com/">cloudflare</a>注册一个账号，建议用邮箱注册。然后去首页添加自己的域名，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191126125256.png" alt="add site"><br>然后在点击SSL/TLS按钮将加密模式选为<strong>flexible</strong>：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191126125421.png" alt="flexible"><br>再然后就是点击page ranks按钮添加对应的域名，一个是www，另一个是域名本身，如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191126125633.png" alt="page ranks"><br>再然后点击DNS按钮，填上下图所示的信息，你的域名本身以及带www的域名：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191126125913.png" alt="dns"><br>最后，修改域名提供商上的nameserver地址，我是用的<a href="https://jums.club/personal-domain-for-github-page/">腾讯云域名</a>，如下所示：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191126130329.png" alt="alert nameserver">   </p>
<h3 id="3-查看邮箱邮件"><a href="#3-查看邮箱邮件" class="headerlink" title="3 查看邮箱邮件"></a>3 查看邮箱邮件</h3><p>当你设置完之后，过一会（官方说是72小时内）你会收到一封邮件，内容如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191126130752.png" alt="status active"><br>还有收到一封欢迎加入cloudflare的邮件，如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191126130859.png" alt="welcome to cloudflare"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>好用的chrome插件，方便开发</title>
    <url>/useful-chrome-plugins/</url>
    <content><![CDATA[<h2 id="1-EditCookie"><a href="#1-EditCookie" class="headerlink" title="1 EditCookie"></a>1 EditCookie</h2><p><a href="https://chrome.google.com/webstore/detail/editcookie/eognaopbbjmpompmibmllnddafjhbfdj/related">chrome链接</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210909161210.png" alt=""></p>
<p>点击右上角的按钮，即可修改当前网页的<code>cookie</code>数据。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210909161312.png" alt=""></p>
<h2 id="2-JSON-handle"><a href="#2-JSON-handle" class="headerlink" title="2 JSON-handle"></a>2 JSON-handle</h2><p><a href="https://chrome.google.com/webstore/detail/empty-title/iahnhfdhidomcpggpaimmmahffihkfnj">chrome链接</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210909161428.png" alt=""></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210909164044.png" alt=""></p>
<h2 id="3-OneTab"><a href="#3-OneTab" class="headerlink" title="3 OneTab"></a>3 OneTab</h2><p><a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall">chrome链接</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210909195930.png" alt=""></p>
<h2 id="4-Wappalyzer"><a href="#4-Wappalyzer" class="headerlink" title="4 Wappalyzer"></a>4 Wappalyzer</h2><p><a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg?hl=zh-CN">Wappalyzer</a> 是一个为技术人员准备的插件，它能够识别当前网站所用技术，比如使用的编程语言、数据库、Web服务器、框架和库、甚至WordPress这样的CMS等，都可以识别出来，对于喜欢研究各种工具和技术的人来说是一款非常好用的插件</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/Wappalyzer.jpg" alt=""></p>
<h2 id="5-简悦"><a href="#5-简悦" class="headerlink" title="5 简悦"></a>5 简悦</h2><p><a href="https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll?hl=zh-CN">简悦</a>是一款Chrome阅读模式插件，能够让你在阅读文章时一键进入专注模式，屏蔽掉一切不相干的网页元素，只展示正文，适合经常需要阅读网页的人使用</p>
<p>简悦还支持许多定制功能，包括定制阅读器样式、定制快捷键、保存与分享文章、稍后阅读等，集成你需要的工具，让工作更简单</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/%E7%AE%80%E7%BA%A6.jpg" alt=""></p>
<h2 id="6-Extension-Manager"><a href="#6-Extension-Manager" class="headerlink" title="6 Extension Manager"></a>6 Extension Manager</h2><p>Chrome的很多插件非常强大，有些朋友可能就会安装很多插件，让自己上网体验更好，但是插件安装一多，问题也就随着而来了，最明显的一个问题就是插件的管理，过多的插件会导致真正需要时，很难找到自己想用的插件</p>
<p><a href="https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco?hl=zh-CN">Extension Manager</a> 就是一个专门为管理插件而生的，首先，它可以让你在扩展栏快速禁用和启用某个扩展，非常方便的实现管理。对于有更多需求的人，它还提供了一键切换功能，你可以把不同的插件归类，根据工作需要，快速切换不同的分组，在不同的场景下仅使用特定插件，提高你的工作效率</p>
<p>有些朋友可能想要管理扩展，但不习惯Extension Manager的用法，你可以查看其他我们推荐的<a href="https://www.v1tx.com/post/best-chrome-extension-manager/">Chrome扩展管理工具</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/ExtensionManager.jpg" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.v1tx.com/post/best-chrome-extensions/">https://www.v1tx.com/post/best-chrome-extensions/</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>视频test</title>
    <url>/video-1/</url>
    <content><![CDATA[<h3 id="1-video-demo"><a href="#1-video-demo" class="headerlink" title="1.video demo"></a>1.video demo</h3><p>这是一个视频demo，hexo可以通过GitHub实现视频播放功能，下面这段视频的Markdown代码如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;video id=&quot;video&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;https://jums.club/images/article/IMG_2987.JPG&quot; width=&quot;720&quot; height=&quot;480&quot;&gt;</span><br><span class="line">      &lt;source id=&quot;mp4&quot; src=&quot;https://jums.club/images/article/videos/123.mp4&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class="line">&lt;/video&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-注意"><a href="#2-注意" class="headerlink" title="2.注意"></a>2.注意</h3><blockquote>
<p><strong>在GitHub上的视频必须是小于20M的视频才可以，可以使用视频压缩技术对视频进行压缩</strong></p>
</blockquote>
<video id="video" controls="" preload="none" poster="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/IMG_2987.JPG" width="720" height="480">
      <source id="mp4" src="https://cdn.jsdelivr.net/gh/crazyjums/crazyjums.github.io@master/images/article/videos/123.mp4" type="video/mp4">
</video>

<h3 id="3-引用B站上的视频"><a href="#3-引用B站上的视频" class="headerlink" title="3.引用B站上的视频"></a>3.引用<a href="https://www.bilibili.com/">B站</a>上的视频</h3><p>下面的视频的引用代码如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=75534775&amp;cid=129216147&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; width=&quot;720&quot; height=&quot;480&quot;&gt; &lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>建议：</strong> 我们可以将我们自己的视频上传到B站然后下面的代码格式对自己的视频进行引用</p>
</blockquote>
<iframe src="//player.bilibili.com/player.html?aid=75534775&cid=129216147&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="720" height="480"> </iframe>


<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>play</tag>
        <tag>movie</tag>
      </tags>
  </entry>
  <entry>
    <title>查看hexo已经安装的三方包命令</title>
    <url>/view-package-of-npm/</url>
    <content><![CDATA[<h3 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm list --depth 0</span><br></pre></td></tr></table></figure>

<p><strong>命令解释：</strong>   </p>
<ul>
<li>–depth  查看已经三方的深度，默认是显示所有，用0只显示最外层</li>
</ul>
<p><strong>显示结果下所示：</strong><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20191123135324.png" alt=""> </p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>virtualenv在不同操作系统中的系统方式</title>
    <url>/virtualenv-start/</url>
    <content><![CDATA[<h3 id="windows系统"><a href="#windows系统" class="headerlink" title="windows系统"></a>windows系统</h3><p>加入你的虚拟环境就在<code>c:\Users\user_name\my_env</code>下，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\user_name&gt;cd env\venv\scripts</span><br><span class="line">C:\Users\user_name&gt;activate  ##开启虚拟环境</span><br><span class="line">(venv)C:\Users\user_name&gt;</span><br></pre></td></tr></table></figure>

<h3 id="linux-or-mac"><a href="#linux-or-mac" class="headerlink" title="linux or mac"></a>linux or mac</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">virtualenv myproject ### 创建一个虚拟环境</span><br><span class="line">source myproject/bin/activate  ### 开启虚拟环境</span><br></pre></td></tr></table></figure>

<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>vim入门教程</title>
    <url>/vim-tutoraials/</url>
    <content><![CDATA[<h2 id="1-键盘图"><a href="#1-键盘图" class="headerlink" title="1 键盘图"></a>1 键盘图</h2><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/vi-vim-cheat-sheet-sch.png" alt=""></p>
<h2 id="2-vim-vi工作模式"><a href="#2-vim-vi工作模式" class="headerlink" title="2 vim/vi工作模式"></a>2 vim/vi工作模式</h2><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/vim-vi-workmodel.png" alt=""></p>
<h3 id="（1）命令模式"><a href="#（1）命令模式" class="headerlink" title="（1）命令模式"></a>（1）命令模式</h3><p>用户刚刚启动 vi/vim，便进入了命令模式。</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下<code>i</code>，并不会输入一个字符，i被当作了一个命令。</p>
<p>以下是常用的几个命令：</p>
<ul>
<li><code>i</code> 切换到输入模式，以输入字符。</li>
<li><code>x</code> 删除当前光标所在处的字符。</li>
<li><code>:</code> 切换到底线命令模式，以在最底一行输入命令。</li>
<li><code>dd</code>，按两下<code>d</code>，表示剪切这一行内容</li>
<li><code>p</code>，表示将剪切的内容粘贴到这一行</li>
<li><code>gg</code>，跳转到文本的第一行</li>
<li><code>G</code>/<code>shift + g</code>，跳转到文本的最后一行</li>
<li><code>0</code>/<code>home</code>，在当前行按下<code>0</code>，光标跳转到当前行的第一个字符</li>
<li><code>shift + 4</code>/<code>end</code>，快速跳转到当前行的最后一个字符</li>
</ul>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下<code>i</code>，切换到输入模式。</p>
<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>
<h3 id="（2）输入模式"><a href="#（2）输入模式" class="headerlink" title="（2）输入模式"></a>（2）输入模式</h3><p>在命令模式下按下<code>i</code>就进入了输入模式。</p>
<p>在输入模式中，可以使用以下按键：</p>
<ul>
<li><strong>字符按键以及Shift组合</strong>，输入字符</li>
<li><strong>ENTER</strong>，回车键，换行</li>
<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>
<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>
<li><strong>方向键</strong>，在文本中移动光标</li>
<li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li>
<li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li>
<li><strong>Insert</strong>，切换光标为<code>输入</code>/<code>替换</code>模式，光标将变成竖线/下划线</li>
<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>
</ul>
<h3 id="（3）底线命令模式"><a href="#（3）底线命令模式" class="headerlink" title="（3）底线命令模式"></a>（3）底线命令模式</h3><p>按下<strong>ESC</strong>键这后，再按下<code>:</code>即可进入底线命令模式，下面是常用的底线命令：</p>
<ul>
<li><code>q</code>，不保存，直接退出</li>
<li><code>q!</code>，不保存，强制退出</li>
<li><code>w</code>，写入磁盘，但是不退出</li>
<li><code>w!</code>，强制保存，不退出</li>
<li><code>wq</code>/<code>x</code>，保存并退出</li>
<li><code>wq!</code>，强制保存并退出</li>
<li><code>e!</code>，放弃所有修改，从上次保存文件开始再编辑</li>
<li><code>/&#123;content&#125;</code>，搜索<code>&#123;content&#125;</code>字符串</li>
<li><code>&#123;num&#125;</code>，跳转到具体的行数</li>
<li><code>set nu</code>，显示行号</li>
</ul>
<h2 id="4-常用vim命令"><a href="#4-常用vim命令" class="headerlink" title="4 常用vim命令"></a>4 常用vim命令</h2><ul>
<li><p>创建分屏：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim -on file1 file2 ... </span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.vim.org">https://www.vim.org</a></li>
<li><a href="https://vimjc.com/">专注于Vim配置、插件、Vim命令和Vim教程</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/68111471">精通 VIM ，此文就够了</a></li>
<li><a href="https://vimawesome.com/">vim插件网站</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/46359511">https://zhuanlan.zhihu.com/p/46359511</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>vmware下安装的centos虚拟机，不能访问外网</title>
    <url>/vmware-machine-can-not-connect-to-internet/</url>
    <content><![CDATA[<h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h3><p>使用<code>vmware</code>安装了<code>centos</code>虚拟机之后，发现不能访问外网，所以就网上搜了一下，现已经解决，但是还不能通过<code>xsheel</code>连接虚拟机。</p>
<h3 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h3><h4 id="2-1-修改静态IP"><a href="#2-1-修改静态IP" class="headerlink" title="2.1 修改静态IP"></a>2.1 修改静态IP</h4><p>使用命令<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code>打开网卡文件，修改IP地址，下面是该文件的原文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">PEERDNS=yes</span><br><span class="line">PEERROUTES=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_PEERDNS=yes</span><br><span class="line">IPV6_PEERROUTES=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=ec30e582-de8f-4ce3-8fae-977ba48224a7</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=9.168.1.100</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=9.168.1.1</span><br><span class="line">DNS=8.8.8.8</span><br></pre></td></tr></table></figure>

<p>其中需要修改的部分：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200413135714.png" alt="修改"></p>
<p>修改之后，执行如下命令，重启网络服务，下面是<code>centos</code>的命令：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart network  #重启网络服务</span><br><span class="line">systemctl status network  #查看网络服务的状态</span><br></pre></td></tr></table></figure>

<h4 id="2-2-修改虚拟网络配置"><a href="#2-2-修改虚拟网络配置" class="headerlink" title="2.2 修改虚拟网络配置"></a>2.2 修改虚拟网络配置</h4><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200413140032.png" alt="修改配置">   </p>
<h4 id="2-3-执行ping命令"><a href="#2-3-执行ping命令" class="headerlink" title="2.3 执行ping命令"></a>2.3 执行ping命令</h4><p>执行<code>ping</code>命令之后，发现还是不能上网，这时发现<code>Linux</code>没有配置<code>DNS</code>解析，所以通过下面的命令查看：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/resolv.conf </span><br></pre></td></tr></table></figure>

<p>发现没有任何配置，所以我们使用<code>vim</code>命令，将下面的解析地址输入进去：   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure>

<p>再次<code>ping</code>就可以了。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何通过Xshell，SSH命令连接vmware中的centos虚拟机</title>
    <url>/vmware-network-info/</url>
    <content><![CDATA[<h3 id="1-VmWare中的三种连接方式"><a href="#1-VmWare中的三种连接方式" class="headerlink" title="1 VmWare中的三种连接方式"></a>1 VmWare中的三种连接方式</h3><p>原文：<a href="https://blog.csdn.net/shuxiao9058/article/details/7051463">https://blog.csdn.net/shuxiao9058/article/details/7051463</a></p>
<h4 id="1-1-桥接模式"><a href="#1-1-桥接模式" class="headerlink" title="1.1 桥接模式"></a>1.1 桥接模式</h4><blockquote>
<p>使用VMnet0虚拟交换机，此时虚拟机相当与网络上的一台独立计算机与主机一样，拥有一个独立的IP地址，其网络拓扑如下图所示，使用桥接方式，A，A1，A2，B可互访   </p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/0_1323266416P7im.jpg" alt="拓扑结构">   </p>
<h4 id="1-2-主机模式（Host-Only）"><a href="#1-2-主机模式（Host-Only）" class="headerlink" title="1.2 主机模式（Host-Only）"></a>1.2 主机模式（Host-Only）</h4><blockquote>
<p>使用Vmnet1虚拟交换机，此时虚拟机只能与虚拟机、主机互访。也就是不能上Internet，其网络拓扑如下图所示，使用Host方式，A，A1，A2可以互访，但A1，A2不能访问B，也不能被B访问。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/0_1323266803ebS0.jpg" alt="拓扑结构"></p>
<h4 id="1-3-NAT模式"><a href="#1-3-NAT模式" class="headerlink" title="1.3 NAT模式"></a>1.3 NAT模式</h4><blockquote>
<p>使用Vmnet8虚拟交换机，此时虚拟机可以通过主机单向网络上的其他工作站，其他工作站不能访问虚拟机。其网络拓扑如下图所示，使用NAT方式，A1，A2可以访问B，但B不可以访问A1，A2。但A，A1，A2可以互访。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/0_1323266614cXTH.jpg" alt="拓扑结构"></p>
<h3 id="2-使用桥接模式连接"><a href="#2-使用桥接模式连接" class="headerlink" title="2 使用桥接模式连接"></a>2 使用桥接模式连接</h3><p>原文：<a href="https://blog.csdn.net/vicoqi/article/details/79951236">https://blog.csdn.net/vicoqi/article/details/79951236</a></p>
<h4 id="2-1-查看物理机IP"><a href="#2-1-查看物理机IP" class="headerlink" title="2.1 查看物理机IP"></a>2.1 查看物理机IP</h4><p><code>windows</code>使用<code>ipconfig</code>命令查看IP地址，<code>Mac</code>使用<code>ifconfig</code>命令查看，如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200413150153.png" alt="ipconfig">   </p>
<h4 id="2-2-查看物理机网卡"><a href="#2-2-查看物理机网卡" class="headerlink" title="2.2 查看物理机网卡"></a>2.2 查看物理机网卡</h4><p>打开【网络和共享中心】-&gt;【更改适配器设置】-&gt;右键【当前连接外网的网卡】<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200413150410.png" alt="网卡信息"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200413150431.png" alt="网卡名"></p>
<h4 id="2-3-修改虚拟网络编辑器"><a href="#2-3-修改虚拟网络编辑器" class="headerlink" title="2.3 修改虚拟网络编辑器"></a>2.3 修改虚拟网络编辑器</h4><p>当前设置，需要关闭虚拟机。打开<code>vmware</code>，点击【编辑】-&gt;【虚拟网络编辑器】，先<code>恢复默认设置</code>:<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200413150631.png" alt="进行设置"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200413150718.png" alt="恢复默认设置"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200413150811.png" alt="选择网卡"></p>
<h4 id="2-4-修改虚拟机网络连接方法"><a href="#2-4-修改虚拟机网络连接方法" class="headerlink" title="2.4 修改虚拟机网络连接方法"></a>2.4 修改虚拟机网络连接方法</h4><p>进去当前的虚拟机的设置界面，选择<code>桥接模式</code>。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200413150925.png" alt="桥接模式">    </p>
<h4 id="2-5-修改虚拟机IP地址"><a href="#2-5-修改虚拟机IP地址" class="headerlink" title="2.5 修改虚拟机IP地址"></a>2.5 修改虚拟机IP地址</h4><p>打开虚拟机，使用命令：<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code>修改网卡信息：    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">PEERDNS=yes</span><br><span class="line">PEERROUTES=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_PEERDNS=yes</span><br><span class="line">IPV6_PEERROUTES=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=ec30e582-de8f-4ce3-8fae-977ba48224a7</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=9.168.1.100</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=9.168.1.1</span><br><span class="line">DNS=8.8.8.8</span><br></pre></td></tr></table></figure>

<p>其中需要修改的部分：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200413135714.png" alt="修改"></p>
<p>通过<code>ifconfig</code>命令查看虚拟机的IP地址：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200413151319.png" alt="ip地址">   </p>
<h4 id="2-6-xshell连接虚拟机"><a href="#2-6-xshell连接虚拟机" class="headerlink" title="2.6 xshell连接虚拟机"></a>2.6 xshell连接虚拟机</h4><p>进入<code>xshell</code>界面，新建<code>session</code>，进入到下面的界面，输入虚拟机的IP地址，<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200413151447.png" alt="输入IP地址"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200413151609.png" alt="输入用户名和密码"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vue教程</title>
    <url>/vue-tutorials/</url>
    <content><![CDATA[<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP中CGI、CLI、FPM是什么</title>
    <url>/what-is-CGI-CLI-FPM/</url>
    <content><![CDATA[<h2 id="回答一"><a href="#回答一" class="headerlink" title="回答一"></a>回答一</h2><p>刚开始对这个问题我也挺纠结的，看了《HTTP权威指南》后，感觉清晰了不少。</p>
<p>首先，CGI是干嘛的？CGI是为了保证web server传递过来的数据是标准格式的，方便CGI程序的编写者。</p>
<blockquote>
<p>web server（比如说nginx）只是内容的分发者。比如，如果请求<code>/index.html</code>，那么web server会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。好了，如果现在请求的是<code>/index.php</code>，根据配置文件，nginx知道这个不是静态文件，需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。Nginx会传哪些数据给PHP解析器呢？url要有吧，查询字符串也得有吧，POST数据也要有，HTTP header不能少吧，好的，CGI就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。仔细想想，你在PHP代码中使用的用户从哪里来的。</p>
<p>当web server收到<code>/index.php</code>这个请求后，会启动对应的CGI程序，这里就是PHP的解析器。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器。</p>
</blockquote>
<p>好了，CGI是个协议，跟进程什么的没关系。那fastcgi又是什么呢？Fastcgi是用来提高CGI程序性能的。</p>
<blockquote>
<p>提高性能，那么CGI程序的性能问题在哪呢？”PHP解析器会解析php.ini文件，初始化执行环境”，就是这里了。标准的CGI对每个请求都会执行这些步骤（不闲累啊！启动进程很累的说！），所以处理每个时间的时间会比较长。这明显不合理嘛！那么Fastcgi是怎么做的呢？首先，Fastcgi会先启一个master，解析配置文件，初始化执行环境，然后再启动多个worker。当请求过来时，master会传递给一个worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当worker不够用时，master可以根据配置预先启动几个worker等着；当然空闲worker太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是fastcgi的对进程的管理。</p>
</blockquote>
<p>那PHP-FPM又是什么呢？是一个实现了Fastcgi的程序，被PHP官方收了。</p>
<blockquote>
<p>大家都知道，PHP的解释器是php-cgi。php-cgi只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理（皇上，臣妾真的做不到啊！）所以就出现了一些能够调度php-cgi进程的程序，比如说由lighthttpd分离出来的spawn-fcgi。好了PHP-FPM也是这么个东东，在长时间的发展后，逐渐得到了大家的认可（要知道，前几年大家可是抱怨PHP-FPM稳定性太差的），也越来越流行。</p>
</blockquote>
<p>好了，最后来回来你的问题。<br>网上有的说，fastcgi是一个协议，php-fpm实现了这个协议</p>
<blockquote>
<p>对。</p>
</blockquote>
<p>有的说，php-fpm是fastcgi进程的管理器，用来管理fastcgi进程的</p>
<blockquote>
<p>对。php-fpm的管理对象是php-cgi。但不能说php-fpm是fastcgi进程的管理器，因为前面说了fastcgi是个协议，似乎没有这么个进程存在，就算存在php-fpm也管理不了他（至少目前是）。 有的说，php-fpm是php内核的一个补丁</p>
<p>以前是对的。因为最开始的时候php-fpm没有包含在PHP内核里面，要使用这个功能，需要找到与源码版本相同的php-fpm对内核打补丁，然后再编译。后来PHP内核集成了PHP-FPM之后就方便多了，使用<code>--enalbe-fpm</code>这个编译参数即可。</p>
</blockquote>
<p>有的说，修改了php.ini配置文件后，没办法平滑重启，所以就诞生了php-fpm</p>
<blockquote>
<p>是的，修改php.ini之后，php-cgi进程的确是没办法平滑重启的。php-fpm对此的处理机制是新的worker用新的配置，已经存在的worker处理完手上的活就可以歇着了，通过这种机制来平滑过度。</p>
</blockquote>
<p>还有的说PHP-CGI是PHP自带的FastCGI管理器，那这样的话干吗又弄个php-fpm出</p>
<blockquote>
<p>不对。php-cgi只是解释PHP脚本的程序而已。</p>
</blockquote>
<h2 id="回答二"><a href="#回答二" class="headerlink" title="回答二"></a>回答二</h2><h3 id="SAPI-是什么"><a href="#SAPI-是什么" class="headerlink" title="SAPI 是什么"></a>SAPI 是什么</h3><p><strong>SAPI 全称 Server Application Programming Interface 直译过来 服务端应用编程端口</strong></p>
<blockquote>
<p>SAPI是一个应用程序编程接口 （API）由Web服务器提供，以帮助其他开发人员扩展Web服务器功能。</p>
</blockquote>
<p>例如，PHP有一个名为SAPI的直接模块接口，用于不同的Web服务器; 在Windows下的PHP 5和Apache 2.0的情况下，它以DLL文件的形式提供，名为php5apache2.dll，这是一个模块，除了其他功能之外，还提供PHP和PHP之间的接口。 Web服务器，以服务器理解的形式实现。这种形式就是所谓的SAPI。<br>在PHP中实现了SAPI的还包括 <code>CGI</code> 和 <code>CLI</code></p>
<h3 id="CGI-是什么"><a href="#CGI-是什么" class="headerlink" title="CGI 是什么"></a>CGI 是什么</h3><p><strong>CGI 全称 Common Gateway Interface 直译过来 通用网关接口</strong></p>
<blockquote>
<p>CGI是一个协议规范 为WebServer提供标准协议，以执行在运行生成网页的服务器上运行的控制台应用程序（也称为命令行界面程序）之类的程序。</p>
</blockquote>
<p>这些程序称为CGI脚本或简称为CGI。服务器执行脚本的具体细节由服务器确定</p>
<p>在说的简单点就是他规范了 WebServer 传递数据的格式 必须按这个来 不能乱搞</p>
<h3 id="PHP-CLI是什么"><a href="#PHP-CLI是什么" class="headerlink" title="PHP-CLI是什么"></a>PHP-CLI是什么</h3><p><strong>CLI 全称 command-line interface 直译过来 命令行接口 维基上 是 命令行界面</strong></p>
<p>一般我们在 Linux 操作系统时是没有操作界面的（别问我为什么），那要怎么才能执行程序或者对程序进行编译</p>
<p>这个时候就需要一些实现了 CLI 的工具， PHP-CLI 就是这样一个程序 可以在命令行下直接运行PHP程序 常用来开发 PHP 的外壳应用 后台应用</p>
<h3 id="FastCGI-是什么"><a href="#FastCGI-是什么" class="headerlink" title="FastCGI 是什么"></a>FastCGI 是什么</h3><p><strong>FastCGI 全称 Fast Common Gateway Interface 直译过来 快速通用网关接口</strong></p>
<blockquote>
<p>是一种让交互程序与Web服务器通信的协议</p>
<p>FastCGI 致力于减少网页服务器与CGI程序之间交互的开销，从而使服务器可以同时处理更多的网页请求<br>CGI 使外部程序与Web服务器之间交互成为可能。CGI程序运行在独立的进程中，并对每个Web请求创建一个进程，这种方法非常容易实现，但效率很差，难以扩展。面对大量请求，进程的大量创建和消亡使操作系统性能大大下降。此外，由于地址空间无法共享，也限制了资源重用。</p>
</blockquote>
<p>说白了它和 <strong>CGI</strong> 一样都是协议 是一个增强版本而已 其主要目的是为了提高 <strong>CGI</strong> 的效率和性能</p>
<h4 id="FastCGI-的实现"><a href="#FastCGI-的实现" class="headerlink" title="FastCGI 的实现"></a>FastCGI 的实现</h4><p>FastCGI本身还是一个协议 他致力于提高 CGI 性能 那么怎么实现提高性能呢</p>
<blockquote>
<p>与为每个请求创建一个新的进程不同，FastCGI使用持续的进程来处理一连串的请求。这些进程由FastCGI服务器管理，而不是web服务器。 当进来一个请求时，web服务器把环境变量和这个页面请求通过一个socket比如FastCGI进程与web服务器（都位于本地）或者一个TCP connection（FastCGI进程在远端的server farm）传递给FastCGI进程。</p>
</blockquote>
<p>引用下 <strong>尹川</strong> 大佬的回复</p>
<blockquote>
<p>提高性能，那么CGI程序的性能问题在哪呢？”PHP解析器会解析php.ini文件，初始化执行环境”，就是这里了。标准的CGI对每个请求都会执行这些步骤（不闲累啊！启动进程很累的说！），所以处理每个时间的时间会比较长。这明显不合理嘛！那么Fastcgi是怎么做的呢？首先，Fastcgi会先启一个master，解析配置文件，初始化执行环境，然后再启动多个worker。当请求过来时，master会传递给一个worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当worker不够用时，master可以根据配置预先启动几个worker等着；当然空闲worker太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是fastcgi的对进程的管理。</p>
</blockquote>
<h4 id="FastCGI-的不足"><a href="#FastCGI-的不足" class="headerlink" title="FastCGI 的不足"></a>FastCGI 的不足</h4><p>因为是多进程，所以比CGI多线程消耗更多的服务器内存</p>
<h3 id="PHP-FPM是什么"><a href="#PHP-FPM是什么" class="headerlink" title="PHP-FPM是什么"></a>PHP-FPM是什么</h3><p><strong>FPM 全称 FastCGI Process Manager 直译过来 FastCGI进程管理器</strong></p>
<blockquote>
<p>PHP-FPM: PHP 的 FastCGI进程管理器 只能用于PHP <strong>是一个实现了 FastCGI 的程序</strong> 它管理的并不是FastCGI(协议怎么管理…) 而是执行PHP过程中的进程</p>
<p>PHP-FPM 提供了更好的PHP进程管理方式，可以有效控制内存和进程、可以平滑重载PHP配置，比spawn-fcgi具有更多优点，所以被PHP官方收录了。在./configure的时候带 –enable-fpm 参数即可开启 PHP-FPM</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://segmentfault.com/q/1010000000256516">搞不清FastCgi与PHP-fpm之间是个什么样的关系</a></li>
<li><a href="https://caihongtengxu.github.io/2018/20181012/index.html">https://caihongtengxu.github.io/2018/20181012/index.html</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 为什么这么快？除了基于内存操作还有其他原因吗？</title>
    <url>/why-redis-so-fast/</url>
    <content><![CDATA[<h2 id="一、Redis为什么这么快？"><a href="#一、Redis为什么这么快？" class="headerlink" title="一、Redis为什么这么快？"></a>一、<code>Redis</code>为什么这么快？</h2><p><code>Redis</code>是一个单线程应用，所说的单线程指的是<code>Redis</code>使用单个线程处理客户端的请求。<br>虽然<code>Redis</code>是单线程的应用，但是即便不通过部署多个<code>Redis</code>实例和集群的方式提升系统吞吐， 从官网给出的数据可以看出，<code>Redis</code>处理速度非常快。</p>
<p><code>Redis</code>性能非常高的原因主要有以下几点：</p>
<ul>
<li>内存存储：<code>Redis</code>是使用内存<code>(in-memeroy)</code>存储,没有磁盘<code>IO</code>上的开销</li>
<li>单线程实现：<code>Redis</code>使用单个线程处理请求，避免了多个线程之间线程切换和锁资源争用的开销</li>
<li>非阻塞IO：<code>Redis</code>使用多路复用<code>IO</code>技术，在<code>poll</code>，<code>epool</code>，<code>kqueue</code>选择最优<code>IO</code>实现</li>
<li>优化的数据结构：<code>Redis</code>有诸多可以直接应用的优化数据结构的实现，应用层可以直接使用原生的数据结构提升性能</li>
</ul>
<h2 id="二、什么是IO多路复用技术"><a href="#二、什么是IO多路复用技术" class="headerlink" title="二、什么是IO多路复用技术"></a>二、什么是IO多路复用技术</h2><p>首先说一下，什么是<code>IO多路复用</code>技术。</p>
<p>比如，现在我们模拟一个<code>tcp</code>服务器处理30个客户的<code>socket</code>，如何快速的处理掉这30个请求呢？</p>
<p>在不了解原理的情况下，我们类比一个实例：在课堂上让全班30个人同时做作业，做完后老师检查，30个学生的作业都检查完成才能下课。如何在有限的资源下，以最快的速度下课呢？</p>
<ul>
<li>第一种：安排一个老师，按顺序逐个检查。先检查A，然后是B，之后是C、D。。。这中间如果有一个学生卡住，全班都会被耽误。这种模式就好比，你用循环挨个处理<code>socket</code>，根本不具有并发能力。这种方式只需要一个老师，但是耗时时间会比较长。</li>
<li>第二种：安排30个老师，每个老师检查一个学生的作业。 这种类似于为每一个<code>socket</code>创建一个进程或者线程处理连接。这种方式需要30个老师（最消耗资源），但是速度最快。</li>
<li>第三种：安排一个老师，站在讲台上，谁解答完谁举手。这时C、D举手，表示他们作业做完了，老师下去依次检查C、D的答案，然后继续回到讲台上等。此时E、A又举手，然后去处理E和A。这种方式可以在最小的资源消耗的情况下，最快的处理完任务。</li>
</ul>
<p>第三种就是IO复用模型（<code>Linux</code>下的<code>select</code>、<code>poll</code>和<code>epoll</code>就是干这个的。将用户<code>socket</code>对应的<code>fd</code>注册进<code>epoll</code>，然后<code>epoll</code>帮你监听哪些<code>socket</code>上有消息到达，这样就避免了大量的无用操作。此时的<code>socket</code>应该采用非阻塞模式。这样，整个过程只在调用<code>select</code>、<code>poll</code>、<code>epoll</code>这些调用的时候才会阻塞，收发客户消息是不会阻塞的，整个进程或者线程就被充分利用起来，这就是事件驱动，所谓的<code>reactor</code>模式。）</p>
<h2 id="三、5中IO模型"><a href="#三、5中IO模型" class="headerlink" title="三、5中IO模型"></a>三、5中IO模型</h2><p>一个IO操作一般分为两个步骤：</p>
<ol>
<li>等待数据从网络到达， 数据到达后加载到内核空间缓冲区</li>
<li>数据从内核空间缓冲区复制到用户空间缓冲区</li>
</ol>
<p>按照两个步骤是否阻塞线程，分为阻塞/非阻塞， 同步/异步。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1460000022088931.png" alt="img"></p>
<p>五种IO模型分类：</p>
<table>
<thead>
<tr>
<th>阻塞</th>
<th>非阻塞</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>同步</td>
<td>阻塞IO</td>
<td>非阻塞IO，IO多路复用，信号驱动IO</td>
</tr>
<tr>
<td>异步IO</td>
<td></td>
<td>异步IO</td>
</tr>
</tbody></table>
<h3 id="3-1-阻塞IO"><a href="#3-1-阻塞IO" class="headerlink" title="3.1 阻塞IO"></a>3.1 阻塞IO</h3><p>在<code>linux</code>中，默认情况下所有的<code>socket</code>都是<code>blocking</code>，一个典型的读操作流程大概是这样：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1460000022088934.png" alt="阻塞IO"></p>
<h3 id="3-2-非阻塞IO"><a href="#3-2-非阻塞IO" class="headerlink" title="3.2 非阻塞IO"></a>3.2 非阻塞IO</h3><p><code>Linux</code>下，可以通过设置<code>socket</code>使其变为<code>non-blocking</code>。当对一个<code>non-blocking socket</code>执行读操作时，流程是这个样子：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1460000022088933.png" alt=""></p>
<h3 id="3-3-IO多路复用"><a href="#3-3-IO多路复用" class="headerlink" title="3.3 IO多路复用"></a>3.3 IO多路复用</h3><p><code>IO multiplexing</code>这个词可能有点陌生，但是如果我说<code>select</code>/<code>epoll</code>，大概就都能明白了。有些地方也称这种<code>IO</code>方式为事件驱动<code>IO(event driven IO)</code>。我们都知道，<code>select</code>/<code>epoll</code>的好处就在于单个<code>process</code>就可以同时处理多个网络连接的<code>IO</code>。它的基本原理就是<code>select</code>/<code>epoll</code>这个<code>function</code>会不断的轮询所负责的所有<code>socket</code>，当某个<code>socket</code>有数据到达了，就通知用户进程。它的流程如图：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1460000022088935.png" alt=""></p>
<h3 id="3-4-信号驱动IO"><a href="#3-4-信号驱动IO" class="headerlink" title="3.4 信号驱动IO"></a>3.4 信号驱动IO</h3><p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1460000022088936.png" alt="信号驱动IO"></p>
<h3 id="3-5-异步IO"><a href="#3-5-异步IO" class="headerlink" title="3.5 异步IO"></a>3.5 异步IO</h3><p><code>Linux</code>下的<code>asynchronous IO</code>其实用得不多，从内核2.6版本才开始引入。先看一下它的流程：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1460000022088937.png" alt=""></p>
<h2 id="四、Redis的IO处理"><a href="#四、Redis的IO处理" class="headerlink" title="四、Redis的IO处理"></a>四、Redis的IO处理</h2><p>总的来说<code>Redis</code>使用一种封装多种(<code>select</code>,<code>epoll</code>, <code>kqueue</code>等)实现的<code>Reactor</code>设计模式多路复用<code>IO</code>处理客户端的请求。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1460000022088938.png" alt="Reactor设计模式"></p>
<p><code>Reactor</code>设计模式常常用来实现事件驱动。除此之外， <code>Redis</code>还封装了不同平台多路复用<code>IO</code>的不同的库。处理过程如下：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1460000022088940.png" alt="IO库封装"></p>
<p>因为 <code>Redis</code> 需要在多个平台上运行，同时为了最大化执行的效率与性能，所以会根据编译平台的不同选择不同的 <code>I/O 多路复用</code>函数作为子模块。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/1460000022088939.png" alt=""></p>
<p><code>Redis</code> 会优先选择时间复杂度为 <code>O(1)</code> 的 <code>I/O 多路复用</code>函数作为底层实现，包括 <code>Solaries 10</code> 中的 <code>evport</code>、<code>Linux</code> 中的 <code>epoll</code> 和 <code>macOS</code>/<code>FreeBSD</code> 中的 <code>kqueue</code>，上述的这些函数都使用了内核内部的结构，并且能够服务几十万的文件描述符。</p>
<p>但是如果当前编译环境没有上述函数，就会选择 <code>select</code> 作为备选方案，由于其在使用时会扫描全部监听的描述符，所以其时间复杂度较差 <code>O(n)</code>，并且只能同时服务 <code>1024</code> 个文件描述符，所以一般并不会以 <code>select</code> 作为第一方案使用。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/160157573">https://zhuanlan.zhihu.com/p/160157573</a></li>
<li><a href="https://segmentfault.com/a/1190000022088928">https://segmentfault.com/a/1190000022088928</a></li>
<li><a href="https://github.com/littlejoyo/Blog/issues/6">https://github.com/littlejoyo/Blog/issues/6</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么单例模式需要双重检测？</title>
    <url>/why-singleton-need-first-check/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon singleTon = <span class="keyword">null</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// TODOAuto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(singleTon == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">synchronized</span>(SingleTon.class) &#123;</span><br><span class="line">             <span class="keyword">if</span>(singleTon == <span class="keyword">null</span>) &#123;</span><br><span class="line">                singleTon =<span class="keyword">new</span> SingleTon();</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       returnsingleTon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-为什么需要双重检测？"><a href="#1-为什么需要双重检测？" class="headerlink" title="1 为什么需要双重检测？"></a>1 为什么需要双重检测？</h2><p>考虑这样一种情况，就是有两个线程同时到达，即同时调用<code>getInstance()</code> 方法，</p>
<p>此时由于<code>singleTon== null</code> ，所以很明显，两个线程都可以通过第一重的 <code>singleTon== null</code> ，</p>
<p>进入第一重 <code>if</code>语句后，由于存在锁机制，所以会有一个线程进入 <code>lock</code> 语句并进入第二重 <code>singleTon== null</code> ，</p>
<p>而另外的一个线程则会在<code>lock</code> 语句的外面等待。</p>
<p>而当第一个线程执行完<code>new SingleTon()</code>语句后，便会退出锁定区域，此时，第二个线程便可以进入<code>lock</code> 语句块，</p>
<p>此时，如果没有第二重<code>singleTon== null</code> 的话，那么第二个线程还是可以调用 <code>new SingleTon()</code>语句，</p>
<p>这样第二个线程也会创建一个<code>SingleTon</code>实例，这样也还是违背了单例模式的初衷的，</p>
<p>所以这里必须要使用双重检查锁定。</p>
<h2 id="2-第一重检测去掉行不行？"><a href="#2-第一重检测去掉行不行？" class="headerlink" title="2 第一重检测去掉行不行？"></a>2 第一重检测去掉行不行？</h2><p>细心的朋友一定会发现，如果我去掉第一重<code>singleton == null</code> ，程序还是可以在多线程下完好的运行的，</p>
<p>考虑在没有第一重<code>singleton == null</code> 的情况下，</p>
<p>当有两个线程同时到达，此时，由于lock 机制的存在，第一个线程会进入 <code>lock</code> 语句块，并且可以顺利执行 <code>new SingleTon()</code>，</p>
<p>当第一个线程退出<code>lock</code> 语句块时， <code>singleTon</code> 这个静态变量已不为 <code>null</code> 了，所以当第二个线程进入 <code>lock</code> 时，</p>
<p>还是会被第二重<code>singleton == null</code> 挡在外面，而无法执行 <code>new Singleton()</code>，</p>
<p><strong>所以在没有第一重<code>singleton == null</code> 的情况下，也是可以实现单例模式的？那么为什么需要第一重 <code>singleton == null</code>呢？</strong></p>
<p>这里就涉及一个<strong>性能问题</strong>了，因为对于单例模式的话，<code>newSingleTon()</code>只需要执行一次就 <code>OK</code> 了，</p>
<p>而如果没有第一重<code>singleTon == null</code> 的话，每一次有线程进入<code>getInstance()</code>时，均会执行锁定操作来实现线程同步，</p>
<p>这是非常耗费性能的，而如果我加上第一重<code>singleTon == null</code> 的话，</p>
<p>那么就只有在第一次，也就是<code>singleTton ==null</code> 成立时的情况下执行一次锁定以实现线程同步，</p>
<p>而以后的话，便只要直接返回<code>Singleton</code> 实例就 <code>OK</code> 了而根本无需再进入 <code>lock</code>语句块了，这样就可以解决由线程同步带来的性能问题了。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>java interview</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP协议的三次握手为什么是三次而不是两次？</title>
    <url>/why-tcp-three-not-two/</url>
    <content><![CDATA[<p>简单来说，三次握手的目的是为了让双方验证各自的接收能力和发送能力。</p>
<ul>
<li><p>第一次握手，<code>A</code> 发送<code>SYN</code>到<code>B</code>，<code>B</code>接收到了后，能确认什么呢？ </p>
<blockquote>
<p>显然，<code>B</code>能确认<code>A</code>的发送能力和<code>B</code>的接收能力；</p>
</blockquote>
</li>
<li><p>第二次握手，<code>B</code>发送<code>SYNACK</code>到<code>A</code>，<code>A</code>接收到后，能确认什么呢？ </p>
<blockquote>
<p><code>A</code>能确认<code>B</code>的发送能力和<code>A</code>自己的接收能力，此外，<code>A</code>收到了<code>SYNACK</code>，那么说明前面<code>A</code>发的<code>SYN</code>成功到达<code>B</code>的手中，所以也能确认<code>A</code>自己的发送能力和<code>B</code>的接收能力；至此，<code>A</code>已经确认了双方各自的发送能力和接收能力都是<code>OK</code>的，因此转为<code>ESTABLISHED</code>状态；</p>
</blockquote>
</li>
<li><p>第三次握手，A发送ACK到B，B接收后，能确认什么呢？</p>
<blockquote>
<p>直接的，<code>B</code>能确认<code>A</code>的<code>发送</code>能力和<code>B</code>的<code>接收</code>能力，另外由于<code>B</code>能收到<code>ACK</code>说明前面发送的<code>SYNACK</code>已经成功被接受了，说明能确认<code>A</code>的<code>接收</code>能力和<code>B</code>的<code>发送</code>能力。</p>
</blockquote>
</li>
</ul>
<p>如果使用两次握手，就不能确认上述所说的四种能力，那么就会导致问题。</p>
<p><strong>假定不采用第三次报文握手，那么只要B发出确认，新的连接就建立了。</strong></p>
<p>现假定一种异常情况，即<code>A</code>发出的<code>SYN</code>报文段并没有丢失，而是在某些网络节点长时间滞留了，以致延误到连接释放后的某个时间才到达<code>B</code>。本来这是一个早已失效的报文段。但<code>B</code>收到此失效的连接请求报文段后，却误以为是<code>A</code>又发出一次新的连接请求，于是就向<code>A</code>发出确认报文段，同意建立连接。</p>
<p>由于现在<code>A</code>并没有发出建立连接的请求，因此不会理睬B的确认，也不会向<code>B</code>发送数据，但<code>B</code>却以为新的运输连接已经建立了，并一直等待A发来的数据。<code>B</code>的许多资源就这样白白浪费了。</p>
<p><a href="https://developer.aliyun.com/article/742739">参考文章</a></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>java interview</tag>
        <tag>computer network</tag>
      </tags>
  </entry>
  <entry>
    <title>WPS如何设置级联变化的标题编号，根据上一级自动变化</title>
    <url>/wps-set-cascade-number/</url>
    <content><![CDATA[<h3 id="1-引出问题"><a href="#1-引出问题" class="headerlink" title="1 引出问题"></a>1 引出问题</h3><p>有时候，我们使用WPS时需要级联更改标题的编号，也就是说，如下面那样：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200403152632.png" alt="事例">   </p>
<p>当我们需要在<code>1.1</code>节后面添加一小节时，如果手动修改编号的话，那我们需要更改很多地方，很麻烦，所以这里介绍一种级联编号的设置方法。</p>
<h3 id="2-设置方法"><a href="#2-设置方法" class="headerlink" title="2 设置方法"></a>2 设置方法</h3><p>首先选择样式旁边的按钮【新样式】，创建一个新样式，<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200403152810.png" alt="创建新样式"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200403153005.png" alt="取名字"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200403153107.png" alt="点击编号"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200403153244.png" alt="创建自定义编号"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200403153537.png" alt="设置第一级编号">   </p>
<blockquote>
<p>说明：每一级目录都需要链接相同的样式名称，这个解释可能有点似懂非懂，后面会附上所有的截图，便可一目了然。</p>
</blockquote>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200403153835.png" alt="设置第二级编号"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200403154011.png" alt="设置第三级编号"><br>以上的设置界面都是<strong>样式1</strong>的设置界面，相应的我们需要几级编号，就需要创建几个新样式，且每一级样式的编号设置参数都是一样的，不一样的是<strong>字体</strong>和<strong>段落格式</strong>不一样。</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200403154309.png" alt="给多种样式的设置相同编号参数"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>problem solved</tag>
        <tag>Word</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在github上写博客</title>
    <url>/write-blog-via-github/</url>
    <content><![CDATA[<h3 id="1-创建账号"><a href="#1-创建账号" class="headerlink" title="1 创建账号"></a>1 创建账号</h3><p>如果你还没有<a href="https://github.com">github</a>账号，那么你可以到<a href="https://github.com">github官网</a>注册账号，这里不多赘述。如果已经有账号，那么请看下面。</p>
<h3 id="2-创建仓库（repositories）"><a href="#2-创建仓库（repositories）" class="headerlink" title="2 创建仓库（repositories）"></a>2 创建仓库（repositories）</h3><p>点击github网站的右上角的加号，创建一个仓库，名字可以自定义，符合规范就行。如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200303135042.png" alt="创建仓库"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200303135204.png" alt="具体步骤"></p>
<h3 id="3-开始写博客"><a href="#3-开始写博客" class="headerlink" title="3 开始写博客"></a>3 开始写博客</h3><p>进入到你刚刚创建的仓库，点击上面的<a href="https://github.com/crazyjums/awesome-ml-summary/wiki">wiki</a>目录，开始创建博客，可以支持多种编辑格式。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200303135245.png" alt="wiki"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200303135512.png" alt="new page"><br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200303135426.png" alt="编辑格式"><br>写完之后，你的所有博客都会汇总在这里，如下：<br><img src= "/img/loading.gif" data-src="https://jums.club/images/article/20200303135546.png" alt="博客汇总"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>修改xshell的配色方案</title>
    <url>/xshell-color-program/</url>
    <content><![CDATA[<h2 id="1-自己配色"><a href="#1-自己配色" class="headerlink" title="1 自己配色"></a>1 自己配色</h2><p>参考这篇博客-&gt;<a href="https://note.youdao.com/ynoteshare1/index.html?id=202a88734065732c89c84f9e9197ab9c&type=note">自己配色方案教程</a></p>
<p><a href="https://jums.club/images/resource/zkl.xcs">自己配色方案下载</a></p>
<h2 id="2-其他人的配色方案"><a href="#2-其他人的配色方案" class="headerlink" title="2 其他人的配色方案"></a>2 其他人的配色方案</h2><p>使用方式：</p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/usage.gif" alt=""></p>
<h3 id="2-1-https-github-com-netsarang-Xshell-ColorScheme"><a href="#2-1-https-github-com-netsarang-Xshell-ColorScheme" class="headerlink" title="2.1 https://github.com/netsarang/Xshell-ColorScheme"></a>2.1 <a href="https://github.com/netsarang/Xshell-ColorScheme">https://github.com/netsarang/Xshell-ColorScheme</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── AlphaLiu</span><br><span class="line">│   ├── 3024 Day.xcs</span><br><span class="line">│   ├── 3024 Night.xcs</span><br><span class="line">│   ├── AdventureTime.xcs</span><br><span class="line">│   ├── Afterglow.xcs</span><br><span class="line">│   ├── AlienBlood.xcs</span><br><span class="line">│   ├── Argonaut.xcs</span><br><span class="line">│   ├── Arthur.xcs</span><br><span class="line">│   ├── Atom.xcs</span><br><span class="line">│   ├── Belafonte Day.xcs</span><br><span class="line">│   ├── Belafonte Night.xcs</span><br><span class="line">│   ├── BirdsOfParadise.xcs</span><br><span class="line">│   ├── Blazer.xcs</span><br><span class="line">│   ├── Broadcast.xcs</span><br><span class="line">│   ├── Brogrammer.xcs</span><br><span class="line">│   ├── C64.xcs</span><br><span class="line">│   ├── CLRS.xcs</span><br><span class="line">│   ├── Chalk.xcs</span><br><span class="line">│   ├── Chalkboard.xcs</span><br><span class="line">│   ├── Ciapre.xcs</span><br><span class="line">│   ├── Cobalt2.xcs</span><br><span class="line">│   ├── CrayonPonyFish.xcs</span><br><span class="line">│   ├── Dark Background.xcs</span><br><span class="line">│   ├── Dark Pastel.xcs</span><br><span class="line">│   ├── Darkside.xcs</span><br><span class="line">│   ├── Desert.xcs</span><br><span class="line">│   ├── DimmedMonokai.xcs</span><br><span class="line">│   ├── Dracula.xcs</span><br><span class="line">│   ├── Earthsong.xcs</span><br><span class="line">│   ├── Elemental.xcs</span><br><span class="line">│   ├── Espresso Libre.xcs</span><br><span class="line">│   ├── Espresso.xcs</span><br><span class="line">│   ├── Fideloper.xcs</span><br><span class="line">│   ├── FishTank.xcs</span><br><span class="line">│   ├── Flat.xcs</span><br><span class="line">│   ├── Flatland.xcs</span><br><span class="line">│   ├── FrontEndDelight.xcs</span><br><span class="line">│   ├── FunForrest.xcs</span><br><span class="line">│   ├── Galaxy.xcs</span><br><span class="line">│   ├── Github.xcs</span><br><span class="line">│   ├── Grape.xcs</span><br><span class="line">│   ├── Grass.xcs</span><br><span class="line">│   ├── Hardcore.xcs</span><br><span class="line">│   ├── Harper.xcs</span><br><span class="line">│   ├── Highway.xcs</span><br><span class="line">│   ├── Hipster Green.xcs</span><br><span class="line">│   ├── Homebrew.xcs</span><br><span class="line">│   ├── Hurtado.xcs</span><br><span class="line">│   ├── Hybrid.xcs</span><br><span class="line">│   ├── IC_Green_PPL.xcs</span><br><span class="line">│   ├── IC_Orange_PPL.xcs</span><br><span class="line">│   ├── IR_Black.xcs</span><br><span class="line">│   ├── Jackie Brown.xcs</span><br><span class="line">│   ├── Japanesque.xcs</span><br><span class="line">│   ├── Jellybeans.xcs</span><br><span class="line">│   ├── Kibble.xcs</span><br><span class="line">│   ├── Later This Evening.xcs</span><br><span class="line">│   ├── Lavandula.xcs</span><br><span class="line">│   ├── Light Background.xcs</span><br><span class="line">│   ├── LiquidCarbon.xcs</span><br><span class="line">│   ├── LiquidCarbonTransparent.xcs</span><br><span class="line">│   ├── LiquidCarbonTransparentInverse.xcs</span><br><span class="line">│   ├── Man Page.xcs</span><br><span class="line">│   ├── Mathias.xcs</span><br><span class="line">│   ├── Medallion.xcs</span><br><span class="line">│   ├── Misterioso.xcs</span><br><span class="line">│   ├── Molokai.xcs</span><br><span class="line">│   ├── MonaLisa.xcs</span><br><span class="line">│   ├── Monokai Soda.xcs</span><br><span class="line">│   ├── N0tch2k.xcs</span><br><span class="line">│   ├── Neopolitan.xcs</span><br><span class="line">│   ├── Neutron.xcs</span><br><span class="line">│   ├── NightLion v1.xcs</span><br><span class="line">│   ├── NightLion v2.xcs</span><br><span class="line">│   ├── Novel.xcs</span><br><span class="line">│   ├── Obsidian.xcs</span><br><span class="line">│   ├── Ocean.xcs</span><br><span class="line">│   ├── Ollie.xcs</span><br><span class="line">│   ├── Parasio Dark.xcs</span><br><span class="line">│   ├── Pastel.xcs</span><br><span class="line">│   ├── PaulMillr.xcs</span><br><span class="line">│   ├── PencilDark.xcs</span><br><span class="line">│   ├── PencilLight.xcs</span><br><span class="line">│   ├── Pnevma.xcs</span><br><span class="line">│   ├── Pro.xcs</span><br><span class="line">│   ├── Red Alert.xcs</span><br><span class="line">│   ├── Red Sands.xcs</span><br><span class="line">│   ├── Rippedcasts.xcs</span><br><span class="line">│   ├── Royal.xcs</span><br><span class="line">│   ├── SeaShells.xcs</span><br><span class="line">│   ├── Seafoam Pastel.xcs</span><br><span class="line">│   ├── Seti.xcs</span><br><span class="line">│   ├── Shaman.xcs</span><br><span class="line">│   ├── Slate.xcs</span><br><span class="line">│   ├── Smyck.xcs</span><br><span class="line">│   ├── SoftServer.xcs</span><br><span class="line">│   ├── Solarized Darcula.xcs</span><br><span class="line">│   ├── Solarized Dark Higher Contrast.xcs</span><br><span class="line">│   ├── Solarized Dark.xcs</span><br><span class="line">│   ├── Solarized Light.xcs</span><br><span class="line">│   ├── SpaceGray.xcs</span><br><span class="line">│   ├── Spacedust.xcs</span><br><span class="line">│   ├── Spring.xcs</span><br><span class="line">│   ├── Square.xcs</span><br><span class="line">│   ├── Sundried.xcs</span><br><span class="line">│   ├── Symfonic.xcs</span><br><span class="line">│   ├── Tango Dark.xcs</span><br><span class="line">│   ├── Tango Light.xcs</span><br><span class="line">│   ├── Teerb.xcs</span><br><span class="line">│   ├── Terminal Basic.xcs</span><br><span class="line">│   ├── Thayer Bright.xcs</span><br><span class="line">│   ├── Tomorrow Night Blue.xcs</span><br><span class="line">│   ├── Tomorrow Night Bright.xcs</span><br><span class="line">│   ├── Tomorrow Night Eighties.xcs</span><br><span class="line">│   ├── Tomorrow Night.xcs</span><br><span class="line">│   ├── Tomorrow.xcs</span><br><span class="line">│   ├── ToyChest.xcs</span><br><span class="line">│   ├── Treehouse.xcs</span><br><span class="line">│   ├── Twilight.xcs</span><br><span class="line">│   ├── Urple.xcs</span><br><span class="line">│   ├── Vaughn.xcs</span><br><span class="line">│   ├── VibrantInk.xcs</span><br><span class="line">│   ├── Warm Dark.xcs</span><br><span class="line">│   ├── WarmNeon.xcs</span><br><span class="line">│   ├── Wez.xcs</span><br><span class="line">│   ├── WildCherry.xcs</span><br><span class="line">│   ├── Wombat.xcs</span><br><span class="line">│   ├── Wryan.xcs</span><br><span class="line">│   ├── Zenburn.xcs</span><br><span class="line">│   ├── codeschool.xcs</span><br><span class="line">│   └── idleToes.xcs</span><br><span class="line">├── base16</span><br><span class="line">│   ├── 3024.dark.xcs</span><br><span class="line">│   ├── 3024.light.xcs</span><br><span class="line">│   ├── ashes.dark.xcs</span><br><span class="line">│   ├── ashes.light.xcs</span><br><span class="line">│   ├── atelierdune.dark.xcs</span><br><span class="line">│   ├── atelierdune.light.xcs</span><br><span class="line">│   ├── atelierforest.dark.xcs</span><br><span class="line">│   ├── atelierforest.light.xcs</span><br><span class="line">│   ├── atelierheath.dark.xcs</span><br><span class="line">│   ├── atelierheath.light.xcs</span><br><span class="line">│   ├── atelierlakeside.dark.xcs</span><br><span class="line">│   ├── atelierlakeside.light.xcs</span><br><span class="line">│   ├── atelierseaside.dark.xcs</span><br><span class="line">│   ├── atelierseaside.light.xcs</span><br><span class="line">│   ├── bespin.dark.xcs</span><br><span class="line">│   ├── bespin.light.xcs</span><br><span class="line">│   ├── brewer.dark.xcs</span><br><span class="line">│   ├── brewer.light.xcs</span><br><span class="line">│   ├── chalk.dark.xcs</span><br><span class="line">│   ├── chalk.light.xcs</span><br><span class="line">│   ├── codeschool.dark.xcs</span><br><span class="line">│   ├── codeschool.light.xcs</span><br><span class="line">│   ├── default.dark.xcs</span><br><span class="line">│   ├── default.light.xcs</span><br><span class="line">│   ├── eighties.dark.xcs</span><br><span class="line">│   ├── eighties.light.xcs</span><br><span class="line">│   ├── embers.dark.xcs</span><br><span class="line">│   ├── embers.light.xcs</span><br><span class="line">│   ├── google.dark.xcs</span><br><span class="line">│   ├── google.light.xcs</span><br><span class="line">│   ├── grayscale.dark.xcs</span><br><span class="line">│   ├── grayscale.light.xcs</span><br><span class="line">│   ├── greenscreen.dark.xcs</span><br><span class="line">│   ├── greenscreen.light.xcs</span><br><span class="line">│   ├── isotope.dark.xcs</span><br><span class="line">│   ├── isotope.light.xcs</span><br><span class="line">│   ├── londontube.dark.xcs</span><br><span class="line">│   ├── londontube.light.xcs</span><br><span class="line">│   ├── marrakesh.dark.xcs</span><br><span class="line">│   ├── marrakesh.light.xcs</span><br><span class="line">│   ├── mocha.dark.xcs</span><br><span class="line">│   ├── mocha.light.xcs</span><br><span class="line">│   ├── monokai.dark.xcs</span><br><span class="line">│   ├── monokai.light.xcs</span><br><span class="line">│   ├── ocean.dark.xcs</span><br><span class="line">│   ├── ocean.light.xcs</span><br><span class="line">│   ├── paraiso.dark.xcs</span><br><span class="line">│   ├── paraiso.light.xcs</span><br><span class="line">│   ├── railscasts.dark.xcs</span><br><span class="line">│   ├── railscasts.light.xcs</span><br><span class="line">│   ├── shapeshifter.dark.xcs</span><br><span class="line">│   ├── shapeshifter.light.xcs</span><br><span class="line">│   ├── solarized.dark.xcs</span><br><span class="line">│   ├── solarized.light.xcs</span><br><span class="line">│   ├── tomorrow.dark.xcs</span><br><span class="line">│   ├── tomorrow.light.xcs</span><br><span class="line">│   ├── twilight.dark.xcs</span><br><span class="line">│   └── twilight.light.xcs</span><br><span class="line">├── collection</span><br><span class="line">│   ├── dawn.xcs</span><br><span class="line">│   ├── gotham.xcs</span><br><span class="line">│   ├── hund.xcs</span><br><span class="line">│   ├── hybrid.xcs</span><br><span class="line">│   ├── invisibone.xcs</span><br><span class="line">│   ├── jmbi.xcs</span><br><span class="line">│   ├── kasugano.xcs</span><br><span class="line">│   ├── monokai.xcs</span><br><span class="line">│   ├── mostly-bright.xcs</span><br><span class="line">│   ├── navy-and-ivory.xcs</span><br><span class="line">│   ├── pretty-and-pastel.xcs</span><br><span class="line">│   ├── s3r0-modified.xcs</span><br><span class="line">│   ├── sweetlove.xcs</span><br><span class="line">│   ├── trim-yer-beard.xcs</span><br><span class="line">│   ├── vacuous2.xcs</span><br><span class="line">│   ├── visibone-alt-2.xcs</span><br><span class="line">│   ├── x-dotshare.xcs</span><br><span class="line">│   ├── x-erosion.xcs</span><br><span class="line">│   └── yousai.xcs</span><br><span class="line">├── community</span><br><span class="line">│   └── dracula.xcs</span><br><span class="line">├── netsarang</span><br><span class="line">│   ├── BlackPoppingCandy.xcs</span><br><span class="line">│   ├── ChocoBrownie.xcs</span><br><span class="line">│   ├── EmeraldCave.xcs</span><br><span class="line">│   ├── FabricIvory.xcs</span><br><span class="line">│   ├── MellowBlack.xcs</span><br><span class="line">│   ├── MellowBlackburn.xcs</span><br><span class="line">│   ├── MellowWhite.xcs</span><br><span class="line">│   ├── MellowWhiteburn.xcs</span><br><span class="line">│   └── WhitePoppingCandy.xcs</span><br><span class="line">└── xcolor.net</span><br><span class="line">    ├── Baskerville - Count Von Count.xcs</span><br><span class="line">    ├── Baskerville - Eldorado dark.xcs</span><br><span class="line">    ├── DOOMICIDE darkocean.xcs</span><br><span class="line">    ├── Gslob nature-suede.xcs</span><br><span class="line">    ├── Gutterslob - aikofog.xcs</span><br><span class="line">    ├── Gutterslob lightwhite.xcs</span><br><span class="line">    ├── Muse.xcs</span><br><span class="line">    ├── Muzieca lowcontrast.xcs</span><br><span class="line">    ├── Muzieca mono.xcs</span><br><span class="line">    ├── Muzieca pastel white.xcs</span><br><span class="line">    ├── NumixDarkest.xcs</span><br><span class="line">    ├── OK100 - Matrix.xcs</span><br><span class="line">    ├── Rooster - SOS.xcs</span><br><span class="line">    ├── Tartan.xcs</span><br><span class="line">    ├── Visiblue.xcs</span><br><span class="line">    ├── astromouse.xcs</span><br><span class="line">    ├── baskerville - FarSide.xcs</span><br><span class="line">    ├── baskerville - ivory dark.xcs</span><br><span class="line">    ├── baskerville - lost woods.xcs</span><br><span class="line">    ├── baskerville-ivorylight.xcs</span><br><span class="line">    ├── belge.xcs</span><br><span class="line">    ├── bitmute.xcs</span><br><span class="line">    ├── bleh-1.xcs</span><br><span class="line">    ├── cloud.xcs</span><br><span class="line">    ├── colorfulcolors.xcs</span><br><span class="line">    ├── deafened.xcs</span><br><span class="line">    ├── derp.xcs</span><br><span class="line">    ├── digerati.xcs</span><br><span class="line">    ├── dkeg - canvasedpastel.xcs</span><br><span class="line">    ├── dkeg - catchmeifyoucan.xcs</span><br><span class="line">    ├── dkeg - citystreets.xcs</span><br><span class="line">    ├── dkeg - colorstar.xcs</span><br><span class="line">    ├── dkeg - panels.xcs</span><br><span class="line">    ├── dkeg - redphoenix.xcs</span><br><span class="line">    ├── dkeg - teva.xcs</span><br><span class="line">    ├── dkeg - unsiftedwheat.xcs</span><br><span class="line">    ├── dkeg - vwbug.xcs</span><br><span class="line">    ├── dotshare.xcs</span><br><span class="line">    ├── dwmrob.xcs</span><br><span class="line">    ├── epiphany.xcs</span><br><span class="line">    ├── eqie6.xcs</span><br><span class="line">    ├── erebus.xcs</span><br><span class="line">    ├── euphrasia.xcs</span><br><span class="line">    ├── fishbone.xcs</span><br><span class="line">    ├── gjm.xcs</span><br><span class="line">    ├── gnometerm.xcs</span><br><span class="line">    ├── grandshell.xcs</span><br><span class="line">    ├── gutterslob - lumifoo.xcs</span><br><span class="line">    ├── hybrid.xcs</span><br><span class="line">    ├── iiamblack.xcs</span><br><span class="line">    ├── insignificato.xcs</span><br><span class="line">    ├── jasonwryan.xcs</span><br><span class="line">    ├── jwr-dark.xcs</span><br><span class="line">    ├── material.xcs</span><br><span class="line">    ├── mikado.xcs</span><br><span class="line">    ├── mikazuki.xcs</span><br><span class="line">    ├── monotheme.xcs</span><br><span class="line">    ├── nancy.xcs</span><br><span class="line">    ├── neon.xcs</span><br><span class="line">    ├── nucolors.xcs</span><br><span class="line">    ├── nudge.xcs</span><br><span class="line">    ├── orangish.xcs</span><br><span class="line">    ├── parker_brothers.xcs</span><br><span class="line">    ├── phrak1.xcs</span><br><span class="line">    ├── pulp.xcs</span><br><span class="line">    ├── rasi.xcs</span><br><span class="line">    ├── rezza.xcs</span><br><span class="line">    ├── rydgel.xcs</span><br><span class="line">    ├── sexcolors.xcs</span><br><span class="line">    ├── shic.xcs</span><br><span class="line">    ├── simple_rainbow.xcs</span><br><span class="line">    ├── splurge.xcs</span><br><span class="line">    ├── swayr.xcs</span><br><span class="line">    ├── tango.xcs</span><br><span class="line">    ├── tangoesque.xcs</span><br><span class="line">    ├── theme2.xcs</span><br><span class="line">    ├── thwump.xcs</span><br><span class="line">    ├── tlh.xcs</span><br><span class="line">    ├── user 77 - Mashup colors.xcs</span><br><span class="line">    ├── visibone.xcs</span><br><span class="line">    └── zenburn.xcs</span><br></pre></td></tr></table></figure>

<h3 id="2-2-https-github-com-hellojukay-xshell-themes"><a href="#2-2-https-github-com-hellojukay-xshell-themes" class="headerlink" title="2.2 https://github.com/hellojukay/xshell-themes"></a>2.2 <a href="https://github.com/hellojukay/xshell-themes">https://github.com/hellojukay/xshell-themes</a></h3><ul>
<li><p><a href="https://github.com/hellojukay/xshell-themes/blob/master/comfort-color.xcs">comfort-color.xcs</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/comfort-color.png" alt=""></p>
</li>
<li><p><a href="https://github.com/hellojukay/xshell-themes/blob/master/emoi.xcs">emoi.xcs</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/emoi.png" alt=""></p>
</li>
<li><p><a href="https://github.com/hellojukay/xshell-themes/blob/master/isayme.xcs">isayme</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/isayme.png" alt=""></p>
</li>
<li><p><a href="https://github.com/hellojukay/xshell-themes/blob/master/monokai.xcs">monokai</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/monokai.png" alt=""></p>
</li>
<li><p><a href="https://github.com/hellojukay/xshell-themes/blob/master/mycolor.xcs">mycolor</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/mycolor.png" alt=""></p>
</li>
<li><p><a href="https://github.com/hellojukay/xshell-themes/blob/master/Solarized-Dark.xcs">Solarized-Dark</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/Solarized-Dark.png" alt=""></p>
</li>
<li><p><a href="https://github.com/hellojukay/xshell-themes/blob/master/SolarizedDarkModify.xcs">SolarizedDarkModify</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/SolarizedDarkModify.png" alt=""></p>
</li>
<li><p><a href="https://github.com/hellojukay/xshell-themes/blob/master/ubuntu.xcs">ubuntu</a></p>
<p><img src= "/img/loading.gif" data-src="https://jums.club/images/article2/ubuntu.png" alt=""></p>
</li>
</ul>
<h2 id="3-配色方案全局生效"><a href="#3-配色方案全局生效" class="headerlink" title="3 配色方案全局生效"></a>3 配色方案全局生效</h2><p>默认情况下，<code>xshell</code>使用<code>XTerm</code>作为左右<code>session</code>的默认配色方案，只需要将自己的配色方案改名为<code>XTerm</code>即可。</p>
<ol>
<li>将默认的配色方案<code>XTerm</code>更改为其他的名字，将自己新建的<code>XTerm1</code>重命名为<code>XTerm</code>以替换默认的配色方案</li>
<li>重启<code>xshell</code>即可实现全局替换配色</li>
</ol>
<h2 id="4-xshell6下载"><a href="#4-xshell6下载" class="headerlink" title="4 xshell6下载"></a>4 xshell6下载</h2><p>链接：<a href="https://pan.baidu.com/s/11PLOpSCKdd4w_NxJ_DQ7yA">https://pan.baidu.com/s/11PLOpSCKdd4w_NxJ_DQ7yA</a><br>提取码：pwx1</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://note.youdao.com/ynoteshare1/index.html?id=202a88734065732c89c84f9e9197ab9c&type=note">自己配色方案教程</a></li>
<li><a href="https://blog.csdn.net/gatieme/article/details/50541714">几款xshell绝佳配色方案</a></li>
<li><a href="https://blog.csdn.net/seven070707/article/details/50563194">Xshell的自用配色方案，好看到爆，也很舒适。强烈推荐程序员使用！！</a></li>
<li><a href="https://blog.csdn.net/Sun_P0/article/details/49927549">XShell配色方案(总结)</a></li>
</ul>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>欢迎大家关注鄙人的公众号【麦田里的守望者zhg】，让我们一起成长，谢谢。<br><img src= "/img/loading.gif" data-src="https://jums.club/images/wechataccount.jpg" alt="微信公众号"></p>
]]></content>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
</search>
